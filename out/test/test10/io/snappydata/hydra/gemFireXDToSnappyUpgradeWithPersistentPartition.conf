hydra.Prms-testRequirement = "Test to verify upgrading cluster from gemXD to Snappy works smooth";
hydra.Prms-testDescription = "Locator/Server topology.
Start the gemXD cluster with version specified and perform different ops, verify result set and then write the row count for each table in blackboard.
Shutdown the gemXD cluster and upgrade the cluster to snappy with the required version.
Verify that the row count for each table after cluster upgrade matches with the blackboard values.
Perform different ops on the ungraded cluster and verify result sets.
   ";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_3_locator.inc;

hydra.VmPrms-extraClassPaths        += $JTESTS;

hydra.gemfirexd.GfxdHelperPrms-persistTables = true;
hydra.gemfirexd.GfxdHelperPrms-persistDD = true;
hydra.gemfirexd.GfxdHelperPrms-createDiskStore = true;

THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;

THREADGROUP dataStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) -1  " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP snappyStoreThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1 " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

THREADGROUP snappyLocatorThreads
            totalThreads = fcn "(${${C}Hosts} * ${${C}VMsPerHost} *  ${${C}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${C}Hosts} * ${${C}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${C}\",
                                ${${C}Hosts}, true)" ncf;

THREADGROUP snappyThreads
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms2g -Xmx2g \", ${${A}Hosts}, true)"
                             ncf
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms2g -Xmx2g \", ${${B}Hosts}, true)"
                             ncf
                             ;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initializeFabricServer
	runMode = always
	threadGroups =  dataStoreThreads, ddlThread;

INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
    threadGroups = locator;

INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
    runMode = always
    threadGroups = locator;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscDB
	threadGroups = dataStoreThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscSchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscTables
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer
	runMode = always
    threadGroups = dataStoreThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFESchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiskStores
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFETables
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFuncForProcedures
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFuncForSubquery
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFunctionToPopulate
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_populateTables
	threadGroups = dataStoreThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_setTableCols
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	threadGroups = ddlThread;

TASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_doDMLOp
	threadGroups = dataStoreThreads, ddlThread;

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	threadGroups = ddlThread;

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_writeCountQueryResultsToSQLBB
	threadGroups = ddlThread;

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_stopFabricServer
	threadGroups = ddlThread, dataStoreThreads;

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_stopGfxdLocatorTask
	threadGroups = locator;


CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_initializeSnappyTest
    runMode = always
    threadGroups = snappyThreads, snappyLocatorThreads, snappyStoreThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyLocatorConfig
    runMode = always
    threadGroups = snappyLocatorThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLocatorConfigData
    runMode = always
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyServerConfig
    runMode = always
    threadGroups = snappyStoreThreads, snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeServerConfigData
    runMode = always
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_copyDiskFiles_gemToSnappyCluster
    threadGroups = snappyThreads, snappyLocatorThreads, snappyStoreThreads;


CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyLocator
    runMode = always
    threadGroups = snappyLocatorThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_createAndStartSnappyServers
    runMode = always
    threadGroups = snappyStoreThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeCountQueryResultsToSnappyBB
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_verifyCountQueryResults
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_doDMLOp
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_doDMLOp
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_doDMLOp
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_doDMLOp
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeUpdatedCountQueryResultsToSnappyBB
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_verifyInsertOpOnSnappyCluster
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_verifyUpdateOpOnSnappyCluster
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_verifyDeleteOpOnSnappyCluster
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappy
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyServers
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyLocator
    threadGroups = snappyThreads;

CLOSETASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_deleteSnappyConfig
    threadGroups = snappyThreads;

ENDTASK     taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_cleanUpSnappyProcessesOnFailure
    clientNames = snappylocator1;

/* end task must stop snappy members because they are not stopped by Hydra */
hydra.Prms-alwaysDoEndTasks = true;

hydra.GemFirePrms-names     = fcn "hydra.TestConfigFcns.generateNames
                                   (\"locatorgemfire\", ${locatorHosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.generateNames
                                   (\"${A}gemfire\", ${${A}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.generateNames
                                   (\"${B}gemfire\", ${${B}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.generateNames
                                   (\"${C}gemfire\", ${${C}Hosts})"
                              ncf
                              ;
hydra.GemFirePrms-hostNames = fcn "hydra.TestConfigFcns.generateNames
                                   (\"locatorhost\", ${locatorHosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.generateNames
                                   (\"${A}host\", ${${A}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.generateNames
                                   (\"${B}host\", ${${B}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.generateNames
                                   (\"${C}host\", ${${C}Hosts})"
                              ncf
                              ;
hydra.GemFirePrms-distributedSystem = ds;

hydra.ClientPrms-gemfireNames = fcn "hydra.TestConfigFcns.generateNames
                                     (\"locatorgemfire\", ${locatorHosts})"
                                ncf
                                fcn "hydra.TestConfigFcns.generateNames
                                     (\"${A}gemfire\", ${${A}Hosts})"
                                ncf
                                fcn "hydra.TestConfigFcns.generateNames
                                     (\"${B}gemfire\", ${${B}Hosts})"
                                ncf
                                fcn "hydra.TestConfigFcns.generateNames
                                     (\"${C}gemfire\", ${${C}Hosts})"

                                ncf
                                ;

hydra.ClientPrms-versionNames =
    fcn "hydra.TestConfigFcns.duplicate(\"version1\", ${locatorHosts})" ncf
    fcn "hydra.TestConfigFcns.duplicate(\"version1\", ${${A}Hosts})" ncf
    fcn "hydra.TestConfigFcns.duplicate(\"version2\", ${${B}Hosts})" ncf
    fcn "hydra.TestConfigFcns.duplicate(\"version2\", ${${C}Hosts})" ncf
    ;

hydra.VersionPrms-names    = version1 version2;
hydra.VersionPrms-version = ${version1} ${version2} ;
hydra.VersionPrms-gemfireHome = /export/gcm/where/gemfireXD/releases/GemFireXD1.4.1-all/Linux/product-gfxd default;

hydra.Prms-totalTaskTimeSec           = 300;
hydra.Prms-maxResultWaitSec           = 600;
hydra.Prms-maxCloseTaskResultWaitSec  = 600;
hydra.Prms-serialExecution            = false;

hydra.Prms-manageDerbyServer = false;
sql.SQLPrms-useGfxdConfig = true;

hydra.CachePrms-names = defaultCache;

sql.SQLPrms-hasNetworth = true;		//will create networth table
//sql.SQLPrms-dmlOperations = ONEOF insert insert insert insert update update delete update query delete delete update delete FOENO;
sql.SQLPrms-dmlOperations = ONEOF insert insert insert insert update insert update query update FOENO;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory" ;
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;
sql.SQLPrms-useDefaultValue = true;

//without cascade delete
sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
	"create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid)) "
	"create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid), constraint sec_fk foreign key (sid) references trade.securities (sec_id), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))"
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10) default 'open', tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders (oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id), constraint bo_qty_ck check (qty>=0))"
	"create table trade.txhistory (cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";


sql.SQLPrms-testPartitionBy = true;
sql.SQLPrms-isSnappyTest = true;
//sql.SQLPrms-withReplicatedTables = true;

sql.SQLPrms-gfeDDLExtension =
	"trade.securities:random"
    "trade.customers:random"
    "trade.networth:random"
	"trade.portfolio:random"
	"trade.sellorders:random"
    "trade.buyorders:random"
    "trade.txhistory:random"
	"emp.employees:random"
	"trade.trades:random" ;

sql.SQLPrms-createDiskStore = "create diskstore persistSecu 'persistSecu'"
      "create diskstore persistCust   'persistCust' "
      "create diskstore persistNetworth  'persistNetworth' "
      "create diskstore persistPortf  'persistPortf' "
      "create diskstore persistSellorders  'persistSellorders' "
      "create diskstore persistBuyorders  'persistBuyorders' "
      "create diskstore persistTxHistory  'persistTxHistory' ";

sql.SQLPrms-gfePersistExtension =
	" PERSISTENT SYNCHRONOUS 'persistSecu' "
    " PERSISTENT SYNCHRONOUS 'persistCust' "
	" PERSISTENT SYNCHRONOUS 'persistNetworth' "
	" PERSISTENT SYNCHRONOUS 'persistPortf'"
	" PERSISTENT SYNCHRONOUS 'persistSellorders' "
	" PERSISTENT SYNCHRONOUS 'persistBuyorders'"
	" PERSISTENT SYNCHRONOUS 'persistTxHistory'"
	" "
	" " ;

sql.SQLPrms-redundancyClause =
  " REDUNDANCY ${redundantCopies}"
  " REDUNDANCY ${redundantCopies}"
  " REDUNDANCY ${redundantCopies}"
  " REDUNDANCY ${redundantCopies}"
  " REDUNDANCY ${redundantCopies}"
  " REDUNDANCY ${redundantCopies}"
  " REDUNDANCY ${redundantCopies}"
  " REDUNDANCY ${redundantCopies}"
  " REDUNDANCY ${redundantCopies}"
  ;

io.snappydata.hydra.cluster.SnappyPrms-tableDefaultPartitioned = true;
io.snappydata.hydra.cluster.SnappyPrms-useRowStore = true;
