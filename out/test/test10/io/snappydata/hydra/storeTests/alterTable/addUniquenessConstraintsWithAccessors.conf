hydra.Prms-testDescription = " this tests changing column unique constraints in snappydata with verification";

INCLUDE $JTESTS/io/snappydata/hydra/storeTests/sql/accessorOp.inc;

hydra.Prms-manageDerbyServer = true;
hydra.Prms-extraDerbyServerVMArgs += "-Xmx256m -Dderby.storage.pageCacheSize=16000";
hydra.Prms-totalTaskTimeSec           = 600;
hydra.Prms-maxResultWaitSec           = 300;
hydra.Prms-maxCloseTaskResultWaitSec  = 120;
hydra.Prms-serialExecution            = false;

hydra.CachePrms-names = defaultCache;

sql.alterTable.AlterTablePrms-sqlCmdsForPopulatedDB =
  "alter table emp.employees add constraint ssn_uq unique (ssn)"
  "insert into emp.employees(eid,emp_name,since,addr,ssn) values (98765,'Joe Schmoe', NULL, '123 Main St.','123456789') "
  "alter table emp.employees add constraint name_addr_uq unique (emp_name, addr)"
  "insert into emp.employees(eid,emp_name,since,addr,ssn) values (98766,'Joe Schmoe', NULL, '456 Main St.','123456788') "
  ;
// Following command should fail since SSN is not unique
sql.alterTable.AlterTablePrms-sqlNegativeCmdsForPopulatedDB =
  "insert into emp.employees(eid,emp_name,since,addr,ssn) values (98767,'Joe Smith', NULL, '123 Main St.','123456789') "
  "insert into emp.employees(eid,emp_name,since,addr,ssn) values (98768,'Joe Schmoe', NULL, '456 Main St.','123456787') "
  ;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
  threadGroups = ddlThread;

TASK     taskClass   = sql.alterTable.AlterTableTest taskMethod = HydraTask_runSQLCommandsOnPopulatedDB
  maxTimesToRun=1
  startInterval=5
  threadGroups = ddlThread;


sql.SQLPrms-hasNetworth = true;   //will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory";
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;
sql.SQLPrms-useDefaultValue = true;

//securities has primary key and unique constraints
//without cascade delete
sql.SQLPrms-createTablesStatements =
  "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
  "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
  "create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
  "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))"
  "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10) default 'open', tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
  "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id), constraint bo_qty_ck check (qty>=0))"
  "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
  "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
  "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";

sql.SQLPrms-gfeDDLExtension =
  " USING ROW OPTIONS (partition_by 'tid') " //" replicate"
  " " // " partition by range (since) (VALUES BETWEEN CAST('1998-01-01'  AS DATE) AND CAST('2000-08-11' AS DATE),  VALUES BETWEEN CAST('2003-09-01' AS DATE) AND  CAST('2007-12-31' AS DATE) ) "
  " "
  " USING ROW OPTIONS (partition_by 'cid,sid') "
  " USING ROW OPTIONS (partition_by 'cid,sid') "
  " " //"  partition by range (cid) ( VALUES BETWEEN 0 AND 999, VALUES BETWEEN 1000 AND 1102, VALUES BETWEEN 1103 AND 1250, VALUES BETWEEN 1251 AND 1677, VALUES BETWEEN 1678 AND 10000) "
  " "
  " "
  " " ;

