hydra.Prms-testDescription = "
This test starts the snappy cluster.
Creates tables(customer, lineitem, nation, orders, partsupp, part, region, supplier) using TPCH data residing at user specified location.
And then executes the TPCH queries and validate full resultSet for each query with and without distributed
indexing(with EnableExperimentalFeatures property false, true and true with DI created on column tables)
It also executes TPCH queries to verify the performance of TPCH queries with and without distributed
indexing(with EnableExperimentalFeatures property false, true and true with DI created on column tables)";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.gemfirexd.GfxdHelperPrms-persistDD = true;
hydra.gemfirexd.GfxdHelperPrms-createDiskStore = true;
hydra.GemFirePrms-names = gemfire1;
hydra.ClientPrms-gemfireNames = gemfire1;
hydra.GemFirePrms-distributedSystem = ds;


THREADGROUP snappyStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP leadThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1 " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

THREADGROUP locatorThreads
            totalThreads = fcn "(${${C}Hosts} * ${${C}VMsPerHost} *  ${${C}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${C}Hosts} * ${${C}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${C}\",
                                ${${C}Hosts}, true)" ncf;

THREADGROUP snappyThreads
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_initializeSnappyTest
           runMode = always
           threadGroups = snappyThreads, locatorThreads, snappyStoreThreads, leadThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyLocatorConfig
           runMode = always
           threadGroups = locatorThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLocatorConfigData
           runMode = always
           threadGroups = snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyServerConfig
           runMode = always
           threadGroups = snappyStoreThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeServerConfigData
           runMode = always
           threadGroups = snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_generateSnappyLeadConfig
           runMode = always
           threadGroups = leadThreads, snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_writeLeadConfigData
           runMode = always
           threadGroups = snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_startSnappyCluster
           runMode = always
           threadGroups = snappyThreads;

INITTASK   taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
           threadGroups = snappyThreads, locatorThreads, snappyStoreThreads, leadThreads;

INITTASK   taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
           io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.benchmark.snappy.TPCH_Snappy_Tables
           io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer =
           "dataLocation=${dataLocation},Buckets_Order_Lineitem=${buckets_Order_Lineitem},Buckets_Cust_Part_PartSupp=${buckets_Cust_Part_PartSupp},useIndex=${useIndex}"
           io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-cluster*tests.jar
           threadGroups = snappyThreads
           ;

INITTASK   taskClass   = io.snappydata.hydra.installJar.DynamicJarLoadingTest taskMethod  = HydraTask_executeInstallJarCommand
           io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-cluster*tests.jar
           io.snappydata.hydra.cluster.SnappyPrms-jarIdentifier = APP.clusterTestsJar
           threadGroups = snappyThreads;

INITTASK   taskClass   = io.snappydata.hydra.installJar.DynamicJarLoadingTest taskMethod  = HydraTask_executeInstallJarCommand
           io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappy-spark-sql_2.11-*-tests.jar
           io.snappydata.hydra.cluster.SnappyPrms-jarIdentifier = APP.sparkTestsJar
           threadGroups = snappyThreads;

TASK       taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSnappyJob
           io.snappydata.hydra.cluster.SnappyPrms-jobClassNames = io.snappydata.hydra.distIndex.DistIndexJob
           io.snappydata.hydra.cluster.SnappyPrms-appPropsForJobServer =
           "resultValidation=${resultValidation}"
           io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar
           threadGroups = snappyThreads
           io.snappydata.hydra.cluster.SnappyPrms-sleepTimeSecsForJobStatus = 600
           maxTimesToRun = 1
           ;

CLOSETASK  taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappy
           threadGroups = snappyThreads;

CLOSETASK  taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_stopSnappyCluster
           threadGroups = snappyThreads;

CLOSETASK  taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_deleteSnappyConfig
           threadGroups = snappyThreads;

ENDTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_cleanUpSnappyProcessesOnFailure
           clientNames = locator1;

hydra.Prms-totalTaskTimeSec           = 900;
hydra.Prms-maxResultWaitSec           = 7200;

hydra.Prms-maxCloseTaskResultWaitSec  = 7200;
hydra.Prms-serialExecution            = false;

hydra.CachePrms-names = defaultCache;
sql.SQLPrms-useGfxdConfig = true;

/* end task must stop snappy members because they are not stopped by Hydra */
hydra.Prms-alwaysDoEndTasks = true;

hydra.VmPrms-extraVMArgs   += fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx1g \", ${${B}Hosts}, true)"
                             ncf;
hydra.VmPrms-extraVMArgsSUN += "-XX:PermSize=64M -XX:MaxPermSize=256m";

