gfxd> --
--   Licensed to the Apache Software Foundation (ASF) under one or more
--   contributor license agreements.  See the NOTICE file distributed with
--   this work for additional information regarding copyright ownership.
--   The ASF licenses this file to You under the Apache License, Version 2.0
--   (the "License"); you may not use this file except in compliance with
--   the License.  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--   Unless required by applicable law or agreed to in writing, software
--   distributed under the License is distributed on an "AS IS" BASIS,
--   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--   See the License for the specific language governing permissions and
--   limitations under the License.
--
-- create a table
create table t1(c11 int, c12 int);
0 rows inserted/updated/deleted
gfxd> -- insert data into tables
insert into t1 values(1,1);
1 row inserted/updated/deleted
gfxd> insert into t1 values(2,2);
1 row inserted/updated/deleted
gfxd> -- set autocommit off
autocommit off;
gfxd> -- first test - make sure that only cursors created with holdability true
-- have open resultsets after commit
-- declare 3 different kind of cursors one for each jdbc release so far
get with nohold cursor jdk1 as 'SELECT * FROM t1';
gfxd> get scroll insensitive with nohold cursor jdk2 as 'SELECT * FROM t1';
gfxd> get with hold cursor jdk4 as 'SELECT * FROM t1';
gfxd> -- do fetches from these cursors
next jdk1;
C11        |C12        
-----------------------
1          |1          
gfxd> next jdk2;
C11        |C12        
-----------------------
1          |1          
gfxd> next jdk4;
C11        |C12        
-----------------------
1          |1          
gfxd> --commit
commit;
gfxd> -- now try the fetch on cursors again after commit
-- cursors jdk1 and jdk2 will give errors
next jdk1;
ERROR XCL16: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF.
gfxd> next jdk2;
ERROR XCL16: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF.
gfxd> next jdk4;
C11        |C12        
-----------------------
2          |2          
gfxd> -- end of resultset for jdk4, but try next again
next jdk4;
No current row
gfxd> close jdk4;
gfxd> next jdk4;
IJ ERROR: Unable to establish cursor
gfxd> -- clean up.
close jdk1;
gfxd> close jdk2;
gfxd> -- second test - make sure that all the cursors (including holdability true)
-- have their resultsets closed after rollback.
-- declare the cursors again, this time, try with rollback
get with nohold cursor jdk1 as 'SELECT * FROM t1';
gfxd> get scroll insensitive with nohold cursor jdk2 as 'SELECT * FROM t1';
gfxd> get with hold cursor jdk4 as 'SELECT * FROM t1';
gfxd> -- do fetches from these cursors
next jdk1;
C11        |C12        
-----------------------
1          |1          
gfxd> next jdk2;
C11        |C12        
-----------------------
1          |1          
gfxd> next jdk4;
C11        |C12        
-----------------------
1          |1          
gfxd> --rollback
rollback;
gfxd> -- now try the fetch on cursors again after rollback
-- all the cursors will give errors
next jdk1;
ERROR XCL16: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF.
gfxd> next jdk2;
ERROR XCL16: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF.
gfxd> next jdk4;
ERROR XCL16: ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF.
gfxd> -- clean up.
close jdk1;
gfxd> close jdk2;
gfxd> close jdk4;
gfxd> -- third test - Define a hold cursor on a table. Shouldn't be able to drop that
-- table before & after commit. Have to close the cursor before table can be dropped.
get with nohold cursor jdk1 as 'SELECT * FROM t1';
gfxd> get with hold cursor jdk4 as 'SELECT * FROM t1';
gfxd> next jdk1;
C11        |C12        
-----------------------
1          |1          
gfxd> next jdk4;
C11        |C12        
-----------------------
1          |1          
gfxd> -- wont' be able to drop table because of cursors jdk1 and jdk4
-- in DerbyNetClient, cursor is closed on server and DROP TABLE succeeds
drop table t1;
ERROR X0X95: Operation 'DROP TABLE' cannot be performed on object 'T1' because there is an open ResultSet dependent on that object.
gfxd> commit;
gfxd> -- drop table still won't work because jdk4 is still open after commit
-- in DerbyNetClient, the table is already dropped
drop table t1;
ERROR X0X95: Operation 'DROP TABLE' cannot be performed on object 'T1' because there is an open ResultSet dependent on that object.
gfxd> -- close cursor jdk4 and try then deleting the table
-- in DerbyNetClient, the table is already dropped
close jdk4;
gfxd> drop table t1;
0 rows inserted/updated/deleted
gfxd> -- clean up.
close jdk1;
gfxd> -- recreate and populate the table for next test
create table t1(c11 int, c12 int);
0 rows inserted/updated/deleted
gfxd> insert into t1 values(1,1);
1 row inserted/updated/deleted
gfxd> insert into t1 values(2,2);
1 row inserted/updated/deleted
gfxd> -- fourth test - try to change the isolation level while there are
-- held cursors
get with nohold cursor jdk1 as 'SELECT * FROM t1';
gfxd> get with hold cursor jdk4 as 'SELECT * FROM t1';
gfxd> next jdk1;
C11        |C12        
-----------------------
1          |1          
gfxd> next jdk4;
C11        |C12        
-----------------------
1          |1          
gfxd> -- try to change the isolation level. will give error because of jdk1 and jdk4
-- no error in DerbyNetClient because cursor is closed on server
set current isolation RR;
ERROR X0X03: Invalid transaction state - held cursor requires same isolation level
gfxd> commit;
gfxd> -- attempt to change isolation level should give error because of jdk4 hold cursor
-- no error in DerbyNetClient because cursor is closed on server
set isolation = REPEATABLE READ;
ERROR X0X03: Invalid transaction state - held cursor requires same isolation level
gfxd> -- close jdk4 and then should be able to change isolation
close jdk4;
gfxd> set isolation to serializable;
0 rows inserted/updated/deleted
gfxd> -- clean up.
close jdk1;
gfxd> -- fifth test - try isolation level change alongwith changing the isolation
-- level of just one statement
get with hold cursor jdk4 as 'SELECT * FROM t1';
gfxd> get with nohold cursor jdk1 as 'SELECT * FROM t1 WITH CS';
gfxd> next jdk4;
C11        |C12        
-----------------------
1          |1          
gfxd> next jdk1;
C11        |C12        
-----------------------
1          |1          
gfxd> -- following should fail because of cursor jdk4
-- no error in DerbyNetClient because cursor is closed on server
set isolation RS;
ERROR X0X03: Invalid transaction state - held cursor requires same isolation level
gfxd> -- following should fail because of cursor jdk4
-- no error in DerbyNetClient because cursor is closed on server
set isolation UR;
ERROR X0X03: Invalid transaction state - held cursor requires same isolation level
gfxd> close jdk4;
gfxd> -- should be able to change the isolation now
set isolation READ UNCOMMITTED;
0 rows inserted/updated/deleted
gfxd> set isolation RS;
0 rows inserted/updated/deleted
gfxd> -- clean up.
close jdk1;
gfxd> -- sixth test - try positioned update with hold cursor
get with hold cursor jdk4 as 'SELECT * FROM t1 FOR UPDATE';
gfxd> -- following should give error because cursor is not positioned on any row
update t1 set c12=12 where current of jdk4;
ERROR 24000: Invalid cursor state - no current row.
gfxd> select * from t1;
C11        |C12        
-----------------------
1          |1          
2          |2          
gfxd> next jdk4;
C11        |C12        
-----------------------
1          |1          
gfxd> update t1 set c12=12 where current of jdk4;
1 row inserted/updated/deleted
gfxd> select * from t1;
C11        |C12        
-----------------------
1          |12         
2          |2          
gfxd> commit;
gfxd> -- after commit, the next transaction should do a fetch again before doing
-- any positioned update
update t1 set c12=123 where current of jdk4;
ERROR 24000: Invalid cursor state - no current row.
gfxd> select * from t1;
C11        |C12        
-----------------------
1          |12         
2          |2          
gfxd> next jdk4;
C11        |C12        
-----------------------
2          |2          
gfxd> update t1 set c12=23 where current of jdk4;
1 row inserted/updated/deleted
gfxd> select * from t1;
C11        |C12        
-----------------------
1          |12         
2          |23         
gfxd> close jdk4;
gfxd> update t1 set c12=234 where current of jdk4;
ERROR 42X30: Cursor 'JDK4' not found. Verify that autocommit is OFF.
gfxd> select * from t1;
C11        |C12        
-----------------------
1          |12         
2          |23         
gfxd> -- seventh test - try positioned delete with hold cursor
get with hold cursor jdk4 as 'SELECT * FROM t1 FOR UPDATE';
gfxd> -- following should give error because cursor is not positioned on any row
delete from t1 where current of jdk4;
ERROR 24000: Invalid cursor state - no current row.
gfxd> select * from t1;
C11        |C12        
-----------------------
1          |12         
2          |23         
gfxd> next jdk4;
C11        |C12        
-----------------------
1          |12         
gfxd> delete from  t1 where current of jdk4;
1 row inserted/updated/deleted
gfxd> select * from t1;
C11        |C12        
-----------------------
2          |23         
gfxd> commit;
gfxd> -- after commit, the next transaction should do a fetch again before doing
-- any positioned delete
delete from t1 where current of jdk4;
ERROR 24000: Invalid cursor state - no current row.
gfxd> select * from t1;
C11        |C12        
-----------------------
2          |23         
gfxd> next jdk4;
C11        |C12        
-----------------------
2          |23         
gfxd> delete from t1 where current of jdk4;
1 row inserted/updated/deleted
gfxd> select * from t1;
C11        |C12        
-----------------------
gfxd> close jdk4;
gfxd> delete from t1 where current of jdk4;
ERROR 42X30: Cursor 'JDK4' not found. Verify that autocommit is OFF.
gfxd> select * from t1;
C11        |C12        
-----------------------
gfxd> -- populate the table for next test
insert into t1 values(1,1);
1 row inserted/updated/deleted
gfxd> insert into t1 values(2,2);
1 row inserted/updated/deleted
gfxd> -- eighth test - scrollable cursors
get scroll insensitive with hold cursor jdk4 as 'SELECT * FROM t1';
gfxd> commit;
gfxd> previous jdk4;
No current row
gfxd> after last jdk4;
No current row
gfxd> before first jdk4;
No current row
gfxd> first jdk4;
C11        |C12        
-----------------------
1          |1          
gfxd> last jdk4;
C11        |C12        
-----------------------
2          |2          
gfxd> next jdk4;
No current row
gfxd> previous jdk4;
C11        |C12        
-----------------------
2          |2          
gfxd> next jdk4;
No current row
gfxd> close jdk4;
gfxd> first jdk4;
IJ ERROR: Unable to establish cursor
gfxd> -- ninth test - close the updateable holdable cursor after commit
-- we get npe
get with hold cursor jdk4 as 'SELECT * FROM T1 FOR UPDATE';
gfxd> next jdk4;
C11        |C12        
-----------------------
1          |1          
gfxd> commit;
gfxd> close jdk4;
gfxd> -- tenth test - bug 4515 - have a more useful message
-- update where current of fails in autocommit=true, held open cursor
autocommit on;
gfxd> get with hold cursor scrollCursor as 'select * from t1 for update of c12';
gfxd> next scrollCursor;
C11        |C12        
-----------------------
1          |1          
gfxd> update t1 set c12=c12+1 where current of scrollCursor;
ERROR 24000: Invalid cursor state - no current row.
gfxd> -- clean up.
close scrollCursor;
gfxd> drop table t1;
0 rows inserted/updated/deleted
gfxd> 
