hydra.Prms-testRequirement = "Test to use newedge's xml to configure regions, load data, then repeatedly call shutDownAll with disk recovery startup";
hydra.Prms-testDescription = "Load data, repeatedly run task to shutDownAll, restart and verify regions were recovered";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct_2_locator.inc;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
THREADGROUP adminThreads 
  totalThreads = fcn
                 ${${A}bridgeHosts} * ${${A}bridgeVMsPerHost} * ${${A}bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"${A}bridge\", ${${A}bridgeHosts}, true)"
                 ncf;
THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${${B}bridgeHosts} * ${${B}bridgeVMsPerHost} * ${${B}bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"${B}bridge\", ${${B}bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
         threadGroups = bridgeThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = createLocatorTask
         threadGroups = locatorThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = startAndConnectLocatorTask
         threadGroups = locatorThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_initWithXml
         runMode = always
         threadGroups = bridgeThreads;

INITTASK taskClass = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
         threadGroups = adminThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_initClientWithXml
         threadGroups = edgeThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_loadXmlRegions
         batch
         threadGroups = edgeThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_verifyXmlRegionSizes
         runMode = once
         threadGroups = bridgeThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_verifyXmlRegionSizesAfterRecovery
         runMode = dynamic
         threadGroups = bridgeThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_doQueries
         runMode = once
         threadGroups = bridgeThreads, edgeThreads;

TASK     taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_startupShutdown
         maxThreads=1
         threadGroups = adminThreads;

TASK     taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_doQueriesDuringShutdown
         maxThreads=3
         threadGroups = bridgeThreads, edgeThreads;

hydra.Prms-maxResultWaitSec = 1200;
hydra.Prms-totalTaskTimeSec = 3600;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1024;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = false ;

// CachePrms/RegionPrms/PoolPrms are only created in the test to get hydra to spit out a client xml
// file, which is then changed at runtime to remove this region from the xml and insert customer
// regions from the file gemfire-client.xml.template; this is a temporary workaround until Lise finishes
// with gemfirexd and can put in a permanent solution to getting hydra to initialize with customer xml
// files (workaround added November 2011)
hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names           = clientRegion;
hydra.RegionPrms-dataPolicy      = normal;
hydra.RegionPrms-scope           = local;
hydra.RegionPrms-poolName        = clientPool;
hydra.PoolPrms-names                  = clientPool;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-readTimeout            = 60000; 
hydra.PoolPrms-retryAttempts          = 1; 
hydra.PoolPrms-idleTimeout            = 600000; 

diskRecovery.RecoveryPrms-operations = ONEOF add destroy invalidate update get getNew putAll cacheOperations FOENO;
diskRecovery.RecoveryPrms-lowerThreshold = 10;
diskRecovery.RecoveryPrms-upperThreshold = 500;
diskRecovery.RecoveryPrms-lowerThresholdOperations = ONEOF add putAll cacheOperations FOENO;
diskRecovery.RecoveryPrms-upperThresholdOperations = ONEOF destroy cacheOperations FOENO;
diskRecovery.RecoveryPrms-numPutAllNewKeys = RANGE 1 10 EGNAR;
diskRecovery.RecoveryPrms-numPutAllExistingKeys = RANGE 1 10 EGNAR;

util.TestHelperPrms-minTaskGranularitySec = 60;

diskRecovery.RecoveryPrms-numToLoad = 500; // number of entries to load into each region by a SINGLE thread

hydra.GemFirePrms-enableNetworkPartitionDetection = true;
hydra.GemFirePrms-disableAutoReconnect = true;

hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/antlr.jar;
 

