hydra.Prms-testDescription = "
This test is for testing the new feature where a PR with different different copies can 
be co-located with another pr.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;



// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 

// one verify thread per datastore (but not accessor) vm to verify each vm's view
THREADGROUP verifyThreads 
            totalThreads = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            totalVMs     = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf;

// accessorThreads are all threads in the accessor VMs minus 1 thread for the controller
// thread
THREADGROUP accessorVMThreads 
            totalThreads = fcn "(${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM})" ncf
            totalVMs     = fcn "(${edgeHosts} * ${edgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"edge\", 
                                ${edgeHosts} * ${edgeVMsPerHost}, true)" ncf;

// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP dataStoreVMThreads 
            totalThreads = fcn (${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}) 
                               - (${bridgeHosts} * ${bridgeVMsPerHost}) ncf  
            totalVMs     = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf;


hydra.RegionPrms-names              = clientRegion1	    clientRegion2		clientRegion3    clientRegion4       bridgeRegion1     bridgeRegion2     bridgeRegion3   bridgeRegion4;
hydra.RegionPrms-regionName         = testRegion1		testRegion2         testRegion3	   	 testRegion4   		 testRegion1		  testRegion2	 testRegion3     testRegion4;
hydra.RegionPrms-scope              = local  			local				local            local    	         default           default           default         default;
hydra.RegionPrms-poolName           = edgeDescript      edgeDescript	    edgeDescript     edgeDescript		 none              none              none            none;
hydra.RegionPrms-dataPolicy         = normal 			normal				normal           normal     	     partition         partition         partition       partition;
hydra.RegionPrms-partitionName      = none              none                none    		 none		         pr1               pr2               pr3             pr4;

hydra.PartitionPrms-names           = pr1 pr2	pr3 pr4;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-redundantCopies = ${redundantCopies} ${redundantCopies} ${redundantCopies} 0;
hydra.PartitionPrms-totalNumBuckets = 30;
hydra.PartitionPrms-colocatedWith = none testRegion1 testRegion2 none;
hydra.PartitionPrms-partitionListeners = parReg.execute.ColocatingPartitionListener, none, none, none;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript;
hydra.PoolPrms-minConnections        	   = 2;
hydra.PoolPrms-subscriptionEnabled 		   = true;
hydra.PoolPrms-threadLocalConnections      = true;
hydra.PoolPrms-readTimeout                 = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy        = ${redundancy};

// define the bridge servers
hydra.BridgePrms-names                = bridge;

parReg.ParRegPrms-numberOfDataStore = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf;


INITTASK     taskClass     = parReg.colocation.ParRegListenerTest  taskMethod = HydraTask_HA_dataStoreInitialize
             threadGroups = dataStoreVMThreads, verifyThreads
             runMode = always;

INITTASK     taskClass     = parReg.colocation.ParRegListenerTest  taskMethod = HydraTask_HA_accessorInitialize
             threadGroups = accessorVMThreads;
             
INITTASK     taskClass     = parReg.colocation.ParRegListenerTest  taskMethod = HydraTask_registerInterest
             threadGroups = accessorVMThreads; 
             
INITTASK     taskClass     = parReg.colocation.ParRegListenerTest  taskMethod = HydraTask_loadRegions
             threadGroups = dataStoreVMThreads, verifyThreads; 
             
INITTASK     taskClass     = parReg.colocation.ParRegListenerTest  taskMethod = HydraTask_logRegionsSize
             threadGroups = verifyThreads, accessorVMThreads; 
             
TASK     taskClass     = parReg.colocation.ParRegListenerTest  taskMethod = HydraTask_stopStartVms
             threadGroups = accessorVMThreads
             maxTimesToRun = 1;             
             
CLOSETASK     taskClass     = parReg.colocation.ParRegListenerTest  taskMethod = HydraTask_verifyListenerInvocation
             threadGroups = verifyThreads;
             
CLOSETASK     taskClass     = parReg.colocation.ParRegListenerTest  taskMethod = HydraTask_verifyEmptyRecreatedBuckets
             threadGroups = verifyThreads;
             
CLOSETASK     taskClass     = parReg.colocation.ParRegListenerTest  taskMethod = HydraTask_verifyPrimaryCoLocation
             threadGroups = verifyThreads;                                                                                        
             

             
           

hydra.Prms-totalTaskTimeSec = 30; // test is workload based
hydra.Prms-maxResultWaitSec = 600;

util.TestHelperPrms-minTaskGranularitySec = 60;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

parReg.ParRegPrms-numVMsToStop = RANGE 1 2 EGNAR;
parReg.ParRegPrms-stopModes = ONEOF MEAN_EXIT MEAN_KILL NICE_EXIT NICE_KILL FOENO;
parReg.ParRegPrms-highAvailability = true;

