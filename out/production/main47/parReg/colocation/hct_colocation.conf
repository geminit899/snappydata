hydra.Prms-testDescription = "
This test creates colocated parititioned regions with bridge servers and clients.
Test creates PRs on all the bridge nodes and edge clients populates each region with random
objects. Test finally does validation to check PR colocation and custom parititioning
and verify other PR attributes.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK  taskClass = parReg.ColocationAndEvictionTest taskMethod = HydraTask_initializeBridgeServer
          threadGroups = bridgeThreads;
          
INITTASK  taskClass = parReg.ColocationAndEvictionTest taskMethod = HydraTask_createBridgeServerRegions
          threadGroups = bridgeThreads;

INITTASK  taskClass = parReg.ColocationAndEvictionTest taskMethod = HydraTask_initialize
          threadGroups = edgeThreads;
          
INITTASK  taskClass = parReg.ColocationAndEvictionTest taskMethod = HydraTask_createRegions
          threadGroups = edgeThreads;          
         
TASK  taskClass = parReg.ColocationAndEvictionTest taskMethod = HydraTask_populateRegions
		  threadGroups = edgeThreads;          
          
CLOSETASK taskClass = parReg.ColocationAndEvictionTest taskMethod = HydraTask_dumpBuckets
		  threadGroups = bridgeThreads;

CLOSETASK taskClass = parReg.ColocationAndEvictionTest taskMethod = HydraTask_verifyColocatedRegions
		  threadGroups = bridgeThreads;

CLOSETASK taskClass = parReg.ColocationAndEvictionTest taskMethod = HydraTask_verifyPR
		  threadGroups = bridgeThreads;          

hydra.Prms-totalTaskTimeSec = 100;
hydra.Prms-maxResultWaitSec = 1000;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = 30;

// vary the granularity to ensure that some tasks are operating
// in the client vms while others are operating in the sever vms
util.TestHelperPrms-minTaskGranularitySec = ONEOF 10 20 30 FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names          = 
      clientRegion1 clientRegion2 clientRegion3 clientRegion4 clientRegion5 clientRegion6 clientRegion7 
      bridgeRegion11 bridgeRegion12 bridgeRegion13 bridgeRegion14 bridgeRegion15 
      bridgeRegion16 bridgeRegion17 ;
hydra.RegionPrms-regionName     = 
      region1 region2 region3 region4 region5 region6 region7 
      region1 region2 region3 region4 region5 region6 region7 ;
hydra.RegionPrms-scope          = 
      local local local local local local local 
      default default default default default
      default default;
hydra.RegionPrms-poolName    = 
      edgeDescript edgeDescript edgeDescript edgeDescript edgeDescript 
      edgeDescript edgeDescript           
      none none none none none none none;
hydra.RegionPrms-dataPolicy  = 
      default default default default default default default 
      partition partition partition partition partition partition partition ;
hydra.RegionPrms-partitionName  = 
      none none none none none none none 
      pr1 pr2 pr3 pr4 pr5 pr6 pr7 ;

hydra.PartitionPrms-names           = pr1 pr2 pr3 pr4 pr5 pr6 pr7 ;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript;
hydra.PoolPrms-minConnections        	   = 2;
hydra.PoolPrms-subscriptionEnabled		   = true;
hydra.PoolPrms-threadLocalConnections      = true;
hydra.PoolPrms-readTimeout                 = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy      = 3;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


parReg.ParRegPrms-partitionResolverData = key;


hydra.PartitionPrms-partitionResolver = parReg.colocation.MonthPartitionResolver;

hydra.PartitionPrms-colocatedWith = none region1 region2 region3 region4 region5 region6;

hydra.PartitionPrms-redundantCopies = 	${redundantCopies} ;



