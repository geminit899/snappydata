INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

THREADGROUP verifyThreads totalThreads = fcn "${peerVMsPerHost} * ${peerHosts}" ncf
                          totalVMs = fcn "${peerVMsPerHost} * ${peerHosts}" ncf;
                          
// threads from a subset of the vms; these are initialized and used during the load
// step, then the remaining vms are initialized; this is so rebalance actually has 
// some work 
THREADGROUP limitedVmThreads totalThreads = fcn "((${peerThreadsPerVM} * (${peerVMsPerHost} * ${peerHosts}) / 2) -
                                                   ${peerVMsPerHost} * ${peerHosts})" ncf
                             totalVMs = fcn "(${peerVMsPerHost} * ${peerHosts}) / 2" ncf;
                          
THREADGROUP rebalance
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;                          

STARTTASK    taskClass     = parReg.colocation.ParRegColocationWithListener  taskMethod = StartTask_initialize;

// initialize and load only a subset of jvms
INITTASK     taskClass     = parReg.colocation.ParRegColocationWithListener  taskMethod = HydraTask_initialize
			     threadGroups = limitedVmThreads
                             runMode = always;			 
INITTASK     taskClass     = parReg.colocation.ParRegColocationWithListener  taskMethod = HydraTask_loadRegions
             threadGroups = limitedVmThreads
             batch;
                               
// now initialize the remaining vms so rebalance has some work to do
INITTASK     taskClass     = parReg.colocation.ParRegColocationWithListener  taskMethod = HydraTask_initialize
			     threadGroups = default, rebalance
                             runMode = always;			 

TASK         taskClass   = parReg.colocation.ParRegColocationWithListener taskMethod = HydraTask_rebalanceTask
             maxTimesToRun = 1 // after we rebalance once, there is no more work to do
             threadGroups = rebalance
             ;
             
             
CLOSETASK    taskClass     = parReg.colocation.ParRegColocationWithListener  taskMethod  = HydraTask_verifyColocatedRegions
             threadGroups = verifyThreads;

             

CLOSETASK    taskClass   = parReg.colocation.ParRegColocationWithListener taskMethod = HydraTask_rebalanceTask
             threadGroups = rebalance
             ; 
             
CLOSETASK     taskClass     = parReg.colocation.ParRegColocationWithListener  taskMethod = HydraTask_verifyEmptyRecreatedBuckets
             threadGroups = verifyThreads;                                                                       


hydra.RegionPrms-names          = 
      clientRegion1 clientRegion2 clientRegion3 clientRegion4 clientRegion5 clientRegion6 clientRegion7;

hydra.RegionPrms-regionName     = 
      clientRegion1 clientRegion2 clientRegion3 clientRegion4 clientRegion5 clientRegion6 clientRegion7;
      
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = pr1 pr2 pr3 pr4 pr5 pr6 pr7;

hydra.PartitionPrms-names       = pr1 pr2 pr3 pr4 pr5 pr6 pr7;
hydra.PartitionPrms-partitionResolver = parReg.colocation.MonthPartitionResolver;
hydra.PartitionPrms-partitionListeners = parReg.execute.TestPartitionListener parReg.execute.UpdateBBPartitionListener, none, none, none, none, none, none;
hydra.PartitionPrms-redundantCopies = 	 ${redundantCopies} 0	0	0	0	0	0;
hydra.PartitionPrms-startupRecoveryDelay = -1;

hydra.VmPrms-extraVMArgs = "-Xmx1000m";

hydra.Prms-totalTaskTimeSec = 100; 
hydra.Prms-maxResultWaitSec = 1200;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 50 100 500 1000 2500 5000 FOENO;
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;


parReg.ParRegPrms-partitionResolverData = BB;
parReg.ParRegPrms-isWithRoutingResolver = true;
parReg.ParRegPrms-numberOfDataStore = fcn "${peerVMsPerHost} * ${peerHosts}" ncf;

util.CachePrms-useDeclarativeXmlFile = true;






             
         





