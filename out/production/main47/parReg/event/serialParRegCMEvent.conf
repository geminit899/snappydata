INCLUDE $JTESTS/parReg/event/serialParRegEntryEvent.conf;

hydra.Prms-testRequirement = "Test events resulting from concurrentMap operations (putIfAbsent, replace, remove) on PartitionedRegions";
hydra.Prms-testDescription = "
Test in serial execution mode to carefully validate entry events.

The test uses one partitionedRegion.
There is a listener, that increments a blackboard counter
for each event, installed in the region for each VM.

The test executes a task that executes concurrentMap operations  
an object in a partitioned region, then waits for the listener counters to reach
the required number, indicating the event was received in a VM.
";

util.CacheDefPrms-cacheSpecs = "
   specName = cache1:
   ";

// Note that the default is CACHE_CONTENT, so only the primary should
// receive the listener events.  With interestPolicy ALL, all VMs should
// receive.  Note that we cannot set dataPolicy=normal (must be empty)
// This should change w/a fix for bug 36404
util.RegionDefPrms-regionSpecs = "
   specName = cached:
       regionName = EventRegion:
       cacheListeners = event.CMListener event.OperationListener:
       cacheWriter = event.CMWriter:
       partitionedRegion = true:
   specName = cachedAllEvents:
       regionName = EventRegion:
       interestPolicy = all:
       cacheListeners = event.CMListener event.OperationListener:
       cacheWriter = event.CMWriter:
       partitionedRegion = true:
   ";

util.RegionDefPrms-VMRegionSpecName = ONEOF cached cachedAllEvents FOENO;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

event.EventPrms-entryOperations = ONEOF putIfAbsent putIfAbsent putIfAbsent putIfAbsent replace remove read FOENO; // weighted to putIfAbsents

