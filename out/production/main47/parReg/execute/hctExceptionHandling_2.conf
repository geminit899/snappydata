INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK  taskClass = parReg.execute.HAExceptionHandlingTest taskMethod = HydraTask_initializeServer
		  runMode=always
		  threadGroups = bridgeThreads
		  ;
		  
INITTASK  taskClass = parReg.execute.HAExceptionHandlingTest taskMethod = HydraTask_initializeClient
		  runMode=always
		  threadGroups = edgeThreads
		  ;		  

INITTASK  taskClass = parReg.execute.HAExceptionHandlingTest taskMethod = HydraTask_populateRegion
		  threadGroups = edgeThreads;
		  
INITTASK  taskClass = parReg.execute.HAExceptionHandlingTest taskMethod = HydraTask_registerFunction
          threadGroups = edgeThreads, bridgeThreads
		  runMode=always;
		  
INITTASK  taskClass = parReg.execute.HAExceptionHandlingTest taskMethod = HydraTask_updateBB
		  threadGroups = bridgeThreads;		  
		  
TASK  taskClass = parReg.execute.HAExceptionHandlingTest taskMethod = HydraTask_doRandomFunctionExecutions
      threadGroups = edgeThreads
      ;
      
TASK  taskClass = parReg.execute.HAExceptionHandlingTest taskMethod = HydraTask_recycleOrCloseCache
      threadGroups = bridgeThreads
      maxThreads = 1
      maxTimesToRun = 1
      startInterval = 15
      ;      
      
CLOSETASK  taskClass = parReg.execute.HAExceptionHandlingTest taskMethod = HydraTask_reExecuteExceptions
           threadGroups = edgeThreads;       
      
      
hydra.Prms-totalTaskTimeSec = 200;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = 30;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names          = bridge	edge;
hydra.RegionPrms-regionName     = region;
hydra.RegionPrms-dataPolicy     = partition	default;
hydra.RegionPrms-scope          = default   local;
hydra.RegionPrms-partitionName  = pr	none;
hydra.RegionPrms-poolName       =  none edgeDescript;
hydra.RegionPrms-cacheListeners = hct.EventListener;
								  

hydra.PartitionPrms-names       = pr;
hydra.PartitionPrms-redundantCopies = 1;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


// define the edge clients
hydra.PoolPrms-names                       = edgeDescript;
hydra.PoolPrms-minConnections        	   = 2;
hydra.PoolPrms-subscriptionEnabled		   = true;
hydra.PoolPrms-threadLocalConnections      = true;
hydra.PoolPrms-readTimeout                 = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy      = 3;
hydra.PoolPrms-retryAttempts               = 3;

hydra.Prms-maxResultWaitSec = 300;

hydra.VmPrms-extraVMArgs = "-Xmx1000m";    
