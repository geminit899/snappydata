hydra.Prms-testDescription = "
This test creates a partitioned region with custom paritioning, then does various entry operations(using function execution)
 on a known key range. Test also does fail over of the data stores. (peer to peer) 
 Values are checked for correctness in the close task.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;
INCLUDE $JTESTS/parReg/execute/concKnownKeysFuncExec.inc;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx128m \", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx512m \", ${${B}Hosts}, true)"
                             ncf;


// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 

// one verify thread per accessor and datastore vm to verify each vm's view
THREADGROUP verifyThreads 
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost}) +
                                (${${B}Hosts} * ${${B}VMsPerHost})" ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost}) +
                                (${${B}Hosts} * ${${B}VMsPerHost})" ncf;

// accessorThreads are all threads in the accessor VMs minus 1 thread for the controller
// thread, minus one thread per accessor VM for the verifyThreads
THREADGROUP accessorVMThreads 
            totalThreads = fcn (${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}) - 1
                               - (${${A}Hosts} * ${${A}VMsPerHost}) ncf  
            totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\", 
                                ${${A}Hosts} * ${${A}VMsPerHost}, true)" ncf;

// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP dataStoreVMThreads 
            totalThreads = fcn (${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}) 
                               - (${${B}Hosts} * ${${B}VMsPerHost}) ncf  
            totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", 
                                ${${B}Hosts} * ${${B}VMsPerHost}, true)" ncf;

// one thread from an accessor VM (it's the only thread not mapped to a thread group at this point)
THREADGROUP controllerThread totalThreads = 1 totalVMs = 1;

// to avoid bug 34430, scope must be ack
hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = accessorRegion       dataStoreRegion;
hydra.RegionPrms-regionName     = partitionedRegion    partitionedRegion;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = accessorPR           dataStorePR;
hydra.RegionPrms-cacheListeners 	= util.SilenceListener,	 util.SilenceListener;
hydra.PartitionPrms-names           = accessorPR           dataStorePR;
hydra.PartitionPrms-localMaxMemory  = 0                    default;
hydra.PartitionPrms-redundantCopies = ${redundantCopies}   ${redundantCopies};

hydra.PartitionPrms-partitionResolver = parReg.colocation.MonthPartitionResolver;
parReg.ParRegPrms-partitionResolverData = BB;
parReg.ParRegPrms-isWithRoutingResolver = true;
	
parReg.ParRegPrms-numberOfDataStore = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf;

//Adding task for the fail over

TASK         taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_stopStartVms
             threadGroups = controllerThread;
             
CLOSETASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod  = HydraTask_verifyCustomPartitioning
             threadGroups = verifyThreads;             
