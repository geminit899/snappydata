hydra.Prms-testDescription = "
This is a client server test with partitioned regions with single hop and server groups.
The test contains three regions testRegion1, testRegion2 and testRegion3. testRegion1 use pool 
having default server group, testRegion2 use server group "group1" and testRegion use server
group "group2". Each server/bridge belongs to one of "default" or "group1" or "group2" or 
both "group1" and "group2". The test first load data in all regions, then it does 
random operations as DESTROY, CREATE, UPDATE, GET for preknown set of keys. 
Test then validates the results at the end.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// This test is derived from hct_randomFunctionExecution.conf.
// Added more server groups and random operations in the test.  

// one verify thread per datastore vm to verify each vm's view
THREADGROUP verifyEdgeThreads           
            totalThreads = fcn "(${edgeHosts} * ${edgeVMsPerHost})" ncf
            totalVMs     = fcn "(${edgeHosts} * ${edgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"edge\", 
                                ${edgeHosts} * ${edgeVMsPerHost}, true)" ncf;

// one verify thread per edge vm to verify each vm's view
THREADGROUP verifyBridgeThreads 
            totalThreads = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            totalVMs     = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf ;

// adgeVMThreads are all threads in the adge VMs 
THREADGROUP adgeVMThreads 
            totalThreads = fcn "((${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}) 
                               - (${edgeHosts} * ${edgeVMsPerHost}))" ncf
            totalVMs     = fcn "(${edgeHosts} * ${edgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"edge\", 
                                ${edgeHosts} * ${edgeVMsPerHost}, true)" ncf;

// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP dataStoreVMThreads 
            totalThreads = fcn "((${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}) 
                               - (${bridgeHosts} * ${bridgeVMsPerHost}))" ncf  
            totalVMs     = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf;

// set the system property
hydra.VmPrms-extraVMArgs="-Dgemfire.PoolImpl.honourServerGroupsInPRSingleHop=true" ;

hydra.RegionPrms-names              = clientRegion1	    clientRegion2		clientRegion3	bridgeRegion1     bridgeRegion2     bridgeRegion3	;
hydra.RegionPrms-regionName         = testRegion1		testRegion2         testRegion3	   	testRegion1		  testRegion2	    testRegion3		;
hydra.RegionPrms-scope              = local  			local				local         	default           default           default			;
hydra.RegionPrms-poolName           = edgeDescript		group1Descript	   	group2Descript    none              none              none			;
hydra.RegionPrms-cacheListeners 	= util.SilenceListener;
hydra.RegionPrms-dataPolicy         = empty 			empty				empty          partition         partition         partition		;
hydra.RegionPrms-partitionName      = none              none                none    		pr1               pr2               pr3			;


hydra.PartitionPrms-names           = pr1	pr2	pr3;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-partitionResolver = parReg.colocation.MonthPartitionResolver;

parReg.ParRegPrms-partitionResolverData = BB;
parReg.ParRegPrms-isWithRoutingResolver = true; 
parReg.ParRegPrms-numberOfDataStore = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript   group1Descript group2Descript;
hydra.PoolPrms-subscriptionEnabled 		   = true;
hydra.PoolPrms-threadLocalConnections      = true;
hydra.PoolPrms-readTimeout                 = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy      = 3;
hydra.PoolPrms-serverGroup                 = default group1	group2;

// define the bridge servers
hydra.BridgePrms-names                = bridge      group1     group2     group12 ;
hydra.BridgePrms-groups               = default,    group1,    group2,    group1 group2;


STARTTASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod = StartTask_initialize;

INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_HA_initDataStoreAndServerGroups
             threadGroups = dataStoreVMThreads
             runMode = always;
             
INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_storeServerDsToBB
             threadGroups = dataStoreVMThreads
             runMode = always;
             
INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_HA_accessorInitialize
             threadGroups = adgeVMThreads;
             
INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_initRegisterFunction
             threadGroups = adgeVMThreads, dataStoreVMThreads
             ;
                          
INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_registerInterest
             threadGroups = adgeVMThreads;

INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_loadRegions
             threadGroups = adgeVMThreads
             batch
             ;
             
INITTASK      taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_waitForEventsReceival
             threadGroups = verifyEdgeThreads, verifyBridgeThreads;             

            
INITTASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_putKeySetInBB
             threadGroups = verifyBridgeThreads;
			               
TASK         taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_doOps
             threadGroups = adgeVMThreads ;   
             
CLOSETASK      taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_waitForEventsReceival
             threadGroups = verifyEdgeThreads, verifyBridgeThreads;  


CLOSETASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_verifyClientPRMetadata
             threadGroups = verifyEdgeThreads;
                          
CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyEdgeThreads, verifyBridgeThreads;

CLOSETASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_verifyRegionContents
             threadGroups = verifyBridgeThreads; 
             
CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyBucketCopies
             threadGroups = verifyBridgeThreads;
             
CLOSETASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_varifyMetaDataRefreshCount
             threadGroups = verifyEdgeThreads;
                       
hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 600;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
