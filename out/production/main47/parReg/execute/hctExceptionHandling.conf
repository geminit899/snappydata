INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} - 1
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;
                 
THREADGROUP controllerThread totalThreads = 1 totalVMs = 1;                 

INITTASK  taskClass = parReg.execute.ExceptionHandlingTest taskMethod = HydraTask_initializeServer
		  runMode=always
		  threadGroups = bridgeThreads
		  ;
		  
INITTASK  taskClass = parReg.execute.ExceptionHandlingTest taskMethod = HydraTask_initializeClient
		  runMode=always
		  threadGroups = edgeThreads, controllerThread
		  ;		  

INITTASK  taskClass = parReg.execute.ExceptionHandlingTest taskMethod = HydraTask_populateRegion
		  threadGroups = edgeThreads;
		  
INITTASK  taskClass = parReg.execute.ExceptionHandlingTest taskMethod = HydraTask_registerFunction
          threadGroups = edgeThreads, bridgeThreads, controllerThread
		  runMode=always;
		  
TASK  taskClass = parReg.execute.ExceptionHandlingTest taskMethod = HydraTask_doFunctionExecutions
      threadGroups = edgeThreads
      ;
      
TASK  taskClass = parReg.execute.ExceptionHandlingTest taskMethod = HydraTask_stopStartVms
      threadGroups = controllerThread
      maxTimesToRun = 5
      ;      
      
      
hydra.Prms-totalTaskTimeSec = 200;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;
util.TestHelperPrms-minTaskGranularitySec = 30;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names          = bridgePR bridgeReplicated	edgeRegion1 edgeRegion2;
hydra.RegionPrms-regionName     = partitionedRegion  replicatedRegion partitionedRegion  replicatedRegion;
hydra.RegionPrms-dataPolicy     = partition	replicated default default;
hydra.RegionPrms-scope          = default   default    local  local;
hydra.RegionPrms-partitionName  = pr	    none       none   none;
hydra.RegionPrms-poolName       =  none     none   edgeDescript edgeDescript;
hydra.RegionPrms-cacheListeners = hct.EventListener;
								  

hydra.PartitionPrms-names       = pr;
hydra.PartitionPrms-redundantCopies = 1;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


// define the edge clients
hydra.PoolPrms-names                       = edgeDescript;
hydra.PoolPrms-minConnections        	   = 2;
hydra.PoolPrms-subscriptionEnabled		   = true;
hydra.PoolPrms-threadLocalConnections      = true;
hydra.PoolPrms-readTimeout                 = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy      = 3;
hydra.PoolPrms-retryAttempts               = 0;

hydra.Prms-maxResultWaitSec = 300;

hydra.VmPrms-extraVMArgs = "-Xmx1000m";    
parReg.ParRegPrms-highAvailability = true;

parReg.ParRegPrms-numVMsToStop = 1 ;
parReg.ParRegPrms-stopModes = ONEOF MEAN_EXIT MEAN_KILL NICE_EXIT NICE_KILL FOENO;
