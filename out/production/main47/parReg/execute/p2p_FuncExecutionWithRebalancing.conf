hydra.Prms-testDescription = "
This test is for testing the function execution when the PR rebalances in the nodes.
During function execution additional nodes are brought up and rebalancing of buckets done.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;



// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 

// one verify thread per accessor and datastore vm to verify each vm's view
THREADGROUP verifyThreads 
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost}) +
                                (${${B}Hosts} * ${${B}VMsPerHost})" ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost}) +
                                (${${B}Hosts} * ${${B}VMsPerHost})" ncf;

// accessorThreads are all threads in the accessor VMs minus 1 thread for the controller
// thread, minus one thread per accessor VM for the verifyThreads
THREADGROUP accessorVMThreads 
            totalThreads = fcn (${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM})
                               - (${${A}Hosts} * ${${A}VMsPerHost}) ncf  
            totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\", 
                                ${${A}Hosts} * ${${A}VMsPerHost}, true)" ncf;

// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP dataStoreVMThreads 
            totalThreads = fcn (${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}) 
                               - (${${B}Hosts} * ${${B}VMsPerHost}) ncf  
            totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", 
                                ${${B}Hosts} * ${${B}VMsPerHost}, true)" ncf;

THREADGROUP extraVMThreads
    totalThreads = fcn
                   ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;
                   
                   
// to avoid bug 34430, scope must be ack
hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = accessorRegion       dataStoreRegion;
hydra.RegionPrms-regionName     = partitionedRegion    partitionedRegion;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = accessorPR           dataStorePR;
hydra.RegionPrms-cacheListeners 	= util.SilenceListener,	 util.SilenceListener;
hydra.PartitionPrms-names           = accessorPR           dataStorePR;
hydra.PartitionPrms-localMaxMemory  = 0                    default;
hydra.PartitionPrms-redundantCopies = ${redundantCopies}   ${redundantCopies};



STARTTASK    taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = StartTask_initialize
             clientNames = dataStore1;

INITTASK     taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_HA_dataStoreInitialize
             threadGroups = dataStoreVMThreads
             runMode = always;

INITTASK     taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_HA_accessorInitialize
             threadGroups = accessorVMThreads;
                        
INITTASK     taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_loadRegion
             threadGroups = accessorVMThreads
             batch;

INITTASK     taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

INITTASK     taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_verifyRegionSize
             threadGroups = verifyThreads
             batch;
                          
INITTASK         taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_waitForEventsReceival
             threadGroups = accessorVMThreads;     
             
INITTASK    taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod  = HydraTask_putKeySetInBB
            threadGroups = verifyThreads
			 ; 
			 
INITTASK    taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod  = HydraTask_updateBBWithExtraVmIds
            threadGroups = extraVMThreads
            SEQUENTIAL
			 ;	
			 
TASK    taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod  = HydraTask_createTheNextTurn
            threadGroups = extraVMThreads
            maxTimesToRun = 1
            weight = 5000
			 ;			 		   
			 
TASK    taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod  = HydraTask_executeFunctionAllKeysHA
             threadGroups = accessorVMThreads
			 ; 			                   
 

TASK         taskClass   = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_addCapacityAndReBalance
             threadGroups = extraVMThreads
             weight = 5;  
             
CLOSETASK    taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod  = HydraTask_doFEWithExceptionsAndVerify
            threadGroups = extraVMThreads
            SEQUENTIAL
			 ;	                        

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 600;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;                   
