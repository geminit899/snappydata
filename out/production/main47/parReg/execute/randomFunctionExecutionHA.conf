hydra.Prms-testDescription = "
This is a peer to peer test (with fail over) with co-located partitioned regions.
The test does function executions on replicated regions, partitioned regions and also on members.
This test does a set of random function executions with/without filter,
args and result collector. The test also does multiple function executions with
single/multiple data sets. Test then validates the results of each function execution
results.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx128m \", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx512m \", ${${B}Hosts}, true)"
                             ncf;


// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 

// one verify thread per accessor and datastore vm to verify each vm's view
THREADGROUP verifyThreads 
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost}) +
                                (${${B}Hosts} * ${${B}VMsPerHost})" ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost}) +
                                (${${B}Hosts} * ${${B}VMsPerHost})" ncf;

// accessorThreads are all threads in the accessor VMs minus 1 thread for the controller
// thread, minus one thread per accessor VM for the verifyThreads
THREADGROUP accessorVMThreads 
            totalThreads = fcn (${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}) - 1
                               - (${${A}Hosts} * ${${A}VMsPerHost}) ncf  
            totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\", 
                                ${${A}Hosts} * ${${A}VMsPerHost}, true)" ncf;

// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP dataStoreVMThreads 
            totalThreads = fcn (${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}) 
                               - (${${B}Hosts} * ${${B}VMsPerHost}) ncf  
            totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", 
                                ${${B}Hosts} * ${${B}VMsPerHost}, true)" ncf;

// one thread from an accessor VM (it's the only thread not mapped to a thread group at this point)
THREADGROUP controllerThread totalThreads = 1 totalVMs = 1;

hydra.RegionPrms-names              = accessorRegion1	accessorRegion2		accessorRegion3         dataStoreRegion1  dataStoreRegion2  dataStoreRegion3;
hydra.RegionPrms-regionName         = testRegion1		testRegion2         testRegion3	   			testRegion1		  testRegion2	    testRegion3;
hydra.RegionPrms-cacheListeners 	= util.SilenceListener,	util.SilenceListener	,util.SilenceListener	,	util.SilenceListener,	util.SilenceListener, util.SilenceListener;
hydra.RegionPrms-dataPolicy         = partition 		partition			partition                	partition         partition         partition;
hydra.RegionPrms-partitionName      = apr1              apr2                apr3    				pr1               pr2               pr3;

hydra.PartitionPrms-names           = apr1 apr2 apr3 pr1	 pr2		pr3;
hydra.PartitionPrms-localMaxMemory  = 0	   0    0    default default default;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-partitionResolver = parReg.colocation.MonthPartitionResolver;
hydra.PartitionPrms-colocatedWith = none testRegion1 testRegion2	none testRegion1 testRegion2;

parReg.ParRegPrms-partitionResolverData = BB;
parReg.ParRegPrms-isWithRoutingResolver = true; 

parReg.ParRegPrms-numberOfDataStore = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf;

STARTTASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod = StartTask_initialize;

INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_p2p_dataStoreInitialize
             threadGroups = dataStoreVMThreads
             runMode = always;

INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_p2p_accessorInitialize
             threadGroups = accessorVMThreads;
             
INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_loadRegions
             threadGroups = accessorVMThreads
             batch
             ;

INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_verifyRegionSize
             threadGroups = verifyThreads
             ;
             
INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_initRegisterFunction
             threadGroups = accessorVMThreads, dataStoreVMThreads
             runMode = always
             ;      
             
INITTASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_putKeySetInBB
             threadGroups = verifyThreads
			 ;                    
 
TASK         taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_doRandomFunctionExecutions
             threadGroups = accessorVMThreads;
             
TASK         taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_doOnRegionsExecutionsHA
             threadGroups = accessorVMThreads;
             
TASK         taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_stopStartVms
             threadGroups = controllerThread;             
 
CLOSETASK    taskClass   = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_logLocalSize
             threadGroups = dataStoreVMThreads;

CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyPrimaries
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyBucketCopies
             threadGroups = verifyThreads
             ;

CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyColocatedRegions
             threadGroups = verifyThreads;

            

hydra.Prms-totalTaskTimeSec = 200; 
hydra.Prms-maxResultWaitSec = 600;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

//parReg.ParRegPrms-numVMsToStop = RANGE 1 ${numVMsToStop} EGNAR;
parReg.ParRegPrms-numVMsToStop = ${numVMsToStop} ;
parReg.ParRegPrms-stopModes = ONEOF MEAN_EXIT MEAN_KILL NICE_EXIT NICE_KILL FOENO;
parReg.ParRegPrms-highAvailability = true;
           
parReg.ParRegPrms-numberOfDataStore = fcn "${${B}Hosts} * ${${B}VMsPerHost}" ncf;
