hydra.Prms-testDescription = "
This test creates a replicated region hct topology Function Execution HA. In this test
clients are connected to an server with region datapolicy empty which has peer nodes that are
replicate.

Peer nodes gets recycled. This verifies that there are no duplicate results in case of distributed
region HA, as re-execution always clear the previous execution results at the client side.
The function execution is done by both clients and the empty server.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    (${replicateBridgeHosts} * ${replicateBridgeVMsPerHost}))" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    (${emptyBridgeHosts} * ${emptyBridgeVMsPerHost}))" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", (${edgeHosts} * ${edgeVMsPerHost}))" ncf;

// This bridge flavor of concKnownKeysHA is a little different than
// the non-bridge flavor. In the non-bridge flavor, accessor VMs 
// (which correlate to edge clients) have a "handle" to the PR, and
// even though we don't store any data in the accessor, logically
// all the keys exist. In the bridge flavor, the edge clients, which
// have local regions, need to also have the keys in order for the ops
// task to do its work. For this reason, the edge clients must also
// keep all keys and values in it's locally scoped region, thus its
// vm must be as large as the data store (ie server) vms.


// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 

// one verify thread per datastore (but not accessor) vm to verify each vm's view
THREADGROUP verifyThreads 
            totalThreads = fcn "(${replicateBridgeHosts} * ${replicateBridgeVMsPerHost})" ncf
            totalVMs     = fcn "(${replicateBridgeHosts} * ${replicateBridgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"replicateBridge\", 
                                ${replicateBridgeHosts} * ${replicateBridgeVMsPerHost}, true)" ncf;

// accessorThreads are all threads in the accessor VMs -1 (for the accessor)
THREADGROUP edgeThreads 
            totalThreads = fcn "(${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}) - 1" ncf
            totalVMs     = fcn "(${edgeHosts} * ${edgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"edge\", 
                                ${edgeHosts} * ${edgeVMsPerHost}, true)" ncf;
                                                               
// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP replicateBridgeThreads 
            totalThreads = fcn (${replicateBridgeHosts} * ${replicateBridgeVMsPerHost} * ${replicateBridgeThreadsPerVM}) 
                               - (${replicateBridgeHosts} * ${replicateBridgeVMsPerHost}) ncf  
            totalVMs     = fcn ${replicateBridgeHosts} * ${replicateBridgeVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"replicateBridge\", 
                                ${replicateBridgeHosts} * ${replicateBridgeVMsPerHost}, true)" ncf;
                                
THREADGROUP emptyBridgeThreads 
            totalThreads = fcn (${emptyBridgeHosts} * ${emptyBridgeVMsPerHost} * ${emptyBridgeThreadsPerVM}) ncf  
            totalVMs     = fcn ${emptyBridgeHosts} * ${emptyBridgeVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"emptyBridge\", 
                                ${emptyBridgeHosts} * ${emptyBridgeVMsPerHost}, true)" ncf;                                
                                
// one thread from an accessor VM (it's the only thread not mapped to a thread group at this point)
THREADGROUP controllerThread totalThreads = 1 totalVMs = 1;                                


hydra.RegionPrms-names              = clientRegion                   replicateServerRegion	  emptyServerRegion;
hydra.RegionPrms-regionName         = testRegion                     testRegion               testRegion;
hydra.RegionPrms-scope              = local                          ack                      ack;
hydra.RegionPrms-poolName           = emptyDescript                  none                     none;
hydra.RegionPrms-dataPolicy         = default                        replicate                empty;
hydra.RegionPrms-cacheListeners 	= util.SilenceListener;

// define the edge clients
hydra.PoolPrms-names                  = emptyDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy = ${redundancy};
hydra.PoolPrms-pingInterval           = 400;
hydra.PoolPrms-loadConditioningInterval = 5000;


// define the bridge servers
hydra.BridgePrms-names                = server;


STARTTASK    taskClass     = parReg.execute.FunctionExecutionWithDistributedRegion  taskMethod = StartTask_initialize
             clientNames = emptyBridge1;

INITTASK     taskClass     = parReg.execute.FunctionExecutionWithDistributedRegion  taskMethod = HydraTask_HA_initReplicatedDataStore
             threadGroups = replicateBridgeThreads
             runMode = always;
             
INITTASK     taskClass     = parReg.execute.FunctionExecutionWithDistributedRegion  taskMethod = HydraTask_HA_initEmptyDataStore
             threadGroups = emptyBridgeThreads
             runMode = always;
                                      
INITTASK     taskClass     = parReg.execute.FunctionExecutionWithDistributedRegion  taskMethod = HydraTask_HA_initClients
             threadGroups = edgeThreads, controllerThread;
             

INITTASK     taskClass     = parReg.execute.FunctionExecutionWithDistributedRegion  taskMethod = HydraTask_loadRegion
             threadGroups = edgeThreads, controllerThread
             batch;
             
INITTASK         taskClass     = parReg.execute.FunctionExecutionWithDistributedRegion  taskMethod = HydraTask_waitForEventsReceival
             threadGroups = edgeThreads, controllerThread, replicateBridgeThreads, emptyBridgeThreads;             

INITTASK     taskClass     = parReg.execute.FunctionExecutionWithDistributedRegion  taskMethod = HydraTask_verifyRegionSize
             threadGroups = verifyThreads
             batch;
             
INITTASK     taskClass     = parReg.execute.FunctionExecutionWithDistributedRegion  taskMethod = HydraTask_putKeySetInBB
             threadGroups = replicateBridgeThreads
             ;             
                                    
             
TASK         taskClass     = parReg.execute.FunctionExecutionWithDistributedRegion  taskMethod = HydraTask_executeFunctionAllKeysHA
             threadGroups = edgeThreads, emptyBridgeThreads;             
             
TASK         taskClass     = parReg.execute.FunctionExecutionWithDistributedRegion  taskMethod = HydraTask_stopStartVms
             threadGroups = controllerThread
             maxTimesToRun = 3;
 

                                    

hydra.Prms-totalTaskTimeSec = 300; 
hydra.Prms-maxResultWaitSec = 600;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

getInitialImage.InitImagePrms-useReplicatedRegions=true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

parReg.ParRegPrms-numVMsToStop = RANGE 1 ${numVMsToStop} EGNAR;
util.StopStartPrms-stopModes = ONEOF MEAN_EXIT MEAN_KILL NICE_EXIT NICE_KILL FOENO;
parReg.ParRegPrms-highAvailability = true;
           
hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar;

