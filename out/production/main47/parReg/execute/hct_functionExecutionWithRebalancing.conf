hydra.Prms-testDescription = "
Test for testing function execution from client when the server pr rebalancing occurs.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    (${partitionBridgeHosts} * ${partitionBridgeVMsPerHost}))" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    (${extraBridgeHosts} * ${extraBridgeVMsPerHost}))" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", (${edgeHosts} * ${edgeVMsPerHost}))" ncf;



// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 

// one verify thread per datastore (but not accessor) vm to verify each vm's view
THREADGROUP verifyThreads 
            totalThreads = fcn "(${partitionBridgeHosts} * ${partitionBridgeVMsPerHost})" ncf
            totalVMs     = fcn "(${partitionBridgeHosts} * ${partitionBridgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"partitionBridge\", 
                                ${partitionBridgeHosts} * ${partitionBridgeVMsPerHost}, true)" ncf;

// accessorThreads are all threads in the accessor VMs -1 (for the accessor)
THREADGROUP edgeThreads 
            totalThreads = fcn "(${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM})" ncf
            totalVMs     = fcn "(${edgeHosts} * ${edgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"edge\", 
                                ${edgeHosts} * ${edgeVMsPerHost}, true)" ncf;
                                                               
// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP partitionBridgeThreads 
            totalThreads = fcn (${partitionBridgeHosts} * ${partitionBridgeVMsPerHost} * ${partitionBridgeThreadsPerVM}) 
                               - (${partitionBridgeHosts} * ${partitionBridgeVMsPerHost}) ncf  
            totalVMs     = fcn ${partitionBridgeHosts} * ${partitionBridgeVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"partitionBridge\", 
                                ${partitionBridgeHosts} * ${partitionBridgeVMsPerHost}, true)" ncf;
                                
THREADGROUP extraBridgeThreads 
            totalThreads = fcn (${extraBridgeHosts} * ${extraBridgeVMsPerHost} * ${extraBridgeThreadsPerVM}) ncf  
            totalVMs     = fcn ${extraBridgeHosts} * ${extraBridgeVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"extraBridge\", 
                                ${extraBridgeHosts} * ${extraBridgeVMsPerHost}, true)" ncf;                                
                                
// one thread from an accessor VM (it's the only thread not mapped to a thread group at this point)
THREADGROUP controllerThread totalThreads = 1 totalVMs = 1;                                


hydra.RegionPrms-names              = accessorRegion                 dataStoreRegion;
hydra.RegionPrms-regionName         = testRegion                     testRegion;
hydra.RegionPrms-scope              = local                          default ;
hydra.RegionPrms-poolName           = emptyDescript                  none;
hydra.RegionPrms-dataPolicy         = default                        partition;
hydra.RegionPrms-cacheListeners 	= util.SilenceListener;
hydra.RegionPrms-partitionName      = none                           dataStorePR;

hydra.PartitionPrms-names           = dataStorePR;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

// define the edge clients
hydra.PoolPrms-names                  = emptyDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy = ${redundancy};
hydra.PoolPrms-pingInterval           = 400;
hydra.PoolPrms-loadConditioningInterval = 5000;


// define the bridge servers
hydra.BridgePrms-names                = bridge;


STARTTASK    taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = StartTask_initialize
             clientNames = partitionBridge1;

INITTASK     taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_HA_dataStoreInitialize
             threadGroups = partitionBridgeThreads
             runMode = always;

INITTASK     taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_HA_accessorInitialize
             threadGroups = edgeThreads;
                        
INITTASK     taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_loadRegion
             threadGroups = edgeThreads
             batch;

INITTASK     taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

INITTASK     taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_verifyRegionSize
             threadGroups = verifyThreads
             batch;
                          
INITTASK         taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_waitForEventsReceival
             threadGroups = edgeThreads;     
             
INITTASK    taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod  = HydraTask_putKeySetInBB
            threadGroups = verifyThreads
			 ; 
			 
INITTASK    taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod  = HydraTask_updateBBWithExtraVmIds
            threadGroups = extraBridgeThreads
            SEQUENTIAL
			 ;	
			 
TASK    taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod  = HydraTask_createTheNextTurn
            threadGroups = extraBridgeThreads
            maxTimesToRun = 1
            weight = 5000
			 ;			 		   
			 
TASK    taskClass     = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod  = HydraTask_executeFunctionAllKeysHA
             threadGroups = edgeThreads
			 ; 			                   
 

TASK         taskClass   = parReg.execute.FunctionExecutionWithRebalancingTest  taskMethod = HydraTask_addCapacityAndReBalance
             threadGroups = extraBridgeThreads
             weight = 5;
 

                                    

hydra.Prms-totalTaskTimeSec = 300; 
hydra.Prms-maxResultWaitSec = 600;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

getInitialImage.InitImagePrms-useReplicatedRegions=true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

parReg.ParRegPrms-highAvailability = true;
           
hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar;

