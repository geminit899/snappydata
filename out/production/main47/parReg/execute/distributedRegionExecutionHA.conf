hydra.Prms-testDescription = "
This test creates distributed region, then does various entry operations(using function execution)
 on a known key range. Test also does fail over of the data stores. (peer to peer) 
 Values are checked for correctness in the close task.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;



// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 



// accessorThreads are all threads in the accessor VMs minus 1 thread for the controller
// thread, minus one thread per accessor VM for the verifyThreads
THREADGROUP accessorVMThreads 
            totalThreads = fcn (${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}) - 1 ncf  
            totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\", 
                                ${${A}Hosts} * ${${A}VMsPerHost}, true)" ncf;

// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP dataStoreVMThreads 
            totalThreads = fcn (${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}) - (${${B}Hosts} * ${${B}VMsPerHost}) ncf  
            totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", 
                                ${${B}Hosts} * ${${B}VMsPerHost}, true)" ncf;
                                
THREADGROUP verifyThreads 
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf 
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", 
                                ${${B}Hosts} * ${${B}VMsPerHost}, true)" ncf;                               

// one thread from an accessor VM (it's the only thread not mapped to a thread group at this point)
THREADGROUP controllerThread totalThreads = 1 totalVMs = 1;

// to avoid bug 34430, scope must be ack
hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = accessorRegion       dataStoreRegion;
hydra.RegionPrms-regionName     = replicatedRegion     replicatedRegion;
hydra.RegionPrms-dataPolicy     = empty 			   replicated;
hydra.RegionPrms-cacheListeners 	= util.SilenceListener,	 util.SilenceListener;
hydra.RegionPrms-scope      	= dack;

	
parReg.ParRegPrms-numberOfDataStore = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf;

STARTTASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = StartTask_initialize;

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_HA_dataStoreInitialize
             threadGroups = dataStoreVMThreads
             runMode = always;

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_HA_accessorInitialize
             threadGroups = accessorVMThreads;
                        
INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_loadRegion
             threadGroups = accessorVMThreads
             batch;

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_verifyRegionSize
             threadGroups = verifyThreads
             batch;
                         
                          
INITTASK         taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_waitForEventsReceival
             threadGroups = accessorVMThreads;     
   
			 
TASK         taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_doFunctionExecution
             threadGroups = accessorVMThreads; 	
             
		                   
 
//Adding task for the fail over

TASK         taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_stopStartVms
             threadGroups = controllerThread
             startInterval = 5;      
             
CLOSETASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = verifyThreads
             batch;                    

hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 600;


util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

parReg.ParRegPrms-numVMsToStop = ${numVMsToStop};
util.StopStartPrms-stopModes = ONEOF MEAN_EXIT MEAN_KILL NICE_EXIT NICE_KILL FOENO;
parReg.ParRegPrms-highAvailability = true;

getInitialImage.InitImagePrms-useReplicatedRegions=true;

