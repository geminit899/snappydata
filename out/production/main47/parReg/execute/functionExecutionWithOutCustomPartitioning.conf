hydra.Prms-testDescription = "
This test creates a partitioned region without custom parititioning , then does various entry operations(using function execution)
 on a known key range. Values are checked for correctness in the close task.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p.inc;

// need one verify thread per vm to verify each vm's view
THREADGROUP verifyThreads totalThreads = fcn "${peerVMsPerHost} * ${peerHosts}" ncf
                          totalVMs = fcn "${peerVMsPerHost} * ${peerHosts}" ncf;

// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 
STARTTASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = StartTask_initialize;

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_initializeWithAccessor
			 runMode = always
		     ;

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_loadRegion
             threadGroups = verifyThreads, default
             batch;

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_verifyRegionSize
             threadGroups = verifyThreads
             batch;
             
INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_initRegisterFunction
             threadGroups = verifyThreads, default
             ;             
 
TASK         taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_doFunctionExecution
             threadGroups = verifyThreads, default;
              
CLOSETASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod  = HydraTask_verifyPrimaries
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;
                       
CLOSETASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod  = HydraTask_verifyBucketCopiesBatched
             threadGroups = verifyThreads
             batch;

CLOSETASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = verifyThreads
             batch;

CLOSETASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod  = HydraTask_executeFunctionAllKeys
             threadGroups = verifyThreads
			 ;              

CLOSETASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod  = HydraTask_executeFunctionPrimaryBuckets
             threadGroups = verifyThreads
			 ;

hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 600;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

// to avoid bug 34430, scope must be ack

hydra.RegionPrms-names          = clientRegion		clientAccessor;
hydra.RegionPrms-regionName     = partitionedRegion	partitionedRegion;
hydra.RegionPrms-dataPolicy     = partition			partition;
hydra.RegionPrms-partitionName  = pr1				pr2;

hydra.PartitionPrms-names       = pr1	pr2;
hydra.PartitionPrms-localMaxMemory = default 0;
hydra.PartitionPrms-partitionResolver = parReg.colocation.MonthPartitionResolver;
hydra.PartitionPrms-redundantCopies = 	 ${redundantCopies} ;

parReg.ParRegPrms-partitionResolverData = BB;
parReg.ParRegPrms-isWithRoutingResolver = true;
parReg.ParRegPrms-numberOfDataStore = fcn "${peerVMsPerHost} * ${peerHosts}-${numOfAccessors}" ncf;
parReg.ParRegPrms-numberOfAccessors=${numOfAccessors};
