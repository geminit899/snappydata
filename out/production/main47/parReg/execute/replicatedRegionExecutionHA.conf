hydra.Prms-testDescription = "
This test creates a replicated region , then does various entry operations(using function execution)
 on a known key range. Values are checked for correctness in the close task.
 This test is with client server configuration and with Function Execution HA
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// This bridge flavor of concKnownKeysHA is a little different than
// the non-bridge flavor. In the non-bridge flavor, accessor VMs 
// (which correlate to edge clients) have a "handle" to the PR, and
// even though we don't store any data in the accessor, logically
// all the keys exist. In the bridge flavor, the edge clients, which
// have local regions, need to also have the keys in order for the ops
// task to do its work. For this reason, the edge clients must also
// keep all keys and values in it's locally scoped region, thus its
// vm must be as large as the data store (ie server) vms.

// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 

// one verify thread per datastore (but not accessor) vm to verify each vm's view
THREADGROUP verifyThreads 
            totalThreads = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            totalVMs     = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf;

// accessorThreads are all threads in the accessor VMs -1 (for the accessor)
THREADGROUP edgeThreads 
            totalThreads = fcn "(${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}) - 1" ncf
            totalVMs     = fcn "(${edgeHosts} * ${edgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"edge\", 
                                ${edgeHosts} * ${edgeVMsPerHost}, true)" ncf;

// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP bridgeThreads 
            totalThreads = fcn (${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}) 
                               - (${bridgeHosts} * ${bridgeVMsPerHost}) ncf  
            totalVMs     = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf;
                                
// one thread from an accessor VM (it's the only thread not mapped to a thread group at this point)
THREADGROUP controllerThread totalThreads = 1 totalVMs = 1;                                


hydra.RegionPrms-names              = accessorRegion         dataStoreRegion;
hydra.RegionPrms-regionName         = testRegion             testRegion;
hydra.RegionPrms-scope              = local                  ack;
hydra.RegionPrms-poolName           = edgeDescript           none;
hydra.RegionPrms-dataPolicy         = default                replicate;
hydra.RegionPrms-cacheListeners 	= util.SilenceListener,	 util.SilenceListener;

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy = ${redundancy};
hydra.PoolPrms-pingInterval           = 400;
hydra.PoolPrms-loadConditioningInterval = 5000;

// define the bridge servers
hydra.BridgePrms-names                = bridge;
	
parReg.ParRegPrms-numberOfDataStore = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf;

STARTTASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = StartTask_initialize;

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_HA_dataStoreInitialize
             threadGroups = bridgeThreads
             runMode = always;

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_HA_accessorInitialize
             threadGroups = edgeThreads, controllerThread;

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_loadRegion
             threadGroups = edgeThreads, controllerThread
             batch;
             
INITTASK         taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_waitForEventsReceival
             threadGroups = edgeThreads,bridgeThreads, controllerThread;             

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_verifyRegionSize
             threadGroups = verifyThreads
             batch;
                                    
 
TASK         taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_doFunctionExecution
             threadGroups = edgeThreads;
             
TASK         taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_stopStartVms
             threadGroups = controllerThread;
 

CLOSETASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = verifyThreads
             batch;
                                    

hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 600;

hydra.Prms-clientShutdownHook = parReg.execute.ExecutionAndColocationTest shutdownHook;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

getInitialImage.InitImagePrms-useReplicatedRegions=true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

parReg.ParRegPrms-numVMsToStop = RANGE 1 ${numVMsToStop} EGNAR;
util.StopStartPrms-stopModes = ONEOF MEAN_EXIT MEAN_KILL NICE_EXIT NICE_KILL FOENO;
parReg.ParRegPrms-highAvailability = true;
           
hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar;

