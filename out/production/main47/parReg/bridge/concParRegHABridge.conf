hydra.Prms-testRequirement = "Test high availability of partitioned regions with a variety of operations with validation and concurrent execution";
hydra.Prms-testDescription = "
With a variety of accessor and data host VMs, randomly kill ${numVMsToStop} VMs at
a time, then bring it back and verify the data.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;
INCLUDE $JTESTS/parReg/concParRegHA.inc;

THREADGROUP dataStoreThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP accessorThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_prepareForValidation
              connPool.ConnPoolPrms-sleepSec = 60
              threadGroups = dataStoreThreads;
CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_validate
              threadGroups = dataStoreThreads;

parReg.ParRegPrms-entryOperations = ONEOF add add putAll putAll update get destroy invalidate
                                          putIfAbsent remove replaceNoInval replaceOldNoInval FOENO;
parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names              = clientRegion          emptyClientRegion     thinClientRegion                dataStoreRegion  accessorRegion;
hydra.RegionPrms-regionName         = testRegion            testRegion            testRegion                      testRegion       testRegion;
hydra.RegionPrms-scope              = local                 local                 local                           default          default;
hydra.RegionPrms-poolName           = edgeDescript          edgeDescript          edgeDescript                    none             none;
hydra.RegionPrms-dataPolicy         = default               empty                 default                         partition        partition;
hydra.RegionPrms-cacheListeners     = util.SilenceListener, util.SilenceListener, util.SilenceListener,           hct.BridgeEventListener;
hydra.RegionPrms-evictionAttributes = none,                 none,                 lruEntryCount 100 localDestroy, none             none;
hydra.RegionPrms-partitionName      = none                  none                  none                            prDataStore      prAccessor;

hydra.PartitionPrms-names           = prDataStore   prAccessor;
hydra.PartitionPrms-localMaxMemory  = default       0;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

parReg.ParRegPrms-numEmptyClients = ${numEmptyClients};
parReg.ParRegPrms-numThinClients = ${numThinClients};
parReg.ParRegPrms-numberOfAccessors = ${numAccessors};

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy   = ${redundantCopies};
hydra.PoolPrms-loadConditioningInterval     = 5000;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


parReg.ParRegPrms-bridgeOrderingWorkaround = ONEOF uniqueKeys registerInterest FOENO;
 
