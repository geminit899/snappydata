hydra.Prms-testRequirement = "Test high availability of partitioned regions with a variety of operations with careful validation and serial execution in a bridge configuration";
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion and carefully
validates for correctness. The data store for the partitioned region is spread
across all VMs. The test uses serial round robin; the first thread
in the round does random operation(s), then stops and restarts
the other client VMs, then all other threads in the round verify their view of 
the operation. After the last thread in the round verifies, it then becomes the 
first in the next round, thus the thread doing the random operation changes for 
each round.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;
INCLUDE $JTESTS/parReg/serialParRegHA.inc;

THREADGROUP dataStoreThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP accessorThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_prepareForValidation
              connPool.ConnPoolPrms-sleepSec = 60
              threadGroups = dataStoreThreads;
CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_validate
              threadGroups = dataStoreThreads;

// remove getNew; no loader available in bridge
parReg.ParRegPrms-entryOperations = ONEOF add add putAll putAll update get destroy invalidate
                                          putIfAbsent remove replaceNoInval replaceOldNoInval FOENO; 
parReg.ParRegPrms-upperThreshold = 1000;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy destroyPercent10 destroyPercent50 destroyPercent75 
                                                   remove remove remove remove FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add putAll putIfAbsentAsCreate FOENO;
parReg.ParRegPrms-numPutAllNewKeys = useThreshold;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 0 100 EGNAR;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names              = clientRegion          emptyClientRegion     thinClientRegion                dataStoreRegion  accessorRegion;
hydra.RegionPrms-regionName         = testRegion            testRegion            testRegion                      testRegion       testRegion;
hydra.RegionPrms-scope              = local                 local                 local                           default          default;
hydra.RegionPrms-poolName           = edgeDescript          edgeDescript          edgeDescript                    none             none;
hydra.RegionPrms-dataPolicy         = default               empty                 default                         partition        partition;
hydra.RegionPrms-cacheListeners     = util.SilenceListener, util.SilenceListener, util.SilenceListener,           hct.BridgeEventListener;
hydra.RegionPrms-evictionAttributes = none,                 none,                 lruEntryCount 100 localDestroy, none             none;
hydra.RegionPrms-partitionName      = none                  none                  none                            prDataStore      prAccessor;

hydra.PartitionPrms-names           = prDataStore   prAccessor;
hydra.PartitionPrms-localMaxMemory  = default       0;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

parReg.ParRegPrms-numEmptyClients = ${numEmptyClients};
parReg.ParRegPrms-numThinClients = ${numThinClients};
parReg.ParRegPrms-numberOfAccessors = ${numAccessors};

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy   = ${redundantCopies};
hydra.PoolPrms-loadConditioningInterval     = 5000;

// define the bridge servers
hydra.BridgePrms-names                = bridge;

