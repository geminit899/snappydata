hydra.Prms-testRequirement = "Test high availability of partitioned regions with a variety of operations with validation and concurrent execution";
hydra.Prms-testDescription = "
With a variety of accessor and data host VMs, randomly kill ${numVMsToStop} VMs at
a time, then bring it back and verify the data.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask;

INITTASK     taskClass   = util.PRObserver  taskMethod = initialize
             runMode = once
             threadGroups = dataStoreThreads;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_HA_initializeDataStore
             runMode = once
             threadGroups = dataStoreThreads;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initializeWithClientCache
             runMode = once 
             threadGroups = accessorThreads;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_HA_reinitializeWithClientCache
             runMode = dynamic
             threadGroups = accessorThreads;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_HA_reinitializeDataStore
             threadGroups = dataStoreThreads
             runMode = dynamic;

INITTASK     taskClass   =  parReg.ParRegTest  taskMethod = HydraTask_waitForMyStartupRecovery
             threadGroups = dataStoreThreads;

// maxThreads of 1 means only one thread will be running the HAController at a time
TASK         taskClass   = parReg.ParRegTest  taskMethod = HydraTask_HAController
             threadGroups = dataStoreThreads, accessorThreads
             maxThreads = 1;

TASK         taskClass   = parReg.ParRegTest  taskMethod = HydraTask_HADoEntryOps
             threadGroups = dataStoreThreads, accessorThreads;

CLOSETASK    taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
             threadGroups = dataStoreThreads;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 31536000;  // don't let hydra terminate based on time
hydra.Prms-maxResultWaitSec = 1020;  // 17 minutes to avoid timeouts on slow machines
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

// this is the granularity for pausing
util.TestHelperPrms-minTaskGranularitySec = 10;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)
parReg.ParRegPrms-entryOperations = ONEOF add putAll putIfAbsent remove replaceNoInval replaceOldNoInval getNew getNew update invalidate get destroy FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsentAsCreate FOENO;
parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;

parReg.ParRegPrms-secondsToRun = 1800; // this is the time for the whole run
parReg.ParRegPrms-numVMsToStop = ${numVMsToStop};
util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
parReg.ParRegPrms-highAvailability = true;

THREADGROUP dataStoreThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP accessorThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_prepareForValidation
              connPool.ConnPoolPrms-sleepSec = 60
              threadGroups = dataStoreThreads;
CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_validate
              threadGroups = dataStoreThreads;

// lynn - remove invalidates to workaround bug 35303; remove this line when 35303 is fixed
parReg.ParRegPrms-entryOperations = ONEOF add add putAll putAll update get destroy 
                                          putIfAbsent remove replaceNoInval replaceOldNoInval FOENO;
parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.CachePrms-useDeclarativeXmlFile = true;
hydra.Prms-useFixedRandomInMaster= true;

// define the edge clients
hydra.ClientCachePrms-names                 = clientCache;
hydra.ClientCachePrms-defaultPoolName       = defaultPool;

hydra.ClientRegionPrms-names                = clientRegion           emptyClientRegion      thinClientRegion;
hydra.ClientRegionPrms-regionName           = testRegion             testRegion             testRegion;
hydra.ClientRegionPrms-clientRegionShortcut = CACHING_PROXY          PROXY                  CACHING_PROXY_HEAP_LRU;
hydra.ClientRegionPrms-cacheListeners       = util.SilenceListener,  util.SilenceListener,  util.SilenceListener;

hydra.PoolPrms-names                  = defaultPool;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy   = ${redundantCopies};
hydra.PoolPrms-loadConditioningInterval = 5000;

// define the bridge servers
hydra.BridgePrms-names                = bridge;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names              = dataStoreRegion          accessorRegion;
hydra.RegionPrms-partitionName      = prDataStore              prAccessor;
hydra.RegionPrms-regionName         = testRegion;
hydra.RegionPrms-scope              = default;
hydra.RegionPrms-dataPolicy         = partition;
hydra.RegionPrms-cacheListeners     = hct.BridgeEventListener;

hydra.PartitionPrms-names           = prDataStore              prAccessor;
hydra.PartitionPrms-localMaxMemory  = default                  0;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

parReg.ParRegPrms-numEmptyClients = ${numEmptyClients};
parReg.ParRegPrms-numThinClients = ${numThinClients};
parReg.ParRegPrms-numberOfAccessors = ${numAccessors};

parReg.ParRegPrms-bridgeOrderingWorkaround = ONEOF uniqueKeys registerInterest FOENO;
 
