hydra.Prms-testRequirement = "Test partitioned regions with a variety of operations with 
careful validation and concurrent execution in a bridge configuration";
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion and carefully
validates for correctness. The data store for the partitioned region is spread
across all bridge servers. 
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = bridgeThreads;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initializeWithClientCache
             threadGroups = edgeThreads;

TASK         taskClass   = parReg.ParRegTest  taskMethod = HydraTask_doConcOpsAndVerify
             threadGroups = edgeThreads, bridgeThreads;

CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_prepareForValidation
              connPool.ConnPoolPrms-sleepSec = 60
              threadGroups = bridgeThreads;
CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_validate
              threadGroups = bridgeThreads;

CLOSETASK   taskClass   = parReg.ParRegTest  taskMethod = HydraTask_prepareForValidation
            threadGroups = bridgeThreads;
    
CLOSETASK   taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
            threadGroups = bridgeThreads;
      
CLOSETASK   taskClass   = parReg.ParRegTest  taskMethod = HydraTask_validatePR;

hydra.GemFirePrms-stopSystemsAfterTest = true;

// parReg.ParRegPrms-secondsToRun determines the running length rather than 
// totalTaskTimeSec because of the test's pausing scheme; without this the
// test could hang 
hydra.Prms-totalTaskTimeSec = 31536000;  
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 50 100 500 1000 2500 5000 FOENO;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = true;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = 45;

// lynn - local destroy not supported for partitioned regions for Congo
// lynn - local invalidate not supported for partitioned regions for Congo
// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations

// to avoid 35303, remove invalidate
parReg.ParRegPrms-entryOperations = ONEOF add putAll putIfAbsentAsCreate update get destroy putIfAbsent
                                          remove 
                                          replaceNoInval replaceAsUpdate replaceAsNoop
                                          replaceOldNoInval replaceOldAsUpdate replaceOldAsNoop FOENO;
parReg.ParRegPrms-upperThreshold = 1000;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThreshold = 10;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add putAll putIfAbsentAsCreate FOENO;
// don't use "useThreshold" for numPutAllNewKeys because the test is concurrent, and if all 
// threads did a large putAll, the region size would go way over the upperThreshold
parReg.ParRegPrms-numPutAllNewKeys = 1;  
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 0 200 EGNAR;

parReg.ParRegPrms-secondsToRun = 1200;

hydra.ClientCachePrms-names     = clientCache;
hydra.ClientCachePrms-defaultPoolName  = defaultPool;

// define the default pool (to be used for all regions in the edge client)
hydra.PoolPrms-names                  = defaultPool;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy   = ${redundantCopies};
hydra.PoolPrms-loadConditioningInterval = 5000;

hydra.ClientRegionPrms-names                = clientRegion    emptyClientRegion    thinClientRegion;
hydra.ClientRegionPrms-clientRegionShortcut = CACHING_PROXY   PROXY                CACHING_PROXY_HEAP_LRU;
hydra.ClientRegionPrms-regionName           = testRegion;
hydra.ClientRegionPrms-cacheListeners       = util.SilenceListener;

// define the bridge servers
hydra.BridgePrms-names                = bridge;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names              = dataStoreRegion  accessorRegion;
hydra.RegionPrms-partitionName      = prDataStore      prAccessor;
hydra.RegionPrms-regionName         = testRegion;
hydra.RegionPrms-dataPolicy         = partition;
hydra.RegionPrms-cacheListeners     = hct.BridgeEventListener;

hydra.PartitionPrms-names           = prDataStore   prAccessor;
hydra.PartitionPrms-localMaxMemory  = default       0;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

parReg.ParRegPrms-numEmptyClients = ${numEmptyClients};
parReg.ParRegPrms-numThinClients = ${numThinClients};
parReg.ParRegPrms-numberOfAccessors = ${numAccessors};

parReg.ParRegPrms-bridgeOrderingWorkaround = ${bridgeOrderingWorkaround};

