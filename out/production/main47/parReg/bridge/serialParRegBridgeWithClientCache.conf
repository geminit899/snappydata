hydra.Prms-testRequirement = "Test partitioned regions with a variety of operations with careful validation and serial execution in a bridge configuration";
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion and carefully
validates for correctness. The data store for the partitioned region is spread
across all VMs. The test uses serial round robin; the first thread
in the round does a random operation, then all other threads in the round
verify their view of the operation. After the last thread in the round verifies,
it then becomes the first in the next round, thus the thread doing the random
operation changes for each round. 
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = bridgeThreads;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initializeWithClientCache
             threadGroups = edgeThreads;

TASK         taskClass   = parReg.ParRegTest  taskMethod = HydraTask_doRROpsAndVerify
             threadGroups = bridgeThreads, edgeThreads;

CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_prepareForValidation
              connPool.ConnPoolPrms-sleepSec = 60
              threadGroups = bridgeThreads;
CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_validate
              threadGroups = bridgeThreads;

CLOSETASK   taskClass   = parReg.ParRegTest  taskMethod = HydraTask_prepareForValidation
            threadGroups = bridgeThreads;
    
CLOSETASK   taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
            threadGroups = bridgeThreads;
      
CLOSETASK   taskClass   = parReg.ParRegTest  taskMethod = HydraTask_validatePR;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;
hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;
hydra.Prms-useFixedRandomInMaster= true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;

// thin ClientRegion are clients with eviction to keep the client small
hydra.ClientCachePrms-names    = clientCache;
hydra.ClientCachePrms-defaultPoolName = defaultPool;

// define the default pool for the edge clients
hydra.PoolPrms-names                  = defaultPool;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy   = ${redundantCopies};
hydra.PoolPrms-loadConditioningInterval = 5000;

hydra.ClientRegionPrms-names                = clientRegion          emptyClientRegion     thinClientRegion;
hydra.ClientRegionPrms-clientRegionShortcut = CACHING_PROXY         PROXY                 CACHING_PROXY_HEAP_LRU;
hydra.ClientRegionPrms-regionName           = testRegion;
hydra.ClientRegionPrms-cacheListeners       = util.SilenceListener;

// define the bridge servers
hydra.BridgePrms-names                = bridge;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names              = dataStoreRegion  accessorRegion;
hydra.RegionPrms-partitionName      = prDataStore      prAccessor;
hydra.RegionPrms-regionName         = testRegion;
hydra.RegionPrms-dataPolicy         = partition;
hydra.RegionPrms-cacheListeners     = hct.BridgeEventListener;

hydra.PartitionPrms-names           = prDataStore   prAccessor;
hydra.PartitionPrms-localMaxMemory  = default       0;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

parReg.ParRegPrms-numEmptyClients = ${numEmptyClients};
parReg.ParRegPrms-numThinClients = ${numThinClients};
parReg.ParRegPrms-numberOfAccessors = ${numAccessors};
parReg.ParRegPrms-numOpsPerTask = 100;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)

// lynn - remove invalidates to workaround bug 35303; remove this line when 35303 is fixed
parReg.ParRegPrms-entryOperations = ONEOF add add putAll putAll update get destroy 
                                    putIfAbsent remove replaceNoInval replaceOldNoInval FOENO;
parReg.ParRegPrms-upperThreshold = 1000;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy destroyPercent10 destroyPercent50 destroyPercent75 
                                                   remove remove remove FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add putAll putIfAbsentAsCreate FOENO;
parReg.ParRegPrms-numPutAllNewKeys = useThreshold;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 0 100 EGNAR;

