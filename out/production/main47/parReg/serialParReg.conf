hydra.Prms-testRequirement = "Test partitioned regions with a variety of operations with careful validation and serial execution";
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion and carefully
validates for correctness. The data store for the partitioned region is spread
across all VMs. The test uses serial round robin; the first thread
in the round does a random operation, then all other threads in the round
verify their view of the operation. After the last thread in the round verifies,
it then becomes the first in the next round, thus the thread doing the random
operation changes for each round.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p.inc;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initialize
             runMode = always;

TASK         taskClass   = parReg.ParRegTest  taskMethod = HydraTask_doRROpsAndVerify;

CLOSETASK   taskClass   = parReg.ParRegTest  taskMethod = HydraTask_prepareForValidation;

CLOSETASK    taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance;

CLOSETASK   taskClass   = parReg.ParRegTest  taskMethod = HydraTask_validatePR;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion;
hydra.RegionPrms-regionName     = partitionedRegion;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = pr;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

parReg.ParRegPrms-numOpsPerTask = 100;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)
parReg.ParRegPrms-entryOperations = ONEOF add add add add update invalidate get destroy 
                                          putIfAbsent remove replaceNoInval replaceOldNoInval FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add putIfAbsentAsCreate FOENO;

// randomly choose to make this test run with off-heap memory
// @todo (lynng) RANDOMINCLUDE $JTESTS/memscale/offHeap_all.inc;
