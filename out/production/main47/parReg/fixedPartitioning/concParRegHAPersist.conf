INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

// all threads in subgroup A are accessorThreads, and all threads in subgroup B
// are in dataStoreThreads
THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
                   

STARTTASK    taskClass   = parReg.fixedPartitioning.FPRTxParRegTest taskMethod  = StartTask_initialize;

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask;

INITTASK     taskClass   = util.PRObserver  taskMethod = initialize
             runMode = once
             threadGroups = dataStoreThreads;

INITTASK     taskClass   = parReg.fixedPartitioning.FPRTxParRegTest  taskMethod = HydraTask_HA_initializeDataStore
             hydra.ConfigPrms-regionConfig = dataStoreRegion
             hydra.ConfigPrms-cacheConfig = cache
             runMode = once
             threadGroups = dataStoreThreads
             SEQUENTIAL;

INITTASK     taskClass   = parReg.fixedPartitioning.FPRTxParRegTest  taskMethod = HydraTask_HA_initializeAccessor
             hydra.ConfigPrms-regionConfig = accessorRegion
             hydra.ConfigPrms-cacheConfig = cache
             runMode = once
             threadGroups = accessorThreads;

INITTASK     taskClass   =  parReg.fixedPartitioning.FPRTxParRegTest  taskMethod = HydraTask_waitForStartupRecovery
             threadGroups = dataStoreThreads;    
             
INITTASK     taskClass   = parReg.fixedPartitioning.FPRTxParRegTest  taskMethod = HydraTask_HA_reinitializeAccessor
             threadGroups = accessorThreads
             runMode = dynamic;

INITTASK     taskClass   = parReg.fixedPartitioning.FPRTxParRegTest  taskMethod = HydraTask_HA_reinitializeDataStore
             threadGroups = dataStoreThreads
             runMode = dynamic;                                  

// maxThreads of 1 means only one thread will be running the HAController at a time
TASK         taskClass   = parReg.fixedPartitioning.FPRTxParRegTest  taskMethod = HydraTask_HAController
             threadGroups = dataStoreThreads, accessorThreads
             maxThreads = 1;

TASK         taskClass   = parReg.fixedPartitioning.FPRTxParRegTest  taskMethod = HydraTask_HADoEntryOps
             threadGroups = dataStoreThreads, accessorThreads;

CLOSETASK    taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
             threadGroups = dataStoreThreads;
             
CLOSETASK    taskClass   = parReg.fixedPartitioning.FPRTxParRegTest  taskMethod = HydraTask_verifyFixedPartitioning
             threadGroups = dataStoreThreads; 

hydra.RegionPrms-names          = dataStoreRegion  accessorRegion;
hydra.RegionPrms-regionName     = partitionedRegion       partitionedRegion;
hydra.RegionPrms-cacheListeners = util.SilenceListener,  util.SilenceListener;
hydra.RegionPrms-scope          = default          default;
hydra.RegionPrms-diskStoreName  = diskStore             none;
hydra.RegionPrms-cacheLoader    = none; // don't cause a write with a loader
hydra.RegionPrms-dataPolicy     = persistentPartition        partition;
hydra.RegionPrms-partitionName  = prDS             prAcc;                                                               

hydra.PartitionPrms-names              = prDS               prAcc;
hydra.PartitionPrms-redundantCopies    = ${redundantCopies};
hydra.PartitionPrms-localMaxMemory     = default            0;
hydra.PartitionPrms-totalNumBuckets    = 8                  8;
hydra.PartitionPrms-partitionResolver  = parReg.fixedPartitioning.RandomFixedPartitionResolver;
hydra.PartitionPrms-fixedPartitionName = quarters           none;

hydra.FixedPartitionPrms-names            = quarters;
hydra.FixedPartitionPrms-partitionNames   = Quarter1 Quarter2 Quarter3 Quarter4;
hydra.FixedPartitionPrms-partitionBuckets = 1         3        1        3;
hydra.FixedPartitionPrms-datastores       = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf;

hydra.DiskStorePrms-names = diskStore;
hydra.DiskStorePrms-queueSize = 20;
hydra.DiskStorePrms-timeInterval = 500;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 31536000;  // don't let hydra terminate based on time
hydra.Prms-maxResultWaitSec = 300;  
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

// this is the granularity for pausing
util.TestHelperPrms-minTaskGranularitySec = 10;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache;
hydra.CachePrms-searchTimeout   = 600;


// don't do writes in servers that can be killed
parReg.ParRegPrms-designateOps = true;
parReg.ParRegPrms-accessorOperations = ONEOF add putAll add putAll add putAll 
                                             getNew getNew update invalidate get 
                                             destroy FOENO; 
parReg.ParRegPrms-dataStoreOperations = ONEOF get get get get getNew FOENO; 
parReg.ParRegPrms-upperThreshold = 5000;
parReg.ParRegPrms-upperThresholdAccessorOperations = destroy;
parReg.ParRegPrms-upperThresholdDataStoreOperations = get;
parReg.ParRegPrms-lowerThreshold = 4500;
parReg.ParRegPrms-lowerThresholdAccessorOperations = ONEOF add putAll FOENO;
parReg.ParRegPrms-lowerThresholdDataStoreOperations = get;

parReg.ParRegPrms-entryOperations = notUsed;
parReg.ParRegPrms-lowerThresholdOperations = notUsed;
parReg.ParRegPrms-upperThresholdOperations = notUsed;
parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;
parReg.ParRegPrms-bridgeOrderingWorkaround = ONEOF registerInterest uniqueKeys FOENO;

parReg.ParRegPrms-secondsToRun = 300; // this is the time for the whole run
parReg.ParRegPrms-numVMsToStop = ${numVMsToStop};
parReg.ParRegPrms-localMaxMemory = RANGE 1 10 EGNAR;
util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
parReg.ParRegPrms-highAvailability = true;

