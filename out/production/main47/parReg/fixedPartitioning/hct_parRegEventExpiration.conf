hydra.Prms-testDescription = "This test is for verifying Fixed Partitioning of PRs with expiration (client server).";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;


THREADGROUP bridge 
            totalThreads = fcn (${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}) ncf  
            totalVMs     = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf;

THREADGROUP controlTTLDestroyThread            totalThreads = 1 clientNames = edge1; 
THREADGROUP controlIdleTODestroyThread         totalThreads = 1 clientNames = edge1; 
THREADGROUP controlTTLInvalThread              totalThreads = 1 clientNames = edge1;
THREADGROUP controlIdleTOInvalThread           totalThreads = 1 clientNames = edge1;
THREADGROUP customTTLDestroyThread             totalThreads = 1 clientNames = edge1; 
THREADGROUP customIdleTODestroyThread          totalThreads = 1 clientNames = edge1; 
THREADGROUP customTTLInvalThread               totalThreads = 1 clientNames = edge1;
THREADGROUP customIdleTOInvalThread            totalThreads = 1 clientNames = edge1;

STARTTASK    taskClass   = parReg.fixedPartitioning.FPRExpirationTest taskMethod  = StartTask_initialize;

INITTASK     taskClass   = parReg.fixedPartitioning.FPRExpirationTest taskMethod  = HydraTask_initServers
			threadGroups = bridge
			runMode = always
			SEQUENTIAL;
			
INITTASK     taskClass   = parReg.fixedPartitioning.FPRExpirationTest taskMethod  = HydraTask_initClients
			threadGroups = controlTTLDestroyThread, controlIdleTODestroyThread, controlTTLInvalThread, controlIdleTOInvalThread, default
			runMode = always;			
			

TASK         taskClass   = parReg.fixedPartitioning.FPRExpirationTest 
                taskMethod  = HydraTask_controlEntryTTLDestroy
                threadGroups = controlTTLDestroyThread;

TASK         taskClass   = parReg.fixedPartitioning.FPRExpirationTest 
                taskMethod  = HydraTask_controlEntryTTLInval
                threadGroups = controlTTLInvalThread;

TASK         taskClass   = parReg.fixedPartitioning.FPRExpirationTest 
                taskMethod  = HydraTask_controlEntryIdleTODestroy
                threadGroups = controlIdleTODestroyThread;

TASK         taskClass   = parReg.fixedPartitioning.FPRExpirationTest 
                taskMethod  = HydraTask_controlEntryIdleTOInval
                threadGroups = controlIdleTOInvalThread;
                
TASK         taskClass   = parReg.fixedPartitioning.FPRExpirationTest 
                taskMethod  = HydraTask_customEntryTTLDestroy
                threadGroups = customTTLDestroyThread;

TASK         taskClass   = parReg.fixedPartitioning.FPRExpirationTest 
                taskMethod  = HydraTask_customEntryTTLInval
                threadGroups = customTTLInvalThread;

TASK         taskClass   = parReg.fixedPartitioning.FPRExpirationTest 
                taskMethod  = HydraTask_customEntryIdleTODestroy
                threadGroups = customIdleTODestroyThread;

TASK         taskClass   = parReg.fixedPartitioning.FPRExpirationTest 
                taskMethod  = HydraTask_customEntryIdleTOInval
                threadGroups = customIdleTOInvalThread;  
                                         

hydra.RegionPrms-names                  = bridgeTTLDestroy  bridgeTTLInval  bridgeIdleTODestroy  bridgeIdleTOInval  bridgeCustomTTLDestroy  bridgeCustomTTLInval  bridgeCustomIdleTODestroy  bridgeCustomIdleTOInval    edgeTTLDestroy  edgeTTLInval  edgeIdleTODestroy  edgeIdleTOInval  edgeCustomTTLDestroy  edgeCustomTTLInval  edgeCustomIdleTODestroy  edgeCustomIdleTOInval;
hydra.RegionPrms-regionName             = TTLDestroy        TTLInval        IdleTODestroy        IdleTOInval        CustomTTLDestroy        CustomTTLInval        CustomIdleTODestroy        CustomIdleTOInval          TTLDestroy      TTLInval      IdleTODestroy      IdleTOInval      CustomTTLDestroy      CustomTTLInval      CustomIdleTODestroy      CustomIdleTOInval;
hydra.RegionPrms-poolName               = none              none            none                 none               none                    none                  none                       none                       edgeDescript;
hydra.RegionPrms-cacheListeners         = parReg.eviction.ParRegTTLDestroyListener, parReg.eviction.ParRegTTLInvalListener, parReg.eviction.ParRegIdleTODestroyListener, parReg.eviction.ParRegIdleTOInvalListener, parReg.eviction.ParRegCustomTTLDestroyListener, parReg.eviction.ParRegCustomTTLInvalListener, parReg.eviction.ParRegCustomIdleTODestroyListener, parReg.eviction.ParRegCustomIdleTOInvalListener,                                                                    
                                          parReg.eviction.ParRegTTLDestroyListener, parReg.eviction.ParRegTTLInvalListener, parReg.eviction.ParRegIdleTODestroyListener, parReg.eviction.ParRegIdleTOInvalListener, parReg.eviction.ParRegCustomTTLDestroyListener, parReg.eviction.ParRegCustomTTLInvalListener, parReg.eviction.ParRegCustomIdleTODestroyListener, parReg.eviction.ParRegCustomIdleTOInvalListener;
hydra.RegionPrms-statisticsEnabled      = true;
hydra.RegionPrms-customEntryIdleTimeout = none              none            none                 none               none                    none  parReg.eviction.ParRegCustomExpiry parReg.eviction.ParRegCustomExpiry none; 
hydra.RegionPrms-customEntryTimeToLive  = none              none            none                 none  parReg.eviction.ParRegCustomExpiry parReg.eviction.ParRegCustomExpiry  none           none                       none;    
hydra.RegionPrms-entryTimeToLive        = 420 destroy,      420 invalidate, none,                none,              none,                   none,                none,                       none,                      none;    
hydra.RegionPrms-entryIdleTimeout       = none,             none,           420 destroy,         420 invalidate,    none,                   none,                none,                       none,                      none;    
hydra.RegionPrms-dataPolicy             = partition         partition       partition            partition          partition               partition            partition                   partition                  normal;
hydra.RegionPrms-partitionName          = pr                pr              pr                   pr                 pr                      pr                   pr                          pr                         none;                                                                              

hydra.PartitionPrms-names              = pr;
hydra.PartitionPrms-redundantCopies    = 3;
hydra.PartitionPrms-localMaxMemory     = default;
hydra.PartitionPrms-totalNumBuckets    = 113;
hydra.PartitionPrms-partitionResolver  = parReg.fixedPartitioning.RandomFixedPartitionResolver;
hydra.PartitionPrms-fixedPartitionName = quarters;

hydra.FixedPartitionPrms-names            = quarters;
hydra.FixedPartitionPrms-partitionNames   = Quarter1 Quarter2 Quarter3 Quarter4;
hydra.FixedPartitionPrms-partitionBuckets = 1         3        1        3;
hydra.FixedPartitionPrms-datastores       = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf;


hydra.Prms-serialExecution = false;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript;
hydra.PoolPrms-minConnections        	   = 3;
hydra.PoolPrms-subscriptionEnabled 		   = true;
hydra.PoolPrms-threadLocalConnections      = true;
hydra.PoolPrms-readTimeout                 = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy      = 3;

// define the bridge servers
hydra.BridgePrms-names                = bridge;

hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 8;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;
util.TestHelperPrms-minTaskGranularitySec = 30;
hydra.Prms-totalTaskTimeSec = 30;
hydra.Prms-maxResultWaitSec = 1200;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

expiration.ExpirPrms-isBridgeClientConfiguration = true;
expiration.ExpirPrms-numClientVms = fcn ${edgeHosts} * ${edgeVMsPerHost} ncf;

