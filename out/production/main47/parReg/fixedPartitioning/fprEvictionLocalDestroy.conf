hydra.Prms-testDescription = "This test is for verifying Fixed Partitioning of PRs with eviction action Local Destroy.
The test uses a parent FPR and 3 colocated FPRs (one of which is a sub region). Each of the FPR have Eviction algorithm 
entryLRU, memLRU or heap LRU. The test verifes that each of the region do evict using local Destroy";


INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;                                          

hydra.VmPrms-extraVMArgs   = 
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx128m \", ${${A}Hosts}, true)"
                              ncf
                              ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx512m \", ${${B}Hosts}, true)"
                             ncf;


// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 

// one verify thread per accessor and datastore vm to verify each vm's view
THREADGROUP verifyThreads 
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost}) +
                                (${${B}Hosts} * ${${B}VMsPerHost})" ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost}) +
                                (${${B}Hosts} * ${${B}VMsPerHost})" ncf;

// accessorThreads are all threads in the accessor VMs
// thread, minus one thread per accessor VM for the verifyThreads
THREADGROUP accessorVMThreads 
            totalThreads = fcn (${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM})
                               - (${${A}Hosts} * ${${A}VMsPerHost}) ncf  
            totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\", 
                                ${${A}Hosts} * ${${A}VMsPerHost}, true)" ncf;

// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP dataStoreVMThreads 
            totalThreads = fcn (${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}) 
                               - (${${B}Hosts} * ${${B}VMsPerHost}) ncf  
            totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", 
                                ${${B}Hosts} * ${${B}VMsPerHost}, true)" ncf;
                                                               
                                                               

STARTTASK    taskClass     = parReg.fixedPartitioning.FPRExpirationTest  taskMethod = StartTask_initialize;

INITTASK     taskClass     = parReg.fixedPartitioning.FPREvictionTest  taskMethod = HydraTask_p2p_dataStoreInitialize
	     hydra.ConfigPrms-cacheConfig = cache
             threadGroups = dataStoreVMThreads
             runMode = always
             SEQUENTIAL;
             
INITTASK     taskClass     = parReg.fixedPartitioning.FPREvictionTest  taskMethod = HydraTask_p2p_accessorInitialize
	     hydra.ConfigPrms-cacheConfig = cache
             threadGroups = accessorVMThreads;
             			              
INITTASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_updateBBWithPartitionInfo
             threadGroups = verifyThreads
			 ;	
 
TASK         taskClass     = parReg.fixedPartitioning.FPREvictionTest  taskMethod = HydraTask_populateRegions
             threadGroups = accessorVMThreads; 
                                                                                                        
CLOSETASK    taskClass     = parReg.fixedPartitioning.FPREvictionTest  taskMethod  = HydraTask_verifyEvictionLocalDestroy
             threadGroups = verifyThreads
			 ;             

hydra.Prms-totalTaskTimeSec = 600; 
hydra.Prms-maxResultWaitSec = 900;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache;
hydra.CachePrms-searchTimeout   = 600;
hydra.CachePrms-resourceManagerName = manager;

hydra.RegionPrms-names          = dataStoreRegion1  dataStoreRegion2  dataStoreRegion3  accessorRegion1  accessorRegion2 accessorRegion3    rootRegion          aRootRegion      subRegion         aSubRegion;
hydra.RegionPrms-regionName     = testRegion1       testRegion2       testRegion3       testRegion1      testRegion2     testRegion3        rootRegion          rootRegion       subRegion         subRegion;
hydra.RegionPrms-cacheListeners = util.SilenceListener;
hydra.RegionPrms-scope          = default           default           default           default          default         default            distributedAck      distributedAck   default           default;
hydra.RegionPrms-evictionAttributes = lruEntryCount 10 localDestroy, lruMemorySize 30 default localDestroy, lruHeapPercentage default localDestroy, lruEntryCount 30 localDestroy, lruMemorySize 10 default localDestroy, lruHeapPercentage default localDestroy, none, none, lruHeapPercentage default localDestroy, lruHeapPercentage default localDestroy;
hydra.RegionPrms-dataPolicy     = partition         partition         partition         partition        partition       partition          replicate           replicate        partition         partition;
hydra.RegionPrms-partitionName  = prDS1             prDS2             prDS3             prAcc1           prAcc2          prAcc3             none                none             prDSSub           prAccSub;                                                              
 
hydra.PartitionPrms-names              = prDS1      prDS2        prDS3       prAcc1      prAcc2      prAcc3      prDSSub      prAccSub;
hydra.PartitionPrms-redundantCopies    = ${redundantCopies};
hydra.PartitionPrms-localMaxMemory     = default    30           default     0           0           0           default      0;
hydra.PartitionPrms-totalNumBuckets    = 8;
hydra.PartitionPrms-partitionResolver  = parReg.fixedPartitioning.NodePartitionResolver  parReg.fixedPartitioning.NodePartitionResolver;
hydra.PartitionPrms-fixedPartitionName = quarters   none;

hydra.PartitionPrms-colocatedWith      = none       testRegion1  testRegion2 none        testRegion1 testRegion2 testRegion1  testRegion1;
 
hydra.FixedPartitionPrms-names            = quarters;
hydra.FixedPartitionPrms-partitionNames   = Quarter1 Quarter2 Quarter3 Quarter4;
hydra.FixedPartitionPrms-partitionBuckets = 1         3        1        3;
hydra.FixedPartitionPrms-datastores       = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf;

hydra.ResourceManagerPrms-names = manager;
hydra.ResourceManagerPrms-evictionHeapPercentage = 25;
hydra.ResourceManagerPrms-criticalHeapPercentage = 99;             
             
hydra.VmPrms-extraVMArgsSUN += "-XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=10";

hydra.VmPrms-extraVMArgsJRockit += -Xgc:gencon;
hydra.VmPrms-extraVMArgsJRockit += -XXgcTrigger90;

hydra.VmPrms-extraVMArgsIBM += "-Xgcpolicy:gencon -verbose:sizes";  