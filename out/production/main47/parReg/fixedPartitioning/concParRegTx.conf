hydra.Prms-testDescription = "This test is FPR version of the tx/concParReg test. The test uses fixed partitioning.
The region is created programatically and ops are done in transaction mode.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p.inc;

STARTTASK    taskClass   = parReg.fixedPartitioning.FPRExpirationTest taskMethod  = StartTask_initialize;

INITTASK     taskClass   = parReg.fixedPartitioning.FPRTxParRegTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-cacheConfig = cache
             hydra.ConfigPrms-regionConfig = dataStoreRegion 
             SEQUENTIAL;

TASK         taskClass   = parReg.fixedPartitioning.FPRTxParRegTest  taskMethod = HydraTask_doConcOpsAndVerify;

CLOSETASK    taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance;

CLOSETASK    taskClass   = parReg.fixedPartitioning.FPRTxParRegTest  taskMethod = HydraTask_verifyFixedPartitioning;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 31536000;  // don't let hydra terminate based on time    
hydra.Prms-maxResultWaitSec = 1020;
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 50 100 500 1000 2500 5000 FOENO;

util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache;
hydra.CachePrms-searchTimeout   = 600;

util.TestHelperPrms-minTaskGranularitySec = ONEOF 15 30 45 60 FOENO;

// lynn - local destroy not supported for partitioned regions for Congo
// lynn - local invalidate not supported for partitioned regions for Congo
// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
parReg.ParRegPrms-entryOperations = ONEOF add add getNew getNew update invalidate get destroy FOENO; 
parReg.ParRegPrms-upperThreshold = 5000; //Aneesh: Keep it high as else the current validations may fail for FPRs
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy FOENO;
parReg.ParRegPrms-lowerThreshold = 4500; //Aneesh: Keep it high only as else the current validations may fail for FPRs
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add getNew FOENO;

parReg.ParRegPrms-secondsToRun = 300;

hydra.RegionPrms-names          = dataStoreRegion;
hydra.RegionPrms-regionName     = testRegion;
hydra.RegionPrms-cacheListeners = util.SilenceListener;
hydra.RegionPrms-scope          = default;
hydra.RegionPrms-cacheLoader    = none; // don't cause a write with a loader
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = prDS;                                                               

hydra.PartitionPrms-names              = prDS;
hydra.PartitionPrms-redundantCopies    = ${redundantCopies};
hydra.PartitionPrms-localMaxMemory     = default;
hydra.PartitionPrms-totalNumBuckets    = 113;
hydra.PartitionPrms-partitionResolver  = parReg.fixedPartitioning.RandomFixedPartitionResolver;
hydra.PartitionPrms-fixedPartitionName = quarters;

hydra.FixedPartitionPrms-names            = quarters;
hydra.FixedPartitionPrms-partitionNames   = Quarter1 Quarter2 Quarter3 Quarter4;
hydra.FixedPartitionPrms-partitionBuckets = 1         3        1        3;
hydra.FixedPartitionPrms-datastores       = fcn "(${peerHosts} * ${peerVMsPerHost})" ncf;

// enable transactions, supported in ParRegTest.doEntryOperations()
getInitialImage.InitImagePrms-useTransactions = true;