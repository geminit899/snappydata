hydra.Prms-testDescription = "This test is for testing Fixed Partitioning of Partitioned Regions in client server configuration.
This test create the FPR programmatically.
Fixed partition resolver is set as partition attribute.
The test uses accessors (which have localMaxMemory 0 and no Fixed Partition Attributes (FPA) set), also datastore with and without FPAs set.
FPAs have different partition num buckets for different partitions but there is maximum one primary partition per member.
The test uses region operations and operations using function execution. Test also uses random onRegion function executions - with/without filter, args, result collector.
The test verifies the number of primaries of buckets, data consistency across buckets, ops validations, primary & secondary Fixed Partitioning, and partition-num-buckets.
The test also verifies that the rebalancing operation does not affect Fixed partitioning";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;


// this test uses tasks similar to getInitialImage tests to load the region,
// do operations and verify the region contents 

// one verify thread per datastore (but not accessor) vm to verify each vm's view
THREADGROUP verifyThreads 
            totalThreads = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            totalVMs     = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf;

// accessorThreads are all threads in the accessor VMs 
THREADGROUP accessorVMThreads 
            totalThreads = fcn "(${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM})" ncf
            totalVMs     = fcn "(${edgeHosts} * ${edgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"edge\", 
                                ${edgeHosts} * ${edgeVMsPerHost}, true)" ncf;

// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP dataStoreVMThreads 
            totalThreads = fcn (${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}) 
                               - (${bridgeHosts} * ${bridgeVMsPerHost}) ncf  
            totalVMs     = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf;                              

parReg.ParRegPrms-partitionResolverData = BB;
parReg.ParRegPrms-isWithRoutingResolver = true; 

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript;
hydra.PoolPrms-minConnections        	   = 2;
hydra.PoolPrms-subscriptionEnabled 		   = true;
hydra.PoolPrms-threadLocalConnections      = true;
hydra.PoolPrms-readTimeout                 = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy        = ${redundancy};

// define the bridge servers
hydra.BridgePrms-names                = bridge;

hydratest.grid.GridPrms-functions =
          parReg.execute.RegionOperationsFunction
          ;

STARTTASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = StartTask_initialize;

INITTASK     taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_HA_dataStoreInitialize
             hydra.ConfigPrms-cacheConfig = cache
             threadGroups = dataStoreVMThreads
             runMode = always
             SEQUENTIAL;

INITTASK     taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_HA_accessorInitialize
             hydra.ConfigPrms-cacheConfig = cache
             threadGroups = accessorVMThreads;
             
INITTASK     taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_registerInterest
             threadGroups = accessorVMThreads;
             
INITTASK     taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_initRegisterFunction
             threadGroups = verifyThreads, accessorVMThreads
             ;
             
INITTASK     taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_loadRegions
             threadGroups = accessorVMThreads
             batch
             ;
             
INITTASK     taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_putKeySetInBB
             threadGroups = verifyThreads
			 ;             

INITTASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_executeFunctionAllKeys
             threadGroups = accessorVMThreads
             ;             
 
TASK         taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_doOps
             threadGroups = accessorVMThreads;
             
TASK         taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_doRandomFuncExec
             threadGroups = accessorVMThreads;             
             
TASK         taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_doFunctionExecution
             threadGroups = accessorVMThreads;            

CLOSETASK    taskClass   = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_logLocalSize
             threadGroups = dataStoreVMThreads;

CLOSETASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyPrimaries
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyBucketCopies
             threadGroups = verifyThreads
             ;
             
CLOSETASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyFixedPartitioning
             threadGroups = verifyThreads
             ;             

CLOSETASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = verifyThreads
             ;             
           

hydra.RegionPrms-names          = dataStoreRegion  accessorRegion;
hydra.RegionPrms-poolName       = none             edgeDescript;
hydra.RegionPrms-regionName     = testRegion       testRegion;
hydra.RegionPrms-cacheListeners = util.SilenceListener,  util.SilenceListener;
hydra.RegionPrms-scope          = default          local;
hydra.RegionPrms-dataPolicy     = partition        normal;
hydra.RegionPrms-partitionName  = prDS             none;                                                               
                
hydra.PartitionPrms-names              = prDS ;
hydra.PartitionPrms-redundantCopies    = ${redundantCopies} ;
hydra.PartitionPrms-localMaxMemory     = default;
hydra.PartitionPrms-totalNumBuckets    = 113 ;
hydra.PartitionPrms-partitionResolver  = parReg.fixedPartitioning.NodePartitionResolver ;
hydra.PartitionPrms-fixedPartitionName = quarters ;

hydra.FixedPartitionPrms-names            = quarters;
hydra.FixedPartitionPrms-partitionNames   = Quarter1 Quarter2 Quarter3 Quarter4;
hydra.FixedPartitionPrms-partitionBuckets = 1         3        1        3;
hydra.FixedPartitionPrms-datastores       = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf;

hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 1200;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache;
hydra.CachePrms-searchTimeout   = 600;

hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar; 
