hydra.Prms-testDescription = "This test is for verifying FPR working fine with normal PRs in peer to peer configuration in rebalancing scenario. The FPRs are colocated with Resolver mentioned in the
partition attribute. Also the members can have maximum of 2 primary partitions. 
A new member is brought up and rebalancing initiated. It is verified that the FPRs does not participate in rebalancing
but normal PRs do respond to rebalancing.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;                                          

hydra.VmPrms-extraVMArgs   = 
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx512m -Xmx512m\", ${${A}Hosts}, true)"
                              ncf
                              ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms512m -Xmx512m \", ${${B}Hosts}, true)"
                             ncf;
                             
THREADGROUP verifyThreads totalThreads = fcn "${peerVMsPerHost} * ${peerHosts}" ncf
                          totalVMs = fcn "${peerVMsPerHost} * ${peerHosts}" ncf;      
                          
// VM to control the CacheServer stop/start
THREADGROUP rebalance
    totalThreads = fcn 
                   ${rebalanceHosts} * ${rebalanceVMsPerHost} * ${rebalanceThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"rebalance\", ${rebalanceHosts}, true)"
                   ncf;                                                 

STARTTASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = StartTask_initialize;

INITTASK     taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_p2p_dataStoreInitialize
	     hydra.ConfigPrms-cacheConfig = cache             
	     threadGroups = verifyThreads
             runMode = always
             SEQUENTIAL;            

INITTASK     taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_loadRegions
             threadGroups = verifyThreads, default
             batch
             ;                         

INITTASK     taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

INITTASK     taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_verifyRegionSize
             threadGroups = verifyThreads
             ;       
			           
INITTASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_updateBBWithPartitionInfo
             threadGroups = verifyThreads
			 ;	
 
TASK         taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_doOps
             threadGroups = verifyThreads, default; 
             
TASK         taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_doFunctionExecution
             threadGroups = verifyThreads, default;              
                                                 
                                
CLOSETASK    taskClass   = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_logLocalSize
             threadGroups = verifyThreads;               

CLOSETASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyPrimaries
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyBucketCopies
             threadGroups = verifyThreads
             ;

CLOSETASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = verifyThreads
             ;
             
// late region creation by rebalancer (to create work)
CLOSETASK     taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod = HydraTask_p2p_accessorInitialize
              hydra.ConfigPrms-cacheConfig = cache
              threadGroups = rebalance
              ;    
              
CLOSETASK    taskClass   = rebalance.RebalanceTest taskMethod = HydraTask_rebalanceTask
             rebalance.RebalancePrms-verifyBalance = true
             threadGroups = rebalance
             ;                       
             
CLOSETASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyFixedPartitioning
             threadGroups = verifyThreads
             ;     
                                              
CLOSETASK    taskClass     = parReg.fixedPartitioning.FixedPartitioningTest  taskMethod  = HydraTask_verifyRebalanceBehavior
             threadGroups = rebalance
             ;             

hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 400;

rebalance.RebalancePrms-resourceObserver = rebalance.RebalanceResourceObserver;

hydra.RegionPrms-names          = dataStoreRegion1     dataStoreRegion2  dataStoreRegion3  dataStoreRegion4  accessorRegion1  accessorRegion2  accessorRegion3  accessorRegion4;
hydra.RegionPrms-regionName     = FPR_1                FPR_2             normalPR_1        normalPR_2        FPR_1            FPR_2            normalPR_1       normalPR_2;
hydra.RegionPrms-cacheListeners = util.SilenceListener;
hydra.RegionPrms-scope          = default              default           default           default           default          default          default          default;
hydra.RegionPrms-dataPolicy     = partition            partition         partition         partition         partition        partition        partition        partition;
hydra.RegionPrms-partitionName  = prDS1                prDS2             prDS3             prDS4             prAcc1           prAcc2           prAcc3           prAcc4;                                                               
                
hydra.PartitionPrms-names              = prDS1         prDS2             prDS3             prDS4             prAcc1           prAcc2           prAcc3           prAcc4;
hydra.PartitionPrms-redundantCopies    = ${redundantCopies};
hydra.PartitionPrms-localMaxMemory     = default       default           default           default           0                0                default          default;
hydra.PartitionPrms-totalNumBuckets    = 113           113               113               113               113              113              113              113;
hydra.PartitionPrms-partitionResolver  = parReg.fixedPartitioning.NodePartitionResolver parReg.fixedPartitioning.NodePartitionResolver parReg.fixedPartitioning.NodePartitionResolver parReg.fixedPartitioning.NodePartitionResolver parReg.fixedPartitioning.NodePartitionResolver parReg.fixedPartitioning.NodePartitionResolver none none;
hydra.PartitionPrms-fixedPartitionName = quarters      none              none              none              quarters         none             none             none;

hydra.PartitionPrms-colocatedWith      = none          FPR_1             none              normalPR_1        none             FPR_1            none             normalPR_1;

hydra.FixedPartitionPrms-names            = quarters;
hydra.FixedPartitionPrms-partitionNames   = Quarter1 Quarter2 Quarter3 Quarter4;
hydra.FixedPartitionPrms-partitionBuckets = 1         3        1        3;
hydra.FixedPartitionPrms-datastores       = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache;
hydra.CachePrms-searchTimeout   = 600;
           
parReg.ParRegPrms-partitionResolverData = BB;
parReg.ParRegPrms-isWithRoutingResolver = true;

hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar; 
