hydra.Prms-testRequirement = "Testing primarily prEviction kicks in because of heap build up due to slow Receivers";
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion. The data store for the partitioned region is spread
across all bridge servers. The test has the client queue dispatchers delayed. This test primarily verifies for heap eviction
kicking in because of heap build up because of slow receivers
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} - 1
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf; 
                 
THREADGROUP verifyThreads 
            totalThreads = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                           (\"bridge\", ${bridgeHosts}, true)"
                           ncf;                        

INITTASK     taskClass   = parReg.eviction.DelayedDispatcherTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = bridgeThreads,verifyThreads ;
             
INITTASK     taskClass   = parReg.eviction.DelayedDispatcherTest  taskMethod = HydraTask_updateBB
             threadGroups = verifyThreads;             

INITTASK     taskClass   = parReg.eviction.DelayedDispatcherTest  taskMethod = HydraTask_initialize
             threadGroups = edgeThreads;

TASK         taskClass   = parReg.eviction.DelayedDispatcherTest  taskMethod = HydraTask_doConcOpsAndVerify
             threadGroups = bridgeThreads;
             
TASK         taskClass   = parReg.eviction.DelayedDispatcherTest  taskMethod = HydraTask_verifyEvictionBehavior
             threadGroups = verifyThreads;             

CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_prepareForValidation
              connPool.ConnPoolPrms-sleepSec = 60
              threadGroups = bridgeThreads;
CLOSETASK     taskClass   = connPool.ConnPoolUtil  taskMethod = HydraTask_validate
              threadGroups = bridgeThreads,verifyThreads ;

CLOSETASK     taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
              threadGroups = bridgeThreads,verifyThreads ;

RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

hydra.GemFirePrms-stopSystemsAfterTest = true;

// parReg.ParRegPrms-secondsToRun determines the running length rather than 
// totalTaskTimeSec because of the test's pausing scheme; without this the
// test could hang 
hydra.Prms-totalTaskTimeSec = 31536000;  
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 50 100 500 1000 2500 5000 FOENO;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = 45;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations

parReg.ParRegPrms-entryOperations = ONEOF add putAll update get destroy invalidate FOENO;
parReg.ParRegPrms-upperThreshold = 1000;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy FOENO; 
parReg.ParRegPrms-lowerThreshold = 10;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add putAll FOENO;
// don't use "useThreshold" for numPutAllNewKeys because the test is concurrent, and if all 
// threads did a large putAll, the region size would go way over the upperThreshold
parReg.ParRegPrms-numPutAllNewKeys = 1;  
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 0 200 EGNAR;

parReg.ParRegPrms-secondsToRun = 900;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names          = clientRegion            dataStoreRegion;
hydra.RegionPrms-regionName     = testRegion              testRegion;
hydra.RegionPrms-scope          = local                   default;
hydra.RegionPrms-poolName        = edgeDescript            none;
hydra.RegionPrms-cacheListeners = util.SilenceListener,   hct.BridgeEventListener;
hydra.RegionPrms-dataPolicy     = default                 partition;
hydra.RegionPrms-partitionName  = none                    pr;
hydra.RegionPrms-evictionAttributes	= none ,  lruHeapPercentage default overflowToDisk;
hydra.RegionPrms-diskStoreName  = none  synchWrite;
hydra.RegionPrms-diskSynchronous = true;

hydra.DiskStorePrms-names       = synchWrite;
hydra.DiskStorePrms-maxOplogSize= 10240;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};


parReg.ParRegPrms-bridgeOrderingWorkaround = ${bridgeOrderingWorkaround};

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy   = ${redundantCopies};
hydra.PoolPrms-loadConditioningInterval     = 5000;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


hydra.CachePrms-resourceManagerName = manager;

hydra.ResourceManagerPrms-names = manager;
hydra.ResourceManagerPrms-evictionHeapPercentage = 60;
hydra.ResourceManagerPrms-criticalHeapPercentage = 99;

parReg.eviction.EvictionPrms-verifyHeapUsage = false;
parReg.eviction.EvictionPrms-verifyEvictionEvents = true;

hydra.VmPrms-extraVMArgsSUN += "-XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=10 -Dgemfire.memoryEventTolerance=0";

hydra.VmPrms-extraVMArgsJRockit += -Xgc:gencon;
hydra.VmPrms-extraVMArgsJRockit += -XXgcTrigger90;

hydra.VmPrms-extraVMArgsIBM += "-Xgcpolicy:gencon -verbose:sizes";
