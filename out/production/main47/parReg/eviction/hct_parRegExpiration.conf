hydra.Prms-testRequirement = "
Test to verify the expiration actions and listener events of TTL and idleTimeout 
expirations on VM Partitioned Regions.
";

hydra.Prms-testDescription = "
This test is for testing the entry expiration action - destroy and invalidate
for the PR region.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;


THREADGROUP bridge 
            totalThreads = fcn (${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}) ncf  
            totalVMs     = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf;

THREADGROUP controlTTLDestroyThread            totalThreads = 1 clientNames = edge1; 
THREADGROUP controlIdleTODestroyThread         totalThreads = 1 clientNames = edge1; 
THREADGROUP controlTTLInvalThread              totalThreads = 1 clientNames = edge1;
THREADGROUP controlIdleTOInvalThread           totalThreads = 1 clientNames = edge1;
THREADGROUP customTTLDestroyThread             totalThreads = 1 clientNames = edge1; 
THREADGROUP customIdleTODestroyThread          totalThreads = 1 clientNames = edge1; 
THREADGROUP customTTLInvalThread               totalThreads = 1 clientNames = edge1;
THREADGROUP customIdleTOInvalThread            totalThreads = 1 clientNames = edge1;
 
 

INITTASK     taskClass   = parReg.eviction.ParRegExpirationTest taskMethod  = HydraTask_initServers
			threadGroups = bridge
			runMode = always;
			
INITTASK     taskClass   = parReg.eviction.ParRegExpirationTest taskMethod  = HydraTask_initClients
			threadGroups = controlTTLDestroyThread, controlIdleTODestroyThread, controlTTLInvalThread, controlIdleTOInvalThread, default
			runMode = always;			
			

TASK         taskClass   = parReg.eviction.ParRegExpirationTest 
                taskMethod  = HydraTask_controlEntryTTLDestroy
                threadGroups = controlTTLDestroyThread;

TASK         taskClass   = parReg.eviction.ParRegExpirationTest 
                taskMethod  = HydraTask_controlEntryTTLInval
                threadGroups = controlTTLInvalThread;

TASK         taskClass   = parReg.eviction.ParRegExpirationTest 
                taskMethod  = HydraTask_controlEntryIdleTODestroy
                threadGroups = controlIdleTODestroyThread;

TASK         taskClass   = parReg.eviction.ParRegExpirationTest 
                taskMethod  = HydraTask_controlEntryIdleTOInval
                threadGroups = controlIdleTOInvalThread;
                
TASK         taskClass   = parReg.eviction.ParRegExpirationTest 
                taskMethod  = HydraTask_customEntryTTLDestroy
                threadGroups = customTTLDestroyThread;

TASK         taskClass   = parReg.eviction.ParRegExpirationTest 
                taskMethod  = HydraTask_customEntryTTLInval
                threadGroups = customTTLInvalThread;

TASK         taskClass   = parReg.eviction.ParRegExpirationTest 
                taskMethod  = HydraTask_customEntryIdleTODestroy
                threadGroups = customIdleTODestroyThread;

TASK         taskClass   = parReg.eviction.ParRegExpirationTest 
                taskMethod  = HydraTask_customEntryIdleTOInval
                threadGroups = customIdleTOInvalThread;  
                                         
RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

hydra.RegionPrms-names          =  bridgeTTLDestroy		bridgeTTLInval  	bridgeIdleTODestroy	 bridgeIdleTOInval	bridgeCustomTTLDestroy		bridgeCustomTTLInval  	bridgeCustomIdleTODestroy	 bridgeCustomIdleTOInval
                                   edgeTTLDestroy		edgeTTLInval  	edgeIdleTODestroy	 edgeIdleTOInval  edgeCustomTTLDestroy		edgeCustomTTLInval  	edgeCustomIdleTODestroy	 edgeCustomIdleTOInval;
hydra.RegionPrms-regionName     =  TTLDestroy		TTLInval  	IdleTODestroy	 IdleTOInval CustomTTLDestroy		CustomTTLInval  	CustomIdleTODestroy	 CustomIdleTOInval
                                   TTLDestroy		TTLInval  	IdleTODestroy	 IdleTOInval CustomTTLDestroy		CustomTTLInval  	CustomIdleTODestroy	 CustomIdleTOInval;
hydra.RegionPrms-cacheListeners =  parReg.eviction.ParRegTTLDestroyListener  , parReg.eviction.ParRegTTLInvalListener ,
								   parReg.eviction.ParRegIdleTODestroyListener	, parReg.eviction.ParRegIdleTOInvalListener ,
								   parReg.eviction.ParRegCustomTTLDestroyListener  , parReg.eviction.ParRegCustomTTLInvalListener ,
								   parReg.eviction.ParRegCustomIdleTODestroyListener	, parReg.eviction.ParRegCustomIdleTOInvalListener,
								   parReg.eviction.ParRegTTLDestroyListener  , parReg.eviction.ParRegTTLInvalListener ,
								   parReg.eviction.ParRegIdleTODestroyListener	, parReg.eviction.ParRegIdleTOInvalListener,
								   parReg.eviction.ParRegCustomTTLDestroyListener  , parReg.eviction.ParRegCustomTTLInvalListener ,
								   parReg.eviction.ParRegCustomIdleTODestroyListener	, parReg.eviction.ParRegCustomIdleTOInvalListener;
								   
hydra.RegionPrms-poolName           =  none    none    none   none	none    none    none   none edgeDescript      edgeDescript	    edgeDescript    edgeDescript edgeDescript      edgeDescript	    edgeDescript    edgeDescript;
hydra.RegionPrms-statisticsEnabled       =	true;
hydra.RegionPrms-entryTimeToLive =  400 destroy, 400 invalidate, 	none,	 none, none,	 none, none,	 none, none,	 none, none,	 none, none,	 none, none,	 none;
hydra.RegionPrms-entryIdleTimeout = none,	 none, 400 destroy, 400 invalidate, none,	 none, none,	 none, none,	 none, none,	 none, none,	 none, none,	 none;
hydra.RegionPrms-customEntryIdleTimeout  = none		none	none	none	none	none	parReg.eviction.ParRegCustomExpiry	parReg.eviction.ParRegCustomExpiry none		none	none	none	none	none	none	none;
hydra.RegionPrms-customEntryTimeToLive  = none		none	none	none	parReg.eviction.ParRegCustomExpiry	parReg.eviction.ParRegCustomExpiry		none	none none		none	none	none	none	none	none	none;

hydra.RegionPrms-dataPolicy     = partition	partition	partition	partition	partition	partition	partition	partition normal	normal	normal	normal normal	normal	normal	normal;
hydra.RegionPrms-partitionName  = pr	pr	pr	pr	pr	pr	pr	pr none	none	none	none none	none	none	none;


hydra.PartitionPrms-names       	= pr;
hydra.PartitionPrms-redundantCopies = 3;

hydra.Prms-serialExecution = false;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript;
hydra.PoolPrms-minConnections        	   = 3;
hydra.PoolPrms-subscriptionEnabled 		   = true;
hydra.PoolPrms-threadLocalConnections      = true;
hydra.PoolPrms-readTimeout                 = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy      = 3;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;
util.TestHelperPrms-minTaskGranularitySec = 30;
hydra.Prms-totalTaskTimeSec = 30;
hydra.Prms-maxResultWaitSec = 1200;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

expiration.ExpirPrms-isBridgeClientConfiguration = true;
expiration.ExpirPrms-numClientVms = fcn ${edgeHosts} * ${edgeVMsPerHost} ncf;

