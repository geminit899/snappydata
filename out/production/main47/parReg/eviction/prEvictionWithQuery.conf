hydra.Prms-testDescription = "
This test does the following: Multiple PRs , long running queries on the regions (causing garbage buildup)
Verify that heap based eviction happens correctly (Test does not test the case, where if the query results, itself cause OOME)
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p.inc;

THREADGROUP verifyThreads totalThreads = fcn "${peerVMsPerHost} * ${peerHosts}" ncf
                          totalVMs = fcn "${peerVMsPerHost} * ${peerHosts}" ncf;

INITTASK  taskClass = parReg.eviction.ParRegHeapEvictionTest taskMethod = HydraTask_initialize
          threadGroups = verifyThreads
		  runMode=always;

INITTASK  taskClass = parReg.eviction.ParRegHeapEvictionTest taskMethod = HydraTask_createRegions
          threadGroups = verifyThreads
		  runMode=always;
		  
INITTASK  taskClass = parReg.eviction.ParRegHeapEvictionTest taskMethod = HydraTask_updateBB
          threadGroups = verifyThreads;		  
		  
INITTASK  taskClass = parReg.eviction.ParRegHeapEvictionTest taskMethod = HydraTask_populateMaxEntries
          threadGroups = verifyThreads,default;
INITTASK  taskClass = parReg.eviction.ParRegHeapEvictionTest taskMethod = HydraTask_verifyNoEviction
          threadGroups = verifyThreads;  
          
TASK  taskClass = parReg.eviction.ParRegHeapEvictionTest taskMethod = HydraTask_doQuery
      threadGroups = default;
      
CLOSETASK  taskClass = parReg.eviction.ParRegHeapEvictionTest taskMethod = HydraTask_verifyEviction
      threadGroups = verifyThreads;                 		  

hydra.Prms-totalTaskTimeSec = 300;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = 30;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-resourceManagerName = manager;

hydra.ResourceManagerPrms-names = manager;
hydra.ResourceManagerPrms-evictionHeapPercentage = 40;
hydra.ResourceManagerPrms-criticalHeapPercentage = 99;


hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names          = partitionedRegion1 partitionedRegion2 partitionedRegion3 partitionedRegion4;
hydra.RegionPrms-regionName     = partitionedRegion1 partitionedRegion2 partitionedRegion3 partitionedRegion4;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = pr;								  
hydra.RegionPrms-evictionAttributes	= lruHeapPercentage default overflowToDisk;
hydra.RegionPrms-diskStoreName  = synchWrite;
hydra.RegionPrms-diskSynchronous = true;

hydra.DiskStorePrms-names       = synchWrite;
hydra.DiskStorePrms-maxOplogSize= 10240;
								  

hydra.PartitionPrms-names       = pr;									
hydra.PartitionPrms-localMaxMemory	= default;								
hydra.PartitionPrms-redundantCopies = 	 ${redundantCopies} ;
hydra.PartitionPrms-totalNumBuckets = 	 default ;

hydra.Prms-maxResultWaitSec = 1800;
hydra.VmPrms-extraVMArgs = "-Xms1000m -Xmx1000m";

hydra.VmPrms-extraVMArgsSUN += "-XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=10 -Dgemfire.memoryEventTolerance=0";

hydra.VmPrms-extraVMArgsJRockit += -Xgc:gencon;
hydra.VmPrms-extraVMArgsJRockit += -XXgcTrigger90;

hydra.VmPrms-extraVMArgsIBM += "-Xgcpolicy:gencon -verbose:sizes";

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 1000000 FOENO;
util.ValueHolderPrms-useExtraObject = true;

parReg.eviction.EvictionPrms-maxEntries = 600;
parReg.eviction.EvictionPrms-verifyHeapUsage = false;
parReg.eviction.EvictionPrms-verifyEvictionEvents = true;


hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar;
