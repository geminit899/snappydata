hydra.Prms-testRequirement = "Verify view of tx and non-tx threads.  Verify that cacheListeners, cacheWriters and TransactionListeners are invoked as expected";
hydra.Prms-testDescription = "In this serial round-robin test, one thread starts a transaction and does multiple operations on colocated entries in partitionedRegions.  The test verifies that the cacheWriter is verified inline with the operations.  In addition, each VM verifies it's view of the data for the affected entries with the txThread verifying it sees the TxState and the other threads verifying that those changes are not visible until commit time.  Cache and TxListeners are also invoked and the contents of those events validated.  This differs from mixedRegionSerialView in that the tx VM has empty replicated regions and is an accessor to the PR";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparams3.inc;
include $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = 1   1   1;
hydra.ClientPrms-vmThreads    = 2   1   1;

THREADGROUP txThread totalThreads = 1  totalVMs = 1 clientNames=client1;
THREADGROUP localValidator totalThreads = 1 totalVMs = 1 clientNames=client1;
THREADGROUP remoteValidators totalThreads = 2 totalVMs = 2 clientNames=client2, client3;

INITTASK  taskClass   = parReg.tx.MixedRegionViewTest taskMethod = HydraTask_createPartitionedRegions
          hydra.ConfigPrms-cacheConfig    = myCache
          hydra.ConfigPrms-regionConfig   = accessorPR
          threadGroups = txThread
          ;

INITTASK  taskClass   = parReg.tx.MixedRegionViewTest taskMethod = HydraTask_createPartitionedRegions
          hydra.ConfigPrms-cacheConfig    = myCache
          hydra.ConfigPrms-regionConfig   = datastorePR
          threadGroups = remoteValidators
          ;

// create entries (so we have partitioned entries to work with)
INITTASK  taskClass   = parReg.tx.MixedRegionViewTest taskMethod = HydraTask_populateRegions
          threadGroups = txThread, remoteValidators
          ;

INITTASK  taskClass   = parReg.tx.MixedRegionViewTest taskMethod = HydraTask_dumpLocalKeys
          threadGroups = localValidator, remoteValidators
          ;

INITTASK  taskClass   = parReg.tx.MixedRegionViewTest taskMethod = HydraTask_createReplicatedRegions
          hydra.ConfigPrms-cacheConfig    = myCache
          hydra.ConfigPrms-regionConfig   = emptyRegion
          threadGroups = txThread
          ;

INITTASK  taskClass   = parReg.tx.MixedRegionViewTest taskMethod = HydraTask_createReplicatedRegions
          hydra.ConfigPrms-cacheConfig    = myCache
          hydra.ConfigPrms-regionConfig   = replicatedRegion
          threadGroups = remoteValidators
          ;

TASK      taskClass   = parReg.tx.MixedRegionViewTest taskMethod = HydraTask_executeTx
          threadGroups = txThread
          ;

// Note that the local tx thread cannot validate its region contents (as it is a PR accessor and
// has DataPolicy.EMPTY for its distributed regions
TASK      taskClass   = parReg.tx.MixedRegionViewTest taskMethod = HydraTask_checkCommittedState
          threadGroups = remoteValidators
          ;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-serialExecution=true;
hydra.Prms-roundRobin=true;

hydra.log.LogPrms-mergeLogFiles = true;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;

tx.TxPrms-commitPercentage=80;
tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=2;

tx.TxPrms-checkEventCounters = true;
tx.TxPrms-txListener = tx.PrTxListener;
tx.TxPrms-txWriter = tx.TxWriter;

// todo@lhughes -- add more ops as implemented in pr tx for product
tx.TxPrms-operations = 
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-getWithNewKey entry-getWithExistingKey 
          ;

tx.TxPrms-numOps = RANGE 1 5 EGNAR;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 

hydra.Prms-useFixedRandomInMaster = true;

hydra.CachePrms-names           = myCache;
hydra.RegionPrms-names          = accessorPR        datastorePR       emptyRegion replicatedRegion;
hydra.RegionPrms-regionName     = PartitionedRegion PartitionedRegion Region      Region;
hydra.RegionPrms-scope          = default           default        distributedAck distributedAck;
hydra.RegionPrms-dataPolicy     = partition         partition         empty       replicated;
hydra.RegionPrms-interestPolicy = ${interestPolicy} ${interestPolicy} default;
hydra.RegionPrms-partitionName  = accessor          datastore         none;
hydra.RegionPrms-cacheListeners = tx.TestListener;
hydra.RegionPrms-cacheWriter    = tx.MixedRegionWriter;
hydra.RegionPrms-cacheLoader    = parReg.tx.MixedRegionTxLoader;

hydra.PartitionPrms-names           = accessor  datastore;
hydra.PartitionPrms-localMaxMemory  = 0         default;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

parReg.tx.PrTxPrms-numColocatedRegions = 5;
parReg.tx.PrTxPrms-useLocalKeySet = ${useLocalKeySet};

// todo@lhughes -- re-enable counters once empty/accessors taken into account
tx.TxPrms-checkEventCounters = false;

