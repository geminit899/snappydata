hydra.Prms-testRequirement = "Verify view of tx and non-tx threads.  Verify that cacheListeners, cacheWriters and TransactionListeners are invoked as expected";
hydra.Prms-testDescription = "In this serial round-robin test, one (edge client) thread starts a transaction and does multiple operations on colocated entries in partitionedRegions in the servers.  The test verifies that the cacheWriter is verified inline with the operations.  In addition, each VM verifies it's view of the data for the affected entries with the txThread verifying it sees the TxState and the other threads verifying that those changes are not visible until commit time.  Cache and TxListeners are also invoked and the contents of those events validated.";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_hct.inc;
include $JTESTS/util/randomValues.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;

THREADGROUP txThread totalThreads = 1  totalVMs = 1 clientNames=edge1;
THREADGROUP localValidator totalThreads = 1 totalVMs = 1 clientNames=edge1;
THREADGROUP remoteValidators totalThreads = 2 totalVMs = 2 clientNames=edge2, edge3;
// extra threads in edge2 & edge3 are default

INITTASK  taskClass   = parReg.tx.PrViewUtil taskMethod = HydraTask_createColocatedRegions
          hydra.ConfigPrms-cacheConfig    = bridge
          hydra.ConfigPrms-regionConfig   = bridge
          threadGroups = bridge
          ;

INITTASK  taskClass   = parReg.tx.PrViewUtil taskMethod = HydraTask_startBridgeServer
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;

// create region tree + registerInterest in ALL_KEYS
INITTASK  taskClass   = parReg.tx.PrViewUtil taskMethod = HydraTask_createClientRegions
          hydra.ConfigPrms-cacheConfig    = edge
          hydra.ConfigPrms-regionConfig   = edge
          threadGroups = txThread, default
          ;

// Regions must exist before invoking the ViewTest initialization task 
// The txThread needs to know how many listeners will be invoked (depends on PR config in servers)
INITTASK  taskClass   = parReg.tx.ParRegViewTest taskMethod = HydraTask_initialize
          hydra.ConfigPrms-regionConfig   = bridge
          threadGroups = bridge, txThread, remoteValidators
          ;

// create entries (so we have partitioned entries to work with)
INITTASK  taskClass   = parReg.tx.PrViewUtil taskMethod = HydraTask_populateRegions
          threadGroups = bridge
          ;

INITTASK  taskClass   = parReg.tx.PrViewUtil taskMethod = HydraTask_dumpLocalKeys
          threadGroups = bridge
          ;

TASK      taskClass   = parReg.tx.ParRegViewTest taskMethod = HydraTask_executeTx
          threadGroups = txThread
          ;

TASK      taskClass   = parReg.tx.ParRegViewTest taskMethod = HydraTask_checkCommittedState
          threadGroups = localValidator, remoteValidators
          ;

CLOSETASK taskClass   = tx.TxViewUtil taskMethod = HydraTask_stopBridgeServer
          threadGroups = bridge
          ;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-serialExecution=true;
hydra.Prms-roundRobin=true;

hydra.log.LogPrms-mergeLogFiles = true;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;

tx.TxPrms-commitPercentage=80;
tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=2;

tx.TxPrms-checkEventCounters = true;
tx.TxPrms-txListener = tx.PrTxListener;
tx.TxPrms-txWriter = tx.TxWriter;

// todo@lhughes -- add more ops as implemented in pr tx for product
tx.TxPrms-operations = 
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-getWithNewKey entry-getWithExistingKey 
          ;

parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;

tx.TxPrms-numOps = RANGE 1 5 EGNAR;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 

hydra.Prms-useFixedRandomInMaster = true;

hydra.CachePrms-names           = bridge    edge;
hydra.RegionPrms-names          = bridge    edge;
hydra.RegionPrms-poolName       = none      brloader;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-cacheListeners = tx.TestListener;
hydra.RegionPrms-cacheWriter    = tx.TestWriter;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-interestPolicy = ${interestPolicy} default;
hydra.RegionPrms-scope          = default   local;
hydra.RegionPrms-dataPolicy     = partition default;
hydra.RegionPrms-partitionName  = pr        none;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

hydra.BridgePrms-names          = bridge;

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections   = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-subscriptionRedundancy = -1;

tx.TxPrms-txListener = tx.TxListener;

parReg.tx.PrTxPrms-numColocatedRegions = 5;
parReg.tx.PrTxPrms-useLocalKeySet = false;  // always use a keySet from a server

