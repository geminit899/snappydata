INCLUDE $JTESTS/parReg/event/serialParRegCMEvent.conf;

hydra.Prms-testRequirement = "Test entry create/update/destroy/invalidate events";
hydra.Prms-testDescription = "
Test in serial execution mode to carefully validate entry events.

The test uses one region, a distributed scope and dataPolicy = partitioned.
There is a listener, that increments a blackboard counter for each event, installed in the region for each VM.

The test executes a task that executes entry and concurrentMap operations transactionally to modify an object in a region, then waits for the listener counters to reach the required number, indicating the event was received in a VM.
";

INCLUDE $JTESTS/hydraconfig/systemparams4.inc;
hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 3;

util.CacheDefPrms-cacheSpecs = "
   specName = cache1:
   ";

// With the default of CACHE_CONTENT, so only the primary should
// receive the listener events.  With transactions, only the primary
// gets Listener events.  RedundantCopies can only get events if the 
// -DalwaysFireLocalListeners is true.  So, the test is reduced to 4 VMs
// and this value is set (so numVmsWithListener will reflect correct multipler
// for NUM_OPS * multipler = expected NUM_EVENTS
util.RegionDefPrms-regionSpecs = "
   specName = cached:
       regionName = EventRegion:
       cacheListeners = event.CMListener event.OperationListener:
       cacheWriter = event.CMWriter:
       partitionedRegion = true:
   specName = cachedAllEvents:
       regionName = EventRegion:
       interestPolicy = all:
       cacheListeners = event.CMListener event.OperationListener:
       cacheWriter = event.CMWriter:
       partitionedRegion = true:
       parReg_redundantCopies = 3:
   ";

util.RegionDefPrms-VMRegionSpecName = ONEOF cached cachedAllEvents FOENO;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

event.EventPrms-entryOperations = ONEOF putIfAbsent putIfAbsent putIfAbsent putIfAbsent replace remove read FOENO; // weighted to putIfAbsents


util.RegionDefPrms-VMRegionSpecName = cached;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

// all VMs with a copy will invoke the listener
hydra.VmPrms-extraVMArgs = "-Dgemfire.BucketRegion.alwaysFireLocalListeners=true";

util.TestHelperPrms-minTaskGranularitySec = 0;    // this is the length of time for txOps
event.EventPrms-useTransactions = true;


