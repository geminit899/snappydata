include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;
include $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 2;

THREADGROUP txThread    totalThreads = 1  totalVMs = 1 clientNames=client1;
THREADGROUP txValidator totalThreads = 1  totalVMs = 1 clientNames=client1;
THREADGROUP validator   totalThreads = 1  totalVMs = 1 clientNames=client2
                        totalThreads = 1  totalVMs = 1 clientNames=client3;
THREADGROUP killer      totalThreads = 1  totalVMs = 1 clientNames=client2
                        totalThreads = 1  totalVMs = 1 clientNames=client3;

INITTASK  taskClass   = parReg.tx.PrViewUtil taskMethod = HydraTask_createColocatedRegions
          ;

// Regions must exist before invoking the ViewTest initialization task
INITTASK  taskClass   = parReg.tx.ParRegViewTest taskMethod = HydraTask_initialize
          ;

// create entries (so we have partitioned entries to work with)
INITTASK  taskClass   = parReg.tx.PrViewUtil taskMethod = HydraTask_populateRegions
          threadGroups = txThread, killer
          ;

INITTASK  taskClass   = parReg.tx.PrViewUtil taskMethod = HydraTask_dumpLocalKeys
          threadGroups = txThread, killer
          ;

TASK      taskClass   = parReg.tx.ParRegViewTest taskMethod = HydraTask_executeTx
          maxTimesToRun = 2
          threadGroups = txThread
          ;

TASK      taskClass   = parReg.tx.ParRegViewTest taskMethod = HydraTask_killCommittor
          maxTimesToRun = 1
          threadGroups = killer
          ;

TASK      taskClass   = parReg.tx.ParRegViewTest taskMethod = HydraTask_waitForDist
          threadGroups = txValidator, validator
          ;

CLOSETASK taskClass   = parReg.tx.ParRegViewTest taskMethod = HydraCloseTask_validateTxConsistency
          threadGroups = txValidator, validator
          ;

// Note that this must come AFTER validateTxConsistency since we'll perform
// operations on the same keys as the previous transaction (which would 
// cause the data consistency validation to fail.  Only one VM can execute
// this since we'll be applying the same changes as the original commit
CLOSETASK taskClass   = parReg.tx.ParRegViewTest taskMethod = HydraCloseTask_verifyResourcesReleased
          threadGroups = txValidator
          ;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 360;
hydra.Prms-serialExecution=false;
hydra.Prms-alwaysDoEndTasks = true;

hydra.log.LogPrms-mergeLogFiles = true;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;

tx.TxPrms-commitStateTrigger = ${commitStateTrigger};

tx.TxPrms-commitPercentage=100;
tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=2;

hydra.Prms-useFixedRandomInMaster = true;

hydra.ConfigPrms-cacheConfig    = myCache;
hydra.ConfigPrms-regionConfig   = myRegion;
hydra.CachePrms-names           = myCache;
hydra.RegionPrms-names          = myRegion;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-scope          = default;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = pr;
hydra.RegionPrms-cacheListeners = tx.LogListener;
hydra.RegionPrms-cacheWriter    = tx.LogWriter;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-redundantCopies = 1;

parReg.tx.PrTxPrms-numColocatedRegions = 5;
parReg.tx.PrTxPrms-useLocalKeySet = false;
parReg.tx.PrTxPrms-killLocalTxVm = false;    // kill remote vm

tx.TxPrms-txListener = parReg.tx.TxViewListener;
tx.TxPrms-txWriter   = tx.TxLogWriter;

tx.TxPrms-operations =
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-getWithNewKey 
          ;

tx.TxPrms-numOps = RANGE 1 5 EGNAR;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 

// to aid in debugging, fire listeners in primary and secondary
hydra.VmPrms-extraVMArgs = "-Dgemfire.BucketRegion.alwaysFireLocalListeners=true";

