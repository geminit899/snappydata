hydra.Prms-testRequirement = "VMs execute tx ops serially using function execution";
hydra.Prms-testDescription = "VMs share a partitionedRegion where a PartitionResolver is used to do custom partition (based on mod of integer portion of Object_XXXX).  Entry operations are executed transactionally on remote VMs via function execution.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct_locator.inc;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

//------------------------------------------------------------------------------
// INITIALIZATION WORK 
//------------------------------------------------------------------------------

INITTASK  taskClass = parReg.tx.CustomPartitionTest taskMethod = createLocatorTask
          threadGroups = locator;

INITTASK  taskClass = parReg.tx.CustomPartitionTest taskMethod = startAndConnectLocatorTask
          threadGroups = locator;

INITTASK  taskClass   = parReg.tx.CustomPartitionTest taskMethod  = HydraTask_initialize
          hydra.ConfigPrms-bridgeConfig   = bridge
          hydra.ConfigPrms-cacheConfig    = bridge
          hydra.ConfigPrms-regionConfig   = bridge
          threadGroups = bridge;

INITTASK  taskClass   = parReg.tx.CustomPartitionTest taskMethod  = HydraTask_populateRegions
          threadGroups = bridge;

INITTASK  taskClass   = parReg.tx.CustomPartitionTest taskMethod  = HydraTask_initialize
          hydra.ConfigPrms-cacheConfig    = edge
          hydra.ConfigPrms-regionConfig   = edge
          threadGroups = edge;

TASK      taskClass = parReg.tx.CustomPartitionTest taskMethod = HydraTask_executeTx
          threadGroups = edge;

CLOSETASK taskClass = parReg.tx.CustomPartitionTest taskMethod = HydraTask_executeGetAllMembersInDS
          threadGroups = bridge;

CLOSETASK taskClass   = hydra.BridgeHelper taskMethod  = stopBridgeServer
          threadGroups = bridge;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;

util.TestHelperPrms-minTaskGranularitySec = 10;
//util.OperationsClientPrms-entryOperations = ONEOF add add getNew getNew update invalidate get destroy FOENO;
util.OperationsClientPrms-useTransactions = true;
util.OperationsClientPrms-entryOperations = ONEOF putAll putAll add add getNew getNew update invalidate get putIfAbsent putIfAbsent replace FOENO;
util.OperationsClientPrms-upperThreshold = 500;
util.OperationsClientPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
util.OperationsClientPrms-lowerThreshold = 10;
util.OperationsClientPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsent FOENO;
parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;


hydra.GemFirePrms-conserveSockets = true;
hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 180;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

hydra.BridgePrms-names          = bridge;

hydra.CachePrms-names           = edge            bridge;

hydra.RegionPrms-names          = edge            bridge;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-cacheListeners = tx.LogListener, parReg.tx.ObjectNameListener;
hydra.RegionPrms-scope          = local           default;
hydra.RegionPrms-dataPolicy     = normal          partition;
hydra.RegionPrms-poolName       = edgeDescript    none;
hydra.RegionPrms-partitionName  = none            pr;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-redundantCopies = 0;
hydra.PartitionPrms-partitionResolver = parReg.tx.ModPartitionResolver;
hydra.PartitionPrms-totalNumBuckets = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf;

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy = 0;
hydra.PoolPrms-pingInterval           = 400;
hydra.PoolPrms-loadConditioningInterval = 5000;


