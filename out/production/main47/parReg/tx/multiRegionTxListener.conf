hydra.Prms-testRequirement = "TransactionEvents should only include events pertaining to regions defined in the VM";
hydra.Prms-testDescription = "This test has 3 peer VMs.  The first peer has all 3 regions defined (A, B, C), the second has (A, B), the third (A, C).  The first client then does entry operations as part of a transaction.  The TransactionListener (TxRegionListener) in each VM verifies that each client only recieves events in the TransactionEvent for regions which exist in the local VM";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_locator.inc;

//------------------------------------------------------------------------------
// INITIALIZATION WORK 
//------------------------------------------------------------------------------

INITTASK  taskClass = parReg.tx.TxTest taskMethod = createLocatorTask
          threadGroups = locator;

INITTASK  taskClass = parReg.tx.TxTest taskMethod = startAndConnectLocatorTask
          threadGroups = locator;

// All VMs define Region A
INITTASK  taskClass   = parReg.tx.TxTest taskMethod  = HydraTask_initialize
          parReg.tx.PrTxPrms-regionConfigNames = RegionA RegionB RegionC
          threadGroups = client1;

INITTASK  taskClass   = parReg.tx.TxTest taskMethod  = HydraTask_initialize
          parReg.tx.PrTxPrms-regionConfigNames = RegionA RegionB
          threadGroups = client2;

INITTASK  taskClass   = parReg.tx.TxTest taskMethod  = HydraTask_initialize
          parReg.tx.PrTxPrms-regionConfigNames = RegionA RegionC
          threadGroups = client3;

TASK      taskClass = parReg.tx.TxTest taskMethod = HydraTask_doOpsAcrossAllRegions
          threadGroups = client1;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;    

THREADGROUP client1
    totalThreads = fcn ${peerVMsPerHost} * ${peerThreadsPerVM} ncf
    clientNames  = peer1;

THREADGROUP client2
    totalThreads = fcn ${peerVMsPerHost} * ${peerThreadsPerVM} ncf
    clientNames  = peer2;

THREADGROUP client3
    totalThreads = fcn ${peerVMsPerHost} * ${peerThreadsPerVM} ncf
    clientNames  = peer3;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;

util.TestHelperPrms-minTaskGranularitySec = 60;
util.OperationsClientPrms-useTransactions = true;
util.OperationsClientPrms-numOpsPerTask = RANGE 3 5 EGNAR;
util.OperationsClientPrms-entryOperations = ONEOF putAll putAll add add update invalidate destroy FOENO;
util.OperationsClientPrms-upperThreshold = 1000;
util.OperationsClientPrms-upperThresholdOperations = ONEOF destroy FOENO;
util.OperationsClientPrms-lowerThreshold = 500;
util.OperationsClientPrms-lowerThresholdOperations = ONEOF add FOENO;
parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;


hydra.GemFirePrms-conserveSockets = true;
hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 180;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

hydra.ConfigPrms-cacheConfig    = myCache;
hydra.CachePrms-names           = myCache;
hydra.RegionPrms-names          = RegionA RegionB RegionC;
hydra.RegionPrms-regionName     = RegionA RegionB RegionC;
hydra.RegionPrms-dataPolicy     = replicate;

parReg.tx.PrTxPrms-regionConfigNames = RegionA RegionB RegionC;
parReg.tx.PrTxPrms-txListener   = parReg.tx.TxRegionListener;

//hydra.RegionPrms-dataPolicy     = partition;
//hydra.RegionPrms-partitionName  = pr;

//hydra.PartitionPrms-names           = pr;
//hydra.PartitionPrms-localMaxMemory  = default;
//hydra.PartitionPrms-redundantCopies = 0;


