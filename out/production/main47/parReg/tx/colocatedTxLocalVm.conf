hydra.Prms-testRequirement = "VMs execute tx ops concurrently on PR with colocated regions";
hydra.Prms-testDescription = "VMs share a partitionedRegion with colocatedRegions.  Transactions operate on local keys (determined by getLocalKeySet).";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_locator.inc;

//------------------------------------------------------------------------------
// INITIALIZATION WORK 
//------------------------------------------------------------------------------

INITTASK  taskClass = parReg.tx.ColocatedTxTest taskMethod = createLocatorTask
          threadGroups = locator;

INITTASK  taskClass = parReg.tx.ColocatedTxTest taskMethod = startAndConnectLocatorTask
          threadGroups = locator;

INITTASK  taskClass   = parReg.tx.ColocatedTxTest taskMethod  = HydraTask_initialize
          threadGroups = peer;

INITTASK  taskClass   = parReg.tx.ColocatedTxTest taskMethod = HydraTask_populateRegions
          threadGroups = verifyThread;

TASK      taskClass = parReg.tx.ColocatedTxTest taskMethod = HydraTask_doEntryOperations
          threadGroups = peer, verifyThread;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;    
THREADGROUP peer
    totalThreads = fcn ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM} - 1 ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"peer\", ${peerHosts}, true)"
                   ncf;

THREADGROUP verifyThread totalThreads = 1;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;

util.OperationsClientPrms-entryOperations = ONEOF putAll putAll add add getNew getNew update invalidate get destroy putIfAbsent putIfAbsent remove replace FOENO;
util.OperationsClientPrms-useTransactions = true;
util.OperationsClientPrms-numOpsPerTask = RANGE 3 5 EGNAR;
parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;

hydra.GemFirePrms-conserveSockets = true;
hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 180;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

hydra.ConfigPrms-cacheConfig    = myCache;
hydra.ConfigPrms-regionConfig   = myRegion;
hydra.CachePrms-names           = myCache;
hydra.RegionPrms-names          = myRegion;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-scope          = default;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = pr;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-redundantCopies = 0;

parReg.tx.PrTxPrms-numColocatedRegions = 5;
parReg.tx.PrTxPrms-useLocalKeySet = true;
parReg.tx.PrTxPrms-sameKeyColocatedRegions = ${sameKeyColocatedRegions};


