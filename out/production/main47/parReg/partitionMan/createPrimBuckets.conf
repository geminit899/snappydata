INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

//THREADGROUP singleThread totalThreads = 1;
THREADGROUP oneAccessorThread totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP accessorThreads
    totalThreads = fcn
                   (${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}) -1
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP oneDataStoreThread totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   (${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}) -1
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

// initialize and write snapshot (region is empty)
INITTASK     taskClass   = parReg.partitionMan.PartitionManTest  taskMethod = HydraTask_initialize
             threadGroups = dataStoreThreads,oneDataStoreThread;
INITTASK     taskClass   = parReg.partitionMan.PartitionManTest  taskMethod = HydraTask_initialize
             parReg.ParRegPrms-createAccessor=true
             threadGroups = accessorThreads,oneAccessorThread;
INITTASK     taskClass   = parReg.partitionMan.PartitionManTest  taskMethod = HydraTask_writeSnapshot
             threadGroups = oneDataStoreThread;

// create primary buckets with empty PR
INITTASK     taskClass   = parReg.partitionMan.PartitionManTest  taskMethod = HydraTask_createPrimBuckets
             threadGroups = oneDataStoreThread;

// disconnect and reinitialize
INITTASK     taskClass   = parReg.partitionMan.PartitionManTest  taskMethod = HydraTask_disconnect
             threadGroups = dataStoreThreads,oneDataStoreThread,accessorThreads,oneAccessorThread;
INITTASK     taskClass   = parReg.partitionMan.PartitionManTest  taskMethod = HydraTask_initialize
             threadGroups = dataStoreThreads,oneDataStoreThread;
INITTASK     taskClass   = parReg.partitionMan.PartitionManTest  taskMethod = HydraTask_initialize
             parReg.ParRegPrms-createAccessor=true
             threadGroups = accessorThreads,oneAccessorThread;

// load the data and create another snapshot
INITTASK     taskClass   = parReg.partitionMan.PartitionManTest  taskMethod = HydraTask_load
             threadGroups = dataStoreThreads,oneDataStoreThread,accessorThreads,oneAccessorThread;
INITTASK     taskClass   = parReg.partitionMan.PartitionManTest  taskMethod = HydraTask_writeSnapshot
             threadGroups = oneDataStoreThread;

// randomly choose one data store thread and create primary buckets again on a non-empyt PR
TASK         taskClass   = parReg.partitionMan.PartitionManTest  taskMethod = HydraTask_createPrimBuckets
             threadGroups = dataStoreThreads,oneDataStoreThread
             maxTimesToRun=1;

hydra.Prms-maxResultWaitSec = 900;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names          = dataStore                    accessor;
hydra.RegionPrms-regionName     = testPR                       testPR;
hydra.RegionPrms-dataPolicy     = partition                    partition;
hydra.RegionPrms-partitionName  = pr                           prAccessor;

hydra.PartitionPrms-names           = pr                   prAccessor;
hydra.PartitionPrms-redundantCopies = ${redundantCopies}   ${redundantCopies};
hydra.PartitionPrms-localMaxMemory  = default              0;
hydra.PartitionPrms-totalNumBuckets = 50;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10;
util.ValueHolderPrms-useExtraObject = true;

parReg.ParRegPrms-destroyExistingRemote = ${destroyExistingRemote};
parReg.ParRegPrms-destroyExistingLocal = ${destroyExistingLocal};
