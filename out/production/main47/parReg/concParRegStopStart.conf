hydra.Prms-testRequirement = "Test partitioned regions with a variety of 
operations and vms that stop and start, but with no redundant copies. 
No verification of data can be done (with no redundant copies we are 
guaranteed to lose data), but we are looking for hangs in the absense 
of HA."; 
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion while stopping and starting vms.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p.inc;

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initialize
             runMode = always;

TASK         taskClass   = parReg.ParRegTest  taskMethod = HydraTask_doEntryOpsDataLoss;

TASK         taskClass   = parReg.ParRegTest  taskMethod = HydraTask_stopStartVMs
             maxThreads = 1;

CLOSETASK    taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_waitForRecovery;

CLOSETASK    taskClass   = parReg.ParRegTest  taskMethod = HydraTask_logLocalSize;

CLOSETASK    taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 1200;  // this is workload based
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names          = clientRegion;
hydra.RegionPrms-regionName     = partitionedRegion;
hydra.RegionPrms-cacheLoader    = parReg.ParRegLoader;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = pr;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
 
util.TestHelperPrms-minTaskGranularitySec = 45;

// lynn - local destroy not supported for partitioned regions for Congo
// lynn - local invalidate not supported for partitioned regions for Congo
// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
parReg.ParRegPrms-entryOperations = ONEOF add add getNew getNew update invalidate get destroy 
                                          putIfAbsent remove replaceNoInval replaceOldNoInval FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThreshold = 10;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsentAsCreate FOENO;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;
util.StopStartPrms-numVMsToStop = RANGE 1 ${numVMsToStop} EGNAR;
util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT FOENO;
