hydra.Prms-testRequirement = "Test high availability of partitioned regions with a variety of operations with validation and concurrent execution";
hydra.Prms-testDescription = "
With a variety of accessor and data host VMs, randomly kill ${numVMsToStop} VMs at
a time, then bring it back and verify the data.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;
hydra.GemFirePrms-distributedSystem = ds;   // all members are in the same DS

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask;

INITTASK     taskClass   = util.PRObserver  taskMethod = initialize
             runMode = once
             threadGroups = dataStoreThreads;

// create gateway hub & regions
INITTASK     taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = HydraTask_initialize
             hydra.ConfigPrms-gatewayHubConfig = hub
             hydra.ConfigPrms-regionConfig = dataStoreRegion 
             threadGroups = wbclThreads
             ;

// define the local region for the wbcl to maintain (based on events)
INITTASK     taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = HydraTask_initializeRegion
             hydra.ConfigPrms-regionConfig = wbclRegion
             threadGroups = wbclThreads
             ;

INITTASK     taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = startGatewayHubTask
             hydra.ConfigPrms-gatewayConfig = gateway
             threadGroups = wbclThreads
             ;

INITTASK     taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_HA_initializeDataStore
             runMode = once
             threadGroups = dataStoreThreads;

INITTASK     taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_HA_initializeAccessor
             runMode = once
             threadGroups = accessorThreads;

INITTASK     taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_HA_reinitializeAccessor
             threadGroups = accessorThreads
             runMode = dynamic;

INITTASK     taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_HA_reinitializeDataStore
             threadGroups = dataStoreThreads
             runMode = dynamic;

INITTASK     taskClass   =  parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_waitForMyStartupRecovery
             threadGroups = dataStoreThreads;

// maxThreads of 1 means only one thread will be running the HAController at a time
TASK         taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_HAController
             threadGroups = wbclThreads, dataStoreThreads, accessorThreads
             maxThreads = 1;

TASK         taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_HADoEntryOps
             threadGroups = wbclThreads, dataStoreThreads, accessorThreads;

CLOSETASK    taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
             threadGroups = dataStoreThreads;

// all threads in subgroup A are accessorThreads, 
// all threads in subgroup B are dataStoreThreads and
// all threads in subgroup C are wbcl(dataStore) threads
THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP wbclThreads
    totalThreads = fcn
                   ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;

hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.Prms-useFixedRandomInMaster= true;
hydra.Prms-totalTaskTimeSec = 31536000;  // don't let hydra terminate based on time
hydra.Prms-maxResultWaitSec = 1020;  // 17 minutes to avoid timeouts on slow machines
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

// this is the granularity for pausing
util.TestHelperPrms-minTaskGranularitySec = 10;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;

hydra.ConfigPrms-cacheConfig    = cache1;
hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

// Gateway related configuration for WBCL
hydra.GatewayHubPrms-names = hub;
hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-diskStoreName = disk;
hydra.GatewayPrms-listeners = parReg.wbcl.WBCLEventListener;
hydra.DiskStorePrms-names = disk;

// The primary and secondary (wbcl) share a replicated region
// Since HAController can disconnect the member or close the cache, the 
// secondary needs to pick up where the primary leaves off.
hydra.RegionPrms-names          = wbclRegion   clientRegion          dataStoreRegion;
hydra.RegionPrms-regionName     = wbclRegion   partitionedRegion;
hydra.RegionPrms-cacheLoader    = none         parReg.ParRegLoader;
hydra.RegionPrms-dataPolicy     = replicate    partition;
hydra.RegionPrms-scope          = ack          default;
hydra.RegionPrms-enableGateway  = false        true;
hydra.RegionPrms-partitionName  = none         accessorPR               dataStorePR;
hydra.RegionPrms-cacheListeners = none         util.SummaryLogListener;

hydra.PartitionPrms-names           = accessorPR          dataStorePR;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-localMaxMemory  = 0                   default;

// don't allow conflict between multiple writers
parReg.ParRegPrms-bridgeOrderingWorkaround = uniqueKeys;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)
parReg.ParRegPrms-entryOperations = ONEOF add putAll putIfAbsent remove replaceNoInval replaceOldNoInval getNew getNew update get destroy FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsentAsCreate FOENO;
parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;

parReg.ParRegPrms-secondsToRun = 1800; // this is the time for the whole run
parReg.ParRegPrms-numVMsToStop = ${numVMsToStop};
parReg.ParRegPrms-stopVMsMatchStr = "dataStore";  // only stop dataStores (not wbcl vm)
parReg.ParRegPrms-localMaxMemory = RANGE 1 10 EGNAR;
util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
parReg.ParRegPrms-highAvailability = true;
util.CachePrms-useDeclarativeXmlFile = false;

memscale.MemScalePrms-offHeapVerifyTargetCount = fcn (${dataStoreHosts} * ${dataStoreVMsPerHost} * ${dataStoreThreadsPerVM}) +
                                                     (${accessorHosts} * ${accessorVMsPerHost} * ${accessorThreadsPerVM}) +
                                                     (${wbclHosts} * ${wbclVMsPerHost} * ${wbclThreadsPerVM}) ncf;
