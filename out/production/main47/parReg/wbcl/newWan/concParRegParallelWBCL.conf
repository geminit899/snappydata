hydra.Prms-testRequirement = "Test Partitioned region with parallel AsyncEventListener with a variety of operations with careful validation and concurrent execution";
hydra.Prms-testDescription = "This test executes operations on entries on a PartitionedRegion and carefully validates for correctness. 
The test is configured with parallel AsyncEventListener.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_1.inc;

// define the client region and AsyncListener
INITTASK  taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = HydraTask_initialize                   
          hydra.ConfigPrms-regionConfig           = dataStoreRegion
          threadGroups = peer
          ;

// define the local region for the wbcl to maintain (based on events)
INITTASK  taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = HydraTask_initializeNewWanWBCL
          hydra.ConfigPrms-asyncEventQueueConfig  = wbclQueue
          hydra.ConfigPrms-regionConfig           = wbclRegion
          threadGroups = peer 
          ;

TASK      taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_doConcOpsAndVerify
          threadGroups = peer
          ;

CLOSETASK taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_prepareForValidation
          threadGroups = peer
          ;

CLOSETASK taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
          threadGroups = peer
          ;

CLOSETASK taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_validatePR
          threadGroups = peer
          ;

CLOSETASK taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_verifyWBCLRegion
          hydra.ConfigPrms-regionConfig = wbclRegion
          threadGroups = peer
          ;

THREADGROUP peer 
    totalThreads = fcn
                   ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM}
                   ncf 
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"peer\", ${peerHosts}, true)"
                   ncf;

hydra.GemFirePrms-stopSystemsAfterTest = true;

// parReg.ParRegPrms-secondsToRun determines the running length rather than 
// totalTaskTimeSec because of the test's pausing scheme; without this the
// test could hang 
hydra.Prms-totalTaskTimeSec = 31536000;  
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 50 100 500 1000 2500 5000 FOENO;

util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets   = false;

hydra.ConfigPrms-cacheConfig    = cache1;
hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

//WBCL configuration
hydra.AsyncEventQueuePrms-names                 = wbclQueue;
hydra.AsyncEventQueuePrms-asyncEventListener    = parReg.wbcl.newWan.MyAsyncEventListener;
hydra.AsyncEventQueuePrms-batchSize             = 10;
hydra.AsyncEventQueuePrms-diskStoreName         = wbclDisk;
hydra.AsyncEventQueuePrms-maximumQueueMemory    = 110;
hydra.AsyncEventQueuePrms-parallel              = true; //enable parallel mode 
hydra.AsyncEventQueuePrms-persistent            = ONEOF true false FOENO;
hydra.DiskStorePrms-names                       = disk wbclDisk;

hydra.RegionPrms-names          = dataStoreRegion   wbclRegion  dupEventPRegion;
hydra.RegionPrms-regionName     = dataStoreRegion   wbclRegion  dupEventPRegion;
hydra.RegionPrms-dataPolicy     = partition         replicate   replicate;
hydra.RegionPrms-scope          = default           ack         ack;
hydra.RegionPrms-asyncEventQueueNames = wbclQueue,  none,       none;
hydra.RegionPrms-cacheListeners = util.SummaryLogListener, util.InvisibleSilenceListener, none;
hydra.RegionPrms-partitionName  = pr                none        none; 


hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

// todo@rdiyewar -- test with xml files
//util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = ONEOF 15 30 45 60 FOENO;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// rdiyewar -- invalidate not supported by WAN/WBCL
parReg.ParRegPrms-entryOperations = ONEOF add getNew putIfAbsentAsCreate update get destroy remove replaceNoInval replaceOldNoInval FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThreshold = 10;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add putIfAbsentAsCreate FOENO;

parReg.ParRegPrms-secondsToRun = 900;

// for WBCL testing, we need restrict the test to 1 writer per entry/key
parReg.ParRegPrms-bridgeOrderingWorkaround = uniqueKeys;

memscale.MemScalePrms-offHeapVerifyTargetCount = fcn ${peerHosts} * ${peerVMsPerHost} ncf;
