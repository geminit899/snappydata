//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

//-------------------------------------------------------------------------------

hydra.Prms-testRequirement = "Test Partitioned region with serial AsyncEventListener with a variety of operations with careful validation and concurrent execution";
hydra.Prms-testDescription = "This test executes operations on entries on a PartitionedRegion and carefully validates for correctness. 
The test is configured with serial AsyncEventListener with key order policy.";

hydra.Prms-totalTaskTimeSec = 100;
hydra.Prms-maxResultWaitSec = 1200;
util.TestHelperPrms-minTaskGranularitySec = 20;
wan.CacheClientPrms-iterations            = 100; 

//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

hydra.CachePrms-names = cache;

hydra.RegionPrms-names          = dataStoreRegion      wbclRegion;
hydra.RegionPrms-regionName     = Region_GlobalVillage wbclRegion;
hydra.RegionPrms-dataPolicy     = partition         replicate;
hydra.RegionPrms-scope          = default           ack;
hydra.RegionPrms-asyncEventQueueNames = wbclQueue,  none;
hydra.RegionPrms-cacheListeners = none, orderPolicy.SequentialValuesListener;
hydra.RegionPrms-partitionName  = pr                none;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = 1;

//---------------------------------------------------------------------------------
// WBCL configuration
//---------------------------------------------------------------------------------

hydra.AsyncEventQueuePrms-names                 = wbclQueue;
hydra.AsyncEventQueuePrms-batchSize             = 10;
hydra.AsyncEventQueuePrms-diskStoreName         = wbclDisk;
hydra.AsyncEventQueuePrms-maximumQueueMemory    = 110;
hydra.AsyncEventQueuePrms-parallel              = false; //enable serial mode
hydra.AsyncEventQueuePrms-persistent            = ONEOF true false FOENO;
hydra.DiskStorePrms-names                       = disk wbclDisk;

hydra.AsyncEventQueuePrms-asyncEventListener    = parReg.wbcl.newWan.WBCLOrderPolicyListener;
hydra.AsyncEventQueuePrms-orderPolicy           = key;
hydra.AsyncEventQueuePrms-dispatcherThreads     = RANGE 2 5 EGNAR;   // concurrencyLevel must be > 1 when OrderPolicyTest is configured

//------------------------------------------------------------------------------
// Data
//------------------------------------------------------------------------------

// use ValueHolder, encode opNum in 'modVal' field
INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 100;
util.ValueHolderPrms-useExtraObject = false;

//----------------------------------------------------------------------------

hydra.GemFirePrms-conserveSockets = false;
hydra.VmPrms-extraVMArgs = -Xms500m -Xmx500m;

//------------------------------------------------------------------------------
// Threadgroups
//------------------------------------------------------------------------------

THREADGROUP wbcl
    totalThreads = fcn
                   ${wbclHosts} * ${wbclVMsPerHost} * ${wbclThreadsPerVM}
                   ncf 
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"wbcl\", ${wbclHosts}, true)"
                   ncf;
THREADGROUP peer 
    totalThreads = fcn
                   ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM}
                   ncf 
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"peer\", ${peerHosts}, true)"
                   ncf;
                   
//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, caches, regions)
//------------------------------------------------------------------------------
INITTASK taskClass = parReg.wbcl.newWan.WBCLOrderPolicyTest taskMethod = initPeerForOrderPolicyTest
         wan.CacheClientPrms-cacheConfig = cache
         hydra.ConfigPrms-regionConfig  = wbclRegion
         hydra.ConfigPrms-asyncEventQueueConfig  = wbclQueue
         runMode = always
         threadGroups = wbcl;

INITTASK taskClass = parReg.wbcl.newWan.WBCLOrderPolicyTest taskMethod = createDSRegionTask         
         hydra.ConfigPrms-regionConfig  = dataStoreRegion
         runMode = always
         threadGroups = wbcl;
         
INITTASK taskClass = parReg.wbcl.newWan.WBCLOrderPolicyTest taskMethod = initPeerForOrderPolicyTest
         wan.CacheClientPrms-cacheConfig = cache
         hydra.ConfigPrms-regionConfig = dataStoreRegion
         runMode = always
         threadGroups = peer;
         
INITTASK taskClass = parReg.wbcl.newWan.WBCLOrderPolicyTest taskMethod = initializeInstanceTask
         runMode = always
         threadGroups = peer;

//------------------------------------------------------------------------------
// PRIMARY WORK
//------------------------------------------------------------------------------

TASK taskClass = parReg.wbcl.newWan.WBCLOrderPolicyTest taskMethod = putsForKeyOrderPolicyTask
     threadGroups = peer;
     
wan.CacheClientPrms-sleepSec              = 0;

//------------------------------------------------------------------------------
// FINAL WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = parReg.wbcl.newWan.WBCLOrderPolicyTest taskMethod = waitForSilenceTask
          threadGroups = peer;          
CLOSETASK taskClass = parReg.wbcl.newWan.WBCLOrderPolicyTest taskMethod = printSequentialKeysTask
          threadGroups = peer;
CLOSETASK taskClass = parReg.wbcl.newWan.WBCLOrderPolicyTest taskMethod = checkForEventErrors
          threadGroups = peer;
CLOSETASK taskClass = parReg.wbcl.newWan.WBCLOrderPolicyTest taskMethod = closePeerCacheTask
          threadGroups = peer;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = peer;


