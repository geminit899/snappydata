hydra.Prms-testRequirement = "Test partitioned regions with a variety of operations with careful validation and concurrent execution";
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion and carefully
validates for correctness. The data store for the partitioned region is spread
across all VMs. 
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

// create gateway hub & regions
INITTASK  taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = HydraTask_initialize
          hydra.ConfigPrms-gatewayHubConfig = hub
          hydra.ConfigPrms-regionConfig = gatewayRegion
          threadGroups = wbcl
          ;

// define the local region for the wbcl to maintain (based on events)
INITTASK  taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = HydraTask_initializeRegion
          hydra.ConfigPrms-regionConfig = wbclRegion
          threadGroups = wbcl 
          ;

INITTASK  taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = HydraTask_initialize
          hydra.ConfigPrms-regionConfig = clientRegion
          threadGroups = peer
          ;

INITTASK  taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = startGatewayHubTask
          hydra.ConfigPrms-gatewayConfig = gateway
          threadGroups = wbcl
          ;

TASK      taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_doConcOpsAndVerify
          threadGroups = wbcl, peer
          ;

CLOSETASK taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_prepareForValidation
          threadGroups = wbcl, peer
          ;

CLOSETASK taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
          threadGroups = wbcl, peer
          ;

CLOSETASK taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_validatePR
          threadGroups = wbcl, peer
          ;

CLOSETASK taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_verifyWBCLRegion
          hydra.ConfigPrms-regionConfig = wbclRegion
          threadGroups = wbcl
          ;

THREADGROUP wbcl
    totalThreads = fcn
                   ${wbclHosts} * ${wbclVMsPerHost} * ${wbclThreadsPerVM}
                   ncf 
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"wbcl\", ${wbclHosts}, true)"
                   ncf;
THREADGROUP peer 
    totalThreads = fcn
                   ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM}
                   ncf 
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"peer\", ${peerHosts}, true)"
                   ncf;

hydra.GemFirePrms-stopSystemsAfterTest = true;

// parReg.ParRegPrms-secondsToRun determines the running length rather than 
// totalTaskTimeSec because of the test's pausing scheme; without this the
// test could hang 
hydra.Prms-totalTaskTimeSec = 31536000;  
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 50 100 500 1000 2500 5000 FOENO;

util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.ConfigPrms-cacheConfig    = cache1;
hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

// Gateway related configuration for WBCL 
hydra.GatewayHubPrms-names = hub;
hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-diskStoreName = disk;
hydra.GatewayPrms-listeners = parReg.wbcl.WBCLEventListener;
hydra.DiskStorePrms-names = disk;

hydra.RegionPrms-names          = clientRegion         gatewayRegion       wbclRegion;
hydra.RegionPrms-regionName     = partitionedRegion    partitionedRegion   wbclRegion;
hydra.RegionPrms-dataPolicy     = partition            partition           normal;
hydra.RegionPrms-scope          = default              default             local;
hydra.RegionPrms-enableGateway  = true                 true                false;
hydra.RegionPrms-partitionName  = pr                   pr                  none;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

// todo@lhughes -- add support for gateway xml generation
//util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = ONEOF 15 30 45 60 FOENO;

// lynn - local destroy not supported for partitioned regions for Congo
// lynn - local invalidate not supported for partitioned regions for Congo
// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lhughes -- invalidate not supported by Gateway/WBCL
parReg.ParRegPrms-entryOperations = ONEOF add getNew putIfAbsent update get destroy remove replaceNoInval replaceOldNoInval FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThreshold = 10;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsentAsCreate FOENO;

parReg.ParRegPrms-secondsToRun = 1200;

// for WBCL testing, we need restrict the test to 1 writer per entry/key
parReg.ParRegPrms-bridgeOrderingWorkaround = uniqueKeys;
memscale.MemScalePrms-offHeapVerifyTargetCount = fcn ((${peerHosts} * ${peerVMsPerHost}) +
                                                      (${wbclHosts} * ${wbclVMsPerHost})) ncf;
