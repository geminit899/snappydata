hydra.Prms-testRequirement = "Test overflow and persistence with resource manager set for heap eviction.
Clients are kept light by evicting with destroy so they don't attempt to contain the whole PR. Use
lots of keys to stress things";
hydra.Prms-testDescription = "
Create servers hosting a PR with a loader, configure resource manager for heap eviction
and overflow to disk. Clients created with destroy eviction to keep the clients light.
";

INCLUDE $JTESTS/parReg/persistence/manyKeysOverflow.conf;

CLOSETASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_disconnect
              threadGroups = bridgeThreads, accessorThreads, extraBridge1, extraBridge2, extraBridge3, extraBridge4;

// recover from disk and validate recovery
CLOSETASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initializeBridgeServer
              threadGroups = bridgeThreads, extraBridge1, extraBridge2, extraBridge3, extraBridge4;

CLOSETASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initializeBridgeServerAccessor
              threadGroups = accessorThreads;

CLOSETASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_validateIntervalOps
              threadGroups = verifyThreads
              batch;

// prepare for offline validation and compaction
CLOSETASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_disconnect
              threadGroups = bridgeThreads, accessorThreads, extraBridge1, extraBridge2, extraBridge3, extraBridge4;

CLOSETASK     taskClass   = util.PersistenceUtil  taskMethod = HydraTask_doOfflineValAndCompactionOnce
              threadGroups = bridgeThreads, extraBridge1, extraBridge2, extraBridge3, extraBridge4;

// validate after compaction
CLOSETASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initializeBridgeServer
              threadGroups = bridgeThreads, extraBridge1, extraBridge2, extraBridge3, extraBridge4;

CLOSETASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initializeBridgeServerAccessor
              threadGroups = accessorThreads;

CLOSETASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_validateIntervalOps
              threadGroups = verifyThreads
              batch;

hydra.RegionPrms-dataPolicy         = default                 persistentPartition   partition;
