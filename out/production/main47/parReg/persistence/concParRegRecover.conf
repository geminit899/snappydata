hydra.Prms-testRequirement = "Test to stop all vms with concurrent ops and a persistent PR with concurrent ops and validation";
hydra.Prms-testDescription = "Allow only a datastore to run the controller, it stops all other vms. Once they are stopped
and there are no more concurrent ops it writes its state to the blackboard, then disconnects itself (now all datastores
are stopped). It then recovers from disk and does validation to ensure the data is consistent.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

// all threads in subgroup A are accessorThreads, and all threads in subgroup B
// are in dataStoreThreads
THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask;

INITTASK     taskClass   = util.PRObserver  taskMethod = initialize
             runMode = once
             threadGroups = dataStoreThreads;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_HA_initializeDataStore
             runMode = once
             threadGroups = dataStoreThreads;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_HA_initializeAccessor
             runMode = once
             threadGroups = accessorThreads;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_HA_reinitializeAccessor
             threadGroups = accessorThreads
             runMode = dynamic;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_HA_reinitializeDataStore
             threadGroups = dataStoreThreads
             runMode = dynamic;

INITTASK     taskClass   =  parReg.ParRegTest  taskMethod = HydraTask_waitForStartupRecovery
             threadGroups = dataStoreThreads
             runMode = dynamic;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_verifyRecoveredVMsFromSnapshotAndSync
             threadGroups = dataStoreThreads, accessorThreads
             runMode = dynamic;

// prepare for end task recovery
INITTASK    taskClass   = parReg.ParRegTest  taskMethod = HydraTask_writeDiskDirsToBB
            runMode = once;

// maxThreads of 1 means only one thread will be running the HAController at a time
// don't let an accessor run this; we need the pr values to be present when this is the
// last vm left standing so it can create a snapshot
TASK         taskClass   = parReg.ParRegTest  taskMethod = HydraTask_recoveryController
             threadGroups = dataStoreThreads
             maxThreads = 1;

TASK         taskClass   = parReg.ParRegTest  taskMethod = HydraTask_recoveryEntryOps
             threadGroups = dataStoreThreads, accessorThreads;

CLOSETASK   taskClass   = parReg.ParRegTest  taskMethod = HydraTask_prepareForValidation;

CLOSETASK    taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance;

CLOSETASK   taskClass   = parReg.ParRegTest  taskMethod = HydraTask_validatePR;

// recover from disk and validate recovery
INCLUDE $JTESTS/parReg/persistence/peerWithGroupsEndTasks.inc;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 31536000;  // don't let hydra terminate based on time
hydra.Prms-maxResultWaitSec = 1020;  // 17 minutes to avoid timeouts on slow machines
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

// this is the granularity for pausing
util.TestHelperPrms-minTaskGranularitySec = 10;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)
parReg.ParRegPrms-entryOperations = ONEOF add putAll getNew getNew update invalidate get destroy 
                                          putIfAbsent remove replaceNoInval replaceOldNoInval FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsentAsCreate FOENO;
parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;

parReg.ParRegPrms-secondsToRun = 600; // this is the time for the whole run
parReg.ParRegPrms-localMaxMemory = RANGE 1 10 EGNAR;
util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
parReg.ParRegPrms-highAvailability = true;
util.CachePrms-useDeclarativeXmlFile = true;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion           dataStoreRegion;
hydra.RegionPrms-regionName     = partitionedRegion;
hydra.RegionPrms-cacheLoader    = parReg.ParRegLoader;
hydra.RegionPrms-dataPolicy       = partition                persistentPartition;
hydra.RegionPrms-partitionName  = accessorPR               dataStorePR;
hydra.RegionPrms-diskStoreName    = none                     diskStore1;
hydra.RegionPrms-diskSynchronous  = true;

hydra.PartitionPrms-names           = accessorPR          dataStorePR;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-localMaxMemory  = 0                   default;
hydra.PartitionPrms-recoveryDelay   = 0; // immediate recovery when member leaves
hydra.PartitionPrms-startupRecoveryDelay   = 0; // immediate recovery when member joins
 
hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

