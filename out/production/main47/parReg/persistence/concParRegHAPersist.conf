hydra.Prms-testRequirement = "Test high availability of persistent partitioned regions with a variety of 
operations with validation and concurrent execution";

INCLUDE $JTESTS/parReg/concParRegHA.conf;

// prepare for end task recovery
INITTASK    taskClass   = parReg.ParRegTest  taskMethod = HydraTask_writeDiskDirsToBB
            runMode = once;

// recover from disk and validate recovery
INCLUDE $JTESTS/parReg/persistence/peerWithGroupsEndTasks.inc;

parReg.ParRegPrms-secondsToRun = 900;

//hydra.RegionPrms-names          = accessorRegion           dataStoreRegion;
hydra.RegionPrms-dataPolicy       = partition                persistentPartition;
hydra.RegionPrms-diskStoreName    = none                     diskStore1;
hydra.RegionPrms-diskSynchronous  = true;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

// don't do writes in servers that can be killed
parReg.ParRegPrms-designateOps = true;
parReg.ParRegPrms-accessorOperations = ONEOF add putAll putIfAbsentAsCreate add putAll putIfAbsentAsCreate
                                             getNew getNew update invalidate get 
                                             destroy remove putIfAbsent replaceNoInval replaceOldNoInval FOENO; 
parReg.ParRegPrms-dataStoreOperations = ONEOF get getNew FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdAccessorOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-upperThresholdDataStoreOperations = ONEOF get removeAsNoop replaceAsNoop replaceOldAsNoop FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdAccessorOperations = ONEOF add putAll putIfAbsentAsCreate FOENO;
parReg.ParRegPrms-lowerThresholdDataStoreOperations = ONEOF get removeAsNoop replaceAsNoop replaceOldAsNoop FOENO;

parReg.ParRegPrms-entryOperations = notUsed;
parReg.ParRegPrms-lowerThresholdOperations = notUsed;
parReg.ParRegPrms-upperThresholdOperations = notUsed;

hydra.RegionPrms-cacheLoader    = none; // don't cause a write with a loader

parReg.ParRegPrms-bridgeOrderingWorkaround = ONEOF registerInterest uniqueKeys FOENO;

