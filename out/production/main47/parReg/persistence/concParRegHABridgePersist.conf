hydra.Prms-testRequirement = "Test high availability of partitioned regions with a variety of operations with validation and concurrent execution";
hydra.Prms-testDescription = "
With a variety of accessor and data host VMs, randomly kill ${numVMsToStop} VMs at
a time, then bring it back and verify the data.
";

INCLUDE $JTESTS/parReg/bridge/concParRegHABridge.conf;

// prepare for end task recovery
INITTASK    taskClass   = parReg.ParRegTest  taskMethod = HydraTask_writeDiskDirsToBB
            runMode = once;

// recover from disk and validate recovery
INCLUDE $JTESTS/parReg/persistence/bridgeEndTasks.inc;

parReg.ParRegPrms-secondsToRun = 900;

hydra.RegionPrms-dataPolicy      = default empty default persistentPartition partition;
hydra.RegionPrms-diskStoreName   = none    none  none    diskStore1          none;
hydra.RegionPrms-diskSynchronous  = true;

hydra.GemFirePrms-conserveSockets = true;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

hydra.PoolPrms-subscriptionRedundancy   = fcn ${bridgeHosts} * ${bridgeVMsPerHost} - 1 ncf;

parReg.ParRegPrms-designateOps = true;
parReg.ParRegPrms-accessorOperations = ONEOF add putAll putIfAbsentAsCreate add putAll putIfAbsentAsCreate 
                                             getNew getNew update get destroy 
                                             putIfAbsent remove replaceNoInval replaceOldNoInval FOENO; 
parReg.ParRegPrms-dataStoreOperations = ONEOF get get get get getNew 
                                              removeAsNoop replaceAsNoop replaceOldAsNoop FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdAccessorOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-upperThresholdDataStoreOperations = ONEOF get removeAsNoop replaceAsNoop replaceOldAsNoop FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdAccessorOperations = ONEOF add putAll putIfAbsentAsCreate FOENO;
parReg.ParRegPrms-lowerThresholdDataStoreOperations = ONEOF get removeAsNoop replaceAsNoop replaceOldAsNoop FOENO;

parReg.ParRegPrms-entryOperations = notUsed;
parReg.ParRegPrms-lowerThresholdOperations = notUsed;
parReg.ParRegPrms-upperThresholdOperations = notUsed;

hydra.RegionPrms-cacheLoader    = none; // don't cause a write with a loader

parReg.ParRegPrms-bridgeOrderingWorkaround = ONEOF uniqueKeys registerInterest FOENO;

