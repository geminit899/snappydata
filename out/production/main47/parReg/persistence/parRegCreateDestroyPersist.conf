hydra.Prms-testDescription = "
Concurrently create and destroy persistent partitioned regions.
";

hydra.Prms-testDescription = "
Concurrently create and destroy partitioned regions.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

// all topology groups are peers
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP adminThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP peerThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

INITTASK  taskClass = parReg.ParRegCreateDestroy taskMethod = HydraTask_initialize
          threadGroups = peerThreads;

INITTASK  taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
          threadGroups = adminThread;

TASK      taskClass = parReg.ParRegCreateDestroy taskMethod = HydraTask_createDestroyWithPersistence
          threadGroups = peerThreads;

TASK      taskClass = parReg.ParRegCreateDestroy taskMethod = HydraTask_revokeWaitingMembers
          threadGroups = adminThread;

// prepare for offline validation and compaction
hydra.Prms-doStartAndEndTasksLockStep = true;
ENDTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_disconnect; 
ENDTASK     taskClass   = util.PersistenceUtil  taskMethod = HydraTask_doOfflineValAndCompactionOnce;


hydra.Prms-totalTaskTimeSec = 1800; // test is workload based
parReg.ParRegPrms-secondsToRun = 300;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = 30;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names          = 
      region1 region2 region3 region4 region5 region6 region7 region8 region9 region10;
hydra.RegionPrms-regionName     = 
      clientRegion1 clientRegion2 clientRegion3 clientRegion4 clientRegion5 
      clientRegion6 clientRegion7 clientRegion8 clientRegion9 clientRegion10;
hydra.RegionPrms-dataPolicy     = persistentPartition;
hydra.RegionPrms-partitionName  = 
      pr1 pr2 pr3 pr4 pr5 pr6 pr7 pr8 pr9 pr10;

hydra.PartitionPrms-names           = 
      pr1 pr2 pr3 pr4 pr5 pr6 pr7 pr8 pr9 pr10;
hydra.PartitionPrms-redundantCopies = 
      ONEOF 0 1 FOENO ONEOF 0 1 FOENO ONEOF 0 1 FOENO ONEOF 0 1 FOENO ONEOF 0 1 FOENO 
      ONEOF 0 1 FOENO ONEOF 0 1 FOENO ONEOF 0 1 FOENO ONEOF 0 1 FOENO ONEOF 0 1 FOENO;

hydra.RegionPrms-diskStoreName   = diskStore1;
hydra.RegionPrms-diskSynchronous = oneof true false foeno;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;


