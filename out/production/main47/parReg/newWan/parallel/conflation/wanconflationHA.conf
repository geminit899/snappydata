include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/newWan/hct.inc;
include $JTESTS/newWan/wan_parallel.inc;

hydra.Prms-testDescription = "Test creates partition region with parallel gateway sender with batchConflationEnabled. Also bounce the GatewaySender VM. Validate that the sender has conflated events correctly.";

hydra.Prms-totalTaskTimeSec = 999999; // terminates on num recoveries
hydra.Prms-maxResultWaitSec = 1800;

//------------------------------------------------------------------------------
// Threadgroups
//------------------------------------------------------------------------------

THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  totalVMs     = fcn ${wanSites} * ${edgeHostsPerSite} * ${edgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
             (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;
             
//-------------------------------------------------------------------------------
// Tasks
//-------------------------------------------------------------------------------

// run this task first
INITTASK  taskClass = cacheperf.comparisons.parReg.recovery.PRObserver taskMethod = installObserverHook
          runMode      = dynamic
          threadGroups = bridge
          ;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask    
          threadGroups = locator
          ;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig  = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          hydra.ConfigPrms-gatewaySenderConfig   = sender
          hydra.ConfigPrms-gatewayReceiverConfig = receiver
          threadGroups = bridge
          ;          

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig  = edge          
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge          
          ;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = registerInterestTask          
          batch
          cacheperf.CachePerfPrms-keyAllocation = sameKeys
          cacheperf.CachePerfPrms-maxKeys = ${maxKeys}
          cacheperf.CachePerfPrms-warmupTerminatorMethod  = none
          cacheperf.CachePerfPrms-taskTerminatorMethod    = terminateOnNumOperations
          cacheperf.CachePerfPrms-numOperations           = ${maxKeys}
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = edge
          ;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation          = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none          
          cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnMaxKey
          cacheperf.CachePerfPrms-batchSize              = 500
          threadGroups = edge
          ;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = restartDataHostTask
          hydra.ConfigPrms-cacheConfig  = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          hydra.ConfigPrms-gatewaySenderConfig   = sender
          hydra.ConfigPrms-gatewayReceiverConfig = receiver
          runMode = dynamic
          threadGroups = bridge
          ;

TASK      taskClass = cacheperf.CachePerfClient taskMethod = bounceTask
          cacheperf.CachePerfPrms-waitForTrimSignal = true
          cacheperf.CachePerfPrms-maxExecutions     = 5  
          maxThreads = 1 // one bounce at a time 
          threadGroups = edge
          ;

TASK taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysWrap
          threadGroups = edge
          ;          

CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = rebalanceTask
          threadGroups = bridge;

CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = edge;

CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge;

CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask;

// validation
ENDTASK   taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          clientNames = edge_1_1;
          
ENDTASK   taskClass = conflation.ConflationClient taskMethod = validateConflationStatsTask
          conflation.ConflationPrms-conflationStatType = GatewaySenderStatistics
          conflation.ConflationPrms-conflationStat = eventsNotQueuedConflated
          conflation.ConflationPrms-expectNonZeroConflationStat = ${batchConflation}
          clientNames = edge_1_1;
          
ENDTASK   taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          clientNames = edge_1_1;

//------------------------------------------------------------------------------
 
cacheperf.CachePerfPrms-clientNameToBounce = ONEOF 
                                                   fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames 
                                                   (\"bridge\", ${wanSites}, ${bridgeHostsPerSite}, false)" ncf 
                                             FOENO ;
cacheperf.CachePerfPrms-restartWaitSec = 20;
cacheperf.CachePerfPrms-sleepMs = 0;
cacheperf.CachePerfPrms-useMeanKill = true;
cacheperf.CachePerfPrms-waitForRecovery = true;

//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 60;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateAndSignalOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 1 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 2;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnSignal;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;

//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

hydra.CachePrms-names            = bridge      edge;
hydra.RegionPrms-names           = bridge      edge;
hydra.RegionPrms-scope           = default     local;
hydra.RegionPrms-dataPolicy      = partition   default;
hydra.RegionPrms-partitionName   = bridge      none;
hydra.RegionPrms-cacheListeners  = util.SilenceListener, conflation.ConflationListener;
hydra.RegionPrms-poolName        = none        bridgeloader;
hydra.RegionPrms-gatewaySenderNames = sender;

hydra.PartitionPrms-names           = bridge;
hydra.PartitionPrms-redundantCopies = 1;

hydra.BridgePrms-names = bridge;

hydra.PoolPrms-names                 = bridgeloader ;
hydra.PoolPrms-minConnections        = 2;
hydra.PoolPrms-contactAlgorithm      = hydra.EdgeHelper getRandomEndpointsInWanHctSite;
hydra.PoolPrms-subscriptionEnabled   = true;
hydra.PoolPrms-threadLocalConnections  = true;
hydra.PoolPrms-readTimeout           = 60000;

//---------------------------------------------------------------------------------

hydra.GatewaySenderPrms-names               = sender;
hydra.GatewaySenderPrms-parallel            = true ; 
hydra.GatewaySenderPrms-remoteDistributedSystemsAlgorithm =  hydra.GatewaySenderHelper getRemoteDistributedSystems;
hydra.GatewaySenderPrms-diskStoreName       = senderDisk;
hydra.GatewaySenderPrms-batchConflationEnabled = ${batchConflation};
hydra.GatewaySenderPrms-batchSize               = 1000;
hydra.GatewaySenderPrms-batchTimeInterval       = 3000;
hydra.GatewayReceiverPrms-names             = receiver;

hydra.DiskStorePrms-names               = disk senderDisk;

//------------------------------------------------------------------------------
// Data
//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-maxKeys    = ${maxKeys};
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size           = ${dataSize};

    
