hydra.Prms-testDescription = "This test creates a partitioned region  with WAN sites with serial gateway senders, 
then does various entry operations on a known key range concurrently with PR Rebalance. 
Values are checked for correctness in the close task.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_wan_hct_locator.inc;

// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 
STARTTASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod = StartTask_initialize;

/**
 * Starts the locator and connects to admin-only distributed systems.
 */
INITTASK     taskClass = rebalance.RebalanceUtil taskMethod = createLocatorTask
             threadGroups = locator;

INITTASK     taskClass = newWan.WANTest taskMethod = startLocatorAndAdminDSTask
             threadGroups = locator;

INITTASK     taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_HA_dataStoreInitialize
             threadGroups = oneThreadPerBridgeVM;

// Non-WAN tests will simply return without doing anything from this task
INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_startNewWanComponents
             threadGroups = oneThreadPerBridgeVM;

INITTASK     taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_HA_accessorInitialize
             threadGroups = oneThreadPerEdgeVM;

INITTASK     taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_registerInterest
             threadGroups = oneThreadPerEdgeVM;             

INITTASK     taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_loadRegions
             threadGroups = edgeThreads, oneThreadPerEdgeVM 
             batch;

INITTASK     taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_waitForEventsReceival
             threadGroups  = oneThreadPerEdgeVM ;

INITTASK     taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = oneThreadPerBridgeVM;

INITTASK     taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_verifyRegionSize
             threadGroups = oneThreadPerBridgeVM;

// Last INITTASK is to add new capacity bridgeServer
INITTASK     taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_HA_dataStoreInitialize
             threadGroups = oneThreadPerNewCapacityBridge;

TASK         taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_doOps
             threadGroups = bridgeThreads, oneThreadPerBridgeVM, edgeThreads, oneThreadPerEdgeVM, newCapacityThreads;

TASK         taskClass     = rebalance.RebalanceTest taskMethod = HydraTask_rebalanceTask
             rebalance.RebalancePrms-verifyBalance = false
             threadGroups = oneThreadPerNewCapacityBridge;
             
CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_waitForEventsReceival
             threadGroups  = oneThreadPerEdgeVM ;

CLOSETASK    taskClass   = parReg.colocation.ParRegColocation  taskMethod = HydraTask_logLocalSize
             threadGroups = oneThreadPerBridgeVM;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyPrimaries
             threadGroups = oneThreadPerBridgeVM;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = oneThreadPerBridgeVM;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyBucketCopies
             threadGroups = oneThreadPerBridgeVM;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = oneThreadPerBridgeVM, oneThreadPerEdgeVM;

// Last CLOSETASK is to do a final rebalance
CLOSETASK    taskClass     = parReg.ParRegUtil  taskMethod  = HydraTask_rebalance
             rebalance.RebalancePrms-verifyBalance = true
             threadGroups = oneThreadPerNewCapacityBridge;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;

// bridge_1_1 will be the last to initialize (after loadRegion) to add new capacity
THREADGROUP newCapacityThreads 
     totalThreads = fcn ${bridgeThreadsPerVM} - 1 ncf 
     totalVMs = 1 
     clientNames  = bridge_1_1;

THREADGROUP oneThreadPerNewCapacityBridge 
     totalThreads = 1 
     totalVMs = 1 
     clientNames  = bridge_1_1;

THREADGROUP bridgeThreads 
   totalThreads = fcn 
      ((${wanSites} * ${bridgeHostsPerSite} * ${bridgeVMsPerHost}) - 1) 
                             * (${bridgeThreadsPerVM} - 1) ncf
  totalVMs = fcn (${wanSites} * ${bridgeHostsPerSite} * ${bridgeVMsPerHost}) - 1 ncf;

THREADGROUP oneThreadPerBridgeVM
  totalThreads = fcn (${wanSites} * ${bridgeHostsPerSite} * ${bridgeVMsPerHost}) - 1 ncf
  totalVMs     = fcn (${wanSites} * ${bridgeHostsPerSite} * ${bridgeVMsPerHost}) - 1 ncf;

// edge threads (all edge threads - 1 per edge)
THREADGROUP edgeThreads
  totalThreads = fcn 
      (${wanSites} * ${edgeHostsPerSite} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}) -
      (${wanSites} * ${edgeHostsPerSite} * ${edgeVMsPerHost}) ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

THREADGROUP oneThreadPerEdgeVM
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite} * ${edgeVMsPerHost} ncf
  totalVMs = fcn ${wanSites} * ${edgeHostsPerSite} * ${edgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                 (\"-Dnone\", ${locatorHostsPerSite} * ${wanSites}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms${serverVmSize}m -Xmx${serverVmSize}m \", ${bridgeHostsPerSite} * ${wanSites}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms${edgeVmSize}m -Xmx${edgeVmSize}m \", ${edgeHostsPerSite} * ${wanSites}, true)"
                             ncf;
                 
hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 900;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 50 100 500 1000 2500 5000 FOENO;
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = false;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy   = 1;
hydra.PoolPrms-pingInterval           = 400;
hydra.PoolPrms-loadConditioningInterval     = 5000;

// define the bridge servers
hydra.BridgePrms-names                = bridge;

hydra.RegionPrms-names			= bridgeRegion1    bridgeRegion2    bridgeRegion3    clientRegion1   clientRegion2   clientRegion3;
hydra.RegionPrms-regionName		= testRegion1      testRegion2      testRegion3      testRegion1     testRegion2     testRegion3;
hydra.RegionPrms-dataPolicy     = partition        partition        partition        default         default         default;
hydra.RegionPrms-scope          = default          default          default          local           local           local;
hydra.RegionPrms-cacheListeners = hct.BridgeEventListener, hct.BridgeEventListener, hct.BridgeEventListener, util.SilenceListener, util.SilenceListener, util.SilenceListener;
hydra.RegionPrms-poolName		= none        	   none             none             edgeDescript    edgeDescript    edgeDescript;
hydra.RegionPrms-partitionName  = pr1              pr2              pr3              none            none            none;

hydra.PartitionPrms-names       = pr1 pr2 pr3;
hydra.PartitionPrms-colocatedWith = none testRegion1 testRegion2;
hydra.PartitionPrms-redundantCopies = 1;
hydra.PartitionPrms-totalNumBuckets = 1000;            
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-totalNumBuckets = 1000;
hydra.PartitionPrms-startupRecoveryDelay = -1;   // default
hydra.PartitionPrms-partitionResolver = parReg.colocation.MonthPartitionResolver;

parReg.ParRegPrms-partitionResolverData = BB;
parReg.ParRegPrms-isWithRoutingResolver = true; 

hydra.PoolPrms-contactAlgorithm       = hydra.PoolHelper getRandomContactsInWanHctSite;

include $JTESTS/newWan/wan.inc;

hydra.GemFirePrms-remoteDistributedSystems =
     fcn "newWan.WANTest.generateAllRemoteDSNameLists
          (\"bridgeds_\", ${wanSites}, ${locatorHostsPerSite})" ncf         
     ,
     none
     ;  
