hydra.Prms-testDescription = "This test creates a partitioned region with WAN sites with serial gateway senders, then does various entry operations on a known key range concurrently with PR Rebalance. Values are checked for correctness in the close task.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_wan_p2p_locator.inc;

// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 

STARTTASK    taskClass     = parReg.KnownKeysTest  taskMethod = StartTask_initialize;

/**
 * Starts the locator and connects to admin-only distributed systems.
 */
INITTASK     taskClass = rebalance.RebalanceUtil taskMethod = createLocatorTask
             threadGroups = locator;

INITTASK     taskClass = newWan.WANTest taskMethod = startLocatorAndAdminDSTask
             threadGroups = locator;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_initialize
             threadGroups = verifyThreads;

// Non-WAN tests will simply return without doing anything from this task
INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_startNewWanComponents
             threadGroups = verifyThreads;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_loadRegion
             threadGroups = verifyThreads, default
             batch;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_waitForSilence
             threadGroups = verifyThreads, oneThreadPerNewCapacityVM;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_verifyRegionSize
             threadGroups = verifyThreads 
             batch;

// Last INITTASK is to add new capacity dataStore
INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_initialize
             threadGroups = oneThreadPerNewCapacityVM;

TASK         taskClass     = rebalance.RebalanceTest taskMethod = HydraTask_rebalanceTask
             rebalance.RebalancePrms-verifyBalance = false
             threadGroups = oneThreadPerNewCapacityVM;

TASK         taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_doOps
             threadGroups = verifyThreads, default, newCapacityThreads;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_waitForSilence
             threadGroups = verifyThreads, oneThreadPerNewCapacityVM;

CLOSETASK    taskClass   = parReg.KnownKeysTest  taskMethod = HydraTask_logLocalSize
             threadGroups = verifyThreads, oneThreadPerNewCapacityVM;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyPrimaries
             threadGroups = verifyThreads, oneThreadPerNewCapacityVM;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads, oneThreadPerNewCapacityVM;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyBucketCopiesBatched
             threadGroups = verifyThreads, oneThreadPerNewCapacityVM 
             batch;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = verifyThreads, oneThreadPerNewCapacityVM
             batch;

// Last CLOSETASK is to do a final rebalance
CLOSETASK    taskClass     = parReg.ParRegUtil  taskMethod  = HydraTask_rebalance
             rebalance.RebalancePrms-verifyBalance = true
             threadGroups = oneThreadPerNewCapacityVM;

hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 900;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 50 100 500 1000 2500 5000 FOENO;
util.ValueHolderPrms-useExtraObject = true;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;

// peer_1_1 will be the last to initialize (after loadRegion) to add new capacity
THREADGROUP newCapacityThreads 
     totalThreads = fcn ${peerThreadsPerVM} - 1 ncf 
     totalVMs = 1 
     clientNames  = peer_1_1;

THREADGROUP oneThreadPerNewCapacityVM
     totalThreads = 1 
     totalVMs = 1 
     clientNames  = peer_1_1;

// need one verify thread per vm to verify each vm's view
THREADGROUP verifyThreads totalThreads = fcn "(${wanSites} * ${peerHostsPerSite} * ${peerVMsPerHost}) - 1" ncf
                          totalVMs = fcn "(${wanSites} * ${peerHostsPerSite} * ${peerVMsPerHost}) - 1" ncf;

hydra.GemFirePrms-conserveSockets = false;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

// to avoid bug 34430, scope must be ack
hydra.RegionPrms-names          = clientRegion;
hydra.RegionPrms-regionName     = partitionedRegion;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-cacheListeners = util.SilenceListener;
hydra.RegionPrms-partitionName  = pr;
hydra.PartitionPrms-names       = pr;
hydra.PartitionPrms-startupRecoveryDelay = -1;   // default

include $JTESTS/newWan/wan.inc;
