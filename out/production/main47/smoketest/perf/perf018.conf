include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_3.inc;
include $JTESTS/hydraconfig/single_host.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Empty edge clients get conflated updates on entries ${interestPercentage}% of which they have registered interest in on partitioned servers.  An accessor data feed carries out the updates.  Entries are byte arrays of size ${dataSize}.";

hydra.CachePrms-names  = feed bridge edge;

hydra.RegionPrms-names                  = feed      bridge    edge;
hydra.RegionPrms-dataPolicy             = partition partition empty;
hydra.RegionPrms-enableSubscriptionConflation = default   true      default;
hydra.RegionPrms-scope                  = default   default   local;
hydra.RegionPrms-cacheListeners         = none,     none,
                 cacheperf.gemfire.LatencyListener;
hydra.RegionPrms-interestPolicy         = all;
hydra.RegionPrms-partitionName          = feed      bridge    none;
hydra.RegionPrms-poolName               = none      none      pool;

hydra.PartitionPrms-names          = feed  bridge;
hydra.PartitionPrms-localMaxMemory = 0     default;

hydra.BridgePrms-names = bridge;

hydra.PoolPrms-names = pool;
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper getRoundRobinEndpoints;
hydra.PoolPrms-contactNum = 1;
hydra.PoolPrms-minConnections = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-readTimeout = 100000;
hydra.PoolPrms-threadLocalConnections = true;

hydra.GemFirePrms-conserveSockets = true;
hydra.GemFirePrms-distributedSystem =
      fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${feedHosts})" ncf
      fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
      fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf;

hydra.VmPrms-extraVMArgs = fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms275m -Xmx275m\", ${feedHosts}, true)"
                           ncf
                           ,
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms768m -Xmx768m\", ${bridgeHosts}, true)"
                           ncf,
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms275m -Xmx275m\", ${edgeHosts}, true)"
                           ncf;
hydra.VmPrms-extraVMArgsSUN = -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = feed
          hydra.ConfigPrms-regionConfig = feed
          threadGroups = feed
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          distcache.gemfire.GemFireCachePrms-interestResultPolicy = none
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = registerInterestRegexTask
          threadGroups = edge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = feed
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = feed
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = feed, edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask;

THREADGROUP feed
    totalThreads = fcn ${feedHosts} * ${feedVMsPerHost}
                                    * ${feedThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feed\", ${feedHosts}, true)"
                   ncf;
THREADGROUP bridge
    totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost}
                                      * ${bridgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)"
                   ncf;
THREADGROUP edge
    totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost}
                                    * ${edgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edge\", ${edgeHosts}, true)"
                   ncf;

cacheperf.CachePerfPrms-keyType = objects.BatchString;
objects.BatchStringPrms-batchSize = fcn (int)Math.ceil((${interestPercentage}/100.0) * (int)Math.ceil(${totalBytes}.0/${dataSize})) ncf;
cacheperf.CachePerfPrms-maxKeys = fcn (int)Math.ceil(${totalBytes}.0/${dataSize}) ncf;

cacheperf.CachePerfPrms-objectType      = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size            = ${dataSize};
objects.ArrayOfBytePrms-encodeTimestamp = true;

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 660;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 540;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 660;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/perf038.spec;
