include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_1.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Datastore fetches entries in a fixed partitioned region.  Entries are byte arrays of size ${dataSize}.  Uses an optimized loop (gets a given key ${optimizationCount} times).";

hydra.CachePrms-names = datastore;

hydra.RegionPrms-names         = datastore;
hydra.RegionPrms-dataPolicy    = partitioned;
hydra.RegionPrms-partitionName = datastore;

hydra.PartitionPrms-names = datastore;
hydra.PartitionPrms-fixedPartitionName = fixed;
hydra.PartitionPrms-partitionResolver = cacheperf.comparisons.parReg.fixed.KeyResolver;
hydra.PartitionPrms-totalNumBuckets = fcn ${bucketsPerPartition} * ${partitionsPerDatahost} * ${datastoreHosts} * ${datastoreVMsPerHost} ncf;

hydra.FixedPartitionPrms-names = fixed;
hydra.FixedPartitionPrms-datastores = fcn ${datastoreHosts} * ${datastoreVMsPerHost} ncf;
hydra.FixedPartitionPrms-partitionNames = fcn "hydra.TestConfigFcns.generateNames(\"P\", ${partitionsPerDatahost} * ${datastoreHosts} * ${datastoreVMsPerHost})" ncf;
hydra.FixedPartitionPrms-partitionBuckets = ${bucketsPerPartition};

cacheperf.CachePerfPrms-keyAllocationChunkSize = fcn ${bucketsPerPartition} * ${partitionsPerDatahost} * ${datastoreHosts} * ${datastoreVMsPerHost} ncf;

hydra.VmPrms-extraVMArgs = "-Xms275m -Xmx275m";
hydra.VmPrms-extraVMArgsSUN = -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = datastore
          hydra.ConfigPrms-regionConfig = datastore
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = datastore
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP datastore
    totalThreads = fcn ${datastoreHosts} * ${datastoreVMsPerHost}
                                         * ${datastoreThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"datastore\", ${datastoreHosts}, true)" ncf;

cacheperf.CachePerfPrms-optimizationCount = ${optimizationCount};
cacheperf.CachePerfPrms-maxKeys    = ${maxKeys};
cacheperf.CachePerfPrms-keyType    = java.lang.Long;
cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-encodeKey  = false;
objects.ArrayOfBytePrms-size       = ${dataSize};

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 300;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 60;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/perf020.spec;
