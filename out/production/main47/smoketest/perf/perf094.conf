include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_wan_p2p.inc;
include $JTESTS/hydraconfig/single_host.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Threads in a gateway hub with a secondary update entries to a hub with a secondary in a different distributed system.  Entries are byte arrays of size ${dataSize}.";

hydra.CachePrms-names = pub sub;

hydra.RegionPrms-names          = pub       sub;
hydra.RegionPrms-cacheListeners = none,     cacheperf.gemfire.LatencyListener;
hydra.RegionPrms-dataPolicy     = replicate;
hydra.RegionPrms-enableGateway  = true;
hydra.RegionPrms-scope          = dack;

hydra.GatewayHubPrms-names         = primary secondary;
hydra.GatewayHubPrms-startupPolicy = primary secondary;

hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-batchSize = 1000;
hydra.GatewayPrms-diskStoreName = disk;

hydra.DiskStorePrms-names = disk;

hydra.VmPrms-extraVMArgs = -Xms275m -Xmx275m;
hydra.VmPrms-extraVMArgsSUN = -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = pub
          hydra.ConfigPrms-regionConfig = pub
          threadgroups = pubPrimary, pubSecondary
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = sub
          hydra.ConfigPrms-regionConfig = sub
          threadgroups = subPrimary, subSecondary
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createGatewayHubTask
          hydra.ConfigPrms-gatewayHubConfig = primary
          threadgroups = pubPrimary, subPrimary
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createGatewayHubTask
          hydra.ConfigPrms-gatewayHubConfig = secondary
          threadgroups = pubSecondary, subSecondary
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = addGatewaysTask
          hydra.ConfigPrms-gatewayConfig = gateway
          threadgroups = pubPrimary, pubSecondary
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = startGatewayHubTask
          threadgroups = pubPrimary, pubSecondary, subPrimary, subSecondary
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadgroups = pubPrimary
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKey
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = pubPrimary
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP pubPrimary
  totalThreads = ${peerThreadsPerVM}
  totalVMs = 1
  clientNames = client_1_1;
THREADGROUP pubSecondary
  totalThreads = ${peerThreadsPerVM}
  clientNames = fcn "hydra.TestConfigFcns.generateNames(
                        \"client_1_\", ${peerHostsPerSite})" ncf;
THREADGROUP subPrimary
  totalThreads = ${peerThreadsPerVM}
  totalVMs = 1
  clientNames = client_2_1;
THREADGROUP subSecondary
  totalThreads = ${peerThreadsPerVM}
  clientNames = fcn "hydra.TestConfigFcns.generateNames(
                        \"client_2_\", ${peerHostsPerSite})" ncf;

cacheperf.CachePerfPrms-maxKeys         = ${peerThreadsPerVM};
cacheperf.CachePerfPrms-objectType      = objects.ArrayOfByte;
objects.ArrayOfBytePrms-encodeKey       = true;
objects.ArrayOfBytePrms-encodeTimestamp = true;
objects.ArrayOfBytePrms-size            = ${dataSize};

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/perf038.spec;
