include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_2.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Member uses XML to connect to a loner distributed system and create a cache with a simple region.  Runs on two hosts.  Measures time to connect when throttled by ${sleepMs} ms sleeps.";

hydra.VmPrms-extraVMArgs += "-Dgemfire.DISABLE_DISCONNECT_DS_ON_CACHE_CLOSE=true";

hydra.GemFirePrms-distributedSystem = loner;
/*
hydra.GemFirePrms-archiveDiskSpaceLimit =
  fcn "hydra.TestConfigFcns.duplicate(\"0\", ${archiverHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"1\", ${lonerHosts})" ncf;
hydra.GemFirePrms-logDiskSpaceLimit =
  fcn "hydra.TestConfigFcns.duplicate(\"0\", ${archiverHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"1\", ${lonerHosts})" ncf;
*/

hydra.CachePrms-names = loner;

hydra.RegionPrms-names      = loner;
hydra.RegionPrms-dataPolicy = normal;
hydra.RegionPrms-scope      = local;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadgroups = archiver
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = statArchiverTask
          perffmwk.HistogramStatsPrms-enable = false // stats are sampled
          threadGroups = archiver
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = cycleDistributedSystemConnectionTask
          hydra.ConfigPrms-cacheConfig = loner
          hydra.ConfigPrms-regionConfig = loner
          cacheperf.CachePerfPrms-sleepMs = ${sleepMs}
          perffmwk.HistogramStatsPrms-enable = false // uses statarchiver
          threadGroups = loner
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          threadgroups = archiver
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          threadgroups = archiver, loner
          ;

THREADGROUP archiver
    totalThreads = fcn ${archiverHosts} * ${archiverVMsPerHost}
                                        * ${archiverThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"archiver\", ${archiverHosts}, true)" ncf;
THREADGROUP loner
    totalThreads = fcn ${lonerHosts} * ${lonerVMsPerHost}
                                     * ${lonerThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"loner\", ${lonerHosts}, true)" ncf;

cacheperf.CachePerfPrms-maxKeys = 1; // not used

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = fcn ${trimSeconds} + ${workSeconds} + 10 ncf;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = ${workSeconds};

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = fcn ${trimSeconds} + ${workSeconds} + 60 ncf;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/perf076.spec;
