include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_1_locator.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Creator creates entries with a 1 second entry idle timeout with action local destroy.  Entries are byte arrays of size ${dataSize}.";

// a single-vm test that only creates entries and uses LRU to clean up
// does not need concurrency protection
hydra.RegionPrms-concurrencyChecksEnabled = false;

hydra.CachePrms-names = creator;

hydra.RegionPrms-names = creator;
hydra.RegionPrms-entryIdleTimeout = 1 localDestroy;
hydra.RegionPrms-scope = dack;
hydra.RegionPrms-statisticsEnabled = true;

hydra.VmPrms-extraVMArgs = "-Xms256m -Xmx256m -Xmn26m";
hydra.VmPrms-extraVMArgsSUN = -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = creator
          hydra.ConfigPrms-regionConfig = creator
          threadGroups = creator
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysWrap
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = creator
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = creator
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          threadGroups = creator
          ;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;    
THREADGROUP creator
    totalThreads = fcn ${creatorHosts} * ${creatorVMsPerHost}
                                       * ${creatorThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"creator\", ${creatorHosts}, true)" ncf;

cacheperf.CachePerfPrms-maxKeys    = 2147483647; // Integer.MAX_VALUE
cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-encodeKey  = false;
objects.ArrayOfBytePrms-size       = ${dataSize};

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnNumDestroys;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-numDestroys               = 100000;
cacheperf.CachePerfPrms-numDestroysMinWaitSec     = 60;
cacheperf.CachePerfPrms-numDestroysMaxWaitSec     = 180;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnWorkSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/perf024.spec;
