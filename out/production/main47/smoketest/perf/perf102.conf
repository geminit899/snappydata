include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_hct.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Edge clients create and close a connection pool using explicit servers.  Does not use selector.  Runs on two hosts.  Measures time to connect to server when throttled by ${sleepMs} ms sleeps.";

hydra.CachePrms-names = bridge;

hydra.RegionPrms-names = bridge;
hydra.RegionPrms-scope = dack;

hydra.BridgePrms-names = bridge;

hydra.VmPrms-extraVMArgs += -Xmx275m;

hydra.PoolPrms-names = pool;
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper getRoundRobinEndpoints;
hydra.PoolPrms-subscriptionEnabled = false;
hydra.PoolPrms-minConnections = 0;
hydra.PoolPrms-threadLocalConnections = true;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadgroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadgroups = bridge
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = cyclePoolTask
          hydra.ConfigPrms-poolConfig = pool
          cacheperf.CachePerfPrms-isMainWorkload = true
          cacheperf.CachePerfPrms-sleepMs = ${sleepMs}
          threadGroups = edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP bridge
    totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost}
                                      * ${bridgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP edge
    totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost}
                                    * ${edgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edge\", ${edgeHosts}, true)" ncf;

cacheperf.CachePerfPrms-maxKeys = 1; // not used

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 90;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/perf102.spec;
