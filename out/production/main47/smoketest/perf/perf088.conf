include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_2.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Empty peers query entries in partitioned datastore.  Runs on two hosts.  Entries are Serializable objects.";

hydra.CachePrms-names = datastore query;

hydra.RegionPrms-names         = datastore   query;
hydra.RegionPrms-dataPolicy    = partitioned;
hydra.RegionPrms-partitionName = datastore   query;

hydra.PartitionPrms-names          = datastore query;
hydra.PartitionPrms-localMaxMemory = default   0;

hydra.VmPrms-extraVMArgs = "-Xms275m -Xmx275m";
hydra.VmPrms-extraVMArgsSUN = -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;
hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = datastore
          hydra.ConfigPrms-regionConfig = datastore
          threadgroups = datastore
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = query
          hydra.ConfigPrms-regionConfig = query
          threadgroups = query
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadgroups = datastore
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = queryDataTask
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = query
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP datastore
    totalThreads = fcn ${dataHosts} * ${dataVMsPerHost}
                                    * ${dataThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"data\", ${dataHosts}, true)" ncf;
THREADGROUP query
    totalThreads = fcn ${queryHosts} * ${queryVMsPerHost}
                                     * ${queryThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"query\", ${queryHosts}, true)" ncf;

distcache.gemfire.GemFireCachePrms-regionName = ${regionName};

cacheperf.CachePerfPrms-maxKeys = 1000;
cacheperf.CachePerfPrms-objectType = objects.AssetAccount;
cacheperf.CachePerfPrms-query =
        "
        SELECT DISTINCT acct.acctId, asset.assetId
        FROM /${regionName} acct, acct.assets.values asset
        WHERE asset.value > 5000.0
        ";

hydra.RegionPrms-valueConstraint = objects.AssetAccount;

objects.AssetAccountPrms-encodeTimestamp = false;
objects.AssetAccountPrms-size = 3;
objects.AssetPrms-maxValue = 10000; // make this twice the query select value
                                    // so result set is 50% of objects

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 60;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/perf088.spec;
