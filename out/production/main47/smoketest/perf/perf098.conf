include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_hct.inc;
include $JTESTS/smoketest/perf/statmon.inc;
include $JTESTS/hydraconfig/single_host.inc;

hydra.Prms-testDescription = "Cycles between a client putting data to the server and a durable client receiving those updates.  Measures the time it takes the durable client to receive updates.";

hydra.VmPrms-extraVMArgs += "-Dgemfire.DISABLE_DISCONNECT_DS_ON_CACHE_CLOSE=true";

hydra.CachePrms-names = bridge edge;
hydra.GemFirePrms-enableDurableClient = false true;
hydra.GemFirePrms-durableClientTimeout = 1 600;

hydra.RegionPrms-names       = bridge  edge;
hydra.RegionPrms-dataPolicy  = default default;
hydra.RegionPrms-poolName    = default pool;
hydra.RegionPrms-scope       = dack    local;

hydra.BridgePrms-names = bridge;

hydra.VmPrms-extraVMArgs += -Xmx275m;

hydra.PoolPrms-names = pool;
hydra.PoolPrms-contactAlgorithm = hydra.PoolHelper getRoundRobinContacts;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-subscriptionRedundancy = 0;
hydra.PoolPrms-threadLocalConnections = true;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadGroups = bridge
          ;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadgroups = bridge
          ;
          
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          cacheperf.CachePerfPrms-keyAllocation = sameKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadgroups = bridge
          ;
          
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataAndSyncTask
          cacheperf.CachePerfPrms-isMainWorkload = false
          cacheperf.CachePerfPrms-batchTerminatorMethod = terminateOnBatchSize
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnSignal
          cacheperf.CachePerfPrms-taskTerminatorFrequency = task
          cacheperf.CachePerfPrms-batchSize=${queueSize}
          cacheperf.CachePerfPrms-keyAllocation = sameKeysRandomWrap
          threadGroups = bridge
          ;

TASK      taskClass = cacheperf.CachePerfClient taskMethod = cycleDurableClientTask
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-regionConfig = edge
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnTotalSeconds
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = edge
          ;

CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
		  ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP bridge
    totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost}
                                      * ${bridgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP edge
    totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost}
                                    * ${edgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edge\", ${edgeHosts}, true)" ncf;

cacheperf.CachePerfPrms-maxKeys = ${maxKeys};
cacheperf.CachePerfPrms-keyType = java.lang.String;
cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 90;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/perf098.spec;
