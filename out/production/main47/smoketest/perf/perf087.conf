include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_wan_p2p.inc;
include $JTESTS/hydraconfig/single_host.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Threads update entries with a wbcl.  Entries are byte arrays of size ${dataSize}.";

hydra.CachePrms-names = cache;

hydra.RegionPrms-names          = region;
hydra.RegionPrms-dataPolicy     = normal;
hydra.RegionPrms-enableGateway  = true;
hydra.RegionPrms-scope          = dack;

hydra.VmPrms-extraVMArgs += -Xmx275m;

hydra.GatewayHubPrms-names = hub;

hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-diskStoreName = disk;
hydra.GatewayPrms-listeners = cacheperf.gemfire.GatewayLatencyListener;

hydra.DiskStorePrms-names = disk;

hydra.VmPrms-extraVMArgsSUN = -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = region
          threadgroups = updater
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createGatewayHubTask
          hydra.ConfigPrms-gatewayHubConfig = hub
          threadgroups = updater
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = addWBCLGatewayTask
          hydra.ConfigPrms-gatewayConfig = gateway
          threadgroups = updater
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = startGatewayHubTask
          threadgroups = updater
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadgroups = updater
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKey
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = updater
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP updater
  totalThreads = fcn ${peerHostsPerSite} * ${peerVMsPerHost}
                                         * ${peerThreadsPerVM} ncf
  clientNames = fcn "hydra.TestConfigFcns.generateNames(
                        \"client_1_\", ${peerHostsPerSite})" ncf;

cacheperf.CachePerfPrms-maxKeys         = 100;
cacheperf.CachePerfPrms-objectType      = objects.ArrayOfByte;
objects.ArrayOfBytePrms-encodeKey       = true;
objects.ArrayOfBytePrms-encodeTimestamp = true;
objects.ArrayOfBytePrms-size            = ${dataSize};

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/perf038.spec;
