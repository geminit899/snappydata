include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_2_locator.inc;
include $JTESTS/hydraconfig/single_host.inc;

hydra.Prms-testDescription = "Has two VMS in the same DS. Data is put into the cache from one VM. The cache size is measured in both VMs. Uses replicate data policy and dack scope";

hydra.CachePrms-names = putter watcher;

hydra.RegionPrms-names         			= putter		watcher;
hydra.RegionPrms-lockGrantor			= false			true;
hydra.RegionPrms-dataPolicy    		= ${dataPolicy};
hydra.RegionPrms-scope    				= ${scope};
hydra.RegionPrms-statisticsEnabled = ${statisticsEnabled};

hydra.VmPrms-extraVMArgs = "-Xms256m -Xmx256m";
hydra.VmPrms-extraVMArgs += "-XX:+UseSerialGC -XX:-DisableExplicitGC -javaagent:${JTESTS}/../lib/sizeagent.jar -Dgemfire.ObjectSizer.SIZE_OF_CLASS=com.gemstone.gemfire.internal.size.InstrumentationSingleObjectSizer";
hydra.VmPrms-extraVMArgs += "-Dgemfire.DISABLE_DISCONNECT_DS_ON_CACHE_CLOSE=true";
hydra.VmPrms-extraClassPaths += fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", 1)" ncf;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;

INITTASK  taskClass = cacheperf.memory.CacheSizeClient taskMethod = openStatisticsTask
          threadGroups = putter, watcher
          ;

INITTASK  taskClass = cacheperf.memory.CacheSizeClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = putter
          hydra.ConfigPrms-regionConfig = putter
          threadGroups=putter
          ;
          
INITTASK  taskClass = cacheperf.memory.CacheSizeClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = watcher
          hydra.ConfigPrms-regionConfig = watcher
          threadGroups=watcher
          ;
          
TASK  taskClass = cacheperf.memory.CacheSizeClient taskMethod = putDataTask
          threadGroups = putter
          maxTimesToRun=fcn ${putterHosts} * ${putterVMsPerHost}
                                         * ${putterThreadsPerVM} ncf
          ;
TASK  taskClass = cacheperf.memory.CacheSizeClient taskMethod = watchDataTask
          threadGroups = watcher
          maxTimesToRun=fcn ${putterHosts} * ${putterVMsPerHost}
                                         * ${putterThreadsPerVM} ncf
          ;
CLOSETASK taskClass = cacheperf.memory.CacheSizeClient taskMethod = closeCacheTask
          threadGroups = putter, watcher
          ;
CLOSETASK taskClass = cacheperf.memory.CacheSizeClient taskMethod = closeStatisticsTask
          threadGroups = putter, watcher
          ;
          
THREADGROUP locator
  totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                     * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)" ncf ;

THREADGROUP putter
    totalThreads = fcn ${putterHosts} * ${putterVMsPerHost}
                                         * ${putterThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"putter\", ${putterHosts}, true)" ncf;
                        
THREADGROUP watcher
    totalThreads = fcn ${watcherHosts} * ${watcherVMsPerHost}
                                         * ${watcherThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"watcher\", ${watcherHosts}, true)" ncf;

cacheperf.memory.CacheSizePrms-numberOfEntries = ${numberOfEntries};
cacheperf.memory.CacheSizePrms-sampleInterval = ${sampleInterval};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/mem/mem002.spec;
