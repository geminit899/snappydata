// Query Smoke performance test
// Topology: p2p
// Region Type: partitioned  
// Query Type: WHERE filter conditions 
// Index type: Range + Compact Range
// Region operations: put/get/destroy  
// Measurement statistics: queriesPerSecond

include $JTESTS/query/perf/queryPerf_p2p.inc;

hydra.Prms-testDescription = "Querying smoke perf tests, p2p-partitioned-WHERE filter conditions with put/get/destroy operations in parallel, in presence of range and compact range indexes.";

hydra.PartitionPrms-names          = peer;
hydra.PartitionPrms-localMaxMemory = default;
hydra.RegionPrms-dataPolicy    = partitioned;
hydra.RegionPrms-partitionName = peer;

cacheperf.gemfire.query.QueryPerfPrms-query = 
"select distinct * from /${regionName} pf, pf.positions.values pos where status = 'active' AND pf.ID > 4000 AND pf.ID < 12000";
TASK      taskClass = cacheperf.gemfire.query.QueryPerfClient taskMethod = entryOpsAndQueryTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          cacheperf.CachePerfPrms-isMainWorkload = true
          ;
          
INITTASK  taskClass =  cacheperf.gemfire.query.QueryPerfClient taskMethod = indexDataTask
          ;

cacheperf.CachePerfPrms-queryIndex =
        "
        ID
        "
        "
        status
        ";
cacheperf.CachePerfPrms-queryFromClause =
        "
        /${regionName} pf, pf.positions.values pos
        "
        "/${regionName} pf";
        
query.QueryPrms-entryAndQueryOperations = ONEOF put put query destroy query get put query destroy get FOENO;