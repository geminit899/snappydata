include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_2.inc;
include $JTESTS/hydraconfig/single_host.inc;

// this test only improved about 8% when run with optimized loop
hydra.Prms-testDescription = "Publishers update entries in replicated cache while subscribers listen.  Conserve sockets is ${conserveSockets}.  Entries are DataSerializable PSTObjects with byte arrays of size ${dataSize}.";

hydra.CachePrms-names = pub sub;

hydra.RegionPrms-names = pub sub;
hydra.RegionPrms-dataPolicy = replicated;
hydra.RegionPrms-cacheListeners = none, cacheperf.gemfire.LatencyListener;
hydra.RegionPrms-scope = dack;

hydra.GemFirePrms-conserveSockets = ${conserveSockets};

hydra.VmPrms-extraVMArgs = "-Xms275m -Xmx275m";
hydra.VmPrms-extraVMArgsSUN = -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = pub
          hydra.ConfigPrms-regionConfig = pub
          threadgroups = pub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = sub
          hydra.ConfigPrms-regionConfig = sub
          threadgroups = sub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadgroups = pub
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKey
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = pub
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP pub
    totalThreads = fcn ${pubHosts} * ${pubVMsPerHost}
                                   * ${pubThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"pub\", ${pubHosts}, true)" ncf;
THREADGROUP sub
    totalThreads = fcn ${subHosts} * ${subVMsPerHost}
                                   * ${subThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"sub\", ${subHosts}, true)" ncf;

cacheperf.CachePerfPrms-maxKeys =
  fcn ${pubHosts} * ${pubVMsPerHost} * ${pubThreadsPerVM} ncf;
cacheperf.CachePerfPrms-objectType = objects.PSTObject;
objects.PSTObjectPrms-size         = ${dataSize};

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/smokeperf/gfe/perf039.spec;
