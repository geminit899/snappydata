include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_2.inc;

hydra.Prms-testDescription = "One peer subgroup updates its own keys while another peer subgroup sits idle with all keys defined.";

THREADGROUP pub
    totalThreads = fcn
                   ${pubHosts} * ${pubVMsPerHost} * ${pubThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"pub\", ${pubHosts}, true)"
                   ncf;
THREADGROUP def
    totalThreads = fcn
                   ${defHosts} * ${defVMsPerHost} * ${defThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"def\", ${defHosts}, true)"
                   ncf;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = pub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createKeysTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = sameKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = def
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = pub
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

cacheperf.CachePerfPrms-batchSeconds =  30;
cacheperf.CachePerfPrms-trimSeconds  =  60;
cacheperf.CachePerfPrms-workSeconds  = 120;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;
hydra.Prms-totalTaskTimeSec = 9999999;

cacheperf.CachePerfPrms-maxKeys = fcn ${pubHosts} * ${pubVMsPerHost} * ${pubThreadsPerVM} ncf;
cacheperf.CachePerfPrms-objectType = objects.SizedString;
objects.SizedStringPrms-constant = true;

hydra.GemFirePrms-conserveSockets = false;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;
hydra.ConfigPrms-regionConfig = region;
hydra.RegionPrms-names = region;
hydra.RegionPrms-scope = ${scope};

// increase VM size in publishers for 1.5 on Solaris, otherwise shrink it
hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx300m\", ${pubHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx128m\", ${defHosts}, true)"
                             ncf
                             ;
perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/smokeperf/gfe/perf002.spec;

include $JTESTS/hydraconfig/single_host.inc;
