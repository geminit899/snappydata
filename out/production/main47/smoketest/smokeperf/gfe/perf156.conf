include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_locator.inc;
include $JTESTS/hydraconfig/single_host.inc;

hydra.Prms-testDescription = "Threads in a parallel gateway sender update entries to a receiver in a different distributed system. Entries are byte arrays of size ${dataSize}. Uses a partitioned region with redundancy 0. Uses off heap memory.";

hydra.CachePrms-names = pub sub;

hydra.RegionPrms-names          = pub       sub;
hydra.RegionPrms-cacheListeners = none,     cacheperf.gemfire.LatencyListener;
hydra.RegionPrms-dataPolicy      = partition;
hydra.RegionPrms-enableOffHeapMemory = true;
hydra.RegionPrms-gatewaySenderNames = sender;
hydra.RegionPrms-partitionName   = peer;
hydra.RegionPrms-scope           = default;

hydra.PartitionPrms-names        = peer;
hydra.PartitionPrms-redundantCopies = 0;

hydra.ConfigPrms-gatewaySenderConfig   = sender;
hydra.GatewaySenderPrms-names          = sender;
hydra.GatewaySenderPrms-batchSize      = default;
hydra.GatewaySenderPrms-diskStoreName  = senderDisk;
hydra.GatewaySenderPrms-maximumQueueMemory  = default;
hydra.GatewaySenderPrms-parallel = true;
hydra.GatewaySenderPrms-remoteDistributedSystemsAlgorithm =  hydra.GatewaySenderHelper getRemoteDistributedSystems;

hydra.DiskStorePrms-names              = disk senderDisk;

hydra.ConfigPrms-gatewayReceiverConfig    = receiver;
hydra.GatewayReceiverPrms-names           = receiver;

//locator_1_1, locator_2_1, peer_1_1, peer_2_1
hydra.VmPrms-extraVMArgs += -Xmx275m, -Xmx275m, -Xms392m -Xmx392m, -Xms275m -Xmx275m;
hydra.VmPrms-extraVMArgsSUN = "-XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC";

//locator_1_1, locator_2_1, peer_1_1, peer_2_1
hydra.GemFirePrms-offHeapMemorySize = default default 392m 275m;
hydra.GemFirePrms-remoteDistributedSystems =
     fcn "newWan.WANTest.generateRingRemoteDSName
          (\"ds_\", ${wanSites}, ${locatorHostsPerSite})" ncf         
     ,
     none
     ; 

// give the feed hub 100MB (default) for the sender queue + 256 MB to work with, and
// each put cycle should only put what will fit in the gateway queue without
// overflowing, but allow for key and entry overhead by 50% (theoretically per entry overhead is ~600 bytes)

// as of 7.0 we also give 10% additional memory for version storage

cacheperf.CachePerfPrms-gatewayQueueEntries = fcn 100*500000/(${dataSize}*${peerThreadsPerVM}) ncf;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createGatewaySenderIdsTask          
          threadgroups = pub
          ;                    
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig  = pub
          hydra.ConfigPrms-regionConfig = pub
          threadgroups = pub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig  = sub
          hydra.ConfigPrms-regionConfig = sub
          threadgroups = sub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = initGatewaySenderTask
          hydra.ConfigPrms-gatewaySenderConfig = sender
          threadgroups = pub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = initGatewayReceiverTask
          hydra.ConfigPrms-gatewayReceiverConfig = receiver
          threadgroups = sub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation           = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod    = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadgroups = pub
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataGWSenderTask
          cacheperf.CachePerfPrms-keyAllocation = ownKey
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = pub
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = pub, sub
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP pub
  totalThreads = fcn ${peerHostsPerSite} * ${peerVMsPerHost}
                                         * ${peerThreadsPerVM} ncf
  clientNames = fcn "hydra.TestConfigFcns.generateNames(
                        \"peer_1_\", ${peerHostsPerSite})" ncf;
THREADGROUP sub
  totalThreads = fcn ${peerHostsPerSite} * ${peerVMsPerHost}
                                         * ${peerThreadsPerVM} ncf
  clientNames = fcn "hydra.TestConfigFcns.generateNames(
                        \"peer_2_\", ${peerHostsPerSite})" ncf;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                        (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;
           
cacheperf.CachePerfPrms-maxKeys         = fcn ${peerHostsPerSite} * ${peerVMsPerHost} * ${peerThreadsPerVM} ncf;
cacheperf.CachePerfPrms-objectType      = objects.ArrayOfByte;
objects.ArrayOfBytePrms-encodeKey       = true;
objects.ArrayOfBytePrms-encodeTimestamp = true;
objects.ArrayOfBytePrms-size            = ${dataSize};

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/smokeperf/gfe/perf038.spec;
