include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_2.inc;

hydra.Prms-testDescription = "One peer subgroup does gets that are cache misses causing netloads to another peer subgroup.  All caches are empty.";

THREADGROUP load
    totalThreads = fcn
                   ${loadHosts} * ${loadVMsPerHost} * ${loadThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"load\", ${loadHosts}, true)"
                   ncf;
THREADGROUP miss
    totalThreads = fcn
                   ${missHosts} * ${missVMsPerHost} * ${missThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"miss\", ${missHosts}, true)"
                   ncf;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = load
          threadGroups = load
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = miss
          threadGroups = miss
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
          cacheperf.CachePerfPrms-keyAllocation = sameKeysRandomWrap
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = miss
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

cacheperf.CachePerfPrms-batchSeconds =  30;
cacheperf.CachePerfPrms-trimSeconds  =  60;
cacheperf.CachePerfPrms-workSeconds  = 120;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;
hydra.Prms-totalTaskTimeSec = 9999999;

cacheperf.CachePerfPrms-objectType = objects.SizedString;
objects.SizedStringPrms-size = 10;
cacheperf.CachePerfPrms-maxKeys = 10000;

hydra.GemFirePrms-conserveSockets = false;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names       = load                          miss;
hydra.RegionPrms-cacheLoader = cacheperf.gemfire.SleepLoader none;
hydra.RegionPrms-dataPolicy  = empty;
hydra.RegionPrms-scope       = ${scope};

// everyone has an empty cache, so shrink the VM size
hydra.VmPrms-extraVMArgs = -Xmx128m;
perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/smokeperf/gfe/perf009.spec;

include $JTESTS/hydraconfig/single_host.inc;
