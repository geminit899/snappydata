include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_2.inc;

hydra.Prms-testDescription = "One peer subgroup does gets that are cache misses causing netsearches to another peer subgroup. Uses off heap memory.";

THREADGROUP pub
    totalThreads = fcn
                   ${pubHosts} * ${pubVMsPerHost} * ${pubThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"pub\", ${pubHosts}, true)"
                   ncf;
THREADGROUP miss
    totalThreads = fcn
                   ${missHosts} * ${missVMsPerHost} * ${missThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"miss\", ${missHosts}, true)"
                   ncf;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = pub
          threadGroups = pub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = pub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = miss
          threadGroups = miss
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
          cacheperf.CachePerfPrms-keyAllocation = sameKeysRandomWrap
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = miss
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

cacheperf.CachePerfPrms-batchSeconds =  30;
cacheperf.CachePerfPrms-trimSeconds  =  60;
cacheperf.CachePerfPrms-workSeconds  = 120;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;
hydra.Prms-totalTaskTimeSec = 9999999;

cacheperf.CachePerfPrms-objectType = objects.SizedString;
objects.SizedStringPrms-constant = true;
cacheperf.CachePerfPrms-maxKeys = 10000;

hydra.GemFirePrms-conserveSockets = false;
hydra.GemFirePrms-offHeapMemorySize =
  fcn "hydra.TestConfigFcns.duplicate(\"330m\", ${pubHosts}, true)" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"140m\", ${missHosts}, true)" ncf
  ;
hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate(\"-Xmx330m\", ${pubHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate(\"-Xmx140m\", ${missHosts}, true)" ncf
  ;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names      = pub       miss;
hydra.RegionPrms-dataPolicy = default   empty;
hydra.RegionPrms-enableOffHeapMemory = true;
hydra.RegionPrms-scope      = ${scope};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/smokeperf/gfe/perf008.spec;

include $JTESTS/hydraconfig/single_host.inc;
