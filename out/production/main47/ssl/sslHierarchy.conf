INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct_locator.inc;
INCLUDE $JTESTS/hct/hctparams.inc;
INCLUDE $JTESTS/hct/hctconfig.inc;

hydra.Prms-totalTaskTimeSec = 3600;
hydra.Prms-maxResultWaitSec = 600;

hydra.Prms-testDescription = "Tests get operations on the edge(s) of a hierarchical cache. ";

hydra.VmPrms-extraVMArgs  = fcn "hydra.TestConfigFcns.duplicate(\"-Dnone\", ${locatorHosts}, true)" ncf
                             ,
      fcn "hct.HctPrms.serverVmArgs(${bridgeHosts}, \"${hc.serverMemSize}\", true)" ncf
                             ,
                            fcn "hydra.TestConfigFcns.duplicate(\"-Xmx250m -Xms250m\", ${edgeHosts}*${edgeVMsPerHost}, true)" ncf;

// JVM specific args to manage heap
hydra.VmPrms-extraVMArgsJRockit =
      // locators
      fcn "hydra.TestConfigFcns.duplicate(\"-Dnone\", ${locatorHosts}, true)" ncf
      ,
      // servers
      fcn "hydra.TestConfigFcns.duplicate(\"-Xgc:gencon -Xmx:${hc.serverMemSize} -Xms:${hc.serverMemSize} -XXfullCompaction -Xns:10m\", ${bridgeHosts}, true)" ncf
      ,
      // edge
      fcn "hydra.TestConfigFcns.duplicate(\"-Xmx250m -Xms250m\", ${edgeHosts}, true)" ncf;

hydra.VmPrms-extraVMArgsJRockit += "-XXlazyUnlocking:enable=false";

hydra.VmPrms-extraVMArgsIBM =
      // locators
      fcn "hydra.TestConfigFcns.duplicate(\"-Dnone\", ${locatorHosts}, true)" ncf
      ,
      // servers
      fcn "hydra.TestConfigFcns.duplicate(\"-Xmx${hc.serverMemSize} -Xms${hc.serverMemSize} -Xgcpolicy:gencon -Xcompactgc\", ${bridgeHosts}, true)" ncf
      ,
      // edge
      fcn "hydra.TestConfigFcns.duplicate(\"-Xmx250m -Xms250m\", ${edgeHosts}, true)" ncf;

hydra.PoolPrms-subscriptionRedundancy = -1;

THREADGROUP locator
  totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                     * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)" ncf;

THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;

THREADGROUP edgeInit // one per edge VM
  totalThreads = fcn "${edgeHosts} * ${edgeVMsPerHost}" ncf
  totalVms     = fcn "${edgeHosts} * ${edgeVMsPerHost}" ncf;

INITTASK    taskClass = event.SerialEntryEventTest taskMethod = createLocatorTask
            threadGroups = locator;

INITTASK    taskClass = event.SerialEntryEventTest taskMethod = startLocatorAndAdminDSTask
            threadGroups = locator;
INITTASK    taskClass   = hct.HierCache    taskMethod  = initServerRegion
            hydra.ConfigPrms-cacheConfig  = bridge
            hydra.ConfigPrms-regionConfig = bridge
            hydra.ConfigPrms-bridgeConfig = bridge
            runMode = always
            threadGroups = bridge;

INITTASK    taskClass   = hct.HierCache    taskMethod  = initEdgeRegion
            hydra.ConfigPrms-cacheConfig  = edge
            hydra.ConfigPrms-regionConfig = edge
            runMode = always
            threadGroups = edgeInit;

// Have clients accessing edge cache which uses cachebridge loader
TASK    taskClass   = hct.HierCache     taskMethod  = doGetBatch
        threadGroups = edgeInit, default;

hydra.PoolPrms-readTimeout = 180000;

hydra.Prms-testRequirement = "Test SSL with bridge loader";
hydra.Prms-testDescription = "
Test operation will all communication through SSL. Especially bridge loader.
";

INCLUDE $JTESTS/hydraconfig/enable-ssl.inc;

hydra.Prms-totalTaskTimeSec=${ssl.totalTaskTimeSec};

