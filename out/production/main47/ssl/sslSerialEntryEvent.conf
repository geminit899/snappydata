hydra.Prms-testRequirement = "Test entry create/update/destroy/invalidate events";
hydra.Prms-testDescription = "
Test in serial execution mode to carefully validate entry events.

The test uses one region, a distributed scope and mirroring of keys
and values. There is a listener, that increments a blackboard counter
for each event, installed in the region for each VM.

The test executes a task that creates/updates/invalidates/destroys
an object in a region, then waits for the listener counters to reach
the required number, indicating the event was received in a VM.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_1_locator.inc;
INCLUDE $JTESTS/util/randomValues.inc;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
THREADGROUP client
    totalThreads = fcn ${clientHosts} * ${clientVMsPerHost}
                                      * ${clientThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"client\", ${clientHosts}, true)"
                   ncf;

STARTTASK    taskClass   = event.EventBB taskMethod  = HydraTask_initialize
             clientNames = client1;

STARTTASK    taskClass   = util.CacheBB taskMethod  = HydraTask_initialize
             clientNames = client1;

STARTTASK    taskClass   = util.RegionDefinition  taskMethod = HydraTask_initialize
             clientNames = fcn "hydra.TestConfigFcns.generateNames(\"client\", ${clientHosts}, true)" ncf;

INITTASK     taskClass = event.SerialEntryEventTest taskMethod = createLocatorTask
             threadGroups = locator;

INITTASK     taskClass = event.SerialEntryEventTest taskMethod = startLocatorAndAdminDSTask
             threadGroups = locator;

INITTASK     taskClass   = event.SerialEntryEventTest taskMethod  = HydraTask_initialize
             threadGroups = client;

TASK         taskClass   = event.EventTest taskMethod  = HydraTask_doEntryOperations
             threadGroups = client;

ENDTASK      taskClass   = event.SerialEntryEventTest taskMethod  = HydraTask_endTask
             clientNames = fcn "hydra.TestConfigFcns.generateNames(\"client\", ${clientHosts}, true)" ncf;

hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.GemFirePrms-conserveSockets = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-alwaysDoEndTasks = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

// Logging params
hydra.log.LogPrms-file_logging = true;

util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;

//lynn - don't use dLocks until 30616 is fixed
//event.EventPrms-useRandomLocks = ONEOF true false FOENO;
event.EventPrms-useRandomLocks = false;
event.EventPrms-maxObjects = 10;
event.EventPrms-entryOperations = ONEOF add add add add update invalidate destroy read FOENO; // weighted to adds

util.ValueHolderPrms-useExtraObject = false;

util.CacheDefPrms-cacheSpecs = "
   specName = cache1:
   ";

util.RegionDefPrms-regionSpecs = "
   specName = region1:
       regionName = EventRegion:
       scope = ack, global: mirroring = keysValues: 
       cacheListeners = event.ETListener event.OperationListener:
       cacheWriter = event.ETWriter:
   ";
util.RegionDefPrms-VMRegionSpecName = region1;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;
util.TestHelperPrms-minTaskGranularitySec = 0;
util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

hydra.GemFirePrms-conserveSockets = ${conserveSockets};

hydra.Prms-testRequirement = "Test SSL";
hydra.Prms-testDescription += "
Test operation will all communication through SSL.
";

INCLUDE $JTESTS/hydraconfig/enable-ssl.inc;

hydra.Prms-totalTaskTimeSec=300;

