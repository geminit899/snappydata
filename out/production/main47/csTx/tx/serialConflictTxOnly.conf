hydra.Prms-testRequirement = "
Test that conflicts occur/don't occur using only transactional operations
and always running inside a transaction.";

hydra.Prms-testDescription = "
This test runs with any number of threads in any number of VMs. The 1st
thread does random transactional operations (in a transaction), then each
of the subsequent threads in the round begin a transaction and do operations
that either intentionally conflict or not conflict with any thread that did
operations before it. On the second round, each thread tries to commit; the
1st thread aways succeeds (because it commits first), and all other threads
then either succeed or fail depending on what operations they did.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;
INCLUDE $JTESTS/util/randomValues.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = bridge
          hydra.ConfigPrms-regionConfig   = bridge
          threadGroups = bridge
          ;

INITTASK  taskClass   = tx.TxViewUtil taskMethod = HydraTask_startBridgeServer
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;

INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = edge
          hydra.ConfigPrms-regionConfig   = edge
          threadGroups = edge
          ;

// this task must come after createRegionForest (RegionAttributes must be known)
INITTASK  taskClass   = tx.BridgeConflictTest taskMethod = HydraTask_initializeSerialTest
          threadGroups = edge
          ;

TASK      taskClass   = tx.BridgeConflictTest taskMethod = HydraTask_serialTxOnlyConflictTest
          threadGroups = edge
          ;

CLOSETASK taskClass   = tx.TxViewUtil taskMethod = HydraTask_stopBridgeServer
          threadGroups = bridge
          ;

ENDTASK   taskClass   = tx.BridgeConflictTest taskMethod = HydraTask_endTask
          clientNames = edge1;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = ${totalTaskTimeSec};
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

util.ValueHolderPrms-useExtraObject = false;

hydra.Prms-useFixedRandomInMaster = true;

hydra.BridgePrms-names          = bridge;

hydra.CachePrms-names           = bridge      edge;
hydra.RegionPrms-names          = bridge      edge;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-poolName       = none        brloader;
hydra.RegionPrms-dataPolicy     = replicate   default;
hydra.RegionPrms-scope          = ack         local;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-cacheListeners = tx.LogListener;

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections   = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-subscriptionRedundancy = -1;

tx.TxPrms-operations =  
          entry-create entry-update entry-destroy entry-inval 
          entry-create entry-update entry-destroy entry-inval 
          entry-create entry-update entry-destroy entry-inval 
          entry-create entry-update entry-destroy entry-inval 
          entry-getWithNewKey entry-getWithExistingKey entry-getWithPreviousKey 
          ;
tx.TxPrms-numOps = RANGE 1 5 EGNAR;
tx.TxPrms-maxKeys = 10;
tx.TxPrms-numRootRegions = 2;
tx.TxPrms-numSubRegions = 3;
tx.TxPrms-regionDepth = 3;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 

tx.TxPrms-txWriter   = tx.TxLogWriter;
tx.TxPrms-txListener = tx.TxLogListener;
