include $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;
include $JTESTS/util/randomValues.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_createPartitionedRegions
          hydra.ConfigPrms-cacheConfig    = bridge
          hydra.ConfigPrms-regionConfig   = bridge
          threadGroups = bridge
          ;

INITTASK  taskClass   = tx.TxViewUtil taskMethod = HydraTask_startBridgeServer
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;
                                                                                
INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_populateRegions
          hydra.ConfigPrms-cacheConfig    = bridge
          hydra.ConfigPrms-regionConfig   = bridge
          threadGroups = bridge
          ;

INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_createPartitionedRegions
          hydra.ConfigPrms-cacheConfig    = edge
          hydra.ConfigPrms-regionConfig   = edge
          threadGroups = edge
          ;

INITTASK  taskClass   = tx.CollectionsTest taskMethod = HydraTask_initialize
          threadGroups = edge
          ;
                                                                                
TASK      taskClass   = tx.CollectionsTest taskMethod = HydraTask_doTransactions
          threadGroups = edge
          ;

CLOSETASK taskClass   = tx.TxViewUtil taskMethod = HydraTask_stopBridgeServer
          threadGroups = bridge
          ;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-serialExecution = true;

hydra.log.LogPrms-mergeLogFiles = true;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;

tx.TxPrms-maxKeys=20;
tx.TxPrms-numRootRegions=6;
tx.TxPrms-numSubRegions=0;
tx.TxPrms-regionDepth=0;

hydra.Prms-useFixedRandomInMaster = true;

hydra.BridgePrms-names          = bridge;

hydra.CachePrms-names           = bridge      edge;
hydra.RegionPrms-names          = bridge      edge;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-poolName       = none        brloader;
hydra.RegionPrms-dataPolicy     = partitioned default;
hydra.RegionPrms-scope          = default     local;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-cacheListeners = tx.LogListener;
hydra.RegionPrms-partitionName  = pr          none;

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections   = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-subscriptionRedundancy = -1;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-totalNumBuckets = 20;
hydra.PartitionPrms-redundantCopies = 1;

// todo@lhughes - limit operations until remote transactions fully supported for PR
tx.TxPrms-operations = entry-update entry-update entry-update entry-update
                       entry-getWithNewKey entry-getWithExistingKey
                       entry-inval
                       entry-destroy
                       entry-getWithPreviousKey;

tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO;
tx.TxPrms-isPartitionedRegion = true;

