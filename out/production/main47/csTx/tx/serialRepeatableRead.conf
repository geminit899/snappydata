hydra.Prms-testRequirement = "
Test conflicts that occur because of reads noting the committed
state (see bug 36688), and checks that repeatable reads return 
the correct value";

hydra.Prms-testDescription = "
This test runs with any two threads in any one or two VMs. 
   First round:
      The first thread in the round does a begin
      The other thread in the round does a begin and either a repeatable read
          or a nonrepeatable read.
   Second round:
      The first thread does ops and commites (expects a successful commit).
      The other thread does ops that either conflict or not and will
          attempt a commit, expecting either success or failure 
          depending on whether the ops created a conflict or not.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;
INCLUDE $JTESTS/util/randomValues.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = bridge
          hydra.ConfigPrms-regionConfig   = bridge
          threadGroups = bridge
          ;

INITTASK  taskClass   = tx.TxViewUtil taskMethod = HydraTask_startBridgeServer
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;

INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = edge
          hydra.ConfigPrms-regionConfig   = edge
          threadGroups = edge
          ;

// this task must come after createRegionForest (RegionAttributes must be known)
INITTASK  taskClass   = tx.BridgeConflictTest taskMethod = HydraTask_initializeSerialTest
          threadGroups = edge
          ;

TASK      taskClass   = tx.BridgeConflictTest taskMethod = HydraTask_serialTxOnlyRepeatableRead
          threadGroups = edge
          ;

CLOSETASK taskClass   = tx.TxViewUtil taskMethod = HydraTask_stopBridgeServer
          threadGroups = bridge
          ;

ENDTASK   taskClass   = tx.BridgeConflictTest taskMethod = HydraTask_endTask
          clientNames = edge1;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = ${totalTaskTimeSec};
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

util.ValueHolderPrms-useExtraObject = false;

hydra.Prms-useFixedRandomInMaster = true;

hydra.BridgePrms-names          = bridge;

hydra.CachePrms-names           = bridge      edge;
hydra.RegionPrms-names          = bridge      edge;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-poolName       = none        brloader;
hydra.RegionPrms-dataPolicy     = replicate   default;
hydra.RegionPrms-scope          = ack         local;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-cacheListeners = tx.LogListener;

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections   = 2; 
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-subscriptionRedundancy = -1;

tx.TxPrms-operations =  
          entry-create entry-update entry-destroy entry-localDestroy
          entry-create entry-update entry-destroy entry-localDestroy
                       entry-inval entry-localInval entry-getWithNewKey entry-getWithExistingKey
                       entry-getWithPreviousKey;
tx.TxPrms-regionOpPercentage = 0;
tx.TxPrms-numOps = RANGE 1 5 EGNAR;
tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=3;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 
