include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_hct.inc;
include $JTESTS/util/randomValues.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;

THREADGROUP txThread  totalThreads = 1  totalVMs = 1 clientNames=edge1;
THREADGROUP killer    totalThreads = 1  totalVMs = 1 clientNames=edge1;
THREADGROUP validator totalThreads = 1  totalVMs = 1 clientNames=edge2;
// remaining edge threads are THREADGROUP default

INITTASK  taskClass   = tx.TxViewUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = bridge
          hydra.ConfigPrms-regionConfig   = bridge
          threadGroups = bridge
          ;
                                                                                
INITTASK  taskClass   = tx.TxViewUtil taskMethod = HydraTask_startBridgeServer
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;
                                                                                
// create region tree + registerInterest in ALL_KEYS
INITTASK  taskClass   = tx.TxViewUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = edge 
          hydra.ConfigPrms-regionConfig   = edge
          threadGroups = txThread, validator, default
          ;
                                                                                
INITTASK  taskClass   = tx.BridgeViewTest taskMethod = HydraTask_initialize
          ;

// Just one time through the begin/commit cycle
// Now that we aren't always killing the tx thread, we need to limit this
TASK      taskClass   = tx.BridgeViewTest taskMethod = HydraTask_executeTx
          maxTimesToRun = 2
          threadGroups = txThread
          ;

TASK      taskClass   = tx.BridgeViewTest taskMethod = HydraTask_killDelegate
          maxTimesToRun = 1
          threadGroups = killer
          ;

TASK      taskClass   = tx.BridgeViewTest taskMethod = HydraTask_waitForDist
          threadGroups = validator, default 
          ;

CLOSETASK taskClass   = tx.BridgeViewTest taskMethod = HydraCloseTask_validateTxConsistency
          threadGroups = validator, default, bridge, txThread
          ;

// Note that this must come AFTER validateTxConsistency since we'll perform
// operations on the same keys as the previous transaction (which would 
// cause the data consistency validation to fail.  Only one VM can execute
// this since we'll be applying the same changes as the original commit
CLOSETASK taskClass   = tx.BridgeViewTest taskMethod = HydraCloseTask_verifyResourcesReleased
          threadGroups = validator
          ;

CLOSETASK taskClass   = tx.TxViewUtil taskMethod = HydraTask_stopBridgeServer
          threadGroups = bridge
          ;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 360;
hydra.Prms-serialExecution=false;
hydra.Prms-alwaysDoEndTasks = true;

hydra.log.LogPrms-mergeLogFiles = true;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;

tx.TxPrms-commitStateTrigger = ${commitStateTrigger};

// with commitStateTrigger afterSendCommit, this needs to be 100 (to force commit)
// with commitStateTrigger afterSendRollback, this needs to be 0 (to cause rollback)
tx.TxPrms-commitPercentage=${commitPercentage};

tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=2;

hydra.CachePrms-names           = bridge    edge;
hydra.RegionPrms-names          = bridge    edge;
hydra.RegionPrms-poolName       = none      brloader;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-cacheListeners = tx.LogListener;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-scope          = ack       local;
hydra.RegionPrms-dataPolicy     = replicate default;

hydra.BridgePrms-names          = bridge;

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections   = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-subscriptionRedundancy = -1;

tx.TxPrms-txListener = tx.TxViewListener;

tx.TxPrms-operations =
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          ;

tx.TxPrms-numOps = RANGE 1 5 EGNAR;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 

