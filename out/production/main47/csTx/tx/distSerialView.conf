include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_hct.inc;
include $JTESTS/util/randomValues.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;

THREADGROUP txThread  totalThreads = 1  totalVMs = 1 clientNames=edge1;
THREADGROUP validator totalThreads = 1  totalVMs = 1 clientNames=edge2;
// remaining edge threads are THREADGROUP default

STARTTASK taskClass   = tx.TxViewUtil taskMethod=StartTask_initialize
          clientNames = edge1 
          ;

INITTASK  taskClass   = tx.TxViewUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = bridge
          hydra.ConfigPrms-regionConfig   = bridge
          threadGroups = bridge
          ;

INITTASK  taskClass   = tx.TxViewUtil taskMethod = HydraTask_startBridgeServer
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;

// create region tree + registerInterest in ALL_KEYS
INITTASK  taskClass   = tx.TxViewUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = edge
          hydra.ConfigPrms-regionConfig   = edge
          threadGroups = txThread, validator, default
          ;

INITTASK  taskClass   = tx.SerialViewTest taskMethod = HydraTask_initialize
          ;

TASK      taskClass   = tx.SerialViewTest taskMethod = HydraTask_executeTx
          threadGroups = txThread
          ;

TASK      taskClass   = tx.SerialViewTest taskMethod = HydraTask_checkCommittedState
          threadGroups = txThread, validator, default, bridge
          ;

CLOSETASK taskClass   = tx.TxViewUtil taskMethod = HydraTask_stopBridgeServer
          threadGroups = bridge
          ;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-serialExecution=true;
hydra.Prms-roundRobin=true;
hydra.Prms-useFixedRandomInMaster = true;

hydra.log.LogPrms-mergeLogFiles = true;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;

tx.TxPrms-commitPercentage=80;
tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=2;

hydra.CachePrms-names           = bridge    edge;
hydra.RegionPrms-names          = bridge    edge;
hydra.RegionPrms-poolName       = none      brloader;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-scope          = ack       local;
hydra.RegionPrms-dataPolicy     = replicate default;

hydra.RegionPrms-cacheListeners = tx.TestListener;
hydra.RegionPrms-cacheWriter    = tx.TestWriter;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;

tx.TxPrms-checkEventCounters = true;
tx.TxPrms-txListener = tx.TxListener;
tx.TxPrms-txWriter = tx.TxWriter;

hydra.BridgePrms-names          = bridge;

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections   = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-subscriptionRedundancy = -1;

tx.TxPrms-operations =
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-getWithNewKey entry-getWithExistingKey entry-getWithPreviousKey
          ;

tx.TxPrms-numOps = RANGE 1 5 EGNAR;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 

