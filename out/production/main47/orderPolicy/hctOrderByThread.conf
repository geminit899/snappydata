//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/wan/wan.inc;
include $JTESTS/wan/hct.inc;

hydra.GatewayPrms-batchSize = 113;
hydra.GatewayPrms-orderPolicy = thread;
hydra.GatewayPrms-concurrencyLevel = RANGE 2 10 EGNAR;   // concurrencyLevel must be > 1 when OrderPolicyTest is configured

// use ValueHolder, encode opNum in 'modVal' field
INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

// values increment per thread
hydra.RegionPrms-cacheListeners = orderPolicy.SequentialValuesForTidListener;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is peer-to-peer in its own distributed system and each VM is a WAN gateway hub to other sites.";

//------------------------------------------------------------------------------
// TEST TERMINATION - this is controlled by the minTaskGranularitySec parameter
// as the OrderPolicy is specific to a single NATIVE THREAD (not a logical hydra thread).
//------------------------------------------------------------------------------

util.TestHelperPrms-minTaskGranularitySec = 600;

hydra.Prms-totalTaskTimeSec = 30;
hydra.Prms-maxResultWaitSec = 660;

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

INITTASK taskClass = orderPolicy.OrderPolicyTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = orderPolicy.OrderPolicyTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;
INITTASK taskClass = orderPolicy.OrderPolicyTest taskMethod = initServerForOrderPolicyTest
         runMode = always
         threadGroups = bridge;
INITTASK taskClass = orderPolicy.OrderPolicyTest taskMethod = startGatewayHubTask
         runMode = always
         threadGroups = bridge;
INITTASK taskClass = orderPolicy.OrderPolicyTest taskMethod = initializeInstanceTask
         runMode = always
         threadGroups = bridge;

INITTASK taskClass = orderPolicy.OrderPolicyTest taskMethod = initEdgeForOrderPolicyTest
         runMode = always
         threadGroups = edge;
INITTASK taskClass = orderPolicy.OrderPolicyTest taskMethod = initializeInstanceTask
         runMode = always
         threadGroups = edge;

//------------------------------------------------------------------------------
// PRIMARY WORK (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = orderPolicy.OrderPolicyTest taskMethod = putsForThreadOrderPolicyTask
     threadGroups = edge;

wan.CacheClientPrms-sleepSec = 0;

//------------------------------------------------------------------------------
// FINAL WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = orderPolicy.OrderPolicyTest taskMethod = printSequentialKeysTask
          threadGroups = edge;
CLOSETASK taskClass = orderPolicy.OrderPolicyTest taskMethod = checkForEventErrors
          threadGroups = edge;
CLOSETASK taskClass = orderPolicy.OrderPolicyTest taskMethod = closeEdgeClientCacheTask
          threadGroups = edge;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge;
CLOSETASK taskClass = orderPolicy.OrderPolicyTest taskMethod = closeServerCacheTask
          threadGroups = bridge;

THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;


