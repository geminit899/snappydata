include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_wan_hct.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "edge clients in a wan site hub with a primary and secondary gateway update entries to a hub with a secondary in a different distributed system.  Entries are byte arrays of size ${dataSize}.";

hydra.CachePrms-names = cache;

hydra.RegionPrms-names          = gateway   publisherClient subscriberClient;
hydra.RegionPrms-cacheListeners = none,     none,           cacheperf.gemfire.LatencyListener;
hydra.RegionPrms-dataPolicy     = replicate normal;
hydra.RegionPrms-enableGateway  = true      false;
hydra.RegionPrms-poolName       = none      pool;
hydra.RegionPrms-scope          = dack      local;

hydra.GatewayHubPrms-names         = gatewayHub;

hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-batchSize = 1000;
hydra.GatewayPrms-batchTimeInterval = 50;   // overrides default setting of 1000ms
hydra.GatewayPrms-diskStoreName = disk;

hydra.DiskStorePrms-names = disk;

hydra.BridgePrms-names = bridge;
hydra.BridgePrms-maxThreads = 32;

hydra.PoolPrms-names = pool;
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper
                                   getRandomEndpointsInWanHctSite;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;

hydra.VmPrms-extraVMArgs = -Xms256m -Xmx256m;
hydra.VmPrms-extraVMArgsSUN = -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = gateway
          hydra.ConfigPrms-bridgeConfig = bridge
          threadgroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = publisherClient
          threadgroups = publisher
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = subscriberClient
          threadgroups = subscriber
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = registerInterestRegexAllTask
          threadGroups = subscriber
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createGatewayHubTask
          hydra.ConfigPrms-gatewayHubConfig = gatewayHub
          threadgroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = addGatewaysTask
          hydra.ConfigPrms-gatewayConfig = gateway
          threadgroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = startGatewayHubTask
          threadgroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadgroups = publisher
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKey
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = publisher
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP bridge
  totalThreads = fcn ${wanSites} * ${bridgeHostsPerSite}
                   * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"bridge\", ${wanSites}, ${bridgeHostsPerSite}, false, true)" ncf;
THREADGROUP publisher
  totalThreads = fcn ${edgeHostsPerSite} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
           (\"edge_1_\", ${edgeHostsPerSite}, true)" ncf;
THREADGROUP subscriber
  totalThreads = fcn ${edgeHostsPerSite} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
           (\"edge_2_\", ${edgeHostsPerSite}, true)" ncf;

cacheperf.CachePerfPrms-maxKeys = fcn 
                                     ${edgeHostsPerSite} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                                  ncf;
                     
cacheperf.CachePerfPrms-objectType      = objects.ArrayOfByte;
objects.ArrayOfBytePrms-encodeKey       = true;
objects.ArrayOfBytePrms-encodeTimestamp = true;
objects.ArrayOfBytePrms-size            = ${dataSize};

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/perf038.spec;
