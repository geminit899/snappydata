hydra.Prms-testDescription =
"This tests dataPolicy = NORMAL with any randomly selected distributed scope.

Using the root region, this test has 1 thread that puts positive keys/values 
(keys with a positive Integer such as Object_8, value Long 8) and one thread 
that puts negative keys/values (keys with a negative Integer such as Object_9,
value Long 9). Other threads use containsKey and containsValueForKey to verify that
data distribution has occurred correctly. 

";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams2.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.HostPrms-names          = host1    host2   host3   host4;
hydra.VmPrms-names            = vm1      vm2     vm3     vm4;
hydra.VmPrms-hostNames        = host1    host2   host3   host4;
hydra.GemFirePrms-names       = gemfire1 gemfire2 gemfire3 gemfire4;
hydra.GemFirePrms-hostNames   = host1    host2    host3  host4;

hydra.ClientPrms-names        = positiveClient nonVisiblePosClient negativeClient nonVisibleNegClient nonVisibleClient;
hydra.ClientPrms-vmNames      = vm1            vm1                 vm2            vm2                 vm3;
hydra.ClientPrms-gemfireNames = gemfire1       gemfire1            gemfire2       gemfire2            gemfire3;
hydra.ClientPrms-vmQuantities = 1              1                   1              1                   2;
hydra.ClientPrms-vmThreads    = 3              3                   3              3                   4;

THREADGROUP positiveUpdateThread totalThreads = 1  totalVMs = 1  clientNames = positiveClient;
THREADGROUP negativeUpdateThread totalThreads = 1  totalVMs = 1  clientNames = negativeClient;
THREADGROUP otherPositiveThreads totalThreads = 2 clientNames = positiveClient;
THREADGROUP otherNegativeThreads totalThreads = 2 clientNames = negativeClient;

// all threads in the default thread group are nonvisible
THREADGROUP nonVisiblePosThread totalThreads = 1  totalVMs = 1  clientNames = nonVisiblePosClient;
THREADGROUP nonVisibleNegThread totalThreads = 1  totalVMs = 1  clientNames = nonVisibleNegClient;
THREADGROUP nonVisibleThreads totalThreads = 2  totalVMs = 2  clientNames = nonVisibleClient;

STARTTASK    taskClass   = mirror.MirrorBB taskMethod  = HydraTask_initialize
             clientNames = positiveClient;

STARTTASK    taskClass   = util.CacheBB taskMethod  = HydraTask_initialize
             clientNames = positiveClient;

INITTASK     taskClass   = util.RegionDefinition taskMethod = InitTask_initialize;

INITTASK     taskClass   = mirror.MirrorTest taskMethod  = HydraTask_initWithListener 
             threadGroups = positiveUpdateThread, negativeUpdateThread
             util.CachePrms-dataPolicyAttribute = NORMAL
             mirror.MirrorPrms-listenerClassName = mirror.EventListener1;

INITTASK     taskClass   = mirror.MirrorTest taskMethod  = HydraTask_initWithListener 
             threadGroups = default
             util.CachePrms-dataPolicyAttribute = NORMAL
             mirror.MirrorPrms-listenerClassName = mirror.EventListener2;

INITTASK     taskClass   = mirror.MirrorTest taskMethod  = HydraTask_updatePositive 
             threadGroups = positiveUpdateThread;

INITTASK     taskClass   = mirror.MirrorTest taskMethod  = HydraTask_updateNegative 
             threadGroups = negativeUpdateThread;

TASK         taskClass   = mirror.MirrorTest taskMethod  = HydraTask_updatePositive
             threadGroups = positiveUpdateThread;

TASK         taskClass   = mirror.MirrorTest taskMethod  = HydraTask_updateNegative
             threadGroups = negativeUpdateThread;

TASK         taskClass   = mirror.MirrorTest taskMethod  = HydraTask_readPositive
             threadGroups = otherPositiveThreads;

TASK         taskClass   = mirror.MirrorTest taskMethod  = HydraTask_readNegative
             threadGroups = otherNegativeThreads;

TASK         taskClass   = mirror.MirrorTest taskMethod  = HydraTask_noKeys
             threadGroups = default, nonVisiblePosThread, nonVisibleNegThread, nonVisibleThreads;

CLOSETASK    taskClass   = mirror.MirrorTest taskMethod  = HydraTask_validateMirrorKeysPositive
             threadGroups = positiveUpdateThread;
CLOSETASK    taskClass   = mirror.MirrorTest taskMethod  = HydraTask_validateMirrorKeysNegative
             threadGroups = negativeUpdateThread;
CLOSETASK    taskClass   = mirror.MirrorTest taskMethod  = HydraTask_validateNoPropagation
             threadGroups = nonVisiblePosThread, nonVisibleNegThread, nonVisibleThreads;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 900;
hydra.Prms-maxResultWaitSec = 900;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-alwaysDoEndTasks = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

// Logging params
hydra.log.LogPrms-file_logging = true;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;
util.TestHelperPrms-minTaskGranularitySec = 30;

util.ValueHolderPrms-useExtraObject = true;
util.CachePrms-keyValueWaitTime = 300;

// do not specify mirroring attribute here; it is specified in the task attributes above
util.RegionDefPrms-regionSpecs = "
   specName = region1:
       scope = noAck ack global: 
   ";
util.RegionDefPrms-VMRegionSpecName = region1;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;
mirror.MirrorPrms-totalNumObjectsToMirror = 40000;
hydra.VmPrms-extraVMArgs = "-Xmx300m";

