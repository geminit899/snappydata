hydra.Prms-testRequirement = "Test entry create/update/destroy/invalidate events with dynamic VM stop/start";
hydra.Prms-testDescription = "
This test concurrently executes put/invalidate/destroy/get operations to
create entry events. Also used: localInvalidate/localDestroy, entryTTL
entryIdleTimeout, but no locks for running with high concurrency.
";

// In this concurrent test, no validation of event counters can be done: 
// sometimes a get, which results in getting the value from another node, can 
// generate an update event, sometimes an update (put with an existing key) can 
// become a create event if another threads destroys the key between the time
// the test gets the key and issues the put. For this reason, the test cannot
// rely on event counters.
INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3_locator.inc;

hydra.ClientPrms-vmQuantities = 3 3 3;
hydra.ClientPrms-vmThreads    = 5 5 5;

THREADGROUP locatorThreads
  totalThreads = fcn
                 ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)"
                 ncf;
                 
THREADGROUP clientThreads
  totalThreads = fcn
                 ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"client\", ${clientHosts}, true)"
                 ncf;
THREADGROUP groupBThreads
  totalThreads = fcn
                 ${groupBHosts} * ${groupBVMsPerHost} * ${groupBThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"groupB\", ${groupBHosts}, true)"
                 ncf;
THREADGROUP groupCThreads
  totalThreads = fcn
                 ${groupCHosts} * ${groupCVMsPerHost} * ${groupCThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"groupC\", ${groupCHosts}, true)"
                 ncf;
                
STARTTASK    taskClass   = event.EventBB taskMethod  = HydraTask_initialize clientNames = client1;

STARTTASK    taskClass   = util.CacheBB taskMethod  = HydraTask_initialize clientNames = client1;

INITTASK    taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask runMode = always;

INITTASK taskClass =  rollingupgrade.RollingUpgradeTest taskMethod = createLocatorTask
         threadGroups = locatorThreads
         runMode = always;

INITTASK taskClass =  rollingupgrade.RollingUpgradeTest taskMethod = startAndConnectLocatorTask
         threadGroups = locatorThreads
         runMode = always;

INITTASK     taskClass   = util.RegionDefinition  taskMethod = InitTask_initialize
            threadGroups = clientThreads, groupBThreads, groupCThreads;

INITTASK     taskClass   = event.EventTest taskMethod  = HydraTask_initialize
             threadGroups = clientThreads, groupBThreads, groupCThreads
             runMode = always;
             
TASK          taskClass = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_UpgradeLocators
              threadGroups = locatorThreads
              maxTimesToRun = 1;
              
TASK         taskClass   = event.EventTest taskMethod  = HydraTask_doEntryOperations
             threadGroups = clientThreads, groupBThreads, groupCThreads;

ENDTASK      taskClass   = event.EventTest taskMethod  = HydraTask_iterate;

hydra.GemFirePrms-conserveSockets = true;
hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-alwaysDoEndTasks = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

// Logging params
hydra.log.LogPrms-file_logging = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;

//lynn - don't use dLocks until 30616 is fixed
//event.EventPrms-useRandomLocks = ONEOF true false false FOENO;
event.EventPrms-useRandomLocks = false;
event.EventPrms-entryOperations = ONEOF add add add add update invalidate read destroy localInvalidate localDestroy FOENO; 
      // weighted to adds

util.ValueHolderPrms-useExtraObject = false;

util.CacheDefPrms-cacheSpecs = "
   specName = cache1:
       lockTimeout = 900:
   ";

util.RegionDefPrms-regionSpecs = "
   specName = region1:
       regionName = EventRegion:
       scope = ack, noack: dataPolicy = replicate: 
       entryTTLSec = 0 20: 
       entryTTLAction = invalidate:
       entryIdleTimeoutSec = 0 20: 
       entryIdleTimeoutAction = invalidate:
       statisticsEnabled = true:
       cacheListeners = event.ETListener event.OperationListener:
       cacheWriter = event.ETWriter:
   ";
util.RegionDefPrms-VMRegionSpecName = region1;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

util.TestHelperPrms-minTaskGranularitySec = 60;
util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;



TASK         taskClass   = event.EventTest taskMethod  = HydraTask_stopStartVMs
             maxThreads = 1;

util.TestHelperPrms-minTaskGranularitySec = 15; // only wait 15 seconds for nice_exits
util.StopStartPrms-numVMsToStop = RANGE 1 5 EGNAR;
util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT FOENO;


 INCLUDE $JTESTS/rollingupgrade/versionUpgrade.inc;