hydra.Prms-testRequirement = "Test to repeatedly call shutDownAll with disk recovery startup; this is primarily a performance test for shutDownAll which (prior to fixes) had execution times that varied greatly'";
hydra.Prms-testDescription = "Load data, repeatedly run task to shutDownAll, restart and verify regions were recovered";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct_2_locator.inc;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
THREADGROUP adminThreads 
  totalThreads = fcn
                 ${${A}bridgeHosts} * ${${A}bridgeVMsPerHost} * ${${A}bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"${A}bridge\", ${${A}bridgeHosts}, true)"
                 ncf;
THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${${B}bridgeHosts} * ${${B}bridgeVMsPerHost} * ${${B}bridgeThreadsPerVM} - ${numProxyJvms}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"${B}bridge\", ${${B}bridgeHosts}, true)"
                 ncf;
THREADGROUP proxyThreads
  totalThreads = ${numProxyJvms}
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"${B}bridge\", ${${B}bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;
                 
INITTASK taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
         threadGroups = proxyThreads,bridgeThreads, locatorThreads
         runMode = always;
         
INITTASK taskClass =  rollingupgrade.RollingUpgradeTest taskMethod = createLocatorTask
         threadGroups = locatorThreads
         runMode = always;

INITTASK taskClass =  rollingupgrade.RollingUpgradeTest taskMethod = startAndConnectLocatorTask
         threadGroups = locatorThreads
         runMode = always;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_initialize
         runMode = always
         threadGroups = bridgeThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_initializeProxy
         runMode = always
         threadGroups = proxyThreads;

INITTASK taskClass = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
         threadGroups = adminThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_initializeClient
         threadGroups = edgeThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_load
         batch
         threadGroups = edgeThreads;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_verifyRegionSizes
         runMode = always
         threadGroups = proxyThreads,bridgeThreads;

TASK          taskClass = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_UpgradeLocators
              threadGroups = locatorThreads
              maxTimesToRun = 1;
              
TASK     taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_startupShutdown
         maxThreads=1
         threadGroups = adminThreads;

hydra.Prms-maxResultWaitSec = 1200;
hydra.Prms-totalTaskTimeSec = 1800;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1024;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = false ;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names           = persistReplicate       persistPR            clientRegion   proxyReplicate proxyPR;
hydra.RegionPrms-dataPolicy      = persistentReplicate    persistentPartition  normal         empty          partition;
hydra.RegionPrms-scope           = ack                    default              local          ack            default;
hydra.RegionPrms-diskStoreName   = diskStore1             diskStore2           none           none           none;
hydra.RegionPrms-diskSynchronous = true                   false;
hydra.RegionPrms-partitionName   = none                   PR                   none           none           accessorPR;
hydra.RegionPrms-poolName        = none                   none                 edgeDescript   none           none;
hydra.RegionPrms-enableGateway   = true                   true                 true           true           true;

//hydra.RegionPrms-cacheListeners  = util.SummaryLogListener;
hydra.RegionPrms-evictionAttributes = lruEntryCount 1000 overflowToDisk,
                                      lruEntryCount 1000 overflowToDisk,
                                      lruEntryCount 1000 localDestroy,
                                      none,
                                      lruEntryCount 1000 overflowToDisk;

hydra.PartitionPrms-names           = accessorPR           PR;
hydra.PartitionPrms-localMaxMemory  = 0                    default;
hydra.PartitionPrms-redundantCopies = 1                    1;

hydra.DiskStorePrms-names = diskStore1  diskStore2;
hydra.DiskStorePrms-autoCompact = true;  
hydra.DiskStorePrms-maxOplogSize = 1; // frequent new logs
hydra.DiskStorePrms-diskDirNum = ONEOF 1 2 3 FOENO;

diskRecovery.RecoveryPrms-operations = ONEOF add destroy invalidate update get getNew putAll cacheOperations FOENO;
diskRecovery.RecoveryPrms-lowerThreshold = 10;
diskRecovery.RecoveryPrms-upperThreshold = 500;
diskRecovery.RecoveryPrms-lowerThresholdOperations = ONEOF add putAll cacheOperations FOENO;
diskRecovery.RecoveryPrms-upperThresholdOperations = ONEOF destroy cacheOperations FOENO;
diskRecovery.RecoveryPrms-numPutAllNewKeys = RANGE 1 10 EGNAR;
diskRecovery.RecoveryPrms-numPutAllExistingKeys = RANGE 1 10 EGNAR;

util.TestHelperPrms-minTaskGranularitySec = 60;

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy   = 1;
hydra.PoolPrms-pingInterval           = 400;
hydra.PoolPrms-loadConditioningInterval     = 5000;

// define the bridge servers
hydra.BridgePrms-names                = bridge;

diskRecovery.RecoveryPrms-numToLoad = 50; // number of entries to load into each region by one thread
diskRecovery.RecoveryPrms-useColocatedPRs = true; // even when true, only half the PRs are colocated so we still have coverage of non-colocated PRs

hydra.GemFirePrms-enableNetworkPartitionDetection = true;

INCLUDE $JTESTS/rollingupgrade/versionUpgrade.inc;