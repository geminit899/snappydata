hydra.Prms-testRequirement = "Test that compatibility of major Gemfire versions by performing a rolling upgrade";
hydra.Prms-testDescription = "Locator/Server/Client topology. 
The controller VM goes on restarting 1 VM at a time starting from locators followed by bridge servers followed by edge clients.
Upon every recycle the new VM will be at upgraded version.
Edge clients and bridge server threads are all doing region operations when the VM is recycled.
After each individual recycle all the threads pause and perform verifySnapshot written by elected reader.
And this should continue until all the VMs have been upgraded.
   ";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_4.inc;

hydra.Prms-manageLocatorAgents=false;

// Example where subgroups A and B are peers, C and D are all loners.
//
hydra.GemFirePrms-distributedSystem =
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"ds\",    ${${A}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"ds\",    ${${B}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"ds\", ${${C}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"loner\", ${${D}Hosts})"
                              ncf;

// define thread groups
// just need one thread from the controller vm
THREADGROUP controllerThread
   totalThreads = fcn (${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}) ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf;

THREADGROUP locator
    totalThreads = fcn (${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}) ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;
    
THREADGROUP bridge
    totalThreads = fcn (${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM}) ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${C}\", ${${C}Hosts}, true)" ncf;
    
THREADGROUP edge
    totalThreads = fcn (${${D}Hosts} * ${${D}VMsPerHost} * ${${D}ThreadsPerVM}) ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${D}\", ${${D}Hosts}, true)" ncf;

hydra.ClientPrms-versionNames =
  fcn "hydra.TestConfigFcns.duplicate(\"none\",  ${${A}Hosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version1\",  ${${B}Hosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version1\", ${${C}Hosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version1\", ${${D}Hosts})" ncf
  ;

hydra.GemFirePrms-deltaPropagation = false;
hydra.GemFirePrms-membershipPortRange = 10000-20000;
hydra.GemFirePrms-logLevel = info;
hydra.log.LogPrms-file_logLevel          = info;
hydra.VersionPrms-names    = version1;
hydra.VersionPrms-versions = default 7199;

//hydra.VersionPrms-gemfireHome =
//  fcn "hydra.VersionDescription.getGemFireHome(\"${version1}\")" ncf;

INITTASK    taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask
            runMode = always;

INITTASK    taskClass     = rollingupgrade.RollingUpgradeTest  taskMethod = HydraTask_createLocator
            threadGroups = locator
            runMode = always;
            
INITTASK    taskClass     = rollingupgrade.RollingUpgradeTest  taskMethod = HydraTask_startLocatorAndDS
            threadGroups = locator
            runMode = always;
            
INITTASK    taskClass     = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_initController
            threadGroups = controllerThread
            runMode = always;

INITTASK    taskClass     = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_initialize
          hydra.ConfigPrms-bridgeConfig   = bridge
          hydra.ConfigPrms-cacheConfig    = bridge 
          hydra.ConfigPrms-regionConfig   = bridge
          threadGroups = bridge
          runMode = always;
          

INITTASK    taskClass     = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_initialize
            hydra.ConfigPrms-cacheConfig    = edge
            hydra.ConfigPrms-regionConfig   = edge
            threadGroups = edge
            runMode = always;

//INITTASK    taskClass     = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_createXmlFile
//            threadGroups = bridge, edge;

INITTASK    taskClass     = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_loadRegions
            threadGroups = edge;

//INITTASK    taskClass = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
//            threadGroups = controllerThread;

// dynamic init tasks for any restarted jvms; new version jvms initialize from an old version's xml file
//INITTASK    taskClass = pdx.compat.PdxCompatTest taskMethod = HydraTask_initializeWithXml
//            threadGroups = newVersionThreads, oldVersionThreads, oldVersionProxyVMThreads
//            runMode = dynamic;

TASK        taskClass     = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_doOperationsAndPauseVerify
            threadGroups = edge, bridge;

TASK        taskClass     = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_UpgradeController
            threadGroups = controllerThread
            maxTimesToRun = 1;

hydra.Prms-totalTaskTimeSec = 7200; // test is workload based

INCLUDE $JTESTS/pdx/randomValuesPdx.inc;
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names               = edge          bridge;

hydra.RegionPrms-names              = edge          bridge;
hydra.RegionPrms-regionName         = testRegion    testRegion;
hydra.RegionPrms-scope              = default       default;
hydra.RegionPrms-poolName           = edgeDescript  none;
hydra.RegionPrms-dataPolicy         = normal        partition;
hydra.RegionPrms-partitionName      = none          pr;
hydra.RegionPrms-cacheListeners = util.SilenceListener, util.SilenceListener;

hydra.CachePrms-searchTimeout   = 600;
hydra.Prms-maxResultWaitSec = 2400;

rollingupgrade.RollingUpgradePrms-numToLoad = 2000;
rollingupgrade.RollingUpgradePrms-opsTaskGranularitySec = 45;
util.TestHelperPrms-minTaskGranularitySec = 10; // length of ops per region

util.OperationsClientPrms-entryOperations = ONEOF add add getNew getNew update update update invalidate get destroy replace remove FOENO;
util.OperationsClientPrms-upperThreshold = 550;
util.OperationsClientPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
util.OperationsClientPrms-lowerThreshold = 400;
util.OperationsClientPrms-lowerThresholdOperations = add ;
util.OperationsClientPrms-objectTypes = util.ValueHolder util.VHDataSerializable;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-redundantCopies = 1;

// define the bridge servers
hydra.BridgePrms-names                = bridge;

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy = 2;
hydra.PoolPrms-pingInterval           = 400;
hydra.PoolPrms-loadConditioningInterval = 5000;
