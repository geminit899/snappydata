hydra.Prms-testRequirement = "Test high availability of partitioned regions with a variety of operations with validation and concurrent execution";
hydra.Prms-testDescription = "
With a variety of accessor and data host VMs, randomly kill ${numVMsToStop} VMs at
a time, then bring it back and verify the data.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INITTASK    taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask
            runMode = dynamic;
INITTASK taskClass =  rollingupgrade.RollingUpgradeTest taskMethod = createLocatorTask
         threadGroups = locatorThreads
         runMode = always;

INITTASK taskClass =  rollingupgrade.RollingUpgradeTest taskMethod = startAndConnectLocatorTask
         threadGroups = locatorThreads
         runMode = always;
         
INCLUDE $JTESTS/hydraconfig/topology_p2p_2_locator.inc;
INCLUDE $JTESTS/parReg/concParRegHA.inc;

// all threads in subgroup A are accessorThreads, and all threads in subgroup B
// are in dataStoreThreads
THREADGROUP locatorThreads
  totalThreads = fcn
                 ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)"
                 ncf;

THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

TASK          taskClass = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_UpgradeLocators
              threadGroups = locatorThreads
              maxTimesToRun = 1;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion           dataStoreRegion;
hydra.RegionPrms-regionName     = partitionedRegion;
hydra.RegionPrms-cacheLoader    = parReg.ParRegLoader;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = accessorPR               dataStorePR;

hydra.PartitionPrms-names           = accessorPR          dataStorePR;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-localMaxMemory  = 0                   default;

// These two lines will make sure that locator VMs are never picked up for restart
parReg.ParRegPrms-stopVMsExcludeMatchStr = locator;
parReg.ParRegPrms-numVMsToStop = 1;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT FOENO;
INCLUDE $JTESTS/rollingupgrade/versionUpgrade.inc;