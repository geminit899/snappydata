INCLUDE $JTESTS/parReg/query/queryRegionSpecsParReg1.inc;
INCLUDE $JTESTS/rollingupgrade/parReg/query/queryEntry.inc;

INITTASK     taskClass   = util.StopStartVMs taskMethod  = StopStart_initTask
	     runMode 	 = always;

INITTASK taskClass =  rollingupgrade.RollingUpgradeTest taskMethod = createLocatorTask
         threadGroups = locatorThreads
         runMode = always;

INITTASK taskClass =  rollingupgrade.RollingUpgradeTest taskMethod = startAndConnectLocatorTask
         threadGroups = locatorThreads
         runMode = always;

INITTASK     taskClass   = parReg.query.ConcQueryOnlyTest taskMethod  = HydraTask_initialize
             threadGroups = client1Thread, client2Thread, client3Thread
	     runMode = always;

INITTASK     taskClass   = parReg.query.SerialQueryAndEntryOpsTest taskMethod  = HydraTask_populateRegion
             threadGroups = client1Thread, client2Thread, client3Thread;


INITTASK     taskClass   = util.PRObserver  taskMethod = initialize
             threadGroups = client1Thread, client2Thread, client3Thread
             runMode     = once;

TASK         taskClass = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_UpgradeLocators
             threadGroups = locatorThreads
             maxTimesToRun = 1;

TASK         taskClass   = parReg.query.SerialQueryAndEntryOpsTest taskMethod  = HydraTask_doStopStartVmAndQueryOperation
             threadGroups = client1Thread, client2Thread, client3Thread;


query.QueryPrms-allowQueryInvocationTargetException = true;
util.StopStartPrms-stopModes = ONEOF NICE_EXIT FOENO;

hydra.Prms-totalTaskTimeSec = 600;

query.QueryPrms-entryAndQueryOperations = query;

hydra.Prms-serialExecution = false;

query.QueryPrms-objectType = parReg.query.NewPortfolio;
query.QueryPrms-useRandomValues = false;
//query.QueryPrms-useRandomValues = true;
//query.index.IndexPrms-numOfIndexes = 2;

hydra.Prms-maxResultWaitSec = 600;
util.TestHelperPrms-minTaskGranularitySec = 0;

INCLUDE $JTESTS/rollingupgrade/versionUpgrade.inc;
