hydra.Prms-testRequirement = "
Verify resumeable transaction behavior with function execution.  PR accessors use functions to execute: begin/suspend, resume/doOps/suspend and resume/commit(or rollback).";

hydra.Prms-testDescription = "
This test runs with peer (PR) dataStore and accessors.  DataStores host colocated PartitionRegions; a PartitionResolver is also configured for the regions.  Accessors execute concurrent resumable transactions.  The test dynamically determines whether to begin, executeTxOps or commit transactions (maintained in a list of activeTxns on the BB) based on the number of open transactions and the number of times ExecuteTx function has been invoked on each.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2_locator.inc;
INCLUDE $JTESTS/util/randomValues.inc;

THREADGROUP dataStore
  totalThreads = fcn
                 ${dataStoreHosts} * ${dataStoreVMsPerHost} * ${dataStoreThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"dataStore\", ${dataStoreHosts}, true)"
                 ncf;
THREADGROUP accessor
  totalThreads = fcn
                 ${accessorHosts} * ${accessorVMsPerHost} * ${accessorThreadsPerVM} 
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"accessor\", ${accessorHosts}, true)"
                 ncf;

THREADGROUP locatorThreads
  totalThreads = fcn
                 ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)"
                 ncf;

STARTTASK taskClass   = resumeTx.ResumeTxTest taskMethod = StartTask_initialize
          hydra.ConfigPrms-regionConfig   = dataStore
          clientNames = dataStore1 
          ;

INITTASK    taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask runMode = always;

INITTASK taskClass =  rollingupgrade.RollingUpgradeTest taskMethod = createLocatorTask
         threadGroups = locatorThreads
         runMode = always;

INITTASK taskClass =  rollingupgrade.RollingUpgradeTest taskMethod = startAndConnectLocatorTask
         threadGroups = locatorThreads
         runMode = always;

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
             ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_createColocatedRegions
          hydra.ConfigPrms-cacheConfig    = dataStore
          hydra.ConfigPrms-regionConfig   = dataStore
          runMode = always
          threadGroups = dataStore
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_primeBuckets
          threadGroups = dataStore
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_createColocatedRegions
          hydra.ConfigPrms-cacheConfig    = accessor
          hydra.ConfigPrms-regionConfig   = accessor
          threadGroups = accessor
          ;

INITTASK  taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_initialize
          threadGroups = accessor
          ;

TASK      taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_concTxWithFE
          threadGroups = accessor
          ;

CLOSETASK taskClass   = resumeTx.ResumeTxTest taskMethod = CloseTask_finishAllActiveTx
          threadGroups = accessor
          ;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = ${totalTaskTimeSec};
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;

util.ValueHolderPrms-useExtraObject = false;

hydra.CachePrms-names           = dataStore   accessor;
hydra.RegionPrms-names          = dataStore   accessor;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-cacheListeners = util.SummaryLogListener;
hydra.RegionPrms-cacheWriter    = tx.LogWriter;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = dataStore   accessor;

hydra.PartitionPrms-names           = dataStore  accessor;
hydra.PartitionPrms-localMaxMemory  = default    0;
hydra.PartitionPrms-totalNumBuckets = 20;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-partitionResolver = resumeTx.ModPartitionResolver;

tx.TxPrms-operations = entry-create entry-update entry-update entry-update entry-update entry-destroy entry-inval entry-getWithNewKey entry-getWithExistingKey;

tx.TxPrms-regionOpPercentage = 0;

// targeting 125 ops per transaction (5 accessors, each with 5 threads, each FE Tx with 5 ops)
tx.TxPrms-numOps = 5;
tx.TxPrms-maxKeys = 100;

tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO;
tx.TxPrms-txListener = tx.TxLogListener;
tx.TxPrms-txWriter   = tx.TxLogWriter;

resumeTx.ResumeTxPrms-useColocatedEntries = true;
resumeTx.ResumeTxPrms-numColocatedRegions = 5;

util.TestHelperPrms-minTaskGranularitySec = 60;

resumeTx.ResumeTxPrms-minExecutions = RANGE 100 200 EGNAR;


hydra.Prms-testRequirement = "
Verify resumeable transaction behavior with function execution.  Accessors use functions to execute: begin/suspend, resume/doOps/suspend and resume/commit(or rollback).";

hydra.Prms-testDescription = "
This HA test runs with multiple dataStores and accessors.  DataStores host multiple colocated PartitionedRegions; a PartitionResolver is also defined for the regions.   Accessor threads execute concurrent transaction operations via function execution.  The test dynamically determines whether to begin, execute tx ops or commit based on the number of open transactions and number of executeTxOps done on each.";


TASK         taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_stopStartDataStores
             threadGroups = accessor
             maxThreads = 1
             ;

TASK          taskClass = rollingupgrade.RollingUpgradeTest taskMethod = HydraTask_UpgradeLocators
              threadGroups = locatorThreads
              maxTimesToRun = 1;

util.StopStartPrms-numVMsToStop = RANGE 1 ${numVMsToStop} EGNAR;
util.StopStartPrms-stopModes = MEAN_KILL;

resumeTx.ResumeTxPrms-highAvailability = true;
INCLUDE $JTESTS/rollingupgrade/versionUpgrade.inc;
