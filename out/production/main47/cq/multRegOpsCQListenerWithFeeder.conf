hydra.Prms-testDescription = "This is to test the CQ operations happening concurrently with region operations.
This test has multiple regions in single client vm.
CQListener invocations is verified in close task";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.Prms-totalTaskTimeSec           = 120;
hydra.Prms-maxResultWaitSec           = 600;
hydra.Prms-maxCloseTaskResultWaitSec  = 300;
hydra.Prms-serialExecution            = false;

hydra.GemFirePrms-distributedSystem =
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"ds\",    ${${A}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"ds\",    ${${B}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"loner\", ${${C}Hosts})"
                              ncf;

hydra.VmPrms-extraClassPaths = fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)"
                              ncf;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;

THREADGROUP feeders
  totalThreads = fcn
                 ${feedHosts} * ${feedVMsPerHost} * ${feedThreadsPerVM}
                 ncf
  clientNames  = fcn
                 "hydra.TestConfigFcns.generateNames(\"feed\", ${feedHosts}, true)"
                 ncf;

THREADGROUP edgeInit
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK    taskClass                     = cq.ConcCQTest    taskMethod  = initServerWithMultRegions
            hydra.ConfigPrms-cacheConfig  = bridge
            hydra.ConfigPrms-regionConfig = bridge
            hydra.ConfigPrms-bridgeConfig = bridge
            runMode                       = always
            threadGroups                  = bridge;

INITTASK    taskClass                     = cq.MultRegionsClient    taskMethod  = HydraTask_initialize
            hydra.ConfigPrms-cacheConfig  = edge
            hydra.ConfigPrms-regionConfig = edge
            runMode                       = always
            threadGroups                  = edgeInit;

INITTASK    taskClass                     = cq.MultRegionsClient    taskMethod  = HydraTask_initialize
            hydra.ConfigPrms-cacheConfig  = feed
            hydra.ConfigPrms-regionConfig = feed
            runMode                       = always
            threadGroups                  = feeders;

TASK        taskClass                     = cq.MultRegionsClient    taskMethod  = HydraTask_performEntryOperations
            threadGroups                  = feeders;

TASK        taskClass                     = cq.MultRegionsClient  taskMethod  = feedData
            threadGroups                  = feeders;
            
//TASK        taskClass                     = cq.MultRegionsClient  taskMethod  = HydraTask_executeCQ
//            threadGroups                  = edgeInit;            

TASK        taskClass                     = cq.MultRegionsClient  taskMethod  = HydraTask_destroyRegion
            maxTimesToRun = 1
            threadGroups                  = feeders;   
                     
//this task is only to check the server region size for debug purpose and safe remove.
TASK        taskClass                     = cq.ConcCQTest    taskMethod  = monitorServerRegions
            threadGroups                  = bridge
            startInterval                 = 90
            endInterval                   = 90;

CLOSETASK   taskClass                  = cq.ConcCQTest  taskMethod = waitForServerHAQueuesToDrain
                threadGroups = bridge;


CLOSETASK   taskClass                     = cq.ConcCQTest    taskMethod  = verifyCQListener
			      threadGroups                  = feeders;

CLOSETASK   taskClass                     = cq.ConcCQTest    taskMethod  = Close_Task;

hydra.CachePrms-names           = bridge                   	edge		  feed;
hydra.RegionPrms-names          = bridge                   	edge		  feed;
hydra.RegionPrms-poolName    = none                     	brloader	none;
hydra.RegionPrms-scope          = ack;
hydra.RegionPrms-dataPolicy     = replicate			default		replicate;
hydra.RegionPrms-evictionAttributes = none, 			none, 		none;
hydra.RegionPrms-cacheListeners = hct.BridgeEventListener,	none,		util.SilenceListener;

hydra.BridgePrms-names                      = bridge;


hydra.PoolPrms-names                        = brloader qservice;
hydra.PoolPrms-minConnections         = 5;
hydra.PoolPrms-subscriptionEnabled  = true;
hydra.PoolPrms-threadLocalConnections          = true;
hydra.PoolPrms-subscriptionRedundancy             	= RANGE 1 
                                                   fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
                                             EGNAR;

//this is to increase the log-level. Should be used for debug purpose only.
//hydra.VmPrms-extraVMArgs   = "-DDistributionManager.VERBOSE=true";

//all the following operation times are in milliseconds
mapregion.MapPrms-objectType                  = objects.Portfolio;
mapregion.MapPrms-timeForPutOperation         = 5000;
mapregion.MapPrms-timeForPutAllOperation      = 200;
mapregion.MapPrms-timeForRemoveOperation      = 3000;
mapregion.MapPrms-timeForInvalidateOperation  = 3000;
mapregion.MapPrms-maxPositiveKeys             = 75000;
mapregion.MapPrms-maxNagetiveKeys             = 75000;
mapregion.MapPrms-registerAndExecuteCQs		    = true;
mapregion.MapPrms-numEdges					          = fcn ${edgeHosts} * ${edgeVMsPerHost} ncf;
mapregion.MapPrms-timeToWaitForEvents		      = 60000;

util.TestHelperPrms-minTaskGranularitySec     = 60;

mapregion.MapPrms-entryOperationName  = ONEOF put putAll remove invalidate FOENO;
mapregion.MapPrms-regionNames         = testRegion1 testRegion2 testRegion3 testRegion4 testRegion5;
mapregion.MapPrms-regionForOps        = ONEOF testRegion1 testRegion2 testRegion3 testRegion4 testRegion5 FOENO;

mapregion.MapPrms-queryStrs 		  = "select * from /testRegion1"
					    "select * from /testRegion2"
					    "select * from /testRegion3"
					    "select * from /testRegion4"
					    "select * from /testRegion5";

cq.CQUtilPrms-cqListener = cq.ConcCQTestListener;
cq.CQUtilPrms-QueryServicePoolName = qservice;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;
hct.HctPrms-killInterval = 100;
