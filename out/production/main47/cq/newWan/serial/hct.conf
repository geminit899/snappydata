//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/newWan/wan.inc;
include $JTESTS/newWan/hct.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription=This is a WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway sender and receiver to other sites.  
   Each locator from a site connects to all locators from next site to form a ring topology between sites. Each sender from a site connects to all other remote sites to form all-to-all topology.
   Edge clients execute a CQ.;

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 600;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, senders and receivers)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configures the server cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerCacheTask
         threadGroups = bridge;

/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         threadGroups = bridge;         
      
/** Configures the server region. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerRegionTask
         threadGroups = bridge;

/** Configure gateway receiver */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         threadGroups = bridge;
         
/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         threadGroups = bridge; 
                  
/**
 * Configures the edge client cache to execute CQ
 */
INITTASK taskClass = newWan.WANTest taskMethod = initCQClientTask
         threadGroups = edge;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = newWan.WANTest taskMethod = putSequentialKeysCQTask
     maxTimesToRun = 10 
     threadGroups = edge;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------
CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = bridge;

CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = bridge;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = validateSequentialKeysCQTask
          threadGroups = edge;

CLOSETASK taskClass = newWan.WANTest taskMethod = validateSequentialKeysTask
          threadGroups = edge, bridge;
          
CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge;

RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

CLOSETASK taskClass = newWan.WANTest taskMethod = closeEdgeClientCacheTask
          threadGroups = edge;
                    
CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;   


// leave one VM in each site for CQ execution
THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

// disable any HAClientQueue redundancy
hydra.PoolPrms-subscriptionRedundancy = -1;
hydra.PoolPrms-readTimeout = 120000;

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", 
        ${bridgeHostsPerSite} * ${wanSites}, 
        true)"
 ncf;

// enable CQ registration & processing
// verify updates are sequential values
cq.CQUtilPrms-useCQ = true;
cq.CQUtilPrms-cqListener = cq.newWan.serial.WANCQListener;
cq.CQUtilPrms-QueryServicePoolName = brloader;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;

INCLUDE $JTESTS/util/randomValues.inc;

hydra.RegionPrms-cacheListeners	 = cq.newWan.serial.WANCQCacheListener;
