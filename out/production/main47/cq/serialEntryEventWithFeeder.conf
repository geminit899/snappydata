hydra.Prms-testRequirement = "example";
hydra.Prms-testDescription = "example";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;

hydra.GemFirePrms-distributedSystem =
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"ds\",    ${${A}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"loner\",    ${${B}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"ds\", ${${C}Hosts})"
                              ncf;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;

THREADGROUP feed 
  totalThreads = fcn
                 ${feedHosts} * ${feedVMsPerHost} * ${feedThreadsPerVM}
                 ncf
  clientNames  = fcn 
                 "hydra.TestConfigFcns.generateNames(\"feed\", ${feedHosts}, true)"
                 ncf;

THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} 
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = bridge;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_initializeFeed
             threadGroups = feed;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_initializeClient
             threadGroups = edge;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_loadRegion
             threadGroups = feed;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_doUpdates
             threadGroups = feed;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_doUpdatesSameValues
             threadGroups = feed;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_doDestroys
             threadGroups = feed;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_loadRegion
             threadGroups = feed;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_doInvalidates
             threadGroups = feed;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_checkCQ
             threadGroups = edge;

TASK         taskClass   = cq.CQUtil       taskMethod = HydraTask_doCQOperations
             maxTimesToRun = 1
             threadGroups = edge;

CLOSETASK    taskClass   = cq.CQUtil       taskMethod = HydraTask_verifyCQListenerInvoked
             threadGroups = edge;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion        feedRegion         serverRegion;
hydra.RegionPrms-regionName     = testRegion          testRegion         testRegion;
hydra.RegionPrms-scope          = local               ack                ack;
hydra.RegionPrms-poolName    = edgeDescript        none;
hydra.RegionPrms-cacheListeners = event.ETListener,  event.LogListener,  hct.BridgeEventListener;
hydra.RegionPrms-dataPolicy     = default             replicate;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript qservice;
hydra.PoolPrms-minConnections        = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-readTimeout                 = 60000;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


cq.CQUtilPrms-useCQ = true;
cq.CQUtilPrms-cqListener = cq.CQTestListener;
cq.CQUtilPrms-registerInterest = ${registerInterest};
cq.CQUtilPrms-clientInFeederVm = true;
cq.CQUtilPrms-QueryServicePoolName = qservice;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;

hydra.Prms-maxResultWaitSec = 600;
