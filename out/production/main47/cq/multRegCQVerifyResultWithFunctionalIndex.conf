hydra.Prms-testDescription = "This is to test on region operations.
This test has multiple regions in single client vm and functional indexes are created.
Verification of initialSelectResults will be done periodically during the test.
CQListener invocations is verified in close task";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.Prms-totalTaskTimeSec           = 600;
hydra.Prms-maxResultWaitSec           = 600;
hydra.Prms-maxCloseTaskResultWaitSec  = 300;
hydra.Prms-serialExecution            = false;

hydra.GemFirePrms-distributedSystem =
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"ds\",    ${${A}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"ds\",    ${${B}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"loner\", ${${C}Hosts})"
                              ncf;

hydra.VmPrms-extraClassPaths = fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar\", ${edgeHosts}, true)"
                             ncf;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;

THREADGROUP feeders
  totalThreads = fcn
                 ${feedHosts} * ${feedVMsPerHost} * ${feedThreadsPerVM}
                 ncf
  clientNames  = fcn
                 "hydra.TestConfigFcns.generateNames(\"feed\", ${feedHosts}, true)"
                 ncf;

THREADGROUP edgeInit
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK    taskClass                     = cq.ConcCQAndOpsIndexTest    taskMethod  = HydraTask_initialize
            hydra.ConfigPrms-cacheConfig  = bridge
            hydra.ConfigPrms-regionConfig = bridge
            hydra.ConfigPrms-bridgeConfig = bridge
            runMode                       = always
            threadGroups                  = bridge;

INITTASK    taskClass                     = cq.ConcCQMultRegionsClientIndex    taskMethod  = HydraTask_initialize
            hydra.ConfigPrms-cacheConfig  = edge
            hydra.ConfigPrms-regionConfig = edge
            runMode                       = always
            threadGroups                  = edgeInit;

INITTASK    taskClass                     = cq.ConcCQMultRegionsClientIndex    taskMethod  = HydraTask_initialize
            hydra.ConfigPrms-cacheConfig  = feed
            hydra.ConfigPrms-regionConfig = feed
            runMode                       = always
            threadGroups                  = feeders;

TASK        taskClass                     = cq.ConcCQMultRegionsClientIndex    taskMethod  = HydraTask_performEntryOperationsWithVerification
            threadGroups                  = feeders;
            
TASK        taskClass                     = cq.ConcCQAndOpsTest    taskMethod  = HydraTask_verify
            threadGroups                  = edgeInit;            

//TASK        taskClass                     = cq.MultRegionsClientIndex  taskMethod  = feedData
//           threadGroups                  = feeders;

//this task is only to check the server resion size for debug purpose and safe remove.
TASK        taskClass                     = cq.ConcCQTest    taskMethod  = monitorServerRegions
            threadGroups                  = bridge
            startInterval                 = 90
            endInterval                   = 90;

CLOSETASK   taskClass                  = cq.ConcCQTest  taskMethod = waitForServerHAQueuesToDrain
                threadGroups = bridge;


CLOSETASK   taskClass                     = cq.ConcCQAndOpsTest    taskMethod  = verifyCQListener
			      threadGroups                  = feeders;

CLOSETASK   taskClass                     = cq.ConcCQTest    taskMethod  = Close_Task;

hydra.CachePrms-names           = bridge                   	edge		  feed;
hydra.RegionPrms-names          = bridge                   	edge		  feed;
hydra.RegionPrms-poolName    = none                     	brloader	  none;
hydra.RegionPrms-scope          = ack    			local		  ack;
hydra.RegionPrms-dataPolicy     = replicate			default		  replicate;
hydra.RegionPrms-evictionAttributes = none, 			none, 		  none;
hydra.RegionPrms-cacheListeners = hct.BridgeEventListener,		none,		  util.SilenceListener;

hydra.BridgePrms-names                      = bridge;


hydra.PoolPrms-names                        = brloader qservice;
hydra.PoolPrms-minConnections         = 5;
hydra.PoolPrms-subscriptionEnabled  = true;
hydra.PoolPrms-threadLocalConnections          = true;
hydra.PoolPrms-subscriptionRedundancy             	= RANGE 1 
                                                   fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
                                             EGNAR;

//this is to increase the log-level. Should be used for debug purpose only.
//hydra.VmPrms-extraVMArgs   = "-DDistributionManager.VERBOSE=true";

//all the following operation times are in milliseconds
mapregion.MapPrms-objectType                  = parReg.query.Position;
mapregion.MapPrms-registerAndExecuteCQs		    = true;
mapregion.MapPrms-numEdges					          = fcn ${edgeHosts} * ${edgeVMsPerHost} ncf;
mapregion.MapPrms-timeToWaitForEvents		      = 30000;

util.TestHelperPrms-minTaskGranularitySec     = 60;

mapregion.MapPrms-entryOperationName  = ONEOF put putAll remove FOENO;
mapregion.MapPrms-regionNames         = testRegion1 testRegion2 testRegion3 testRegion4 testRegion5;
mapregion.MapPrms-regionForOps        = ONEOF testRegion1 testRegion2 testRegion3 testRegion4 testRegion5 FOENO;

mapregion.MapPrms-queryStrs 		  = "select * from /testRegion1 where qty = 99.0 And mktValue>50.0"
					    "select * from /testRegion2 where qty = 99.0 And mktValue>50.0"
					    "select * from /testRegion3 where qty = 99.0 And mktValue>50.0"
					    "select * from /testRegion4 where qty = 99.0 And mktValue>50.0"
					    "select * from /testRegion5 where qty = 99.0 And mktValue>50.0";

cq.CQUtilPrms-cqListener = cq.ConcCQTestListener;
cq.CQUtilPrms-QueryServicePoolName = qservice;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;
hct.HctPrms-killInterval = 100;

//query.index.IndexPrms-numOfIndexes = 1;
cq.CQUtilPrms-createIndex = true;
//cq.CQUtilPrms-primary = "50000";
//cq.CQUtilPrms-testPrimaryIndex = true;
cq.CQUtilPrms-createQtyIndex = ${createQtyIndex};
cq.CQUtilPrms-createMktValueIndex = ${createMktValueIndex};

cq.CQUtilPrms-edgeThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf;

cq.CQUtilPrms-feederThreads =   fcn
                 ${feedHosts} * ${feedVMsPerHost} * ${feedThreadsPerVM}
                 ncf;      
                          
