hydra.Prms-testRequirement = "Listeners invoked as required and in correct order";
hydra.Prms-testDescription = "
Test in serial execution mode to carefully validate listener invocation.

The test executes a task that:
  (1) adds, removes, inits or sets the listenerList
  (2) writes the expected listener invocation list to the BB
  (3) performs an entry or region operation
  (4) the listeners log their invocation to the invokedListenerList in the BB
  (5) compares the expected to invoked listener lists
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} 
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK     taskClass   = cq.ListenerTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = bridgeThreads;

INITTASK     taskClass   = cq.ListenerTest taskMethod  = HydraTask_initialize
             threadGroups = edgeThreads;

TASK         taskClass   = cq.ListenerTest taskMethod  = HydraTask_exerciseListeners
             threadGroups = edgeThreads;

hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.GemFirePrms-conserveSockets = true;

hydra.Prms-totalTaskTimeSec = 360;
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-alwaysDoEndTasks = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

cq.ListenerPrms-maxListeners = 10;
cq.ListenerPrms-listenerOperations = ONEOF add add add add remove init FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion            serverRegion;
hydra.RegionPrms-regionName     = testRegion              testRegion;
hydra.RegionPrms-scope          = local                   ack;
hydra.RegionPrms-poolName    = edgeDescript            none;
hydra.RegionPrms-cacheListeners = none,                   hct.BridgeEventListener;
hydra.RegionPrms-dataPolicy     = default                 replicate;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript qservice;
hydra.PoolPrms-minConnections        = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-readTimeout                 = 60000;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


cq.CQUtilPrms-useCQ = true;
cq.CQUtilPrms-registerInterest = ${registerInterest};
cq.CQUtilPrms-entryOperations = ONEOF add add add add update destroy FOENO;
cq.CQUtilPrms-upperThreshold = 500;
cq.CQUtilPrms-upperThresholdOperations = ONEOF destroy FOENO;
cq.CQUtilPrms-lowerThreshold = 0;
cq.CQUtilPrms-lowerThresholdOperations = add;
cq.CQUtilPrms-QueryServicePoolName = qservice;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;


hydra.Prms-maxResultWaitSec = 600;
util.TestHelperPrms-minTaskGranularitySec = 0;
