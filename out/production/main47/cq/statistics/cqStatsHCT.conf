hydra.Prms-testRequirement = "Test CQ with a variety of operations with careful validation and serial execution in a bridge configuration";
hydra.Prms-testDescription = "
This test executes operations on entries on a region and carefully
validates for correctness in the CQs. 
The test uses serial round robin; the first thread
in the round does a random operation, then all other threads in the round
verify their view of the operation. After the last thread in the round verifies,
it then becomes the first in the next round, thus the thread doing the random
operation changes for each round. 
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts})" ncf;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         

INITTASK     taskClass   = cq.statistics.CQStatisticsTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = bridgeThreads
             runMode = always;

INITTASK     taskClass   = cq.statistics.CQStatisticsTest  taskMethod = HydraTask_initializeClient
             threadGroups = edgeThreads
             runMode = always;

INITTASK         taskClass   = cq.statistics.CQStatisticsTest  taskMethod = HydraTask_verifyCqStatistics
             threadGroups = edgeThreads;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.RandomValuesPrms-borderCasePercentage = 0;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion            serverRegion;
hydra.RegionPrms-regionName     = testRegion              testRegion;
hydra.RegionPrms-scope          = local                   ack;
hydra.RegionPrms-poolName       = edgeDescript            none;
hydra.RegionPrms-dataPolicy     = normal                  replicate;
hydra.RegionPrms-cacheListeners = util.SilenceListener,   hct.BridgeEventListener;
hydra.RegionPrms-partitionName  = none                    none;

cq.CQUtilPrms-numOpsPerTask = 100;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;
util.TestHelperPrms-minTaskGranularitySec = 30;

cq.CQUtilPrms-serverEntryOperations = ONEOF add add update invalidate get destroy FOENO; 
cq.CQUtilPrms-clientEntryOperations = ONEOF add add update get destroy FOENO; 
cq.CQUtilPrms-upperThreshold = 500;
cq.CQUtilPrms-upperThresholdServerOperations = ONEOF destroy FOENO;
cq.CQUtilPrms-upperThresholdClientOperations = ONEOF destroy FOENO;
cq.CQUtilPrms-lowerThreshold = 0;
cq.CQUtilPrms-lowerThresholdServerOperations = add;
cq.CQUtilPrms-lowerThresholdClientOperations = add;
cq.CQUtilPrms-queryDepth = 7;
cq.CQUtilPrms-numQueriesPerClientVM = 100; 
cq.CQUtilPrms-QueryServicePoolName = qservice;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript qservice;
hydra.PoolPrms-minConnections        = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-readTimeout                 = 800000;
hydra.PoolPrms-subscriptionRedundancy             = RANGE 0
                                                   fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
                                             EGNAR;

// define the bridge servers
hydra.BridgePrms-names                = bridge;

