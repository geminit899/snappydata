hydra.Prms-testDescription = "This is to test the CQ operations happening concurrently with region operations.
A few edges are dedicated for CQ executions only.
Verification of CQ query initialSelectResults will be done periodically during the test.
CQListener invocations is verified in close task";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;
INCLUDE $JTESTS/cq/singleRegQueries.inc;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;

hydra.VmPrms-extraClassPaths = fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar\", ${edgeHosts}, true)"
                             ncf;
hydra.ClientPrms-vmThreads =
  fcn "hydra.TestConfigFcns.duplicate(\"1\", ${bridgeHosts})" ncf // bridges
  3; // edges

THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;

THREADGROUP edgeInit // one per edge VM
  totalThreads = fcn "${edgeHosts} * ${edgeVMsPerHost}" ncf
  totalVms     = fcn "${edgeHosts} * ${edgeVMsPerHost}" ncf;

THREADGROUP cqOperators
  totalThreads = fcn "${edgeHosts} * ${edgeVMsPerHost}" ncf
  totalVms     = fcn "${edgeHosts} * ${edgeVMsPerHost}/2" ncf;

THREADGROUP entryOperators
  totalThreads = fcn "${edgeHosts} * ${edgeVMsPerHost}" ncf
  totalVms     = fcn "${edgeHosts} * ${edgeVMsPerHost}/2" ncf;

INITTASK    taskClass                     = cq.ConcCQAndOpsTest    taskMethod  = HydraTask_initialize
            hydra.ConfigPrms-cacheConfig  = bridge
            hydra.ConfigPrms-regionConfig = bridge
            hydra.ConfigPrms-bridgeConfig = bridge
            runMode                       = always
            threadGroups                  = bridge;

INITTASK    taskClass                     = cq.ConcCQMultRegionsClient   taskMethod  = HydraTask_initialize
            hydra.ConfigPrms-cacheConfig  = edge
            hydra.ConfigPrms-regionConfig = edge
            runMode                       = always
            threadGroups                  = edgeInit;


TASK        taskClass                     = cq.ConcCQAndOpsTest    taskMethod  = HydraTask_doCQAndVerifyResults
            threadGroups                  = cqOperators;

TASK        taskClass                     = cq.ConcCQMultRegionsClient    taskMethod  = HydraTask_performEntryOperationsWithVerification
            threadGroups                  = entryOperators;

//this task is only to check the server resion size for debug purpose and safe remove.
TASK        taskClass                     = cq.ConcCQTest    taskMethod  = monitorServerRegions
            threadGroups                  = bridge
            startInterval 				        = 90
			      endInterval 				          = 90;

CLOSETASK   taskClass                     = cq.ConcCQTest    taskMethod  = Close_Task;

hydra.CachePrms-names           = bridge                   edge;
hydra.RegionPrms-names          = bridge                   edge;
hydra.RegionPrms-poolName    = none                     brloader;
hydra.RegionPrms-scope          = ack;
hydra.RegionPrms-dataPolicy     = replicate                default;
hydra.RegionPrms-evictionAttributes = lruEntryCount 10000 overflowToDisk, none;
hydra.DiskStorePrms-diskDirNum     = 1;
hydra.RegionPrms-diskStoreName  = disk none;
hydra.DiskStorePrms-names       = disk;
hydra.RegionPrms-diskSynchronous = false;
hydra.DiskStorePrms-maxOplogSize= 512;

hydra.BridgePrms-names                = bridge;


hydra.PoolPrms-names                        = brloader qservice;
hydra.PoolPrms-minConnections         = 5;
hydra.PoolPrms-subscriptionEnabled  = true;
hydra.PoolPrms-threadLocalConnections          = true;
hydra.PoolPrms-subscriptionRedundancy             	= RANGE 1 
                                              	fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
                                              EGNAR;
hydra.PoolPrms-readTimeout = 300000;                                              

//this is to increase the log-level. Should be used for debug purpose only.
//hydra.VmPrms-extraVMArgs   = "-DDistributionManager.VERBOSE=true";

//all the following operation times are in milliseconds
mapregion.MapPrms-objectType                  = objects.Portfolio;
mapregion.MapPrms-timeForPutOperation         = 30000;
mapregion.MapPrms-timeForPutAllOperation      = 20000;
mapregion.MapPrms-timeForRemoveOperation      = 10000;
mapregion.MapPrms-timeForInvalidateOperation  = 10000;
mapregion.MapPrms-maxPositiveKeys             = 35000;
mapregion.MapPrms-maxNagetiveKeys             = 35000;
mapregion.MapPrms-numEdges		      = fcn ${edgeHosts} * ${edgeVMsPerHost} ncf;

mapregion.MapPrms-doExecuteWithInitialResultsCQ = ${doExecuteWithInitialResultsCQ};

util.TestHelperPrms-minTaskGranularitySec = 60;

mapregion.MapPrms-entryOperationName  = ONEOF put putAll remove FOENO;

cq.CQUtilPrms-cqListener = cq.ConcCQTestListener;
cq.CQUtilPrms-QueryServicePoolName = qservice;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;
hct.HctPrms-killInterval = 100;

cq.CQUtilPrms-edgeThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} /2
                 ncf;

mapregion.MapPrms-regionNames         = testRegion1 testRegion2 testRegion3 testRegion4 testRegion5;
mapregion.MapPrms-regionForOps        = ONEOF testRegion1 testRegion2 testRegion3 testRegion4 testRegion5 FOENO;
 
mapregion.MapPrms-queryStrs 		  = "select * from /testRegion1"
						"select * from /testRegion2"
						"select * from /testRegion3"
						"select * from /testRegion4"
						"select * from /testRegion5";
