hydra.Prms-testDescription = "
This test loads a set of keys, then while doing operations to the
region it calls executeWithInitialResults to start CQs running. It
then collects all subsequent cqEvents, and validates at the end that
combining the results of executeWithInitialResults and the cqEvents
result in a consistent final result set for the cq.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts})" ncf;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} -
                 (${bridgeHosts} * ${bridgeVMsPerHost})
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP oneThreadPerBridgeVM
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost}
                 ncf
  totalVMs = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} -
                 (${edgeHosts} * ${edgeVMsPerHost})
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         
THREADGROUP oneThreadPerEdgeVM
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost}
                 ncf
  totalVMs = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         

STARTTASK    taskClass     = cq.CQKnownKeysTest  taskMethod = StartTask_initialize;

INITTASK     taskClass   = cq.CQKnownKeysTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = oneThreadPerBridgeVM;

INITTASK     taskClass   = cq.CQKnownKeysTest  taskMethod = HydraTask_initializeClientWithoutStartingCQs
             threadGroups = oneThreadPerEdgeVM;

INITTASK     taskClass   = cq.CQKnownKeysTest  taskMethod = HydraTask_initCombineTest;

INITTASK     taskClass     = cq.CQKnownKeysTest  taskMethod = HydraTask_loadRegion
             threadGroups = bridgeThreads, edgeThreads, oneThreadPerBridgeVM, oneThreadPerEdgeVM
             batch;

INITTASK     taskClass     = cq.CQKnownKeysTest  taskMethod  = HydraTask_waitForSilence
             threadGroups = oneThreadPerEdgeVM;

TASK         taskClass     = cq.CQKnownKeysTest  taskMethod = HydraTask_doOps
             threadGroups = bridgeThreads, edgeThreads, oneThreadPerBridgeVM;

TASK         taskClass     = cq.CQKnownKeysTest  taskMethod = HydraTask_startCQsRunning
             threadGroups = oneThreadPerEdgeVM;

CLOSETASK    taskClass     = cq.CQKnownKeysTest  taskMethod  = HydraTask_waitForSilence
             threadGroups = oneThreadPerEdgeVM;

CLOSETASK    taskClass     = cq.CQKnownKeysTest  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = oneThreadPerBridgeVM, oneThreadPerEdgeVM
             batch;

CLOSETASK    taskClass     = cq.CQKnownKeysTest  taskMethod  = HydraTask_verifyQueriesCombine
             threadGroups = oneThreadPerEdgeVM;

hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 600;

util.TestHelperPrms-minTaskGranularitySec = 60;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10;
util.RandomValuesPrms-borderCasePercentage = 0;

cq.CQUtilPrms-numKeys = ${numKeys};
cq.CQUtilPrms-numNewKeys = fcn "${numKeys} * 0.1" ncf; // numNewKeys is 10% of the total number of keys
cq.CQUtilPrms-numQueriesPerClientVM = 5; 
cq.CQUtilPrms-QueryServicePoolName = qservice;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 3600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion            serverRegion;
hydra.RegionPrms-regionName     = testRegion              testRegion;
hydra.RegionPrms-scope          = ack;
hydra.RegionPrms-poolName    = edgeDescript            none;
hydra.RegionPrms-dataPolicy     = normal                  replicate;
hydra.RegionPrms-cacheListeners = util.SilenceListener,   hct.BridgeEventListener;
hydra.RegionPrms-partitionName  = none                    none;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript qservice;
hydra.PoolPrms-minConnections        = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-readTimeout                 = 3600000;
hydra.PoolPrms-subscriptionRedundancy             = RANGE 0
                                                   fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
                                             EGNAR;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


