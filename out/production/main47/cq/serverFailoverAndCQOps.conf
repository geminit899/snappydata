hydra.Prms-testDescription = "This is to test the CQ operations happening concurrently with region operations.
Also tests the server failover with CQ operations";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;
INCLUDE $JTESTS/cq/singleRegQueries.inc;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution  = false;

hydra.VmPrms-extraClassPaths = fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar\", ${edgeHosts}, true)"
                             ncf;
hydra.ClientPrms-vmThreads =
  fcn "hydra.TestConfigFcns.duplicate(\"1\", ${bridgeHosts})" ncf // bridges
  6; // edges

THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;

THREADGROUP edgeInit // one per edge VM
  totalThreads = fcn "${edgeHosts} * ${edgeVMsPerHost}" ncf
  totalVms     = fcn "${edgeHosts} * ${edgeVMsPerHost}" ncf;

THREADGROUP serverKiller
  totalThreads = 1
  totalVms     = 1;

INITTASK    taskClass                     = cq.ConcCQTest    taskMethod  = initServerRegion
            hydra.ConfigPrms-cacheConfig  = bridge
            hydra.ConfigPrms-regionConfig = bridge
            hydra.ConfigPrms-bridgeConfig = bridge
            runMode                       = always
            threadGroups                  = bridge;

INITTASK    taskClass                     = cq.MultRegionsClient    taskMethod  = HydraTask_initialize
            hydra.ConfigPrms-cacheConfig  = edge
            hydra.ConfigPrms-regionConfig = edge
            runMode                       = always
            threadGroups                  = edgeInit;

INITTASK    taskClass                     = cq.ConcCQTest    taskMethod  = initBlackboard
            threadGroups                  = edgeInit;

TASK        taskClass                     = cq.ConcCQTest    taskMethod  = doCQOperations
            threadGroups                  = edgeInit, default;

TASK        taskClass                     = cq.ConcCQTest    taskMethod  = killServer
            threadGroups                  = serverKiller;

TASK        taskClass                     = cq.MultRegionsClient    taskMethod  = HydraTask_performEntryOperations
            threadGroups                  = edgeInit, default;

//this task is only to check the server resion size for debug purpose and safe remove.
TASK        taskClass                     = cq.ConcCQTest    taskMethod  = monitorServerRegion
            threadGroups                  = bridge
            startInterval                 = 90
            endInterval                   = 90;

CLOSETASK   taskClass                     = cq.ConcCQTest    taskMethod  = Close_Task;

hydra.CachePrms-names           = bridge                   edge;
hydra.RegionPrms-names          = bridge                   edge;
hydra.RegionPrms-poolName    = none                     brloader;
hydra.RegionPrms-scope          = ack;
hydra.RegionPrms-dataPolicy     = replicate                default;
hydra.RegionPrms-evictionAttributes = lruEntryCount 100000 overflowToDisk, none;
hydra.DiskStorePrms-diskDirNum     = 1;
hydra.RegionPrms-diskStoreName  = disk none;
hydra.DiskStorePrms-names       = disk;
hydra.RegionPrms-diskSynchronous = false;
hydra.DiskStorePrms-maxOplogSize= 512;

hydra.BridgePrms-names                      = bridge;


hydra.PoolPrms-names                        = brloader qservice;
hydra.PoolPrms-minConnections         = 5;
hydra.PoolPrms-subscriptionEnabled  = true;
hydra.PoolPrms-threadLocalConnections          = true;
hydra.PoolPrms-subscriptionRedundancy             	= fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf;

hydra.PoolPrms-readTimeout = 300000;

//this is to increase the log-level. Should be used for debug purpose only.
//hydra.VmPrms-extraVMArgs   = "-DDistributionManager.VERBOSE=true";

//all the following operation times are in milliseconds
mapregion.MapPrms-objectType                  = objects.Portfolio;
mapregion.MapPrms-timeForPutOperation         = 10000;
mapregion.MapPrms-timeForPutAllOperation      = 1000;
mapregion.MapPrms-timeForRemoveOperation      = 5000;
mapregion.MapPrms-timeForInvalidateOperation  = 500;
mapregion.MapPrms-numEdges					  = fcn ${edgeHosts} * ${edgeVMsPerHost} ncf;

mapregion.MapPrms-doExecuteWithInitialResultsCQ = ${doExecuteWithInitialResultsCQ};

util.TestHelperPrms-minTaskGranularitySec     = 40;

mapregion.MapPrms-entryOperationName  = ONEOF put putAll remove invalidate FOENO;
mapregion.MapPrms-regionNames         = DefaultRegion;
mapregion.MapPrms-regionForOps        = DefaultRegion;

cq.CQUtilPrms-cqListener = cq.ConcCQTestListener;
cq.CQUtilPrms-QueryServicePoolName = qservice;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;

hct.HctPrms-killInterval = 120000;
