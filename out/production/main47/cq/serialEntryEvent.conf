hydra.Prms-testRequirement = "example";
hydra.Prms-testDescription = "example";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} - 1
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

THREADGROUP putter totalThreads = 1;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = bridgeThreads;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_initializeClient
             threadGroups = putter, edgeThreads;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_loadRegion
             threadGroups = putter;

// We can only execute() once ... so until stop implemented, we can't re-initiate
//INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_checkCQ
             //threadGroups = putter, edgeThreads;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_doUpdates
             threadGroups = putter;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_doUpdatesSameValues
             threadGroups = putter;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_doDestroys
             threadGroups = putter;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_loadRegion
             threadGroups = putter;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_doInvalidates
             threadGroups = putter;

// enable this task to run loadRegion, doUpdates* and doDestroys in the same hydra task
//INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_doOperations
             //threadGroups = putter;

INITTASK     taskClass   = cq.CQEventTest  taskMethod = HydraTask_checkCQ
             threadGroups = putter, edgeThreads;

TASK         taskClass   = cq.CQUtil       taskMethod = HydraTask_doCQOperations
             maxTimesToRun = 10
             threadGroups = edgeThreads;

CLOSETASK    taskClass   = cq.CQEventTest  taskMethod = HydraTask_printEventCounts
             threadGroups = putter, edgeThreads;

CLOSETASK    taskClass   = cq.CQUtil       taskMethod = HydraTask_verifyCQListenerInvoked
             threadGroups = putter, edgeThreads;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion            serverRegion;
hydra.RegionPrms-regionName     = testRegion              testRegion;
hydra.RegionPrms-scope          = ack;
hydra.RegionPrms-poolName    = edgeDescript            none;
hydra.RegionPrms-cacheListeners = event.ETListener,      hct.BridgeEventListener;
hydra.RegionPrms-dataPolicy     = default                 replicate;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript qservice;
hydra.PoolPrms-minConnections        = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-readTimeout                 = 60000;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


cq.CQUtilPrms-useCQ = true;
cq.CQUtilPrms-cqListener = cq.CQTestListener;
cq.CQUtilPrms-registerInterest = ${registerInterest};
cq.CQUtilPrms-clientInFeederVm = false;
cq.CQUtilPrms-QueryServicePoolName = qservice;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;

hydra.Prms-maxResultWaitSec = 600;

