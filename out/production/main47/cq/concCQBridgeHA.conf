hydra.Prms-testRequirement = "Test CQ with a variety of operations with careful validation and serial execution in a bridge configuration";
hydra.Prms-testDescription = "
This test executes operations on entries on a region and carefully
validates for correctness in the CQs while servers are stopped and started.
The test uses serial round robin; the first thread
in the round does a random operation, then all other threads in the round
verify their view of the operation. After the last thread in the round verifies,
it then becomes the first in the next round, thus the thread doing the random
operation changes for each round. 
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts})" ncf;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;

THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         

INITTASK     taskClass   = cq.CQTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = bridgeThreads
             runMode = always;

INITTASK     taskClass   = cq.CQTest  taskMethod = HydraTask_initializeClient
             threadGroups = edgeThreads;

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask;

// maxThreads of 1 means only one thread will be running the HAController at a time
TASK         taskClass   = cq.CQTest  taskMethod = HydraTask_HAController
             threadGroups = bridgeThreads, edgeThreads
             maxThreads = 1;

TASK         taskClass   = cq.CQTest  taskMethod = HydraTask_HADoEntryOps
             threadGroups = bridgeThreads, edgeThreads;

hydra.GemFirePrms-stopSystemsAfterTest = true;

// cq.CQUtilPrms-secondsToRun determines the running length rather than 
// totalTaskTimeSec because of the test's pausing scheme; without this the
// test could hang 
hydra.Prms-totalTaskTimeSec = 31536000;  
cq.CQUtilPrms-secondsToRun = 1200;
hydra.Prms-maxResultWaitSec = 900;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.RandomValuesPrms-borderCasePercentage = 0;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion            serverRegion;
hydra.RegionPrms-regionName     = testRegion              testRegion;
hydra.RegionPrms-scope          = ack;
hydra.RegionPrms-poolName    = edgeDescript            none;
hydra.RegionPrms-dataPolicy     = normal                  replicate;
hydra.RegionPrms-cacheListeners = util.SilenceListener,   hct.BridgeEventListener;
hydra.RegionPrms-partitionName  = none                    none;

cq.CQUtilPrms-numOpsPerTask = 100;
util.TestHelperPrms-minTaskGranularitySec = 60;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)

// 7.5 - current product design will not allow destroy & invalidate with HA
// we will lose CQEvents in the process.  See BUG 38382 for more information.
// removing invalidate & destroy ops (for now) and setting 
// upperThresholdOperations to get and update

cq.CQUtilPrms-serverEntryOperations = get;
cq.CQUtilPrms-clientEntryOperations = ONEOF add add update get FOENO; 
cq.CQUtilPrms-upperThreshold = 500;
cq.CQUtilPrms-upperThresholdClientOperations = update;
cq.CQUtilPrms-upperThresholdServerOperations = get;
cq.CQUtilPrms-lowerThreshold = 0;
cq.CQUtilPrms-lowerThresholdClientOperations = add;
cq.CQUtilPrms-lowerThresholdServerOperations = get;
cq.CQUtilPrms-queryDepth = 7;
cq.CQUtilPrms-numQueriesPerClientVM = 100; 
cq.CQUtilPrms-useUniqueKeys = true; // in a test with replicate peer regions, 
                                    // we need to work around ordering problems so
                                    // verification can be done
cq.CQUtilPrms-QueryServicePoolName = edgeDescript;
cq.CQUtilPrms-QueryServiceUsingPool = true;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript;
hydra.PoolPrms-minConnections        = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-readTimeout                 = 800000;
hydra.PoolPrms-subscriptionRedundancy             = ${redundancyLevel};

// define the bridge servers
hydra.BridgePrms-names                = bridge;


cq.CQUtilPrms-highAvailability = true;
util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = RANGE 1 ${redundancyLevel} EGNAR;

