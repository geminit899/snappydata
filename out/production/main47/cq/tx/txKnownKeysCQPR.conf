hydra.Prms-testDescription = "
This test creates random CQs, loads a set of keys, does known operations to 
key intervals, then validates the CQs and initialResultSet using a partitioned region.
It has been modified from the original test to only doOps in the servers (and to execute
ops in a transaction, 1 op per tx)";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts})" ncf;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} -
                 (${bridgeHosts} * ${bridgeVMsPerHost})
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP oneThreadPerBridgeVM
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost}
                 ncf
  totalVMs = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} -
                 (${edgeHosts} * ${edgeVMsPerHost})
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         
THREADGROUP oneThreadPerEdgeVM
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost}
                 ncf
  totalVMs = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         

STARTTASK    taskClass     = cq.CQKnownKeysTest  taskMethod = StartTask_initialize;

INITTASK     taskClass   = cq.CQKnownKeysTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = oneThreadPerBridgeVM;

INITTASK     taskClass   = cq.CQKnownKeysTest  taskMethod = HydraTask_initializeClient
             threadGroups = oneThreadPerEdgeVM;

INITTASK     taskClass     = cq.CQKnownKeysTest  taskMethod = HydraTask_loadRegion
             threadGroups = bridgeThreads, edgeThreads, oneThreadPerBridgeVM, oneThreadPerEdgeVM
             batch;

INITTASK     taskClass     = cq.CQKnownKeysTest  taskMethod  = HydraTask_waitForSilence
             threadGroups = oneThreadPerEdgeVM;

INITTASK     taskClass     = cq.CQKnownKeysTest  taskMethod  = HydraTask_verifyQueries
             threadGroups = oneThreadPerEdgeVM
             batch;

TASK         taskClass     = cq.CQKnownKeysTest  taskMethod = HydraTask_doOps
             threadGroups = bridgeThreads, oneThreadPerBridgeVM;

CLOSETASK    taskClass     = cq.CQKnownKeysTest  taskMethod  = HydraTask_waitForSilence
             threadGroups = oneThreadPerEdgeVM;

CLOSETASK    taskClass     = cq.CQKnownKeysTest  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = oneThreadPerBridgeVM, oneThreadPerEdgeVM
             batch;

CLOSETASK    taskClass     = cq.CQKnownKeysTest  taskMethod  = HydraTask_verifyQueries
             threadGroups = oneThreadPerEdgeVM
             batch;

hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 1200;  // longer wait time for Solaris runs; ops must complete in one task invocation

util.TestHelperPrms-minTaskGranularitySec = 60;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.RandomValuesPrms-borderCasePercentage = 0;

cq.CQUtilPrms-numKeys = ${numKeys};
cq.CQUtilPrms-numNewKeys = fcn "${numKeys} * 0.1" ncf; // numNewKeys is 10% of the total number of keys
cq.CQUtilPrms-numQueriesPerClientVM = 100; 
cq.CQUtilPrms-QueryServicePoolName = qservice;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion            serverRegion;
hydra.RegionPrms-regionName     = testRegion              testRegion;
hydra.RegionPrms-scope          = ack;
hydra.RegionPrms-poolName    = edgeDescript            none;
hydra.RegionPrms-dataPolicy     = normal                  replicate;
hydra.RegionPrms-cacheListeners = util.SilenceListener,   hct.BridgeEventListener;
hydra.RegionPrms-partitionName  = none                    none;

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript qservice;
hydra.PoolPrms-minConnections        = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-readTimeout                 = 60000;
hydra.PoolPrms-subscriptionRedundancy             = RANGE 0
                                                   fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
                                             EGNAR;

// define the bridge servers
hydra.BridgePrms-names                = bridge;



hydra.RegionPrms-scope          = local                   default;
hydra.RegionPrms-dataPolicy     = normal                  partition;
hydra.RegionPrms-partitionName  = none                    serverPR;

hydra.PartitionPrms-names           = serverPR;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-redundantCopies = ONEOF 0 1 2 3 FOENO;

getInitialImage.InitImagePrms-useTransactions = true;
hydra.PoolPrms-prSingleHopEnabled = false;
