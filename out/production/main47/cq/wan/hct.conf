//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/wan/wan.inc;
include $JTESTS/wan/hct.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway hub to other cache servers.  Edge clients execute a CQ vs. registering interest";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;
hydra.Prms-maxResultWaitSec = 600;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/**
 * Configures the bridge server cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initServerCacheTask
         threadgroups = bridge;
INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         threadgroups = bridge;

/**
 * Configures the edge client cache to execute CQ
 */
INITTASK taskClass = wan.WANClient taskMethod = initCQClientTask
         threadGroups = edge;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = wan.WANClient taskMethod = putSequentialKeysTask
     maxTimesToRun = 25
     threadGroups = edge;

wan.CacheClientPrms-sleepSec = 0;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = wan.WANClient taskMethod = printSequentialKeysTask
          threadGroups = edge;
CLOSETASK taskClass = wan.WANClient taskMethod = validateSequentialKeysCQTask
          threadGroups = edge;
CLOSETASK taskClass = wan.WANClient taskMethod = closeEdgeClientCacheTask
          threadGroups = edge;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge;
CLOSETASK taskClass = wan.WANClient taskMethod = closeServerCacheTask
          threadgroups = bridge;

// leave one VM in each site for CQ execution
THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

// disable any HAClientQueue redundancy
hydra.PoolPrms-subscriptionRedundancy = -1;
hydra.PoolPrms-readTimeout = 120000;

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", 
        ${bridgeHostsPerSite} * ${wanSites}, 
        true)"
 ncf;

// enable CQ registration & processing
// verify updates are sequential values
cq.CQUtilPrms-useCQ = true;
cq.CQUtilPrms-cqListener = cq.CQSequentialValuesListener;
cq.CQUtilPrms-QueryServicePoolName = brloader;
cq.CQUtilPrms-QueryServiceUsingPool = ONEOF true false FOENO;
