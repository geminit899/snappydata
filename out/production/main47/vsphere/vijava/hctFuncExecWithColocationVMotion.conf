hydra.Prms-testDescription = "
This test creates a partitioned region with custom parititioning and colocation, then does various entry operations(using function execution)
 on a known key range. Values are checked for correctness in the close task. This test is
 using client server configuration.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// This bridge flavor of concKnownKeysHA is a little different than
// the non-bridge flavor. In the non-bridge flavor, accessor VMs 
// (which correlate to edge clients) have a "handle" to the PR, and
// even though we don't store any data in the accessor, logically
// all the keys exist. In the bridge flavor, the edge clients, which
// have local regions, need to also have the keys in order for the ops
// task to do its work. For this reason, the edge clients must also
// keep all keys and values in it's locally scoped region, thus its
// vm must be as large as the data store (ie server) vms.


// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 

// one verify thread per datastore (but not accessor) vm to verify each vm's view
THREADGROUP verifyThreads 
            totalThreads = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            totalVMs     = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts}  * ${bridgeVMsPerHost}, true)" ncf;
               
THREADGROUP clientVMThreads 
            totalThreads = fcn (${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}) ncf
            totalVMs     = fcn (${edgeHosts} * ${edgeVMsPerHost}) ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"edge\", 
                                ${edgeHosts} * ${edgeVMsPerHost}, true)" ncf;

// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads minus 1 thread for accessor VM
THREADGROUP dataStoreVMThreads 
            totalThreads = fcn (((${bridgeHosts} * ${bridgeVMsPerHost} - 1) * ${bridgeThreadsPerVM}) 
                               - (${bridgeHosts} * ${bridgeVMsPerHost} - 1)) ncf  
            totalVMs     = fcn (${bridgeHosts}  * ${bridgeVMsPerHost} - 1)  ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                (${bridgeHosts} * ${bridgeVMsPerHost} - 1), true)" ncf;

// one thread from an datastore VM 
THREADGROUP accessorVMThread totalThreads = fcn (${bridgeThreadsPerVM} - 1) ncf 
            totalVMs = 1
            clientNames  = bridge7;
                        
hydra.RegionPrms-names              = clientRegion1     clientRegion2     clientRegion3     dataStoreRegion1  dataStoreRegion2  dataStoreRegion3  bridgeRegion1   bridgeRegion2     bridgeRegion3;
hydra.RegionPrms-regionName         = testRegion1       testRegion2       testRegion3       testRegion1       testRegion2       testRegion3       testRegion1       testRegion2         testRegion3;
hydra.RegionPrms-scope              = local             local             local             default           default           default           default           default             default;
hydra.RegionPrms-poolName           = edgeDescript      edgeDescript      edgeDescript      none;
hydra.RegionPrms-cacheListeners     = util.SilenceListener, util.SilenceListener ,util.SilenceListener;
hydra.RegionPrms-dataPolicy         = normal            normal            normal            partition         partition         partition         partition         partition         partition;
hydra.RegionPrms-partitionName      = none              none              none              pr1               pr2               pr3               apr1              apr2              apr3;

hydra.PartitionPrms-names               = pr1         pr2         pr3         apr1         apr2         apr3;
hydra.PartitionPrms-localMaxMemory      = default     default     default     0            0            0;
hydra.PartitionPrms-redundantCopies     = ${redundantCopies};
hydra.PartitionPrms-partitionResolver   = parReg.colocation.MonthPartitionResolver;
hydra.PartitionPrms-colocatedWith       = none    testRegion1   testRegion2  none     testRegion1 testRegion2;
parReg.ParRegPrms-partitionResolverData = BB;
parReg.ParRegPrms-isWithRoutingResolver = true; 

// define the edge clients
hydra.PoolPrms-names                       = edgeDescript;
hydra.PoolPrms-minConnections              = 2;
hydra.PoolPrms-subscriptionEnabled         = true;
hydra.PoolPrms-threadLocalConnections      = true;
hydra.PoolPrms-readTimeout                 = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy      = ${redundancy};

// define the bridge servers
hydra.BridgePrms-names                = bridge;


hydratest.grid.GridPrms-functions =
          parReg.execute.RegionOperationsFunction
          parReg.execute.KeysOperationsFunction
          vsphere.vijava.VMotionRegionOperationsFunction
          ;

parReg.ParRegPrms-numberOfDataStore = fcn "(${bridgeHosts} * ${bridgeVMsPerHost} - 1)" ncf;

STARTTASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod = StartTask_initialize;

INITTASK     taskClass     = vsphere.vijava.VMotionFunctionServiceTest  taskMethod = HydraTask_dataStoreVMInitialize
             threadGroups  = dataStoreVMThreads
             ;

INITTASK     taskClass     = vsphere.vijava.VMotionFunctionServiceTest  taskMethod = HydraTask_accessorVMInitialize
             threadGroups  = accessorVMThread
             ;

INITTASK     taskClass     = vsphere.vijava.VMotionFunctionServiceTest  taskMethod = HydraTask_HA_clientVMInitialize
             threadGroups  = clientVMThreads;
             
INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_registerInterest
             threadGroups  = clientVMThreads;

INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_loadRegions
             threadGroups  = clientVMThreads
             batch
             ;

INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups  = verifyThreads;

INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_verifyRegionSize
             threadGroups  = verifyThreads
             ;
             
INITTASK     taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_registerFunctions
             threadGroups  = dataStoreVMThreads,clientVMThreads
             runMode       = always;             
 
TASK         taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_doFunctionExecution
             threadGroups  = clientVMThreads;
 
CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod = HydraTask_logLocalSize
             threadGroups  = dataStoreVMThreads;

CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyPrimaries
             threadGroups  = verifyThreads;

CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups  = verifyThreads;

CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyBucketCopies
             threadGroups  = verifyThreads
             ;

CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyColocatedRegions
             threadGroups  = verifyThreads;

CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = verifyThreads
             ;
             
CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_putKeySetInBB
             threadGroups  = verifyThreads
                         ;             
                                   
CLOSETASK    taskClass     = parReg.execute.FunctionServiceTest  taskMethod  = HydraTask_executeFunctionAllKeys
             threadGroups  = clientVMThreads
                         ;             

hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 600;

util.TestHelperPrms-minTaskGranularitySec = 150;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

util.CachePrms-useDeclarativeXmlFile = true;

hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar;
