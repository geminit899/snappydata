hydra.Prms-testRequirement = "Test transaction timeout";
hydra.Prms-testDescription = "
This test uses 1 VM with 10 threads:  the testTask randomly sets a transactionTimeout and and a sleepTime then begins the tx, sleeps and commits. If the transaction was meant to timeout prior to the commit, the test expects an Exception.  If the transaction should still be active after the sleep timeout, the test expects the commit to be successful.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

// create bridge, initialize region, start server
INITTASK     taskClass  = jta.JtaCacheTestUtil taskMethod = HydraTask_initializeBridgeServer
             hydra.ConfigPrms-bridgeConfig   = bridge
             hydra.ConfigPrms-cacheConfig    = bridge
             hydra.ConfigPrms-regionConfig   = bridge
             threadGroups = bridge;

INITTASK     taskClass   = jta.JtaTimeOutHydraTest taskMethod = initTask
             hydra.ConfigPrms-cacheConfig    = edge
             hydra.ConfigPrms-regionConfig   = edge
             threadGroups = edge;

TASK         taskClass   = jta.JtaTimeOutHydraTest taskMethod  = testTask 
             maxTimesToRun=20
             threadGroups = edge;

//shutdown bridgeServer gracefully
CLOSETASK    taskClass   = hydra.BridgeHelper taskMethod  = stopBridgeServer
             threadGroups = bridge;

hydra.VmPrms-extraClassPaths        =   $GEMFIRE/lib/gemfire.jar $JTESTS/lib/derby.jar; 

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 1200;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-alwaysDoEndTasks = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

// Logging params
hydra.log.LogPrms-file_logging = true;

jta.JtaPrms-cacheXmlFile = $JTESTS/jta/cachejta.xml;
jta.JtaPrms-numberOfRandomRegions=0;

// define the bridge servers
hydra.BridgePrms-names                = bridge;

hydra.CachePrms-names               = edge          bridge;
hydra.RegionPrms-names              = edge          bridge;
hydra.RegionPrms-regionName         = jtaRegion     jtaRegion;
hydra.RegionPrms-scope              = local         ack;
hydra.RegionPrms-poolName           = edgeDescript  none;
hydra.RegionPrms-dataPolicy = ONEOF normal empty FOENO replicate;

hydra.RegionPrms-cacheListeners = tx.LogListener;
hydra.RegionPrms-cacheWriter    = tx.LogWriter;

jta.JtaPrms-txListener = tx.TxLogListener;
jta.JtaPrms-txWriter   = tx.TxLogWriter;

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy = 0;
hydra.PoolPrms-pingInterval           = 400;
hydra.PoolPrms-loadConditioningInterval = 5000;


