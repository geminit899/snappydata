hydra.Prms-testRequirement = "Test transaction timeout";
hydra.Prms-testDescription = "
This test uses 1 VM with 10 threads:  the testTask randomly sets a transactionTimeout and and a sleepTime then begins the tx, sleeps and commits. If the transaction was meant to timeout prior to the commit, the test expects an Exception.  If the transaction should still be active after the sleep timeout, the test expects the commit to be successful.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams1.inc;

hydra.ClientPrms-vmQuantities   = 1;
hydra.ClientPrms-vmThreads    = 10;

hydra.VmPrms-extraClassPaths        =   $GEMFIRE/lib/gemfire.jar $JTESTS/lib/derby.jar; 

INITTASK     taskClass   = jta.JtaTimeOutHydraTest taskMethod = initTask;

TASK         taskClass   = jta.JtaTimeOutHydraTest taskMethod  = testTask maxTimesToRun=20;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 1200;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-alwaysDoEndTasks = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

// Logging params
hydra.log.LogPrms-file_logging = true;

jta.JtaPrms-cacheXmlFile = $JTESTS/jta/cachejta.xml;

