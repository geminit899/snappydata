hydra.Prms-testRequirement = "Test recovery delay for partitioned regions";
hydra.Prms-testDescription = "
Use careful validation to test recoveryDelay and startupRecoveryDelay.
This config can be run with various settings from the bt file. 
The test starts up a number of vms, populates the PR, and depending
on the config params, takes them down either one at a time, or
several concurrently, then validates recovery and the state of the PR
until only 1 vm is left. The test then brings the vms back, either
concurrently or one at a time, validating recovery and the PR state";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

INITTASK   taskClass = util.StopStartVMs  taskMethod = StopStart_initTask
           threadGroups = dataStoreThreads;

INITTASK   taskClass = recovDelay.RecovDelayTest  taskMethod = HydraTask_initRedundantCopies
           threadGroups = accessorThreads;

INITTASK   taskClass = recovDelay.RecovDelayTest  taskMethod = HydraTask_initializeAccessor
           threadGroups = accessorThreads;

INITTASK   taskClass = recovDelay.RecovDelayTest  taskMethod = HydraTask_initializeDataStore
           threadGroups = dataStoreThreads
           runMode = always;

INITTASK   taskClass = recovDelay.RecovDelayTest  taskMethod = HydraTask_load
           threadGroups = accessorThreads, dataStoreThreads
           batch;

INITTASK   taskClass = recovDelay.RecovDelayTest  taskMethod = HydraTask_initAfterLoad
           threadGroups = accessorThreads;

INITTASK   taskClass = recovDelay.RecovDelayTest  taskMethod = HydraTask_waitForStartupRecovery
           threadGroups = dataStoreThreads;

INITTASK   taskClass = recovDelay.RecovDelayTest  taskMethod = HydraTask_checkForBalance
           threadGroups = accessorThreads;

// this task is workload based; it throws StopSchedulingTaskOnClientOrder when complete
TASK       taskClass = recovDelay.RecovDelayTest  taskMethod = HydraTask_controller
           threadGroups = accessorThreads;

CLOSETASK  taskClass = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
           threadGroups = accessorThreads;

INCLUDE $JTESTS/util/randomValues.inc;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;
hydra.Prms-serialExecution = true;
hydra.Prms-totalTaskTimeSec = 3600; // this test is workload based
hydra.Prms-maxResultWaitSec = 900;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 3600;

hydra.RegionPrms-names          = accessorRegion           dataStoreRegion;
hydra.RegionPrms-regionName     = partitionedRegion;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-cacheListeners = none,                    recovDelay.RecovListener;
hydra.RegionPrms-partitionName  = accessorPR               dataStorePR;

// redundantCopies is set in the test code using recovDelay.RecovDelayPrms-redundantCopies
hydra.PartitionPrms-names                  = accessorPR           dataStorePR;
hydra.PartitionPrms-redundantCopies        = 0; // redundantCopies is reset in test code
                                                // using recovDelay.RecovDelayPrms-redundantCopies
                                                // but hydra forces this to be here
hydra.PartitionPrms-localMaxMemory         = 0                    default;
hydra.PartitionPrms-recoveryDelay          = 0                    ${recoveryDelay};
hydra.PartitionPrms-startupRecoveryDelay   = 0                    ${startupDelay};

recovDelay.RecovDelayPrms-numDataStoreVMs = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf;
recovDelay.RecovDelayPrms-initialNumKeys = 20000;
recovDelay.RecovDelayPrms-startStrategy = ONEOF single group FOENO; 
recovDelay.RecovDelayPrms-stopStrategy = ONEOF single group FOENO;
recovDelay.RecovDelayPrms-totalNumVMsToStop = ${totalNumVMsToStop};
recovDelay.RecovDelayPrms-redundantCopies = ${redundantCopies};

util.StopStartPrms-stopModes = ONEOF MEAN_EXIT MEAN_KILL NICE_EXIT NICE_KILL FOENO;
util.TestHelperPrms-minTaskGranularitySec = 60;
util.ValueHolderPrms-useExtraObject = false;


