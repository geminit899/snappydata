hydra.Prms-testRequirement = "Test to cause forced disconnects while random ops are in progress.";
hydra.Prms-testDescription = "
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 (${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}) -
                   (${bridgeHosts} * ${bridgeVMsPerHost})
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         

INITTASK     taskClass   = splitBrain.ForcedDiscTest  taskMethod = HydraTask_initializeServer
             threadGroups = oneThreadPerServerVM;

INITTASK     taskClass   = splitBrain.ForcedDiscTest  taskMethod = HydraTask_initializeClient
             threadGroups = edgeThreads;

TASK         taskClass   = splitBrain.ForcedDiscTest  taskMethod = HydraTask_doEntryOps
             threadGroups = oneThreadPerServerVM, default;

TASK         taskClass   = splitBrain.ForcedDiscTest  taskMethod = HydraTask_causeForcedDisconnect
             threadGroups = oneThreadPerServerVM
             maxThreads = ${maxConcNumForcedDisconnects};

THREADGROUP oneThreadPerServerVM totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
                                 totalVMs = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf;

hydra.Prms-totalTaskTimeSec = 31536000;  // let secondsToRun determine when to stop
splitBrain.SplitBrainPrms-secondsToRun = 600;  
hydra.Prms-maxResultWaitSec = 600;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;
hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 3600; // hydra will hang first
hydra.CachePrms-lockTimeout     = 3600; // hydra will hang first
hydra.CachePrms-lockLease       = 3600; // hydra will hang first

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion            serverRegion;
hydra.RegionPrms-regionName     = testRegion;
hydra.RegionPrms-scope          = local                   global;
hydra.RegionPrms-dataPolicy     = replicate;
hydra.RegionPrms-interestPolicy = all;
hydra.RegionPrms-poolName       = edgeDescript            none;

hydra.RegionPrms-cacheListeners = none,                   splitBrain.RegMemLogListener splitBrain.ForcedDiscListener;

// Pool Config
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-readTimeout            = 3600000;
hydra.PoolPrms-threadLocalConnections = true; // see Bug 37157
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = 45;

splitBrain.SplitBrainPrms-entryOperations = ONEOF add add getNew getNew update invalidate get destroy FOENO; 
splitBrain.SplitBrainPrms-upperThreshold = 500;
splitBrain.SplitBrainPrms-upperThresholdOperations = ONEOF destroy FOENO;
splitBrain.SplitBrainPrms-lowerThreshold = 10;
splitBrain.SplitBrainPrms-lowerThresholdOperations = ONEOF add getNew FOENO;
splitBrain.SplitBrainPrms-lockOperations = false;

hydra.GemFirePrms-ackSevereAlertThreshold = 15;

// turn off auto-reconnect
hydra.GemFirePrms-disableAutoReconnect = true;
