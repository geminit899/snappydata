hydra.Prms-testRequirement = "Test partitioned regions with a variety of operations with careful validation and serial execution";
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion and carefully
validates for correctness. The data store for the partitioned region is spread
across all VMs. The test uses serial round robin; the first thread
in the round does a random operation, then all other threads in the round
verify their view of the operation. After the last thread in the round verifies,
it then becomes the first in the next round, thus the thread doing the random
operation changes for each round.  A network partition during the test should
not cause a loss of data.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2_locator.inc;

STARTTASK    taskClass   = splitBrain.SplitBrainBB taskMethod = HydraTask_initialize 
             clientNames = survivingSide1;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators)
//------------------------------------------------------------------------------

/**
 * Starts the locator and connects to admin-only distributed systems.
 */
INITTASK taskClass = splitBrain.SBUtil taskMethod = createLocatorTask
         threadGroups = locator;

INITTASK taskClass = splitBrain.SBUtil taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

// Ensure leadMember is on the survivingSide
INITTASK taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initialize
         runMode = always
         threadGroups = survivingSide;

INITTASK taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initialize
         runMode = always
         threadGroups = losingSide;

TASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_doRROpsAndVerify
         threadgroups = survivingSide;

TASK     taskClass = splitBrain.SBUtil taskMethod = dropConnection
         maxTimesToRun = 1
         startInterval = 180
         threadGroups = locator;

CLOSETASK taskClass = splitBrain.SBUtil taskMethod = restoreConnection
          threadGroups = locator;

CLOSETASK   taskClass = splitBrain.NetworkPartitionTest taskMethod = closeCacheAndDisconnectFromDS
            threadGroups = survivingSide;

//ENDTASK   taskClass = splitBrain.NetworkPartitionTest taskMethod = HydraEndTask_verifyLosingPartition
          //clientNames = client1
          //;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
THREADGROUP ${A}
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost}
                                    * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP ${B}
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost}
                                    * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

hydra.GemFirePrms-enableNetworkPartitionDetection = true;
hydra.GemFirePrms-disableAutoReconnect = true;
splitBrain.SplitBrainPrms-hostDescription1 = "survivingSidehost1";
splitBrain.SplitBrainPrms-hostDescription2 = "losingSidehost1";
splitBrain.SplitBrainPrms-dropWaitTimeSec = 180;
 
hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion;
hydra.RegionPrms-regionName     = partitionedRegion;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = pr;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-recoveryDelay = 0;   // IMMEDIATE

parReg.ParRegPrms-numOpsPerTask = 100;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)
parReg.ParRegPrms-entryOperations = ONEOF add add add add update invalidate get destroy FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdOperations = add;
