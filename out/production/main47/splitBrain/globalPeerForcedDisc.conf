hydra.Prms-testRequirement = "Test to cause forced disconnects while random ops are in progress.";
hydra.Prms-testDescription = "
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p.inc;

INITTASK     taskClass   = splitBrain.ForcedDiscTest  taskMethod = HydraTask_initializeClient;

TASK         taskClass   = splitBrain.ForcedDiscTest  taskMethod = HydraTask_doEntryOps
             threadGroups = oneThreadPerVM, default;

TASK         taskClass   = splitBrain.ForcedDiscTest  taskMethod = HydraTask_causeForcedDisconnect
             threadGroups = oneThreadPerVM
             maxThreads = ${maxConcNumForcedDisconnects};

THREADGROUP oneThreadPerVM totalThreads = fcn ${peerHosts} * ${peerVMsPerHost} ncf
                           totalVMs = fcn ${peerHosts} * ${peerVMsPerHost} ncf;

hydra.Prms-totalTaskTimeSec = 31536000;  // let secondsToRun determine when to stop
splitBrain.SplitBrainPrms-secondsToRun = 600;  
hydra.Prms-maxResultWaitSec = 600;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;

hydra.Prms-useFixedRandomInMaster= true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;
hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 3600; // hydra will hang first
hydra.CachePrms-lockTimeout     = 3600; // hydra will hang first
hydra.CachePrms-lockLease       = 3600; // hydra will hang first

hydra.RegionPrms-names          = clientRegion;
hydra.RegionPrms-regionName     = testRegion;
hydra.RegionPrms-scope          = global;
hydra.RegionPrms-dataPolicy     = replicate;
hydra.RegionPrms-interestPolicy = all;
hydra.RegionPrms-cacheLoader    = splitBrain.Loader;
hydra.RegionPrms-cacheListeners = splitBrain.RegMemLogListener splitBrain.ForcedDiscListener;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = 45;

splitBrain.SplitBrainPrms-entryOperations = ONEOF add add getNew getNew update invalidate get destroy FOENO; 
splitBrain.SplitBrainPrms-upperThreshold = 500;
splitBrain.SplitBrainPrms-upperThresholdOperations = ONEOF destroy FOENO;
splitBrain.SplitBrainPrms-lowerThreshold = 10;
splitBrain.SplitBrainPrms-lowerThresholdOperations = ONEOF add getNew FOENO;
splitBrain.SplitBrainPrms-lockOperations = false;

hydra.GemFirePrms-ackSevereAlertThreshold = 15;

// turn off auto-reconnect
hydra.GemFirePrms-disableAutoReconnect = true;
