hydra.Prms-testRequirement = "Test lead member selection";
hydra.Prms-testDescription = "
In a concurrent test, kill and restart vm(s), then pause and verify the lead member.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_1_locator.inc;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
THREADGROUP clientThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost}
                                    * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;

STARTTASK taskClass   = splitBrain.SplitBrainBB taskMethod = HydraTask_initialize 
          clientNames = client1;

INITTASK taskClass   = util.StopStartVMs taskMethod = StopStart_initTask
         threadGroups = clientThreads;

INITTASK taskClass = splitBrain.SBUtil taskMethod = createLocatorTask
         threadGroups = locatorThreads;

INITTASK taskClass = splitBrain.SBUtil taskMethod = startAndConnectLocatorTask
         threadGroups = locatorThreads;

INITTASK taskClass = splitBrain.LeadSelectionTest taskMethod = HydraTask_initializeClient
         runMode = always
         threadGroups = clientThreads;

INITTASK taskClass = splitBrain.LeadSelectionTest taskMethod = HydraTask_initializeLocator
         threadGroups = locatorThreads;

INITTASK taskClass = splitBrain.LeadSelectionTest taskMethod = HydraTask_logMembers
         threadGroups = locatorThreads;

TASK     taskClass = splitBrain.LeadSelectionTest taskMethod = HydraTask_concLeadSelectionTest
         threadGroups = locatorThreads
         maxThreads = 1;

// Settings for splitBrain behavior
hydra.GemFirePrms-enableNetworkPartitionDetection = true;
hydra.GemFirePrms-disableAutoReconnect = true;

// With new quorum behavior, ensure that we don't declare a network partition when all 
// 5 client vms are killed 
hydra.VmPrms-extraVMArgs  += fcn "hydra.TestConfigFcns.duplicateString
                                  (\"-Dgemfire.member-weight=10\", ${locatorHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Dnone\", ${${A}Hosts}, true)"
                             ncf;

hydra.Prms-manageLocatorAgents = false; // turn off master-managed locators

hydra.Prms-totalTaskTimeSec = 600;
// it can take up to 3 X member-timeout to select a new member, but in concurrent
// tests all members are stopped and started concurrently. The default member-timeout
// is 60 seconds, so we run with that. It could take up to 3 minutes in concurrent
// tests to select a new lead, so set the maxResultWaitSec at 10 minutes
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion;
hydra.RegionPrms-regionName     = testRegion;
hydra.RegionPrms-dataPolicy     = replicate;
hydra.RegionPrms-scope          = ONEOF ack global FOENO;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

util.StopStartPrms-stopModes = ONEOF mean_exit mean_kill nice_exit nice_kill FOENO;
