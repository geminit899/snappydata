hydra.Prms-testRequirement = "Test high availability of partitioned regions with a variety of operations with careful validation and serial execution where failover is caused by forced disconnects";
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion and carefully
validates for correctness. The data store for the partitioned region is spread
across all VMs. The test uses serial round robin; the first thread
in the round does random operation(s), then stops and restarts
the other client VMs, then all other threads in the round verify their view of 
the operation. After the last thread in the round verifies, it then becomes the 
first in the next round, thus the thread doing the random operation changes for 
each round.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;
hydra.GemFirePrms-distributedSystem = ds;
INCLUDE $JTESTS/splitBrain/unhealthySerialPRHA.inc;

THREADGROUP adminThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;

// all threads in subgroup A are accessorThreads, and all threads in subgroup B
// are in dataStoreThreads
THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = accessorRegion       dataStoreRegion     accessorControllerRegion dataStoreControllerRegion;
hydra.RegionPrms-regionName     = partitionedRegion    partitionedRegion   controllerReg    controllerReg;
hydra.RegionPrms-cacheLoader    = parReg.ParRegLoader  parReg.ParRegLoader none             none;
hydra.RegionPrms-dataPolicy     = partition            partition           partition        partition;
hydra.RegionPrms-interestPolicy = cacheContent         cacheContent        all              all;
hydra.RegionPrms-cacheListeners = // listeners for the PR used for the test itself
                                  none, none,
                                  // listeners for the forcedDiscRegion
                                  splitBrain.RegMembershipListener splitBrain.ParRegListener;
hydra.RegionPrms-partitionName  = accessorPR           dataStorePR         accessorPR       dataStorePR;

hydra.PartitionPrms-names           = accessorPR           dataStorePR;
hydra.PartitionPrms-localMaxMemory  = 0                    default;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

util.AdminHelperPrms-alertListener = splitBrain.PRAckAlertListener;
splitBrain.SplitBrainPrms-unhealthiness = ONEOF slow sick FOENO;
splitBrain.SplitBrainPrms-playDead = ONEOF true false FOENO;

util.StopStartPrms-stopModes = mean_kill;
