include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;
include $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = 1   1;
hydra.ClientPrms-vmThreads    = 2   1;

THREADGROUP txThread  totalThreads = 1  totalVMs = 1 clientNames=client1;
THREADGROUP FDTarget    totalThreads = 1  totalVMs = 1 clientNames=client1;
THREADGROUP validator totalThreads = 1  totalVMs = 1 clientNames=client2;

INITTASK  taskClass   = tx.TxViewUtil taskMethod = HydraTask_createRegionForest
          ;
                                                                                
INITTASK  taskClass   = splitBrain.FDViewTest taskMethod = HydraTask_initialize
          ;

// Note that we must executeTx twice (1 - BEGIN TX, 2 - COMMIT TX)
TASK      taskClass   = splitBrain.FDViewTest taskMethod = HydraTask_executeTx
          maxTimesToRun = 2
          threadGroups = txThread
          ;

TASK      taskClass   = splitBrain.FDViewTest taskMethod = HydraTask_forceDisconnect
          maxTimesToRun = 1
          threadGroups = FDTarget
          ;

TASK      taskClass   = splitBrain.FDViewTest taskMethod = HydraTask_doFDRegionOps
          threadGroups = validator, default 
          ;

CLOSETASK taskClass   = splitBrain.FDViewTest taskMethod = HydraCloseTask_validateTxConsistency
          threadGroups = validator, default
          ;

// Note that this must come AFTER validateTxConsistency since we'll perform
// operations on the same keys as the previous transaction (which would 
// cause the data consistency validation to fail.  Only one VM can execute
// this since we'll be applying the same changes as the original commit
CLOSETASK taskClass   = splitBrain.FDViewTest taskMethod = HydraCloseTask_verifyResourcesReleased
          threadGroups = validator
          ;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 180;
hydra.Prms-serialExecution=false;
hydra.Prms-alwaysDoEndTasks = true;

hydra.log.LogPrms-mergeLogFiles = true;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;

tx.TxPrms-excludeRegionName = fdRegion;
tx.TxPrms-commitStateTrigger = ${commitStateTrigger};

tx.TxPrms-commitPercentage=100;  // always commit
tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=2;

hydra.ConfigPrms-cacheConfig    = myCache;
hydra.ConfigPrms-regionConfig   = myRegion;
hydra.CachePrms-names           = myCache;
hydra.RegionPrms-names          = myRegion;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-cacheListeners = tx.LogListener;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-scope          = ack;
hydra.RegionPrms-dataPolicy     = replicate;

tx.TxPrms-txListener = tx.TxLogListener;

tx.TxPrms-operations =
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          region-create;

tx.TxPrms-numOps = RANGE 1 5 EGNAR;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 

// Set threshold (to enable FD feature)
hydra.GemFirePrms-ackSevereAlertThreshold = 10;

