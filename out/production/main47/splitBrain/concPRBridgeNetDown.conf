hydra.Prms-testRequirement = "Test partitioned regions with a variety of operations with 
careful validation and concurrent execution in a bridge configuration";
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion and carefully
validates for correctness. The data store for the partitioned region is spread
across all bridge servers.   BridgeServers are located on two separate hosts in
NetDown tests and the connections between those two hosts dropped during the test.  Validation should still complete without failures as redundantCopies is specified to prevent dataLoss.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct_2_locator.inc;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
THREADGROUP ${A}
  totalThreads = fcn
                 ${${A}bridgeHosts} * ${${A}bridgeVMsPerHost} * ${${A}bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"${A}bridge\", ${${A}bridgeHosts}, true)"
                 ncf;
THREADGROUP ${B}
  totalThreads = fcn
                 ${${B}bridgeHosts} * ${${B}bridgeVMsPerHost} * ${${B}bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"${B}bridge\", ${${B}bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         

STARTTASK    taskClass   = splitBrain.SplitBrainBB taskMethod = HydraTask_initialize 
             clientNames = losingSidebridge1;

STARTTASK    taskClass   = splitBrain.SplitBrainBB taskMethod = postSelfAsLosingSideHost
             clientNames = losingSidebridge1;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators)
//------------------------------------------------------------------------------

/**
 * Starts the locator and connects to admin-only distributed systems.
 */
INITTASK taskClass = splitBrain.SBUtil taskMethod = createLocatorTask
         threadGroups = locator;

INITTASK taskClass = splitBrain.SBUtil taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

// Ensure leadMember is on the survivingSide
INITTASK taskClass   = splitBrain.PRNetDownTest  taskMethod = HydraTask_initializeBridgeServer
         threadGroups = survivingSide;

INITTASK taskClass   = splitBrain.PRNetDownTest  taskMethod = HydraTask_initializeBridgeServer
         threadGroups = losingSide;

INITTASK taskClass   = splitBrain.PRNetDownTest  taskMethod = HydraTask_initialize
         threadGroups = edgeThreads;

TASK     taskClass   = splitBrain.PRNetDownTest  taskMethod = HydraTask_doConcOpsAndVerify
         threadGroups = losingSide, survivingSide, edgeThreads;

TASK     taskClass = splitBrain.SBUtil taskMethod = dropConnection
         startInterval = 231
         maxTimesToRun = 1
         threadGroups = locator;

CLOSETASK taskClass = splitBrain.SBUtil taskMethod = restoreConnection
          threadGroups = locator;

CLOSETASK   taskClass = splitBrain.NetworkPartitionTest taskMethod = closeCacheAndDisconnectFromDS
            threadGroups = survivingSide;

hydra.GemFirePrms-enableNetworkPartitionDetection = true;
hydra.GemFirePrms-disableAutoReconnect = true;
splitBrain.SplitBrainPrms-hostDescription1 = "survivingSidebridgehost1";
splitBrain.SplitBrainPrms-hostDescription2 = "losingSidebridgehost1";
splitBrain.SplitBrainPrms-dropWaitTimeSec = 60;

hydra.GemFirePrms-stopSystemsAfterTest = true;

// parReg.ParRegPrms-secondsToRun determines the running length rather than 
// totalTaskTimeSec because of the test's pausing scheme; without this the
// test could hang 
hydra.Prms-totalTaskTimeSec = 31536000;  
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = 45;

parReg.ParRegPrms-entryOperations = ONEOF add add update invalidate get destroy FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy FOENO;
parReg.ParRegPrms-lowerThreshold = 10;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add FOENO;

// Don't allow write ops in the servers (dataStores) since this 
// will lead to 39061 when ForcedDisconnect occurs
parReg.ParRegPrms-designateOps = true;
parReg.ParRegPrms-accessorOperations = 
    ONEOF add putAll add putAll add putAll getNew getNew update get destroy putIfAbsent remove replaceNoInval replaceOldNoInval FOENO; 
parReg.ParRegPrms-dataStoreOperations = ONEOF get get get get getNew FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdAccessorOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-upperThresholdDataStoreOperations = ONEOF get replaceAsNoop replaceOldAsNoop FOENO;
parReg.ParRegPrms-lowerThreshold = 10;
parReg.ParRegPrms-lowerThresholdAccessorOperations = ONEOF add putAll putIfAbsentAsCreate FOENO;
parReg.ParRegPrms-lowerThresholdDataStoreOperations = ONEOF get replaceAsNoop replaceOldAsNoop FOENO;

parReg.ParRegPrms-entryOperations = notUsed;
parReg.ParRegPrms-lowerThresholdOperations = notUsed;
parReg.ParRegPrms-upperThresholdOperations = notUsed;

parReg.ParRegPrms-secondsToRun = 600;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion            dataStoreRegion;
hydra.RegionPrms-regionName     = testRegion              testRegion;
hydra.RegionPrms-scope          = local                   default;
hydra.RegionPrms-poolName       = edgeDescript            none;
hydra.RegionPrms-cacheListeners = util.SilenceListener,   hct.BridgeEventListener;
hydra.RegionPrms-dataPolicy     = default                 partition;
hydra.RegionPrms-partitionName  = none                    pr;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-recoveryDelay = 0;   // IMMEDIATE

parReg.ParRegPrms-bridgeOrderingWorkaround = ${bridgeOrderingWorkaround};

// Pool Config
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-readTimeout            = 60000;
hydra.PoolPrms-threadLocalConnections = true; // see Bug 37157
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;
hydra.PoolPrms-subscriptionRedundancy   = ${redundantCopies};

// define the bridge servers
hydra.BridgePrms-names                = bridge;


