hydra.Prms-testRequirement = "Test lead member selection";
hydra.Prms-testDescription = "
In a serial test, kill and restart a vm, then verify there is one lead member.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_1_locator.inc;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
THREADGROUP clientThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost}
                                    * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;

STARTTASK taskClass   = splitBrain.SplitBrainBB taskMethod = HydraTask_initialize 
          clientNames = client1;

INITTASK taskClass = splitBrain.SBUtil taskMethod = createLocatorTask
         threadGroups = locatorThreads;

INITTASK taskClass = splitBrain.SBUtil taskMethod = startAndConnectLocatorTask
         threadGroups = locatorThreads;

INITTASK taskClass = splitBrain.LeadSelectionTest taskMethod = HydraTask_initializeClient
         runMode = always
         threadGroups = clientThreads;

INITTASK taskClass = splitBrain.LeadSelectionTest taskMethod = HydraTask_initializeLocator
         threadGroups = locatorThreads;

INITTASK taskClass = splitBrain.LeadSelectionTest taskMethod = HydraTask_logMembers
         threadGroups = locatorThreads;

TASK     taskClass = splitBrain.LeadSelectionTest taskMethod = HydraTask_serialLeadSelectionTest
         threadGroups = locatorThreads;

// Settings for splitBrain behavior
hydra.GemFirePrms-enableNetworkPartitionDetection = true;
hydra.GemFirePrms-disableAutoReconnect = true;
hydra.GemFirePrms-memberTimeout = 15000;
hydra.Prms-manageLocatorAgents = false; // turn off master-managed locators

hydra.Prms-totalTaskTimeSec = 600;
// selecting a new member can take up to 3*member-timeout; with 5 members to stop
// sequentially during a task, this could take 5 minutes, so we make the timeout 
// 10 minutes
hydra.Prms-maxResultWaitSec = 600; 
hydra.Prms-serialExecution = true;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion;
hydra.RegionPrms-regionName     = testRegion;
hydra.RegionPrms-dataPolicy     = replicate;
hydra.RegionPrms-scope          = ONEOF ack global FOENO;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

util.StopStartPrms-stopModes = ONEOF mean_exit mean_kill nice_exit nice_kill FOENO;

