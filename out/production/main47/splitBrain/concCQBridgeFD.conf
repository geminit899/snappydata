hydra.Prms-testRequirement = "Cause forced disconnects while cqs are running.";
hydra.Prms-testDescription = "
This test executes operations on entries on a region and carefully
validates for correctness in the CQs while servers receive forced disconnects.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts})" ncf;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;

THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         

INITTASK     taskClass   = splitBrain.FDCQTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = bridgeThreads
             runMode = always;

INITTASK     taskClass   = splitBrain.FDCQTest  taskMethod = HydraTask_initializeClient
             threadGroups = edgeThreads;

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask;

// maxThreads of 1 means only one thread will be running the HAController at a time
TASK         taskClass   = cq.CQTest  taskMethod = HydraTask_HAController
             threadGroups = bridgeThreads, edgeThreads
             maxThreads = 1;

TASK         taskClass   = cq.CQTest  taskMethod = HydraTask_HADoEntryOps
             threadGroups = bridgeThreads, edgeThreads;

hydra.GemFirePrms-stopSystemsAfterTest = true;

// cq.CQUtilPrms-secondsToRun determines the running length rather than 
// totalTaskTimeSec because of the test's pausing scheme; without this the
// test could hang 
hydra.Prms-totalTaskTimeSec = 31536000;  
cq.CQUtilPrms-secondsToRun = 1200;
hydra.Prms-maxResultWaitSec = 900;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.RandomValuesPrms-borderCasePercentage = 0;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion            serverRegion    fdRegionClient fdRegionServer;
hydra.RegionPrms-regionName     = testRegion              testRegion      fdRegion       fdRegion;
hydra.RegionPrms-scope          = local                   ack             local          ack;
hydra.RegionPrms-poolName       = edgeDescript            none            edgeDescript   none;
hydra.RegionPrms-dataPolicy     = normal                  replicate       normal         replicate;
hydra.RegionPrms-cacheListeners = util.SilenceListener,   hct.BridgeEventListener, splitBrain.CQListener;
hydra.RegionPrms-partitionName  = none                    none;

cq.CQUtilPrms-numOpsPerTask = 100;
util.TestHelperPrms-minTaskGranularitySec = 60;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)

cq.CQUtilPrms-serverEntryOperations = get;
cq.CQUtilPrms-clientEntryOperations = ONEOF add add update get FOENO; 
cq.CQUtilPrms-upperThreshold = 500;
cq.CQUtilPrms-upperThresholdServerOperations = get;
cq.CQUtilPrms-upperThresholdClientOperations = update;
cq.CQUtilPrms-lowerThreshold = 0;
cq.CQUtilPrms-lowerThresholdServerOperations = get;
cq.CQUtilPrms-lowerThresholdClientOperations = add;
cq.CQUtilPrms-queryDepth = 7;
cq.CQUtilPrms-numQueriesPerClientVM = 100; 
cq.CQUtilPrms-useUniqueKeys = true; // in a test with replicate peer regions, 
                                    // we need to work around ordering problems so
                                    // verification can be done

// Pool Config
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-readTimeout            = 800000;
hydra.PoolPrms-threadLocalConnections = true; // see Bug 37157
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;
hydra.PoolPrms-subscriptionRedundancy   = ${redundancyLevel};

// define the bridge servers
hydra.BridgePrms-names                = bridge;


cq.CQUtilPrms-highAvailability = true;
util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = RANGE 1 ${redundancyLevel} EGNAR;

hydra.GemFirePrms-enableNetworkPartitionDetection = ONEOF true false FOENO;
hydra.GemFirePrms-disableAutoReconnect = true;
hydra.GemFirePrms-ackSevereAlertThreshold = 15;

hydra.GemFirePrms-extraLocatorVMArgs += "-Dgemfire.member-weight=35";
