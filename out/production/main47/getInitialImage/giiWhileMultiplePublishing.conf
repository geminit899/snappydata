include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-testDescription = "
A publisher starts publishing new keys in two threads and populating the
cache, while many other clients come up and perform getInitialImage.  All 
clients have REPLICATED dataPolicy, so its not deterministic which client 
will supply the image, as the initial image is taken from some random vm.
Ensure that all clients have same number of keys and the same final key";

hydra.Prms-testRequirement = "all clients must have the same region size & keys at test end";

INITTASK  taskClass = getInitialImage.InitImageClient taskMethod = openStatisticsTask
          ;

// the creator uses conserve-sockets=false to exercise thread-owned socket flushing
INITTASK  taskClass = getInitialImage.InitImageClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = other
          threadGroups = creator
          hydra.GemFirePrms-conserveSockets = false
          ;

// giiProvider starts up early so it can be there for others as a state provider
INITTASK  taskClass = getInitialImage.InitImageClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = giiProvider
          threadGroups = giiProvider
          ;

TASK      taskClass = getInitialImage.InitImageClient taskMethod = putDataTask
          threadGroups = creator
	  cacheperf.CachePerfPrms-keyAllocation = sameKeys
	  cacheperf.CachePerfPrms-warmupTerminatorMethod = none
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-batchSeconds = 60
          cacheperf.CachePerfPrms-batchTerminatorMethod = terminateOnBatchSeconds
          ;
TASK      taskClass = getInitialImage.InitImageClient taskMethod = timedOpenCacheTask
          hydra.ConfigPrms-regionConfig = other
          threadGroups = giiClients
          maxTimesToRun = ${numGiiClients}
          startInterval = 1
          ;

// send a serial distribution message from the creator threads to all other members to make sure
// all post-gii no-ack updates have been flushed before we count operations
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = sendSerialMessageToAllTask
          threadGroups = creator
          ;
CLOSETASK taskClass    = getInitialImage.InitImageClient
          taskMethod   = verifyGII
          threadGroups = giiClients
          ;
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = validateMaxKeysRegionEntriesTask
          threadGroups = giiClients
          ;
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = closeCacheTask
          threadGroups = giiClients, giiProvider
          ;
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = closeStatisticsTask
          ;

THREADGROUP creator totalThreads = 4 totalVMs = 2 clientNames = client1;
THREADGROUP giiClients totalThreads = ${numGiiClients} totalVMs = ${numGiiClients};
THREADGROUP giiProvider totalThreads = 1 totalVMs = 1 clientNames = client2;

hydra.Prms-maxResultWaitSec = 600;  
hydra.Prms-totalTaskTimeSec = 7200; // this test is workload based 

hydra.ClientPrms-vmQuantities = 2  ${numGiiClients}    1;
hydra.ClientPrms-vmThreads    = 2        1             1;

hydra.VmPrms-extraVMArgs = -Xmx750m;

cacheperf.CachePerfPrms-trimIterations = ${trimIterations};
cacheperf.CachePerfPrms-workIterations = ${workIterations};
cacheperf.CachePerfPrms-maxKeys        = ${workIterations};

hydra.GemFirePrms-mcastFlowControlByteAllowance = 200000;
hydra.GemFirePrms-memberTimeout = 15000;

cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size = range 10 1024 egnar;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names      = giiProvider    other;
hydra.RegionPrms-dataPolicy = ${dataPolicy};
hydra.RegionPrms-scope      = ${scope};
