hydra.Prms-testRequirement = "
Using vm regions, test the correctness of values that concurrently change during a getInitialImage,
which gets values by preferring one source cache over others";

hydra.Prms-testDescription = "
This test creates a VM region, then does invalidates, localInvalidates,
destroys, localDestroys, adds new keys, updates existing keys all while
a getInitialImage is occurring. Values are checked for correctness after
the getInitialImage. The getInitalImage will obtain its entries by preferring 
a replicated cache over others.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparamsN.inc;
hydra.ClientPrms-names        = gii1Client gii2Client gii3Client loadClient opClient;

hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 5;

// 3 different VMs will be doing getInitialImage; define a thread for the getInitialImage
// in each of those 3 VMs, and define thread groups for the remaining 4 threads in each
// VM; this takes care of the first 3 VMs
THREADGROUP getInitImageThread1 totalThreads = 1  totalVMs = 1  clientNames = gii1Client;
THREADGROUP threadsInGetInitImageVM1 totalThreads = 4  totalVMs = 1  clientNames = gii1Client;

THREADGROUP getInitImageThread2 totalThreads = 1  totalVMs = 1  clientNames = gii2Client;
THREADGROUP threadsInGetInitImageVM2 totalThreads = 4  totalVMs = 1  clientNames = gii2Client;

THREADGROUP getInitImageThread3 totalThreads = 1  totalVMs = 1  clientNames = gii3Client;
THREADGROUP threadsInGetInitImageVM3 totalThreads = 4  totalVMs = 1  clientNames = gii3Client;

// thread to initially load the region; this is the 4th VM
THREADGROUP loadThreads totalThreads = 5 totalVMs = 1 clientNames = loadClient;

// this is the 5th VM
THREADGROUP opThreads  totalThreads = 5 totalVMs = 1 clientNames = opClient;

STARTTASK    taskClass     = getInitialImage.InitImageTest taskMethod = StartTask_initialize
             clientNames = loadClient;

STARTTASK     taskClass     = util.RegionDefinition  taskMethod = HydraTask_initialize;

// initialize the cache now in the VMs that will getInitialImage, rather than later. This 
// is so the threads can get right to the getInitialImage while the other VMs are concurrently
// doing entry operations
INITTASK     taskClass     = getInitialImage.InitImageTest taskMethod = HydraTask_initCache
             threadGroups  = getInitImageThread1, getInitImageThread2, getInitImageThread3;

// dataPolicy specified by giiSourceDataPolicy
INITTASK     taskClass     = getInitialImage.InitImageTest taskMethod = HydraTask_loadRegion
             getInitialImage.InitImagePrms-useCacheLoader = true
             getInitialImage.InitImagePrms-cacheLoaderClass = getInitialImage.ClientLoader
             threadGroups  = loadThreads;
 
// dataPolicy specified by giiSourceDataPolicy
INITTASK     taskClass     = getInitialImage.InitImageTest taskMethod = HydraTask_loadRegionWithGets
             getInitialImage.InitImagePrms-useCacheLoader = false
             threadGroups  = opThreads;
 
TASK         taskClass     = getInitialImage.InitImageTest taskMethod = HydraTask_doOps
             maxTimesToRun = 5
             threadGroups  = opThreads;
 
TASK         taskClass     = getInitialImage.InitImageTest 
             taskMethod    = HydraTask_doGetInitImage
             util.CachePrms-dataPolicyAttribute = REPLICATE
             threadGroups  = getInitImageThread1, getInitImageThread2, getInitImageThread3
             maxTimesToRun = 3;

TASK         taskClass     = getInitialImage.InitImageTest 
             taskMethod    = HydraTask_blockedGetRegion
             util.CachePrms-dataPolicyAttribute = REPLICATE
             threadGroups  = threadsInGetInitImageVM1, threadsInGetInitImageVM2, threadsInGetInitImageVM3
             maxTimesToRun = 12;

CLOSETASK     taskClass     = asyncMsg.AsyncMsgTest  taskMethod = HydraTask_createDistAckRegion
             threadGroups  = opThreads, loadThreads, getInitImageThread1, getInitImageThread2, getInitImageThread3;


CLOSETASK    taskClass     = asyncMsg.AsyncMsgTest  taskMethod = HydraTask_waitForEventsByPut
             threadGroups  = opThreads, loadThreads, getInitImageThread1, getInitImageThread2, getInitImageThread3;

CLOSETASK    taskClass     = getInitialImage.InitImageTest taskMethod  = HydraTask_verifyNonBlocking
             threadGroups  = getInitImageThread1, getInitImageThread2, getInitImageThread3;

CLOSETASK    taskClass     = getInitialImage.InitImageTest taskMethod  = HydraTask_verifyEventCounters
             threadGroups  = getInitImageThread1, getInitImageThread2, getInitImageThread3;

CLOSETASK    taskClass     = getInitialImage.InitImageTest taskMethod  = HydraTask_verifyRegionContents
             threadGroups  = getInitImageThread1, getInitImageThread2, getInitImageThread3;

CLOSETASK taskClass    = getInitialImage.InitImageTest
          taskMethod   = HydraTask_verifyGII
          threadGroups = getInitImageThread1, getInitImageThread2, getInitImageThread3
          ;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 1800;
hydra.Prms-maxResultWaitSec = 1800;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-alwaysDoEndTasks = false;

// Logging params
hydra.log.LogPrms-file_logging = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 250;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;

util.ValueHolderPrms-useExtraObject = true;

util.CacheDefPrms-cacheSpecs = "
   specName = cache1:
       searchTimeout = 2400:
       evictionHeapPercentage = 60:
   ";

// don't specify dataPolicy here; it is specified above in the task attributes
// and in giiSourceDataPolicy
util.RegionDefPrms-regionSpecs = "
   specName = region1:
       scope = ack noack: 
       eviction = heap:
       evictionAction = overflowToDisk:
       persistBackup = false: 
       isSynchronous = true false: 
       timeInterval = 10: 
       bytesThreshold = 0 1 100 1000: 
       numDiskDirs = 1 2 3 4:
   ";
util.RegionDefPrms-VMRegionSpecName = region1;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

hydra.VmPrms-extraVMArgs = "-Xms200m -Xmx200m";

getInitialImage.InitImagePrms-numKeys = 50000;
getInitialImage.InitImagePrms-numNewKeys = 20000;
getInitialImage.InitImagePrms-useCacheLoader = ONEOF true false FOENO;

// source dataPolicy will cause getInitialImage to prefer one source cache to another
getInitialImage.InitImagePrms-giiSourceDataPolicy = 
   ONEOF 
         replicate-replicate
         replicate-normal
         replicate-preloaded
   FOENO;

getInitialImage.InitImagePrms-giiPerEntrySleepMS = 1;

