include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-testDescription = " Test behavior of diskReg recovery while handling (blocking) updates from a 2nd VM";
hydra.Prms-testRequirement = " TBD ";

THREADGROUP creator totalThreads = 1 totalVMs = 1 clientNames = client1;
THREADGROUP putter  totalThreads = 1 totalVMs = 1 clientNames = client2;

INITTASK taskClass  = getInitialImage.InitImageClient
         taskMethod = openStatisticsTask
         ;
INITTASK taskClass    = getInitialImage.InitImageClient
         taskMethod   = openCacheTask
         threadGroups = creator
         hydra.ConfigPrms-regionConfig = creator
         ;
INITTASK taskClass    = getInitialImage.InitImageClient
         taskMethod   = openCacheTask
         threadGroups = putter
         hydra.ConfigPrms-regionConfig = putter
         ;
INITTASK taskClass    = getInitialImage.InitImageClient
         taskMethod   = createDataTask
         threadGroups = creator
      	 batch
      	 cacheperf.CachePerfPrms-keyAllocation          = sameKeys
      	 cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnMaxKey
      	 cacheperf.CachePerfPrms-warmupTerminatorMethod = none
         ;
INITTASK taskClass    = getInitialImage.InitImageClient
         taskMethod   = getDataTask
         threadGroups = putter
	       batch
	       cacheperf.CachePerfPrms-keyAllocation          = sameKeys
	       cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnMaxKey
	       cacheperf.CachePerfPrms-warmupTerminatorMethod = none
         ;
INITTASK taskClass    = getInitialImage.InitImageClient
         taskMethod   = closeCacheTask
         threadGroups = creator
         ;
INITTASK taskClass  = getInitialImage.InitImageClient
         taskMethod = openStatisticsTask
         ;

TASK taskClass    = getInitialImage.InitImageClient
     taskMethod   = putDataComparisonTask
     threadGroups = putter
     cacheperf.CachePerfPrms-keyAllocation           = sameKeysRandomWrap
     cacheperf.CachePerfPrms-warmupTerminatorMethod  = none
     cacheperf.CachePerfPrms-taskTerminatorMethod    = terminateOnTotalIterations
     cacheperf.CachePerfPrms-taskTerminatorFrequency = 60 seconds
     ;
TASK taskClass     = getInitialImage.InitImageClient
     taskMethod    = timedOpenCacheTask
     threadGroups  = creator
     maxTimesToRun = 1
     hydra.ConfigPrms-regionConfig = creator
     ;

CLOSETASK taskClass    = getInitialImage.InitImageClient
          taskMethod   = verifyGII
          threadGroups = creator
          getInitialImage.InitImagePrms-expectDeltaGII = true
          ;
CLOSETASK taskClass    = getInitialImage.InitImageClient
          taskMethod   = validateMaxKeysRegionEntriesTask
          threadGroups = creator
          ;
CLOSETASK taskClass    = getInitialImage.InitImageClient
          taskMethod   = closeCacheTask
          threadGroups = creator, putter
          ;
CLOSETASK taskClass  = getInitialImage.InitImageClient
          taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass  = getInitialImage.InitImageClient
          taskMethod = reportTrimIntervalsTask
          ;

ENDTASK taskClass   = getInitialImage.InitImageClient
        taskMethod  = verifyOpsNotBlocked
        clientNames = client1
        getInitialImage.InitImagePrms-opStatName = puts
        getInitialImage.InitImagePrms-minOps     = 200
        ;

hydra.Prms-maxResultWaitSec = 600;  // 10 minutes
hydra.Prms-totalTaskTimeSec = 3600; // 6 hours

hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 1;

hydra.VmPrms-extraVMArgs = -Xmx750m;

cacheperf.CachePerfPrms-trimIterations = ${trimIterations};
cacheperf.CachePerfPrms-workIterations = ${workIterations};
cacheperf.CachePerfPrms-batchSize      = ${batchSize};
cacheperf.CachePerfPrms-maxKeys        = 10000;
cacheperf.CachePerfPrms-objectType     = objects.ArrayOfByte;

objects.ArrayOfBytePrms-size = range 10 1024 egnar;

hydra.ConfigPrms-cacheConfig = cache;

hydra.CachePrms-names = cache;

hydra.RegionPrms-names           = creator               putter;
hydra.RegionPrms-dataPolicy      = persistentReplicate;
hydra.RegionPrms-diskStoreName   = disk;
hydra.RegionPrms-diskSynchronous = false;
hydra.RegionPrms-scope           = ack;

hydra.DiskStorePrms-names        = disk;
hydra.DiskStorePrms-queueSize    = 0;
hydra.DiskStorePrms-timeInterval = 1000;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/getInitialImage/getInitialImagePutsImpact.spec;
