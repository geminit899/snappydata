hydra.Prms-testRequirement = "Test that shutDownAllMembers stops the appropriate vms";
hydra.Prms-testDescription = "Test shutDownAllMembers with vms, locators and admin vms in the same ds";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_4_locator.inc;

// all subgroups are peers.
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
THREADGROUP groupAThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost}
                                    * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP groupBThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost}
                                    * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP overlapThreads
    totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost}
                                    * ${${C}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;
THREADGROUP adminThreads
    totalThreads = fcn ${${D}Hosts} * ${${D}VMsPerHost}
                                    * ${${D}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${D}\", ${${D}Hosts}, true)"
                   ncf;

// init the locator vms
INITTASK taskClass = admin.ShutDownAllMembersTest taskMethod = HydraTask_initLocator
         runMode = always
         threadGroups = locatorThreads;

// GroupA vms only define the partitioned region
INITTASK     taskClass   = admin.ShutDownAllMembersTest  taskMethod = HydraTask_initialize
             threadGroups = groupAThreads
             admin.ShutDownAllMembersPrms-regionConfigName = prRegion
             runMode = always;

// GroupB vms only define the replicate region
INITTASK     taskClass   = admin.ShutDownAllMembersTest  taskMethod = HydraTask_initialize
             threadGroups = groupBThreads
             admin.ShutDownAllMembersPrms-regionConfigName = replicateRegion
             runMode = always;

// overlap vms define both the partitioned region and the replicate region
INITTASK     taskClass   = admin.ShutDownAllMembersTest  taskMethod = HydraTask_initialize
             threadGroups = overlapThreads
             admin.ShutDownAllMembersPrms-regionConfigName = prRegion
             runMode = always;
INITTASK     taskClass   = admin.ShutDownAllMembersTest  taskMethod = HydraTask_initialize
             threadGroups = overlapThreads
             admin.ShutDownAllMembersPrms-regionConfigName = replicateRegion
             runMode = always;

// init the admin vms
INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = adminThreads;

INITTASK     taskClass     = admin.ShutDownAllMembersTest  taskMethod = HydraTask_shutDownAllMembers
             threadGroups = adminThreads;

// whether the vm has been disconnected or not
INITTASK     taskClass     = admin.ShutDownAllMembersTest  taskMethod = HydraTask_verifyVmStatus
             admin.ShutDownAllMembersPrms-expectVmShutDown = true
             threadGroups = groupAThreads, groupBThreads, overlapThreads;

INITTASK     taskClass     = admin.ShutDownAllMembersTest  taskMethod = HydraTask_verifyAdminVmStatus
             admin.ShutDownAllMembersPrms-expectVmShutDown = false
             threadGroups = adminThreads;

hydra.CachePrms-names            = cache1;
hydra.CachePrms-searchTimeout    = 600;

hydra.RegionPrms-names           = prRegion         replicateRegion;
hydra.RegionPrms-regionName      = prTestRegion     replicateTestRegion;
hydra.RegionPrms-dataPolicy      = partition        replicate;
hydra.RegionPrms-partitionName   = pr               none;
hydra.PartitionPrms-names        = pr;
