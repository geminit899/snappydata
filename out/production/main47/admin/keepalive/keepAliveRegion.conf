/* Basic test for using Admin API to create "keep alive" regions in a remote VM.
   Hydra start task defines the regions in the cache hosted by the Hydra-
   mannaged VM.  The next start task starts a remote cache server VM and defines the
   "keep alive" regions.  One of the "keep alive"  regions will use mirroring to get data from one of the
   regions defined in the Hydra VM cache.  The other region will use a cacheloader.
   After the Start tasks complete, Hydra stops that VM, the remote cache server
   VM remains running.

   Init tasks define (but do not load data) into the regions in the test VMs 
   (mirroring should distribute data from the Cache Server VM region
    to the new VMs)
   Next the cacheLoader.smoke test is run:
   There are two objects in the cache: 
      MasterData: value is explicitly set via pug
      CachedData: value comes from a cacheLoader, load method
                  simply reads and returns MasterData

   This test uses two GemFire systems with two VMs attached to each.
   The cacheLoader is defined only in client1a's VM.
   One thread in client1a (cacheLoaderAndUpdater) performs the following
   update every 5 seconds:
      increment MasterData
      invalidate CachedData
   The other threads constantly read the value of CachedData.

   Finally End Tasks validate the region data and
   stop all remote Cache Server vm.
*/

hydra.Prms-testDescription = "Use VM regions in dedicated cache server vm to keep alive region data for new VMs";
hydra.Prms-testRequirement = "TBD";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparams2.inc;
include $JTESTS/admin/keepalive/2sys.inc;



/* define and initialize data in hydra-managed VM, use mirroring to 
   distribute data to a remote vm which has been started via admin API
*/

STARTTASK taskClass   = util.CacheBB taskMethod  = HydraTask_initialize
          clientNames = client1a
          ;

STARTTASK taskClass   = cacheLoader.smoke.Client  taskMethod  = initClientTask
          ;

STARTTASK taskClass = cacheLoader.smoke.Client  taskMethod = defineCacheRegions
	  cacheLoader.smoke.TestParms-defineCacheLoader = true
          clientNames = client1a
          ;

STARTTASK taskClass   = cacheLoader.smoke.Client  taskMethod  = initializeDataTask
          clientNames = client1a
          ;

/* Use admin API to define "keep alive" region in remove CacheServer VM */
STARTTASK taskClass    = admin.keepalive.RemoteVmTest taskMethod = initializeForAdminTask
          clientNames = client2c
          ;

STARTTASK taskClass    = admin.keepalive.RemoteVmTest taskMethod = startCacheServerTask
          clientNames = client2c
          ;

STARTTASK taskClass = admin.keepalive.RemoteVmTest taskMethod = defineCacheServerRegionsTask
          clientNames = client2c
          ;


/* Only VM running is CacheServer.  Verify new VMs can get data from "keep alive" region */
INITTASK taskClass   = cacheLoader.smoke.Client  taskMethod  = initClientTask
          ;


INITTASK taskClass   = cacheLoader.smoke.Client  taskMethod  = defineCacheRegions
	  threadGroups = otherInitializers, cacheLoaderAndUpdater
	  cacheLoader.smoke.TestParms-defineCacheLoader = false
          ;

TASK      taskClass   = cacheLoader.smoke.Client  taskMethod  = updateTask
	  threadGroups = cacheLoaderAndUpdater   startInterval=5
          ;

TASK      taskClass   = cacheLoader.smoke.Client  taskMethod  = readTask
	  threadGroups = default, otherInitializers
          ;

CLOSETASK taskClass   = cacheLoader.smoke.Client  taskMethod  = summarizeClientTask
          ;

CLOSETASK taskClass   = cacheLoader.smoke.Client  taskMethod  = verifyResultsTask
	  threadGroups = otherInitializers
          ;


CLOSETASK taskClass   = cacheLoader.smoke.Client  taskMethod  = closeCacheTask
          ;


// Only one client per ENDTASK to ensure Hydra does ENDTASK stopAllCacheServersTask last
ENDTASK   taskClass   = cacheLoader.smoke.Client  taskMethod  = defineCacheRegions
          clientNames = client1a
	  cacheLoader.smoke.TestParms-defineCacheLoader = false
          ;


ENDTASK   taskClass   = cacheLoader.smoke.Client  taskMethod  = verifyResultsTask
          clientNames = client1a
          ;

ENDTASK   taskClass   = cacheLoader.smoke.Client  taskMethod  = closeCacheTask
          clientNames = client1a 
          ;

ENDTASK   taskClass   = admin.CacheServerAdminTest taskMethod = stopAllCacheServersTask
          clientNames = client1a 
          ;



hydra.Prms-totalTaskTimeSec = 600;
/* want to be sure stopAllCacheServersTask is done
   because the CacheServer VMs are not managed by Hydra 
*/
hydra.Prms-alwaysDoEndTasks = true;

admin.AdminPrms-adminInterface = ADMIN;
admin.AdminPrms-cacheServerHost = localhost;
admin.AdminPrms-cacheServerRemoteCommand = none;
admin.AdminPrms-maxCacheServers = 3;
admin.AdminPrms-defineCacheLoaderRemote = false;

/* timeouts of 0 -> never timeout */
util.CachePrms-scopeAttribute = DISTRIBUTED_ACK;
util.CachePrms-mirrorAttribute = KEYS_VALUES;
util.CachePrms-entryTTLSec = 0;
util.CachePrms-entryTTLAction = INVALIDATE;
util.CachePrms-entryIdleTimeoutSec = 0;
util.CachePrms-entryIdleTimeoutAction = INVALIDATE;

/* tried removing these - but still had cache server start where
   no mcast port specified */

hydra.VmPrms-extraVMArgs = 
   "-DDistributionManager.VERBOSE=true"
   ;

cacheLoader.smoke.TestParms-logDetails = true;
