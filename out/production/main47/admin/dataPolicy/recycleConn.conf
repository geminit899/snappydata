hydra.Prms-testRequirement = "Test entry create/update/destroy/invalidate events";
hydra.Prms-testDescription = "
This test concurrently executes put/invalidate/destroy/get operations to
create entry events. Also used: localInvalidate/localDestroy, entryTTL
entryIdleTimeout, but no locks for running with high concurrency.
";

// In this concurrent test, no validation of event counters can be done: 
// sometimes a get, which results in getting the value from another node, can 
// generate an update event, sometimes an update (put with an existing key) can 
// become a create event if another threads destroys the key between the time
// the test gets the key and issues the put. For this reason, the test cannot
// rely on event counters.
INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams4.inc;

// hydra.ClientPrms-vmQuantities =  3 3 3 1;
hydra.ClientPrms-vmQuantities =  1 1 1 1;
hydra.ClientPrms-vmThreads    =  1 1 1 1;

STARTTASK    taskClass   = event.EventBB
             taskMethod  = HydraTask_initialize 
             clientNames = client1
             ;

STARTTASK    taskClass   = util.CacheBB
             taskMethod  = HydraTask_initialize
             clientNames = client1
             ;

INITTASK     taskClass   = util.RegionDefinition
             taskMethod  = InitTask_initialize
             threadGroups = default
             ;

INITTASK     taskClass   = event.RecycleClient
             taskMethod  = HydraTask_initialize
             threadGroups = default
             ;

TASK         taskClass   = event.RecycleClient
             taskMethod  = HydraTask_doEntryOperations
             threadGroups = default
             ;

//A task to disconnect, sleep & reconnect to GemFire
TASK         taskClass   = event.RecycleClient
             taskMethod  = recycleConnection
             threadGroups = default
             ;

ENDTASK      taskClass   = event.RecycleClient
             taskMethod  = HydraTask_iterate
             ;

// Admin Thread tasks
THREADGROUP admin totalThreads = 1 totalVMs = 1 clientNames = client4;

INITTASK  taskClass    = admin.AdminTest
          taskMethod   = initializeTask
          threadGroups = admin;
          ;

TASK      taskClass    = admin.AdminTest
          taskMethod   = SystemMemberOpsTask
          threadGroups = admin
          ;

CLOSETASK taskClass    = admin.AdminTest
          taskMethod   = dispRegions
          threadGroups = default
          ;

ENDTASK   taskClass  = admin.AdminTest
          taskMethod = validateTest
          ;

admin.AdminPrms-adminInterface = ADMIN;
admin.AdminPrms-systemMembershipListener = admin.AdminSystemMembershipListener;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-alwaysDoEndTasks = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

// Logging params
hydra.log.LogPrms-file_logging = true;

hydra.VmPrms-extraVMArgs += "-Xms500m -Xmx500m -Dremote.call.timeout=120";

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;

//Mike - for defect #42714
event.EventPrms-upperThreshold = 1000000;
event.EventPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
event.EventPrms-lowerThreshold = 500000;
event.EventPrms-lowerThresholdOperations = add;

//lynn - don't use dLocks until 30616 is fixed
//event.EventPrms-useRandomLocks = ONEOF true false false FOENO;
event.EventPrms-useRandomLocks = false;
event.EventPrms-entryOperations = ONEOF add add add update invalidate read destroy localInvalidate localDestroy putIfAbsent remove replace FOENO; 
      // weighted to adds

util.ValueHolderPrms-useExtraObject = false;

util.CacheDefPrms-cacheSpecs = "
   specName = cache1:
   ";

util.RegionDefPrms-regionSpecs = "
   specName = region1:
       regionName = EventRegion:
       scope = ack, noack, global: dataPolicy = replicate:
       entryTTLSec = 20: 
       entryTTLAction = invalidate:
       entryIdleTimeoutSec = 20: 
       entryIdleTimeoutAction = invalidate:
       statisticsEnabled = true:
   ";
util.RegionDefPrms-VMRegionSpecName = region1;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

util.TestHelperPrms-minTaskGranularitySec = 60;
util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;
