hydra.Prms-testRequirement = "Allow multiple writers in WAN Sites without causing data consistency issues";
hydra.Prms-testDescription = "Expect eventual data consistency in WAN Sites with client/server topology and servers hosting partitioned regions.";

//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 180;

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

INITTASK     taskClass = wan.WANClient taskMethod = createLocatorTask
             threadGroups = locator;

INITTASK     taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
             threadGroups = locator;

// create gateway hub & regions
INITTASK     taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = HydraTask_initialize
             hydra.ConfigPrms-gatewayHubConfig = hub
             hydra.ConfigPrms-bridgeConfig = bridge
             hydra.ConfigPrms-regionConfig = serverRegion
             threadGroups = gatewayThreads
             ;

INITTASK     taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = startGatewayHubTask
             hydra.ConfigPrms-gatewayConfig = gateway
             threadGroups = gatewayThreads
             ;

INITTASK     taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-bridgeConfig = bridge
             hydra.ConfigPrms-regionConfig = serverRegion
             threadGroups = default
             ;

INITTASK     taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-regionConfig = clientRegion
             threadGroups = edgeThreads
             ;

TASK         taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_doConcOpsAndVerify
             threadGroups = gatewayThreads, default, edgeThreads
             ;

CLOSETASK    taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
             threadGroups = gatewayThreads, default;

hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.Prms-useFixedRandomInMaster= true;
hydra.Prms-totalTaskTimeSec = 31536000;  // don't let hydra terminate based on time
hydra.Prms-maxResultWaitSec = 1020;  // 17 minutes to avoid timeouts on slow machines
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

// this is the granularity for pausing
util.TestHelperPrms-minTaskGranularitySec = 10;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;

hydra.ConfigPrms-cacheConfig    = cache1;
hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.GatewayHubPrms-names = hub;

hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-maximumQueueMemory = 300;
hydra.GatewayPrms-batchTimeInterval = 10;
hydra.GatewayPrms-diskStoreName = disk;
hydra.GatewayPrms-batchConflation = ONEOF true false FOENO;
hydra.DiskStorePrms-names = disk;

hydra.BridgePrms-names = bridge;
hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

hydra.RegionPrms-names          = clientRegion          serverRegion;
hydra.RegionPrms-partitionName  = none                  dataStorePR;
hydra.RegionPrms-regionName     = partitionedRegion;
hydra.RegionPrms-poolName       = brloader              none;
hydra.RegionPrms-dataPolicy     = default               partition;
hydra.RegionPrms-scope          = local                 default;
hydra.RegionPrms-enableGateway  = false                 true;
hydra.RegionPrms-enableSubscriptionConflation = ONEOF true false FOENO;
hydra.RegionPrms-cacheListeners = util.SilenceListener;

hydra.PoolPrms-names    = brloader;
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper getRandomEndpointsInWanHctSite;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-readTimeout = 30000;

hydra.PartitionPrms-names           = dataStorePR;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-localMaxMemory  = default;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)
parReg.ParRegPrms-entryOperations = ONEOF add putAll putIfAbsent remove replaceNoInval replaceOldNoInval getNew getNew update get destroy FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsentAsCreate FOENO;
parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;

parReg.ParRegPrms-secondsToRun = 1800; // this is the time for the whole run
util.CachePrms-useDeclarativeXmlFile = false;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;

// two bridgeServers per site are gateways (primary/secondary)
// note that the remaining bridgeServer threads will be in the default thread group
THREADGROUP gatewayThreads
  totalThreads = fcn ${wanSites} * 2 * ${bridgeThreadsPerVM} ncf
  clientNames = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"bridge\", ${wanSites}, 2, false, true)"
                 ncf;

THREADGROUP edgeThreads
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)"
                 ncf;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${serverMem} -Xmx${serverMem}\",
          ${bridgeHostsPerSite} * ${wanSites}, true)" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${edgeMem} -Xmx${edgeMem}\",
          ${edgeHostsPerSite} * ${wanSites}, true)" ncf
  ;

hydra.VmPrms-extraVMArgs += "-Dgemfire.enable-consistency-on-old-wan=true";

parReg.ParRegPrms-bridgeOrderingWorkaround = none;
hydra.RegionPrms-concurrencyChecksEnabled = true;

