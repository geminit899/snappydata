hydra.Prms-testRequirement = "Test concurrencyChecksEnabled in client/server configuration with concurrent execution and careful validation.  Servers host replicated regions";
hydra.Prms-testDescription = "
This test executes operations on a client VMs, pauses and carefully validates region size, keys and values. 
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_wan_hct_locator.inc;

hydra.ConfigPrms-cacheConfig  = cache;

hydra.GatewayHubPrms-names = hub;

hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-maximumQueueMemory = 300;
hydra.GatewayPrms-batchTimeInterval = 10;
hydra.GatewayPrms-diskStoreName = disk;
hydra.GatewayPrms-batchConflation = ONEOF true false FOENO;
hydra.DiskStorePrms-names = disk;

hydra.BridgePrms-names = bridge;
hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

hydra.CachePrms-names           = cache;
hydra.RegionPrms-names          = serverRegion  clientRegion;
hydra.RegionPrms-poolName       = none        brloader;
hydra.RegionPrms-dataPolicy     = replicate   default;
hydra.RegionPrms-scope          = ack         local;
hydra.RegionPrms-enableGateway  = true        false;
hydra.RegionPrms-enableSubscriptionConflation = ONEOF true false FOENO;
hydra.RegionPrms-cacheListeners = util.SilenceListener;

hydra.PoolPrms-names    = brloader;
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper getRandomEndpointsInWanHctSite;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-readTimeout = 30000;

// create and start locator
INITTASK     taskClass = versioning.VersioningTest taskMethod = createLocatorTask
             threadGroups = locator;

INITTASK     taskClass = versioning.VersioningTest taskMethod = startAndConnectLocatorTask
             threadGroups = locator;

// create gateway hub & regions
INITTASK     taskClass = versioning.VersioningTest taskMethod = HydraTask_initialize
             hydra.ConfigPrms-gatewayHubConfig = hub
             hydra.ConfigPrms-bridgeConfig = bridge
             hydra.ConfigPrms-regionConfig = serverRegion
             threadGroups = gatewayThreads
             ;

INITTASK     taskClass = versioning.VersioningTest taskMethod = HydraTask_startGatewayHubTask
             hydra.ConfigPrms-gatewayConfig = gateway
             threadGroups = gatewayThreads
             ;

INITTASK     taskClass   = versioning.VersioningTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-bridgeConfig = bridge
             hydra.ConfigPrms-regionConfig = serverRegion
             threadGroups = default
             ;

INITTASK     taskClass   = versioning.VersioningTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-regionConfig = clientRegion
             threadGroups = edgeThreads
             ;

TASK         taskClass   = versioning.VersioningTest  taskMethod = HydraTask_doConcOpsAndVerify
             threadGroups = gatewayThreads, edgeThreads, default
             ;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;

// two bridgeServers per site are gateways (primary/secondary)
// note that the remaining bridgeServer threads will be in the default thread group
THREADGROUP gatewayThreads
  totalThreads = fcn ${wanSites} * 2 * ${bridgeThreadsPerVM} ncf
  clientNames = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"bridge\", ${wanSites}, 2, false, true)"
                 ncf;

THREADGROUP edgeThreads
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)"
                 ncf;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${serverMem} -Xmx${serverMem}\",
          ${bridgeHostsPerSite} * ${wanSites}, true)" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${edgeMem} -Xmx${edgeMem}\",
          ${edgeHostsPerSite} * ${wanSites}, true)" ncf
  ;

hydra.VmPrms-extraVMArgs += "-Dgemfire.enable-consistency-on-old-wan=true";

hydra.Prms-totalTaskTimeSec = 31536000;  // this is workload based
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;
util.RandomValuesPrms-objectDepth = 0;
hydra.GemFirePrms-conserveSockets = true;

util.TestHelperPrms-minTaskGranularitySec = ONEOF 10 20 30 40 FOENO; 

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
versioning.VersionPrms-entryOperations = ONEOF add add getNew update get destroy putIfAbsent replace remove FOENO; 
versioning.VersionPrms-upperThreshold = 250;
versioning.VersionPrms-upperThresholdOperations = ONEOF destroy remove FOENO; 
versioning.VersionPrms-lowerThreshold = 10;
versioning.VersionPrms-lowerThresholdOperations = ONEOF add putIfAbsent FOENO;

versioning.VersionPrms-secondsToRun = 600;

versioning.VersionPrms-useOwnKeys = ${useOwnKeys};
hydra.RegionPrms-concurrencyChecksEnabled = ${concurrencyChecksEnabled};

