hydra.Prms-testRequirement = "Test concurrencyChecksEnabled in p2p config with replicated regions, concurrent execution and careful validation";
hydra.Prms-testDescription = "
This test executes operations on a client VMs, pauses and carefully validates region size, keys and values. 
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_wan_p2p_2_locator.inc;

hydra.ConfigPrms-cacheConfig  = peer;
hydra.ConfigPrms-regionConfig = peer;

hydra.GatewayHubPrms-names = hub;

hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-maximumQueueMemory = 300;
hydra.GatewayPrms-batchTimeInterval = 10;
hydra.GatewayPrms-diskStoreName = disk;
hydra.GatewayPrms-batchConflation = ONEOF true false FOENO;

hydra.DiskStorePrms-names = disk;

hydra.CachePrms-names           = peer;
hydra.RegionPrms-names          = peerRegion;
hydra.RegionPrms-dataPolicy     = replicate;
hydra.RegionPrms-scope          = ack;
hydra.RegionPrms-enableGateway  = true;
hydra.RegionPrms-cacheListeners = versioning.ConflictedOpsListener;

// create and start locator
INITTASK     taskClass = versioning.ConflictedOpsTest taskMethod = createLocatorTask
             threadGroups = locator;

INITTASK     taskClass = versioning.ConflictedOpsTest taskMethod = startAndConnectLocatorTask
             threadGroups = locator;

// create gateway hub & regions
INITTASK     taskClass = versioning.ConflictedOpsTest taskMethod = HydraTask_initialize
             hydra.ConfigPrms-gatewayHubConfig = hub
             hydra.ConfigPrms-regionConfig = peerRegion
             threadGroups = gatewayThreads
             ;

INITTASK     taskClass = versioning.ConflictedOpsTest taskMethod = HydraTask_startGatewayHubTask
             hydra.ConfigPrms-gatewayConfig = gateway
             threadGroups = gatewayThreads
             ;

INITTASK     taskClass   = versioning.ConflictedOpsTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-regionConfig = peerRegion
             threadGroups = peerThreads
             ;

INITTASK     taskClass   = versioning.ConflictedOpsTest  taskMethod = HydraTask_loadRegion
             threadGroups = peerThreads
             ;

TASK         taskClass   = versioning.ConflictedOpsTest  taskMethod = HydraTask_conflictedOpsTest
             threadGroups = gatewayThreads, peerThreads
             ;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;
THREADGROUP gatewayThreads
  totalThreads = fcn ${wanSites} * ${${A}HostsPerSite}
                   * ${gatewayVMsPerHost} * ${gatewayThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"gateway\", ${wanSites}, ${gatewayHostsPerSite}, false, true)"
                 ncf;
THREADGROUP peerThreads
  totalThreads = fcn ${wanSites} * ${${B}HostsPerSite}
                   * ${peerVMsPerHost} * ${peerThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"peer\", ${wanSites}, ${peerHostsPerSite}, false, true)"
                 ncf;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${peerMem} -Xmx${peerMem}\",
          ${gatewayHostsPerSite} * ${wanSites}, true)" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${peerMem} -Xmx${peerMem}\",
          ${peerHostsPerSite} * ${wanSites}, true)" ncf
  ;

hydra.VmPrms-extraVMArgs += "-Dgemfire.enable-consistency-on-old-wan=true";

hydra.Prms-totalTaskTimeSec = 31536000;  // this is workload based
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;
util.RandomValuesPrms-objectDepth = 0;
hydra.GemFirePrms-conserveSockets = true;

util.TestHelperPrms-minTaskGranularitySec = ONEOF 10 20 30 40 FOENO; 

versioning.ConflictedOpsPrms-upperThreshold = 250;
versioning.ConflictedOpsPrms-upperThresholdOperations = ONEOF destroy remove FOENO; 
versioning.ConflictedOpsPrms-lowerThreshold = 10;
versioning.ConflictedOpsPrms-lowerThresholdOperations = ONEOF add putIfAbsent FOENO;

versioning.ConflictedOpsPrms-secondsToRun = 600;
