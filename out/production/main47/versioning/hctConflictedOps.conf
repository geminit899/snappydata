hydra.Prms-testRequirement = "Ensure that we do not fire events for operations which are conflated via conflict resolution";
hydra.Prms-testDescription = "
This test loads a single region with upperThreshold entries prior to the start of the conflictedOpsTask.  
The conflictedOpsTask completes multiple rounds of execution:
- select a leader thread to write the selected key to the BB (while other threads wait)
- all threads atttempt to update this entry simultaneously
- once all have updated (and we have silence), the leader writes the expected value
(from its cache) onto the BB
- all members then validate the selected key and expected value
- In addition, a ConflictedOpsListener verifies that no events are fired where 
  EntryEventImpl.isConcurrencyConflict() returns true.
- The listener also maintains a list of updates for this round of execution and 
  this list is validated across vms (to ensure no extra events are fired).
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost}
                                    * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP edge
  totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost}
                                  * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)" ncf;

hydra.CachePrms-names            = cache;
hydra.CachePrms-searchTimeout    = 600;

hydra.BridgePrms-names           = bridge;
hydra.BridgePrms-maxThreads      = ONEOF default 16 FOENO;      // selector control

hydra.RegionPrms-names           = persistentReplicateRegion replicateRegion persistentPartitionRegion partitionRegion edgeClient;
hydra.RegionPrms-regionName      = TestRegion;
hydra.RegionPrms-cacheListeners  = versioning.ConflictedOpsListener;
hydra.RegionPrms-dataPolicy      = persistentReplicate       replicate       persistentPartition       partition       default;
hydra.RegionPrms-scope           = ack                       ack             default                   default         local;
hydra.RegionPrms-poolName        = none                      none            none                      none            brloader;
hydra.RegionPrms-partitionName   = none                      none            pr                        pr              none;
hydra.RegionPrms-diskSynchronous = true;
hydra.RegionPrms-diskStoreName   = diskStore1                none            diskStore1                none            none;

hydra.PartitionPrms-names = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout = 60000;
hydra.PoolPrms-subscriptionRedundancy = -1;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-allowForceCompaction = true;  // this test explicitly calls compaction
hydra.DiskStorePrms-autoCompact = false;  // this test explicitly calls compaction
hydra.DiskStorePrms-maxOplogSize = 1; // frequent new logs

INITTASK     taskClass   = versioning.ConflictedOpsTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-cacheConfig  = cache
             hydra.ConfigPrms-regionConfig = ${regionConfigName}
             hydra.ConfigPrms-bridgeConfig = bridge
             threadgroups = bridge
             ;

INITTASK     taskClass   = versioning.ConflictedOpsTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-cacheConfig  = cache
             hydra.ConfigPrms-regionConfig = edgeClient
             threadgroups = edge
             ;

INITTASK     taskClass   = versioning.ConflictedOpsTest  taskMethod = HydraTask_loadRegion
             batch
             threadgroups = bridge, edge
             ;

TASK         taskClass   = versioning.ConflictedOpsTest  taskMethod = HydraTask_conflictedOpsTest
             threadgroups = bridge, edge
             ;

hydra.Prms-totalTaskTimeSec = 31536000;  // this is workload based
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;
util.RandomValuesPrms-objectDepth = 0;
hydra.GemFirePrms-conserveSockets = true;

util.TestHelperPrms-minTaskGranularitySec = ONEOF 10 20 30 40 FOENO; 

versioning.ConflictedOpsPrms-upperThreshold = 250;
versioning.ConflictedOpsPrms-upperThresholdOperations = ONEOF destroy remove FOENO; 
versioning.ConflictedOpsPrms-lowerThreshold = 10;
versioning.ConflictedOpsPrms-lowerThresholdOperations = ONEOF add putIfAbsent FOENO;

versioning.ConflictedOpsPrms-secondsToRun = 600;
