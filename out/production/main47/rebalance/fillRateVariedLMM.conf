hydra.Prms-testRequirement = "Verify that capacity is filled at the correct rate
based on varied settings of localMaxMemory. This means that a vm with localMaxMemory N
should contains half the bytes of a vm with localMaxMemory 2*N";
hydra.Prms-testDescription = "
Fill a PR to capacity, then add a new vm and rebalance. Verify that there is now more
capacity available.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP adminThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = rebalance.CapacityTest  taskMethod = HydraTask_initAccessor
             threadGroups = accessorThreads;

INITTASK     taskClass   = rebalance.CapacityTest  taskMethod = HydraTask_initDataStore
             threadGroups = dataStoreThreads;

INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = adminThreads;

INITTASK     taskClass   = rebalance.CapacityTest  taskMethod = HydraTask_loadUntilNumKeys
             threadGroups = accessorThreads, dataStoreThreads
             batch;

INITTASK     taskClass   = rebalance.CapacityTest  taskMethod = HydraTask_verifyRegionSize
             threadGroups = accessorThreads, dataStoreThreads;

INITTASK     taskClass   = rebalance.CapacityTest  taskMethod = HydraTask_recordLocalSize
             threadGroups = dataStoreThreads;
 
INITTASK     taskClass   = rebalance.CapacityTest  taskMethod = HydraTask_verifyVariedLMM
             threadGroups = accessorThreads;

INITTASK     taskClass   = rebalance.CapacityTest  taskMethod = HydraTask_rebalance
             threadGroups = accessorThreads, dataStoreThreads;

INITTASK     taskClass   = rebalance.CapacityTest  taskMethod = HydraTask_verifyRegionSize
             threadGroups = accessorThreads, dataStoreThreads;

INITTASK     taskClass   = rebalance.CapacityTest  taskMethod = HydraTask_recordLocalSize
             threadGroups = dataStoreThreads;
 
INITTASK     taskClass   = rebalance.CapacityTest  taskMethod = HydraTask_verifyVariedLMM
             threadGroups = accessorThreads;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

util.TestHelperPrms-minTaskGranularitySec = 30;

hydra.RegionPrms-names          = accessorRegion     dataStoreRegion;
hydra.RegionPrms-regionName     = partitionedRegion  partitionedRegion;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = pr;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-totalNumBuckets = 1000;

rebalance.RebalancePrms-localMaxMemory = ${localMaxMemory};
rebalance.RebalancePrms-numKeys = 70000;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;
util.AdminHelperPrms-alertListener = rebalance.CapacityAdminListener;
