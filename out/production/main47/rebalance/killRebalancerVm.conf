hydra.Prms-testDescription = "This test creates a partitioned region, then does various entry operations on a known key range. Values are checked for correctness in the close task.  After the initial loading of data, the rebalancer VM is initialized (which adds capacity).  The rebalancer VM is killed during rebalancing.   After the TASK HydraTask_doOps completes, another rebalance is done as the first CLOSETASK.  The test is based on KnownKeys, so validation is performed to ensure that there has been no dataLoss";

CLOSETASK    taskClass   = rebalance.RebalanceTest taskMethod = HydraTask_rebalanceTask
             rebalance.RebalancePrms-verifyBalance = true
             rebalance.RebalancePrms-rebalanceAction = none
             threadGroups = rebalance
             ;

INCLUDE $JTESTS/rebalance/concKnownKeys.inc;

// Initializing the rebalancing VM here provides additional capacity
INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initialize
             threadGroups = rebalance
             runMode = always
             ;

INITTASK     taskClass   = rebalance.RebalanceTest taskMethod = HydraTask_checkPartitionedRegionDetails
             threadGroups = rebalance
             runMode = dynamic
             ;

TASK         taskClass   = rebalance.RebalanceTest taskMethod = HydraTask_rebalanceTask
             rebalance.RebalancePrms-verifyBalance = false
             threadGroups = rebalance
             ;

ENDTASK      taskClass = rebalance.RebalanceTest   taskMethod = HydraTask_verifyTargetEventsProcessed
             clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                 (\"${B}\", ${${B}Hosts}, true)"
                            ncf;

THREADGROUP rebalance
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

rebalance.RebalancePrms-resourceObserver = rebalance.HAResourceObserver;
rebalance.RebalancePrms-targetEvent = rebalancingStarted;
rebalance.RebalancePrms-rebalanceAction = kill;

// since we are killing the rebalancer (a dataStore), 
// we'll need redundantCopies to avoid dataLoss
hydra.PartitionPrms-redundantCopies = 1;
hydra.PartitionPrms-startupRecoveryDelay = ${startupRecoveryDelay};

