hydra.Prms-testDescription = "This test creates a partitioned region, then does various entry operations on a known key range concurrently with PR Rebalance. Values are checked for correctness in the close task.  The rebalancer VM is added after the partition region is loaded (without recovery), so the rebalancer will have work to do while ops are in progress";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct_2_locator.inc;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;

// bridgeServers are divided into two subgroups
// A = newCapacityVM(s), B = original dataStore BridgeServers
THREADGROUP newCapacityThreads
  totalThreads = fcn
                 ${newCapacitybridgeHosts} * ${newCapacitybridgeVMsPerHost} * ${newCapacitybridgeThreadsPerVM} - (${newCapacitybridgeHosts} * ${newCapacitybridgeVMsPerHost})
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"newCapacitybridge\", ${newCapacitybridgeHosts}, true)"
                 ncf;

THREADGROUP oneThreadPerNewCapacityBridge
  totalThreads = fcn
                 ${newCapacitybridgeHosts} * ${newCapacitybridgeVMsPerHost}
                 ncf
  totalVMs = fcn ${newCapacitybridgeHosts} * ${newCapacitybridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"newCapacitybridge\", ${newCapacitybridgeHosts}, true)"
                 ncf;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${initialbridgeHosts} * ${initialbridgeVMsPerHost} * ${initialbridgeThreadsPerVM} -
                 (${initialbridgeHosts} * ${initialbridgeVMsPerHost})
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"initialbridge\", ${initialbridgeHosts}, true)"
                 ncf;

THREADGROUP oneThreadPerBridgeVM
  totalThreads = fcn
                 ${initialbridgeHosts} * ${initialbridgeVMsPerHost}
                 ncf
  totalVMs = fcn ${initialbridgeHosts} * ${initialbridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"initialbridge\", ${initialbridgeHosts}, true)"
                 ncf;

// edge clients
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} -
                 (${edgeHosts} * ${edgeVMsPerHost})
                 ncf 
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

THREADGROUP oneThreadPerEdgeVM
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost}
                 ncf
  totalVMs = fcn ${edgeHosts} * ${edgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

// create cache.xml for rebalancing cache server to use
STARTTASK    taskClass     = rebalance.RebalanceTest taskMethod = HydraTask_initCacheServerXml
             hydra.ConfigPrms-cacheConfig = cacheServerConfig
             hydra.ConfigPrms-regionConfig = cacheServerRegion
             clientNames = newCapacitybridge1;

INCLUDE $JTESTS/rebalance/concKnownKeysBridge.inc;

// Last INITTASK is to add new capacity bridgeServer
INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_dataStoreInitialize
             threadGroups = oneThreadPerNewCapacityBridge;

TASK         taskClass     = rebalance.RebalanceTest taskMethod = HydraTask_rebalanceWithCacheServer
             rebalance.RebalancePrms-verifyBalance = false
             rebalance.RebalancePrms-resourceObserver = rebalance.RebalanceResourceObserver
             rebalance.RebalancePrms-extraCacheServerArgs = -rebalance
             threadGroups = oneThreadPerNewCapacityBridge;

// Last CLOSETASK is to do a final rebalance
CLOSETASK    taskClass     = rebalance.RebalanceTest  taskMethod  = HydraTask_rebalanceWithCacheServer
             rebalance.RebalancePrms-verifyBalance = true
             rebalance.RebalancePrms-resourceObserver = rebalance.RebalanceResourceObserver
             rebalance.RebalancePrms-extraCacheServerArgs = -rebalance
             threadGroups = oneThreadPerNewCapacityBridge;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Dnone\", ${locatorHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms${serverVmSize}m -Xmx${serverVmSize}m \", ${initialbridgeHosts}+${newCapacitybridgeHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms${edgeVmSize}m -Xmx${edgeVmSize}m \", ${edgeHosts}, true)"
                             ncf;

hydra.CachePrms-names               = cacheServerConfig cache1;

hydra.RegionPrms-names              = cacheServerRegion accessorRegion dataStoreRegion;
hydra.RegionPrms-regionName         = testRegion;
hydra.RegionPrms-scope              = default           local          default;
hydra.RegionPrms-partitionName      = cacheServerPR     none           dataStorePR;
hydra.RegionPrms-dataPolicy         = partition         normal         partition;
hydra.RegionPrms-poolName           = none              edgeDescript   none;
hydra.RegionPrms-cacheListeners     = rebalance.CacheServerListener, util.SilenceListener,    hct.BridgeEventListener;

hydra.PartitionPrms-names           = cacheServerPR dataStorePR;
hydra.PartitionPrms-localMaxMemory  = 0             default;
hydra.PartitionPrms-redundantCopies = 1;
hydra.PartitionPrms-totalNumBuckets = 1000;
hydra.PartitionPrms-startupRecoveryDelay = -1;   // default
