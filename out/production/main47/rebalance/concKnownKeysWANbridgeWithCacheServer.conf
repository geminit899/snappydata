hydra.Prms-testDescription = "This test creates a partitioned region, then does various entry operations on a known key range concurrently with PR Rebalance. Values are checked for correctness in the close task.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_wan_hct_locator.inc;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;

// bridge_1_1 will be the last to initialize (after loadRegion) to add new capacity
THREADGROUP newCapacityThreads 
     totalThreads = fcn ${bridgeThreadsPerVM} - 1 ncf 
     totalVMs = 1 
     clientNames  = bridge_1_1;

THREADGROUP oneThreadPerNewCapacityBridge 
     totalThreads = 1 
     totalVMs = 1 
     clientNames  = bridge_1_1;

THREADGROUP bridgeThreads 
   totalThreads = fcn 
      ((${wanSites} * ${bridgeHostsPerSite} * ${bridgeVMsPerHost}) - 1) 
                             * (${bridgeThreadsPerVM} - 1) ncf
  totalVMs = fcn (${wanSites} * ${bridgeHostsPerSite} * ${bridgeVMsPerHost}) - 1 ncf;

THREADGROUP oneThreadPerBridgeVM
  totalThreads = fcn (${wanSites} * ${bridgeHostsPerSite} * ${bridgeVMsPerHost}) - 1 ncf
  totalVMs     = fcn (${wanSites} * ${bridgeHostsPerSite} * ${bridgeVMsPerHost}) - 1 ncf;

// edge threads (all edge threads - 1 per edge)
THREADGROUP edgeThreads
  totalThreads = fcn 
      (${wanSites} * ${edgeHostsPerSite} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}) -
      (${wanSites} * ${edgeHostsPerSite} * ${edgeVMsPerHost}) ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

THREADGROUP oneThreadPerEdgeVM
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite} * ${edgeVMsPerHost} ncf
  totalVMs = fcn ${wanSites} * ${edgeHostsPerSite} * ${edgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

// create cache.xml for rebalancing cache server to use
STARTTASK    taskClass     = rebalance.RebalanceTest taskMethod = HydraTask_initCacheServerXml
             hydra.ConfigPrms-cacheConfig = cacheServerConfig
             hydra.ConfigPrms-regionConfig = cacheServerRegion
             clientNames = bridge_1_1;

INCLUDE $JTESTS/rebalance/concKnownKeysBridge.inc;

// Last INITTASK is to add new capacity bridgeServer
INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_dataStoreInitialize
             threadGroups = oneThreadPerNewCapacityBridge;

TASK         taskClass     = rebalance.RebalanceTest taskMethod = HydraTask_rebalanceWithCacheServer
             rebalance.RebalancePrms-verifyBalance = false
             rebalance.RebalancePrms-resourceObserver = rebalance.RebalanceResourceObserver
             rebalance.RebalancePrms-extraCacheServerArgs = -rebalance
             threadGroups = oneThreadPerNewCapacityBridge;

// Last CLOSETASK is to do a final rebalance
CLOSETASK    taskClass     = rebalance.RebalanceTest  taskMethod  = HydraTask_rebalanceWithCacheServer
             rebalance.RebalancePrms-verifyBalance = true
             rebalance.RebalancePrms-resourceObserver = rebalance.RebalanceResourceObserver
             rebalance.RebalancePrms-extraCacheServerArgs = -rebalance
             threadGroups = oneThreadPerNewCapacityBridge;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                 (\"-Dnone\", ${locatorHostsPerSite}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms${serverVmSize}m -Xmx${serverVmSize}m \", ${bridgeHostsPerSite}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms${edgeVmSize}m -Xmx${edgeVmSize}m \", ${edgeHostsPerSite}, true)"
                             ncf;

hydra.CachePrms-names               = cacheServerConfig cache1;

hydra.RegionPrms-names              = cacheServerRegion accessorRegion dataStoreRegion;
hydra.RegionPrms-enableGateway      = true              false          true;
hydra.RegionPrms-regionName         = testRegion;
hydra.RegionPrms-scope              = default           local          default;
hydra.RegionPrms-partitionName      = cacheServerPR     none           dataStorePR;
hydra.RegionPrms-dataPolicy         = partition         normal         partition;
hydra.RegionPrms-poolName           = none              edgeDescript   none;
hydra.RegionPrms-cacheListeners     = rebalance.CacheServerListener, util.SilenceListener,    hct.BridgeEventListener;

hydra.PartitionPrms-names           = cacheServerPR dataStorePR;
hydra.PartitionPrms-localMaxMemory  = 0             default;
hydra.PartitionPrms-redundantCopies = 1;
hydra.PartitionPrms-totalNumBuckets = 1000;
hydra.PartitionPrms-startupRecoveryDelay = -1;   // default

hydra.PoolPrms-contactAlgorithm       = hydra.PoolHelper getRandomContactsInWanHctSite;

hydra.ConfigPrms-gatewayHubConfig = hub;
hydra.ConfigPrms-gatewayConfig = gateway;

hydra.GatewayHubPrms-names = hub;
hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-maximumQueueMemory = 300;
hydra.GatewayPrms-batchTimeInterval = 10;
hydra.GatewayPrms-diskStoreName = disk;

hydra.DiskStorePrms-names = disk;
