hydra.Prms-testRequirement = "Test partitioned regions with a variety of operations with careful validation and serial execution in a bridge configuration";
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion and carefully
validates for correctness. The data store for the partitioned region is spread
across all VMs. The test uses serial round robin; the first thread
in the round does a random operation, then all other threads in the round
verify their view of the operation. After the last thread in the round verifies,
it then becomes the first in the next round, thus the thread doing the random
operation changes for each round.   The bridgeServers are located on two separate hosts in this NetDown test.  During the test the connection between the two hosts will be dropped; validation should still pass as redundantCopies has been specified to prevent dataLoss.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct_2_locator.inc;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
THREADGROUP ${A}
  totalThreads = fcn
                 ${${A}bridgeHosts} * ${${A}bridgeVMsPerHost} * ${${A}bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"${A}bridge\", ${${A}bridgeHosts}, true)"
                 ncf;
THREADGROUP ${B}
  totalThreads = fcn
                 ${${B}bridgeHosts} * ${${B}bridgeVMsPerHost} * ${${B}bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"${B}bridge\", ${${B}bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         

STARTTASK    taskClass   = splitBrain.SplitBrainBB taskMethod = HydraTask_initialize clientNames = survivingSidebridge1;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators)
//------------------------------------------------------------------------------

/**
 * Starts the locator and connects to admin-only distributed systems.
 */
INITTASK taskClass = splitBrain.SBUtil taskMethod = createLocatorTask
         threadGroups = locator;

INITTASK taskClass = splitBrain.SBUtil taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

// Ensure survivingSide stays on same host w/locator VM (Coordinator)
INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = survivingSide;

// LosingSide servers must connect to the DS after the expected survivors
INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initializeBridgeServer
             threadGroups = losingSide;

INITTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initialize
             threadGroups = edgeThreads;

TASK         taskClass   = parReg.ParRegTest  taskMethod = HydraTask_doRROpsAndVerify
             threadGroups = survivingSide, edgeThreads;

TASK     taskClass = rebalance.RebalanceTest taskMethod = HydraTask_rebalanceTask
         rebalance.RebalancePrms-resourceObserver = rebalance.NetDownResourceObserver
         maxTimesToRun = 1
         startInterval = 180
         rebalance.RebalancePrms-waitForNetworkDrop = true
         rebalance.RebalancePrms-verifyBalance = false
         threadGroups = survivingSide;

CLOSETASK taskClass = rebalance.RebalanceTest taskMethod = HydraTask_rebalanceTask
         rebalance.RebalancePrms-verifyBalance = true
         threadGroups = survivingSide;
  
CLOSETASK taskClass = splitBrain.SBUtil taskMethod = restoreConnection
          threadGroups = locator;
  
CLOSETASK   taskClass = splitBrain.NetworkPartitionTest taskMethod = closeCacheAndDisconnectFromDS
            threadGroups = survivingSide;

hydra.GemFirePrms-enableNetworkPartitionDetection = true;
hydra.GemFirePrms-disableAutoReconnect = true;
splitBrain.SplitBrainPrms-hostDescription1 = "survivingSidebridgehost1";
splitBrain.SplitBrainPrms-hostDescription2 = "losingSidebridgehost1";
splitBrain.SplitBrainPrms-dropWaitTimeSec = 180;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion            dataStoreRegion;
hydra.RegionPrms-regionName     = testRegion              testRegion;
hydra.RegionPrms-scope          = local                   default;
hydra.RegionPrms-poolName       = edgeDescript            none;
hydra.RegionPrms-dataPolicy     = default                 partition;
hydra.RegionPrms-cacheListeners = util.SilenceListener,   hct.BridgeEventListener;
hydra.RegionPrms-partitionName  = none                    pr;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-recoveryDelay = 0;  // IMMEDIATE on member departure

parReg.ParRegPrms-numOpsPerTask = 100;

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)

parReg.ParRegPrms-entryOperations = ONEOF add add add add update get destroy invalidate FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdOperations = add;

// Pool Config
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-readTimeout            = 60000;
hydra.PoolPrms-threadLocalConnections = true; // see Bug 37157
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;
hydra.PoolPrms-subscriptionRedundancy   = ${redundantCopies};

// define the bridge servers
hydra.BridgePrms-names                = bridge;



