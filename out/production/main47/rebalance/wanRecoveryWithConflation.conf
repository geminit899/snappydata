hydra.Prms-testRequirement = "Test PR Recovery when BridgeServer/Gateway recycled";
hydra.Prms-testDescription = "In this WAN Test, there are ${wanSites} WAN Sites, each with a primary & secondary BridgeServer/GatewayHub hosting a PartitionedRegion (redundantCopies = 1).  Edge clients execute putSequentialKeys, creating a new key and updating the value for that key from 1-1000.  An IncreasingValuesListener in the edge clients watches for skips and duplicates in the updates.  The primary in WAN Site #1 is recycled via dynamic stopStart.  At the end of the test, edge clients validate the keys of each entry against the server region keySet.  All keys should have the value 1000 (ITERATIONS) at the end of each round.  Execution time is based on the number of rounds of the recycle sequence.";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;


//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = rebalance.WANRecoveryTest taskMethod = createLocatorTask
         threadGroups = locator;

INITTASK taskClass = rebalance.WANRecoveryTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

// Startup the GatewayHub/servers (forcing primary to the first server in each site)
INITTASK taskClass   = rebalance.WANRecoveryTest taskMethod = HydraTask_initializeBridgeServer
         hydra.ConfigPrms-gatewayHubConfig = primary
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         runMode = always
         threadGroups = primary;

INITTASK taskClass   = rebalance.WANRecoveryTest taskMethod = HydraTask_initializeBridgeServer
         hydra.ConfigPrms-gatewayHubConfig = secondary
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         threadGroups = default;

INITTASK taskClass   = rebalance.WANRecoveryTest taskMethod = HydraTask_startGatewayHubTask
         runMode = always
         threadGroups = primary;

INITTASK taskClass   = rebalance.WANRecoveryTest taskMethod = HydraTask_startGatewayHubTask
         threadGroups = default;

INITTASK taskClass   = rebalance.WANRecoveryTest taskMethod  = HydraTask_initializeBridgeClient
         hydra.ConfigPrms-cacheConfig  = edge
         hydra.ConfigPrms-regionConfig = edge
         hydra.ConfigPrms-poolConfig = brclient
         threadGroups = edge;

//------------------------------------------------------------------------------
// recycle primary bridgeServer (to force PR recovery)
//------------------------------------------------------------------------------

TASK     taskClass   = rebalance.WANRecoveryTest taskMethod = HydraTask_recyclePrimary
         maxThreads = 1
         threadGroups = default;

//------------------------------------------------------------------------------
// PRIMARY WORK (cache operations)
//------------------------------------------------------------------------------

TASK     taskClass = rebalance.WANRecoveryTest taskMethod = HydraTask_putSequentialKeys
         threadGroups = edge;

CLOSETASK    taskClass     = rebalance.RebalanceUtil taskMethod  = HydraTask_verifyPrimaries 
             runMode = once 
             threadGroups = primary, default;

CLOSETASK    taskClass     = rebalance.RebalanceUtil taskMethod  = HydraTask_verifyPRMetaData
             runMode = once
             threadGroups = primary, default;

CLOSETASK    taskClass     = rebalance.RebalanceUtil taskMethod  = HydraTask_verifyBucketCopiesBatched
             runMode = once
             batch
             threadGroups = primary, default;

CLOSETASK   taskClass = rebalance.WANRecoveryTest taskMethod = closeCacheAndDisconnectFromDS
            threadGroups = primary, default;

ENDTASK  taskClass = rebalance.WANRecoveryTest taskMethod = HydraEndTask_verifyConflation
         clientNames = bridge_1_1;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;

// One server VM in each WAN Site will be designated as the primary
THREADGROUP primary totalThreads = 1 clientNames = bridge_1_1
                    totalThreads = 1 clientNames = bridge_2_1;

// remaining server VMs will be secondaries (THREADGROUP default)

// EdgeClients
THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)"
                 ncf;

INCLUDE $JTESTS/util/randomValues.inc;
util.ValueHolderPrms-useExtraObject = true;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 200;

hydra.Prms-manageLocatorAgents = false; // turn off master-managed locators
hydra.GemFirePrms-conserveSockets = false;
hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

// test is workload (numExecutions) based, see WANRecoveryPrms-maxExecutions
hydra.Prms-totalTaskTimeSec = 7200; 
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

rebalance.WANRecoveryPrms-maxExecutions = 20;

// region, bridge and edge definitions 
hydra.CachePrms-names           = bridge                     edge;
hydra.RegionPrms-names          = bridge                     edge;
hydra.RegionPrms-regionName     = partitionedRegion;
hydra.RegionPrms-scope          = default                    local;
hydra.RegionPrms-dataPolicy     = partitioned                default;
hydra.RegionPrms-partitionName  = bridge                     none;
hydra.RegionPrms-enableGateway  = true                       false;
hydra.RegionPrms-poolName       = none                       brclient;
hydra.RegionPrms-cacheListeners = util.SilenceListener,      rebalance.IncreasingValuesListener util.SilenceListener;
hydra.PartitionPrms-names       = bridge;
hydra.PartitionPrms-redundantCopies = 1;

// Bridge Config
hydra.BridgePrms-names          = bridge;

hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

// Pool Config
hydra.PoolPrms-names                  = brclient;
hydra.PoolPrms-contactAlgorithm       = hydra.PoolHelper getRandomContactsInWanHctSite;
hydra.PoolPrms-readTimeout            = 60000;
hydra.PoolPrms-threadLocalConnections = true; // see Bug 37157
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;
hydra.PoolPrms-subscriptionRedundancy   = -1;

// Use startupPolicy to control location of primary 
hydra.GatewayHubPrms-names         = primary      secondary;
hydra.GatewayHubPrms-startupPolicy = primary      secondary;

hydra.ConfigPrms-gatewayConfig = gateway;
hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-batchConflation = true;    
hydra.GatewayPrms-enablePersistence = true;
hydra.GatewayPrms-diskStoreName = disk;
hydra.DiskStorePrms-names = disk;

parReg.ParRegPrms-stopModes = ONEOF MEAN_EXIT MEAN_KILL NICE_EXIT NICE_KILL FOENO;

