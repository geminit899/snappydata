hydra.Prms-testRequirement = "Verify that rebalance doesn't run out of memory with server groups";
hydra.Prms-testDescription = "
Fill a PR on servers to 50% of critical, add a replicate region to one of the servers, fill it
to get the server to 80% of critical, then rebalance.";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_4.inc;

hydra.GemFirePrms-distributedSystem =
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"bridgeds\", ${serverGroup1Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"bridgeds\", ${serverGroup2Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"loner\", ${edgeClient1Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"loner\", ${edgeClient2Hosts})"
                              ncf;

THREADGROUP serverGroup1Threads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP serverGroup2Threads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP edgeClient1Threads
    totalThreads = fcn
                   ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;
THREADGROUP edgeClient2Threads
    totalThreads = fcn
                   ${${D}Hosts} * ${${D}VMsPerHost} * ${${D}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${D}\", ${${D}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = rebalance.ServerGroupTest  taskMethod = HydraTask_initServer1
             threadGroups = serverGroup1Threads;

INITTASK     taskClass   = rebalance.ServerGroupTest  taskMethod = HydraTask_initServer2
             threadGroups = serverGroup2Threads;

INITTASK     taskClass   = rebalance.ServerGroupTest  taskMethod = HydraTask_initClient1
             threadGroups = edgeClient1Threads;

INITTASK     taskClass   = rebalance.ServerGroupTest  taskMethod = HydraTask_initClient2
             threadGroups = edgeClient2Threads;

INITTASK     taskClass   = rebalance.ServerGroupTest  taskMethod = HydraTask_loadPRs
             batch
             threadGroups = serverGroup1Threads, serverGroup2Threads;

TASK         taskClass   = rebalance.ServerGroupTest  taskMethod = HydraTask_rebalance
             threadGroups = serverGroup1Threads, serverGroup2Threads
             maxThreads = 1;

TASK         taskClass   = rebalance.ServerGroupTest  taskMethod = HydraTask_loadExtraRegion
             threadGroups = serverGroup2Threads;

CLOSETASK    taskClass   = rebalance.ServerGroupTest  taskMethod = HydraTask_rebalance
             threadGroups = serverGroup1Threads, serverGroup2Threads;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
hydra.CachePrms-resourceManagerName = resourceMan;
             
INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 100 1000 5000 10000 FOENO;
util.ValueHolderPrms-useExtraObject = true;

util.TestHelperPrms-minTaskGranularitySec = 30;

hydra.ResourceManagerPrms-names                  = resourceMan;
hydra.ResourceManagerPrms-criticalHeapPercentage = 100;

hydra.RegionPrms-names           = 
   clientPrRegionGroup1 clientPrRegionGroup2 serverPrRegion clientExtraRegion serverExtraRegion;
hydra.RegionPrms-regionName      = 
   prRegion             prRegion             prRegion       replicatedRegion  replicatedRegion;
hydra.RegionPrms-partitionName   = 
   none                 none                 prSpec         none              none;
hydra.RegionPrms-scope           = 
   local                local                default        local             noAck;
hydra.RegionPrms-dataPolicy      = 
   default              default              partition      default           replicate;
hydra.RegionPrms-poolName        = 
   edgeDescript1        edgeDescript2        none           edgeDescript2     none;


hydra.PartitionPrms-names           = prSpec;
hydra.PartitionPrms-redundantCopies = ONEOF 0 1 2 3 FOENO;

hydra.BridgePrms-names           = bridge1       bridge2;
hydra.BridgePrms-groups          = serverGroup1, serverGroup2;

hydra.PoolPrms-names                  = edgeDescript1 edgeDescript2;
hydra.PoolPrms-serverGroup            = serverGroup1  serverGroup2;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first

hydra.VmPrms-extraVMArgs = -Xmx250m;

hydra.Prms-totalTaskTimeSec = 3600; // test is workload based

