hydra.Prms-testRequirement = "Test partitioned regions with a variety of 
operations and vms that stop and start.  Rebalancer VM is periodically run via the $GEMFIRE/bin/cacheserver script.  
No verification of data can be done (with no redundant copies we are 
guaranteed to lose data), but we are looking for hangs in the absense 
of HA."; 
hydra.Prms-testDescription = "
This test executes operations on entries on a PartitionedRegion while stopping and starting vms.  
";

INCLUDE $JTESTS/rebalance/concParRegStopStart.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

INITTASK     taskClass   = rebalance.RebalanceTest  taskMethod = HydraTask_initCacheServerXml
             hydra.ConfigPrms-cacheConfig = cacheServerConfig
             hydra.ConfigPrms-regionConfig = cacheServerRegion
             threadGroups = rebalance
             ;

// rebalance while other VMs are being recycled (cannot validate balance)
TASK         taskClass   = rebalance.RebalanceTest  taskMethod = HydraTask_rebalanceWithCacheServer
             hydra.ConfigPrms-cacheConfig = cacheServerConfig
             hydra.ConfigPrms-regionConfig = cacheServerRegion
             rebalance.RebalancePrms-resourceObserver = rebalance.RebalanceResourceObserver
             rebalance.RebalancePrms-extraCacheServerArgs = -rebalance
             startInterval = 150
             threadGroups = rebalance
             maxThreads = 1;

// a final rebalance (without stopStart of other VMs) 
CLOSETASK    taskClass   = rebalance.RebalanceTest  taskMethod = HydraTask_rebalanceWithCacheServer
             hydra.ConfigPrms-cacheConfig = cacheServerConfig
             hydra.ConfigPrms-regionConfig = cacheServerRegion
             rebalance.RebalancePrms-resourceObserver = rebalance.RebalanceResourceObserver
             rebalance.RebalancePrms-extraCacheServerArgs = -rebalance
             rebalance.RebalancePrms-verifyBalance = true
             threadGroups = rebalance
             ;

// VM to control the CacheServer.start/start
THREADGROUP rebalance 
    totalThreads = fcn
                   ${rebalanceHosts} * ${rebalanceVMsPerHost} * ${rebalanceThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"rebalance\", ${rebalanceHosts}, true)"
                   ncf;

// install a listener to listen and announce ResourceObserver events
// in the CacheServer VM only
hydra.RegionPrms-cacheListeners = rebalance.CacheServerListener,    none;

hydra.Prms-maxResultWaitSec = 1800;

