include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/newWan/hct.inc;

hydra.GatewaySenderPrms-batchConflationEnabled = ${batchConflation};
hydra.GatewaySenderPrms-batchSize               = 1000;
hydra.GatewaySenderPrms-batchTimeInterval       = 3000;

hydra.BridgePrms-names = bridge;

hydra.PoolPrms-names                 = bridgeloader ;
hydra.PoolPrms-minConnections        = 2;
hydra.PoolPrms-contactAlgorithm      = hydra.EdgeHelper getRandomEndpointsInWanHctSite;
hydra.PoolPrms-subscriptionEnabled   = true;
hydra.PoolPrms-threadLocalConnections  = true;
hydra.PoolPrms-readTimeout           = 60000;

hydra.CachePrms-names       = bridge    edge;
hydra.RegionPrms-names      = bridge    edge;
hydra.RegionPrms-dataPolicy = replicate default;
hydra.RegionPrms-scope      = ack       local;
hydra.RegionPrms-cacheListeners = util.SilenceListener, conflation.ConflationListener;
hydra.RegionPrms-poolName    = none  bridgeloader;
hydra.RegionPrms-enableSubscriptionConflation = ${enableSubscriptionConflation};
hydra.RegionPrms-gatewaySenderNames = sender;

newWan.WANTestPrms-senderQueueRegionListener 	= none;

hydra.GatewaySenderPrms-names               = sender;
hydra.GatewaySenderPrms-parallel            = false;
hydra.GatewaySenderPrms-remoteDistributedSystemsAlgorithm =  hydra.GatewaySenderHelper getRemoteDistributedSystems;
hydra.GatewaySenderPrms-diskStoreName       = senderDisk;

hydra.ConfigPrms-gatewayReceiverConfig      = receiver;
hydra.GatewayReceiverPrms-names             = receiver;

hydra.DiskStorePrms-names               = disk senderDisk;

THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  totalVMs     = fcn ${wanSites} * ${edgeHostsPerSite} * ${edgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
             (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

hydra.Prms-testDescription = "Measure conflation throughput running flat out.";
hydra.Prms-maxResultWaitSec = 1200;
hydra.Prms-totalTaskTimeSec = 6;

cacheperf.CachePerfPrms-maxKeys    = ${maxKeys};
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size           = ${dataSize};

conflation.ConflationPrms-interestBatchSize = 10;
conflation.ConflationPrms-interestTotalSize = ${maxKeys};
conflation.ConflationPrms-taskGranularityMs = 2000;
conflation.ConflationPrms-maxEventWaitSec   = 1200;

INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;     
 
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
               
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          hydra.ConfigPrms-gatewaySenderConfig = sender
          threadGroups = bridge
          ;          
          
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = edge          
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge          
          ;
INITTASK  taskClass = conflation.ConflationClient taskMethod = registerInterestTask
          cacheperf.CachePerfPrms-keyAllocation = sameKeys
          threadGroups = edge
          ;

INITTASK  taskClass = newWan.WANTest taskMethod = HydraTask_initWANComponentsTask
          threadGroups = bridge
          ;          

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-batchSize = 10000
          threadGroups = bridge
          ;       
INITTASK  taskClass = conflation.ConflationClient taskMethod = waitForCreateEventsTask
          threadGroups = edge
          ;
TASK      taskClass = conflation.ConflationClient taskMethod = feedDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysWrap
          threadGroups = bridge
          ;        
CLOSETASK taskClass = conflation.ConflationClient taskMethod = waitForConflatedUpdateEventsTask
          threadGroups = edge
          ;          
CLOSETASK taskClass = newWan.WANTest taskMethod = HydraTask_stopWANComponents
          threadGroups = bridge;          
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = edge;
          
// commented closeCacheTask for bug #44372          
//CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
//          threadGroups = bridge;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask;
ENDTASK   taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          clientNames = edge_1_1;
ENDTASK   taskClass = conflation.ConflationClient taskMethod = validateConflationStatsTask
          conflation.ConflationPrms-conflationStatType = ClientSubscriptionStats
          conflation.ConflationPrms-conflationStat = eventsConflated
          conflation.ConflationPrms-expectNonZeroConflationStat = ${enableSubscriptionConflation}
          clientNames = edge_1_1;
ENDTASK   taskClass = conflation.ConflationClient taskMethod = validateConflationStatsTask
          conflation.ConflationPrms-conflationStatType = GatewaySenderStatistics
          conflation.ConflationPrms-conflationStat = eventsNotQueuedConflated
          conflation.ConflationPrms-expectNonZeroConflationStat = ${batchConflation}
          clientNames = edge_1_1;
ENDTASK   taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          clientNames = edge_1_1;
