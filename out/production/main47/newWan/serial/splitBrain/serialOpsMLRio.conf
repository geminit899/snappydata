hydra.Prms-testRequirement = "Test BridgeServer/Sender failover when primary is forcefully disconnected";
hydra.Prms-testDescription = "In this timed based WAN Test, there are ${wanSites} WAN Sites, each with a primary & secondary BridgeServer/GatewayHub.  For validation purposes, the test is restricted to a single dynamic Region. Only one edge client thread executes random entry operations (in the dynamicRegion) at a time while the primary asynchronously invokes testHooks beSick and playDead in order to force a ForcedDisconnect/failover to the secondary Gateway.  (This avoids BUG 35662: ordering of updates with multiple publishers).  The primary then re-initializes and repeats the beSick/playDead/forcedDisconnect sequence.  The test performs a check of the keys in each dynamicRegion as a CLOSETASK.";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators)
//------------------------------------------------------------------------------

STARTTASK    taskClass   = splitBrain.SplitBrainBB taskMethod = HydraTask_initialize clientNames = bridge_1_1;

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = splitBrain.SBUtil taskMethod = createLocatorTask
         threadGroups = locator;

INITTASK taskClass = splitBrain.SBUtil taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_createGatewaySenderIds         
         threadGroups = primaries, default;
         
INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_initializeBridgeServer
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeClientMembershipListener
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         hydra.ConfigPrms-diskStoreConfig = disk
         threadGroups = primaries;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_initializeBridgeServer
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         hydra.ConfigPrms-diskStoreConfig = disk
         threadGroups = default;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_createAndStartNewWanComponents
         threadGroups = primaries;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_createAndStartNewWanComponents
         threadGroups = default;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod  = HydraTask_initializeBridgeClient
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeServerMembershipListener
         hydra.ConfigPrms-cacheConfig  = edge
         hydra.ConfigPrms-regionConfig = edge
         hydra.ConfigPrms-poolConfig = brclient
         threadGroups = edge, edgeMaster;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod  = HydraTask_createDynamicRegions
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeServerMembershipListener
         hydra.ConfigPrms-cacheConfig  = edge
         hydra.ConfigPrms-regionConfig = edge
         threadGroups = edgeMaster;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod  = HydraTask_waitForDynamicRegions
         threadGroups = edgeMaster;
//------------------------------------------------------------------------------
// cycle primary bridgeServer through sick/playDead -> forcedDisconnect
// then re-initialize
//------------------------------------------------------------------------------

TASK     taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_forceDisconnect
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeClientMembershipListener
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         hydra.ConfigPrms-diskStoreConfig = disk
         startInterval = 60
         maxThreads = 1
         threadGroups = primaries;

//------------------------------------------------------------------------------
// PRIMARY WORK (cache operations)
//------------------------------------------------------------------------------

// We only allow one thread to doEntryOperationss at a time.  
// This is different from serialExecution in that we want forcedDisconnect 
// to happen simultaneously with the entry operations
TASK     taskClass = splitBrain.MLRioTest taskMethod = HydraTask_doEntryOperations
         maxThreads = 1
         threadGroups = edge, edgeMaster;

CLOSETASK   taskClass = splitBrain.MLRioTest taskMethod = HydraCloseTask_validateKeysInRegion
         threadGroups = edge, edgeMaster;

CLOSETASK   taskClass = splitBrain.MLRioTest taskMethod = closeCacheAndDisconnectFromDS
            threadGroups = primaries, default;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;

// One server VM in each WAN Site will be designated as the primary
THREADGROUP primaries totalThreads = ${wanSites}
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"bridge\", ${wanSites}, 1, true, true)"
                 ncf;

// remaining server VMs will be secondaries (THREADGROUP default)

THREADGROUP edgeMaster
  totalThreads = 1
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                      (\"edge\", ${wanSites}, 1, false, true)"
                 ncf;

THREADGROUP edge 
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} - 1 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)"
                 ncf;

// Settings for splitBrain behavior
hydra.GemFirePrms-ackSevereAlertThreshold = 20;
hydra.Prms-manageLocatorAgents = false; // turn off master-managed locators

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;

util.TestHelperPrms-minTaskGranularitySec = 60;
util.OperationsClientPrms-entryOperations = ONEOF add add getNew getNew update get destroy putIfAbsent putIfAbsent replace remove FOENO;
util.OperationsClientPrms-upperThreshold = 500;
util.OperationsClientPrms-upperThresholdOperations = ONEOF remove destroy FOENO;
util.OperationsClientPrms-lowerThreshold = 10;
util.OperationsClientPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsent FOENO;

hydra.GemFirePrms-conserveSockets =false;
hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.Prms-alwaysDoEndTasks = true;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 240;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

// MLRio specific params
splitBrain.MLRioPrms-numRootRegions = ${numRootRegions};
splitBrain.MLRioPrms-numDynamicRegions = ${numDynamicRegions};

// region, bridge and edge definitions 
hydra.CachePrms-names           = bridge                     edge;
hydra.RegionPrms-names          = bridge                     edge;
hydra.RegionPrms-scope          = ack                        local;
hydra.RegionPrms-dataPolicy     = persistent_replicate       normal;
hydra.RegionPrms-diskStoreName  = disk                       none;
hydra.RegionPrms-interestPolicy = all                        default;
hydra.RegionPrms-poolName       = none                       brclient;
hydra.RegionPrms-cacheListeners = splitBrain.SickListener splitBrain.SBListener,
                                  util.SilenceListener;

// Bridge Config
hydra.BridgePrms-names          = bridge;

hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

// Pool Config
hydra.PoolPrms-names                  = brclient;
hydra.PoolPrms-contactAlgorithm       = hydra.PoolHelper getRandomContactsInWanHctSite;
hydra.PoolPrms-readTimeout            = 60000;
hydra.PoolPrms-threadLocalConnections = true; // see Bug 37157
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;
hydra.PoolPrms-subscriptionRedundancy   = -1;

INCLUDE $JTESTS/newWan/wan.inc;

hydra.GemFirePrms-disableAutoReconnect = true;

hydra.GemFirePrms-remoteDistributedSystems =
     fcn "newWan.WANTest.generateRingRemoteDSName
          (\"bridgeds_\", ${wanSites}, ${locatorHostsPerSite})" ncf         
     ,
     none
     ; 
