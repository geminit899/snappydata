hydra.Prms-testRequirement = "Test BridgeServer/Sender failover when primary is forcefully disconnected";
hydra.Prms-testDescription = "In this WAN Test, there are 2 WAN Sites, each with a primary & secondary BridgeServer/Sender.  There are ${numRootRegions} rootRegions and ${numDynamicRegions} dynamicRegions created by an edge client.  Edge clients execute putSequentialKeys, creating a new key and updating the value for that key from 1-1000.  A SequentialValuesListener in the edge clients watches for skips and duplicates in the updates.  The network is dropped between primary and secondary servers in wan site #1 which results in a ForcedDisconnect/failover to the secondary Gateway.  The primary is then stopped/started/re-initialized (maxExecution rounds).  The edge clients validate the keys of each entry in each region, against the server region keySet.  All keys should have the value 1000 (ITERATIONS) at the end of each round.  Execution time is based on the number of rounds of the beSick/playDead/forcedDisconnect sequence.";

include $JTESTS/hydraconfig/hydraparams1.inc;

// WAN Site #1 is spread across two hosts, divided into wan1Lose and wan2Survive clients
// The network partition divides the pimary and secondary Gateways/Sender in WAN Site #1 into 2 partitions (the losingSide and survivingSide).  Wan Site #2 also runs on Host2.
// Host 3: bridgeClients and MasterController

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/gemfireprms.inc;

hydra.HostPrms-names                = host1       host2       host3;
hydra.VmPrms-names                  = vm1         vm2         vm3         vm4         vm5       vm6         vm7       vm8        vm9        vm10;
hydra.VmPrms-hostNames              = host1       host1       host2       host2       host2     host2       host3     host3      host3      host3;

hydra.GemFirePrms-names             = gemfire1    gemfire2    gemfire3    gemfire4    gemfire5  gemfire6    gemfire7  gemfire8   gemfire9   gemfire10;
hydra.GemFirePrms-hostNames         = host1       host1       host2       host2       host2     host2       host3     host3      host3      host3;
hydra.GemFirePrms-distributedSystem = ds1         ds1         ds1         ds1         ds2       ds2         loner     loner      loner      loner;
hydra.GemFirePrms-remoteDistributedSystems =none, ds2,        none,       ds2,        none,     ds1,        none,     none,      none,      none;

hydra.ClientPrms-names              = wan_1_Lose  locator_1_1 wan_1_Win   locator_1_2 wan_2_All locator_2_All edge_1_1  edge_1_2   edge_2_1   edge_2_2;  
hydra.ClientPrms-vmNames            = vm1         vm2         vm3         vm4         vm5       vm6         vm7       vm8        vm9        vm10;
hydra.ClientPrms-gemfireNames       = gemfire1    gemfire2    gemfire3    gemfire4    gemfire5  gemfire6    gemfire7  gemfire8   gemfire9   gemfire10;

hydra.ClientPrms-vmQuantities       = 1           1           1           1           2         1           1         1          1          1;
hydra.ClientPrms-vmThreads          = 1           1           1           1           1         1           2         2          2          2;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators)
//------------------------------------------------------------------------------

STARTTASK  taskClass   = splitBrain.SplitBrainBB taskMethod = HydraTask_initialize 
           clientNames = wan_1_Win;

// Post the ClientVmInfo for the losingSide Gateway/BridgeServer (see StopStartVMs)
INITTASK   taskClass   = util.StopStartVMs taskMethod = StopStart_initTask
           threadGroups = FDtarget;

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = splitBrain.SBUtil taskMethod = createLocatorTask
         threadGroups = locator;

INITTASK taskClass = splitBrain.SBUtil taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_createGatewaySenderIds         
         runMode = always
         threadGroups = leadMember, FDtarget, primary, secondaries;
         
// We must bring up wan_1_Win first (to make it the leadMember/survivingSide)
INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_initializeBridgeServer
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeClientMembershipListener         
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         hydra.ConfigPrms-diskStoreConfig = disk
         runMode = always
         threadGroups = leadMember;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_initializeBridgeServer         
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeClientMembershipListener
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         hydra.ConfigPrms-diskStoreConfig = disk
         runMode = always
         threadGroups = FDtarget, primary;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_initializeBridgeServer
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeClientMembershipListener         
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         hydra.ConfigPrms-diskStoreConfig = disk
         runMode = always
         threadGroups = secondaries;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_createAndStartNewWanComponents
         runMode = always
         threadGroups = FDtarget, primary;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_createAndStartNewWanComponents
         runMode = always
         threadGroups = leadMember, secondaries;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod  = HydraTask_initializeBridgeClient
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeServerMembershipListener
         hydra.ConfigPrms-cacheConfig  = edge
         hydra.ConfigPrms-regionConfig = edge
         hydra.ConfigPrms-poolConfig = brclient
         threadGroups = edge, edgeMaster;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod  = HydraTask_createDynamicRegions
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeServerMembershipListener
         hydra.ConfigPrms-cacheConfig  = edge
         hydra.ConfigPrms-regionConfig = edge
         threadGroups = edgeMaster;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod  = HydraTask_waitForDynamicRegions
         threadGroups = edgeMaster;
//------------------------------------------------------------------------------
// drop network between WAN Site #1 servers -> FD -> re-initialize 
//------------------------------------------------------------------------------

TASK     taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_networkController
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeClientMembershipListener         
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         hydra.ConfigPrms-diskStoreConfig = disk
         maxThreads = 1
         startInterval = 30
         threadGroups = leadMember;

//------------------------------------------------------------------------------
// PRIMARY WORK (cache operations)
//------------------------------------------------------------------------------

TASK     taskClass = splitBrain.MLRioTest taskMethod = HydraTask_putSequentialKeys
         threadGroups = edge, edgeMaster;

CLOSETASK   taskClass = splitBrain.MLRioTest taskMethod = closeCacheAndDisconnectFromDS
            threadGroups = FDtarget, primary, leadMember, secondaries;

THREADGROUP locator
  totalThreads = 3 totalVMs = 3 clientNames = locator_1_1, locator_1_2, locator_2_All;

// One server VM in each WAN Site will be designated as the primary
// The primary in WAN Site #1 is also the FD(forcedDisconnect)Target
THREADGROUP FDtarget totalThreads = 1 totalVMs = 1 clientNames = wan_1_Lose;
THREADGROUP primary  totalThreads = 1 totalVMs = 1 clientNames = wan_2_All;

// Note that wan_1_Win (is both a Secondary and the LeadMember)
THREADGROUP leadMember totalThreads = 1 totalVMs = 1 clientNames = wan_1_Win;
THREADGROUP secondaries totalThreads = 1 totalVMs = 1 clientNames = wan_2_All;

THREADGROUP edgeMaster totalThreads = 1 totalVMs = 1 clientNames  = edge_1_1;

THREADGROUP edge totalThreads = 1 totalVMs = 1 clientNames = edge_1_1
                 totalThreads = 2 totalVMs = 1 clientNames = edge_1_2
                 totalThreads = 2 totalVMs = 1 clientNames = edge_2_1
                 totalThreads = 2 totalVMs = 1 clientNames = edge_2_2;

// Settings for splitBrain behavior
hydra.GemFirePrms-enableNetworkPartitionDetection = true;
hydra.GemFirePrms-disableAutoReconnect = true;
hydra.Prms-manageLocatorAgents = false; // turn off master-managed locators
// We're going to drop the network between the two bridgeServers in WAN Site #1
//splitBrain.SplitBrainPrms-hostDescription1 = "wan_1_Lose";
//splitBrain.SplitBrainPrms-hostDescription2 = "wan_1_Win";

// StopStart VM controls
util.StopStartPrms-stopModes = ONEOF mean_exit mean_kill nice_exit nice_kill FOENO;

INCLUDE $JTESTS/util/randomValues.inc;
util.ValueHolderPrms-useExtraObject = true;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 200;

hydra.GemFirePrms-conserveSockets = false;
hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.Prms-alwaysDoEndTasks = true;

// test is workload (numExecutions) based, see MLRioPrms-maxExecutions
hydra.Prms-totalTaskTimeSec = 3600; 
hydra.Prms-maxResultWaitSec = 360;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

splitBrain.MLRioPrms-maxExecutions = 10;
splitBrain.MLRioPrms-numRootRegions = ${numRootRegions};
splitBrain.MLRioPrms-numDynamicRegions = ${numDynamicRegions};

// region, bridge and edge definitions 
hydra.CachePrms-names           = bridge                     edge;
hydra.RegionPrms-names          = bridge                     edge;
hydra.RegionPrms-scope          = ack                        local;
hydra.RegionPrms-dataPolicy     = persistent_replicate       normal;
hydra.RegionPrms-diskStoreName  = disk                       none;
hydra.RegionPrms-interestPolicy = all                        all;
hydra.RegionPrms-poolName       = none                       brclient;
hydra.RegionPrms-cacheListeners = splitBrain.MLRioFDListener,splitBrain.MLRioSequentialValuesListener util.SilenceListener;
hydra.RegionPrms-evictionAttributes = lruMemorySize 1 splitBrain.MLRioObjectSizer overflowToDisk, // bridge
                                      none;                             // edge

// Bridge Config
hydra.BridgePrms-names          = bridge;

hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

// Pool Config
hydra.PoolPrms-names                  = brclient;
hydra.PoolPrms-contactAlgorithm       = hydra.PoolHelper getRandomContactsInWanHctSite;
hydra.PoolPrms-readTimeout            = 60000;
hydra.PoolPrms-threadLocalConnections = true; // see Bug 37157
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;
hydra.PoolPrms-subscriptionRedundancy   = -1;

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-queueSize = 0;
hydra.DiskStorePrms-timeInterval = 1000;

// configure new wan
hydra.ConfigPrms-gatewaySenderConfig 		= sender;
hydra.GatewaySenderPrms-names 				= sender;
hydra.GatewaySenderPrms-parallel 			= false;
hydra.GatewaySenderPrms-remoteDistributedSystemsAlgorithm =  hydra.GatewaySenderHelper getRemoteDistributedSystems;
hydra.GatewaySenderPrms-batchSize           = ONEOF 100 200 500 FOENO;
hydra.GatewaySenderPrms-batchTimeInterval   = ONEOF 500 1000 2000 1500 2000 FOENO;
hydra.GatewaySenderPrms-maximumQueueMemory  = ONEOF 50 100 150 FOENO;
hydra.GatewaySenderPrms-socketBufferSize    = default;
hydra.GatewaySenderPrms-manualStart  		= false;

// 'disk' is used only when a persistent data policy is selected
// 'senderDisk' is used for sender
hydra.GatewaySenderPrms-diskStoreName 	= senderDisk;
hydra.DiskStorePrms-names 				= disk senderDisk;
hydra.DiskStorePrms-queueSize 			= 10;
hydra.DiskStorePrms-timeInterval 		= 1000;

hydra.ConfigPrms-gatewayReceiverConfig 			  = receiver;
hydra.GatewayReceiverPrms-names 				  = receiver;
hydra.GatewayReceiverPrms-maximumTimeBetweenPings = RANGE 15000 60000 EGNAR;
hydra.GatewayReceiverPrms-socketBufferSize 		  = default;

hydra.RegionPrms-gatewaySenderNames = sender;
