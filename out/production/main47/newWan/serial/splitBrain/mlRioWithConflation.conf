hydra.Prms-testRequirement = "Test BridgeServer/Sender failover when primary is forcefully disconnected";
hydra.Prms-testDescription = "In this WAN Test, there are ${wanSites} WAN Sites, each with a primary & secondary BridgeServer/GatewayHub.  There are ${numRootRegions} rootRegions and ${numDynamicRegions} dynamicRegions created by an edge client.  Edge clients execute putSequentialKeys, creating a new key and updating the value for that key from 1-1000.  An IncreasingValuesListener in the edge clients ensures that all updates (ValueHolders) has increasing modVal (skips in sequence are permitted as the Gateway is configured with batchConflation true).  The primary Gateway uses testHooks beSick and playDead in order to force a ForcedDisconnect/failover to the secondary Gateway.  The primary then re-initializes and repeats the beSick/playDead/forcedDisconnect sequence.  The edge clients validate the keys of each entry in each region, against the server region keySet.  All keys should have the value 1000 (ITERATIONS) at the end of each round.  Execution time is based on the number of rounds of the playSick/beDead/forcedDisconnect sequence.";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators)
//------------------------------------------------------------------------------

STARTTASK    taskClass   = splitBrain.SplitBrainBB taskMethod = HydraTask_initialize clientNames = bridge_1_1;

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = splitBrain.SBUtil taskMethod = createLocatorTask
         threadGroups = locator;

INITTASK taskClass = splitBrain.SBUtil taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_createGatewaySenderIds         
         threadGroups = primary, default;
         
INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_initializeBridgeServer
         hydra.ConfigPrms-gatewayHubConfig = primary
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         hydra.ConfigPrms-diskStoreConfig = disk
         threadGroups = primary;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_initializeBridgeServer
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeClientMembershipListener
         hydra.ConfigPrms-gatewayHubConfig = secondary
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         hydra.ConfigPrms-diskStoreConfig = disk
         threadGroups = default;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_createAndStartNewWanComponents
         threadGroups = primary;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_createAndStartNewWanComponents
         threadGroups = default;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod  = HydraTask_initializeBridgeClient
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeServerMembershipListener
         hydra.ConfigPrms-cacheConfig  = edge
         hydra.ConfigPrms-regionConfig = edge
         hydra.ConfigPrms-poolConfig = brclient
         threadGroups = edge, edgeMaster;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod  = HydraTask_createDynamicRegions
         splitBrain.MLRioPrms-bridgeMembershipListener = splitBrain.BridgeServerMembershipListener
         hydra.ConfigPrms-cacheConfig  = edge
         hydra.ConfigPrms-regionConfig = edge
         threadGroups = edgeMaster;

INITTASK taskClass   = splitBrain.MLRioTest taskMethod  = HydraTask_waitForDynamicRegions
         threadGroups = edgeMaster;
//------------------------------------------------------------------------------
// cycle primary bridgeServer through sick -> forcedDisconnect -> re-init
//------------------------------------------------------------------------------

TASK     taskClass   = splitBrain.MLRioTest taskMethod = HydraTask_healthController
         hydra.ConfigPrms-cacheConfig  = bridge
         hydra.ConfigPrms-regionConfig = bridge
         hydra.ConfigPrms-bridgeConfig = bridge
         hydra.ConfigPrms-diskStoreConfig = disk
         maxThreads = 1
         threadGroups = primary;

//------------------------------------------------------------------------------
// PRIMARY WORK (cache operations)
//------------------------------------------------------------------------------

TASK     taskClass = splitBrain.MLRioTest taskMethod = HydraTask_putSequentialKeys
         threadGroups = edge, edgeMaster;

CLOSETASK   taskClass = splitBrain.MLRioTest taskMethod = closeCacheAndDisconnectFromDS
            threadGroups = primary, default;

ENDTASK  taskClass = splitBrain.MLRioTest taskMethod = HydraEndTask_verifyConflation
         clientNames = bridge_1_1;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;

// One server VM in each WAN Site will be designated as the primary
THREADGROUP primary totalThreads = 1 clientNames = bridge_1_1;

// remaining server VMs will be secondaries (THREADGROUP default)

THREADGROUP edgeMaster
  totalThreads = 1
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                      (\"edge\", ${wanSites}, 1, false, true)"
                 ncf;

THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} - 1 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)"
                 ncf;

// Settings for splitBrain behavior
hydra.GemFirePrms-ackSevereAlertThreshold = 20;
hydra.Prms-manageLocatorAgents = false; // turn off master-managed locators

INCLUDE $JTESTS/util/randomValues.inc;
util.ValueHolderPrms-useExtraObject = true;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 200;

hydra.GemFirePrms-conserveSockets = false;
hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.Prms-alwaysDoEndTasks = true;

// test is workload (numExecutions) based, see MLRioPrms-maxExecutions
hydra.Prms-totalTaskTimeSec = 7200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

splitBrain.MLRioPrms-maxExecutions = 20;
splitBrain.MLRioPrms-numRootRegions = ${numRootRegions};
splitBrain.MLRioPrms-numDynamicRegions = ${numDynamicRegions};

// region, bridge and edge definitions 
hydra.CachePrms-names           = bridge                     edge;
hydra.RegionPrms-names          = bridge                     edge;
hydra.RegionPrms-scope          = ack                        local;
hydra.RegionPrms-dataPolicy     = persistent_replicate       normal;
hydra.RegionPrms-diskStoreName  = disk                       none;
hydra.RegionPrms-interestPolicy = all                        all;
hydra.RegionPrms-poolName       = none                       brclient;
hydra.RegionPrms-cacheListeners = splitBrain.SickListener,   splitBrain.MLRioIncreasingValuesListener util.SilenceListener;
hydra.RegionPrms-evictionAttributes = lruMemorySize 1 splitBrain.MLRioObjectSizer overflowToDisk, // bridge
                                      none;                             // edge

// Bridge Config
hydra.BridgePrms-names          = bridge;

hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

// Pool Config
hydra.PoolPrms-names                  = brclient;
hydra.PoolPrms-contactAlgorithm       = hydra.PoolHelper getRandomContactsInWanHctSite;
hydra.PoolPrms-readTimeout            = 60000;
hydra.PoolPrms-threadLocalConnections = true; // see Bug 37157
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled           = true;
hydra.PoolPrms-subscriptionRedundancy   = -1;

INCLUDE $JTESTS/newWan/wan.inc;
hydra.GatewaySenderPrms-batchConflationEnabled = true;
hydra.GatewaySenderPrms-batchSize               = 1000;
hydra.GatewaySenderPrms-batchTimeInterval       = 3000;

hydra.GemFirePrms-disableAutoReconnect = true;

hydra.GemFirePrms-remoteDistributedSystems =
     fcn "newWan.WANTest.generateRingRemoteDSName
          (\"bridgeds_\", ${wanSites}, ${locatorHostsPerSite})" ncf         
     ,
     none
     ; 
