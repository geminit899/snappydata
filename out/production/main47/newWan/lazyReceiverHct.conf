//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/newWan/wan.inc;
include $JTESTS/newWan/hct.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is peer-to-peer in its own distributed system and each VM 
 is a gateway sender and gateway receiver to other sites. Each locator from a site connects to all locators from next site to form a ring topology between sites. 
 Each sender from a site connects to all other remote sites to form all-to-all topology. The tests first does entry operations and then initialize receivers lazily.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec       = 22000;  //test is load base
hydra.Prms-maxResultWaitSec       = ${resultWaitSec};
newWan.WANTestPrms-maxOperations  = ${maxOps};

//------------------------------------------------------------------------------
// TEST Configuration
//------------------------------------------------------------------------------

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 5 10 20 50 100 500 FOENO;
util.ValueHolderPrms-useExtraObject = true;

hydra.GatewaySenderPrms-batchSize	= 2000;
hydra.RegionPrms-cacheListeners	 = newWan.WANSilenceListener;
//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, Cache, GatewaySender, GatewayReceiver)
//------------------------------------------------------------------------------
/** Configures the locators. */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configures the client cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerCacheTask
         threadGroups = bridge;

/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         threadGroups = bridge;         
         
/** Configures the client region. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerRegionTask
         threadGroups = bridge;

/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         threadGroups = bridge;    

/** Configures the edge client cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initEdgeClientCacheTask
         threadGroups = edge;  
         
//------------------------------------------------------------------------------
// TASK
//------------------------------------------------------------------------------
 
TASK taskClass = newWan.WANTest taskMethod = putSequentialKeysTask  
     threadGroups = edge;

newWan.WANTestPrms-sleepSec = 0;
        
//------------------------------------------------------------------------------
// CLOSETASK 
//------------------------------------------------------------------------------                           
CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = bridge;

/** Configure gateway receiver */
CLOSETASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         threadGroups = bridge;

CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = bridge;
         
CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = bridge;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = validateSequentialKeysTask
          threadGroups = bridge, edge;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge;

RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

CLOSETASK taskClass = newWan.WANTest taskMethod = closeEdgeClientCacheTask
          threadGroups = edge;
                                        
CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;           
         
THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;  
