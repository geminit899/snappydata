//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/newWan/wan.inc;
include $JTESTS/newWan/hct.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is each cache server is a bridge for the edge clients at its site and 
 is a WAN gateway sender and gateway receiver to other sites, with peers doing HA.	
 Each locator from a site connects to all locators from next site to form a ring topology between sites. 
 Each sender from a site connects to all other remote sites to form all-to-all topology. Sender operations such as start/stop/pause/resume are carried out senders.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec       = 22000;  //test is load base
hydra.Prms-maxResultWaitSec       = ${resultWaitSec};
newWan.WANTestPrms-maxOperations  = ${maxOps};

//------------------------------------------------------------------------------
// TEST Configuration
//------------------------------------------------------------------------------
hydra.GatewaySenderPrms-remoteDistributedSystemsAlgorithm =  hydra.GatewaySenderHelper getRingDistributedSystems;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 5 10 20 50 100 500 FOENO;
util.ValueHolderPrms-useExtraObject = true;

newWan.WANTestPrms-senderQueueRegionListener 	= newWan.SerialSenderOpsRegionQueueListener;

util.TestHelperPrms-minTaskGranularitySec = 60;
util.OperationsClientPrms-numOpsPerTask = 1000;
util.OperationsClientPrms-entryOperations = ONEOF add add putAll putIfAbsent replace update getNew get destroy remove FOENO;
util.OperationsClientPrms-upperThreshold = 1000;
util.OperationsClientPrms-upperThresholdOperations = ONEOF remove destroy FOENO;
util.OperationsClientPrms-lowerThreshold = 500;
util.OperationsClientPrms-lowerThresholdOperations = ONEOF putIfAbsent add update putAll FOENO;
newWan.WANOperationsClientPrms-useUniqueKeyPerThread = true;
newWan.WANOperationsClientPrms-numPutAllNewKeys = ONEOF 1 2 3 4 5 FOENO;
newWan.WANOperationsClientPrms-numPutAllExistingKeys = ONEOF 1 2 3 4 5 FOENO;
newWan.WANOperationsClientPrms-senderOperations = ONEOF start stop pause resume FOENO;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = RANGE 1 fcn (${bridgeHostsPerSite} * ${bridgeVMsPerHost}) - 1 ncf EGNAR;
INITTASK     taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask;

//------------------------------------------------------------------------------
//INITIAL WORK (configure locators, Cache, GatewaySender, GatewayReceiver)
//------------------------------------------------------------------------------
/** Configures the locators. */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configures the client cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerCacheTask
         threadGroups = bridge     runMode = always;

/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         threadGroups = bridge     runMode = always;         
         
/** Configures the client region. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerRegionTask
         threadGroups = bridge     runMode = always;

/** Configure gateway receiver */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         threadGroups = bridge     runMode = always;

/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         threadGroups = bridge     runMode = always;      

/** Configures the edge client cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initEdgeClientCacheTask
         threadGroups = edge;

//------------------------------------------------------------------------------
//TASK
//------------------------------------------------------------------------------

TASK taskClass = newWan.WANTest taskMethod = doHASenderOperationAndVerifyTask  
  threadGroups = bridge;

TASK taskClass = newWan.WANTest taskMethod = killPeerAndDoOpsTask  
  threadGroups = bridge maxThreads = 1;     
     
//------------------------------------------------------------------------------
//CLOSETASK 
//------------------------------------------------------------------------------                           
//start all sender if stopped or paused
CLOSETASK taskClass = newWan.WANTest taskMethod = startResumeSenderTask
      threadGroups = bridge;  
      
CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
       threadGroups = bridge;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
       threadGroups = edge;

//CLOSETASK taskClass = newWan.WANTest taskMethod = validateDoEntryOperationTask
//threadGroups = edge;
       
CLOSETASK taskClass = newWan.WANTest taskMethod = closeEdgeClientCacheTask
      threadGroups = edge;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
      threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
      threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
      threadGroups = locator;           


THREADGROUP edge
totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                 * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
               (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;
