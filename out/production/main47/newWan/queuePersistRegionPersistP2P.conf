//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_locator.inc;
include $JTESTS/newWan/wan.inc;
include $JTESTS/newWan/p2p.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is peer-to-peer in its own distributed system and each VM 
 is a gateway sender and gateway receiver to other sites.  Each locator from a site connects to all locators from next site to form a ring topology between sites. 
 Each sender from a site connects to all other remote sites to form all-to-all topology. In this test, first we do operations from all sites, 
 then restart site-1, then start receivers at all sites. In the end verify that the updates are received by all sites. Enabled region persistence and sender queue persistence.";
 
//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec       = 100;
hydra.Prms-maxResultWaitSec       = ${resultWaitSec};

//------------------------------------------------------------------------------
// TEST Configuration
//------------------------------------------------------------------------------

hydra.RegionPrms-names           = peer;
hydra.RegionPrms-regionName		 = peerRegion;
hydra.RegionPrms-dataPolicy      = persistentReplicate;
hydra.RegionPrms-scope           = dack;
hydra.RegionPrms-diskStoreName   = diskStore1;
hydra.RegionPrms-diskSynchronous = true;

hydra.GatewaySenderPrms-persistenceEnabled = true;
hydra.GatewaySenderPrms-diskStoreName = disk;

hydra.DiskStorePrms-names = disk diskStore1;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 5 10 20 50 100 500 FOENO;
util.ValueHolderPrms-useExtraObject = true;

hydra.RegionPrms-cacheListeners	 = newWan.WANSilenceListener;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = fcn (${peerHostsPerSite} * ${peerVMsPerHost}) ncf;

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, Cache, GatewaySender, GatewayReceiver)
//------------------------------------------------------------------------------
// initialize for stop/start
INITTASK     taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask;

/** Configures the locators. */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configures the client cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initPeerCacheTask
         threadGroups = peer runMode = always ;

/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         threadGroups = peer runMode = always;         
         
/** Configures the client region. */
INITTASK taskClass = newWan.WANTest taskMethod = initPeerRegionTask
         threadGroups = peer runMode = always;

/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         threadGroups = peer runMode = always;      
         
INITTASK taskClass = newWan.WANTest taskMethod = putSequentialKeysTask  
     threadGroups = peer runMode = always;
 
INITTASK taskClass = newWan.WANTest taskMethod = waitForListenerSilence  
     threadGroups = peer;
          
TASK taskClass = newWan.WANTest taskMethod = restartMembersTask
          threadGroups = locator  maxTimesToRun = 1
          newWan.WANTestPrms-memberClientName = peer_1; 
          
CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = peer ;

/** Configure gateway receiver */
CLOSETASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         threadGroups = peer;

CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = peer;
         
CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = peer;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = validateSequentialKeysTask
          threadGroups = peer;

RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = peer;
                    
CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = peer;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = peer;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;           
