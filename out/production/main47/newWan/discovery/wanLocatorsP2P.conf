//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_locator.inc;
include $JTESTS/newWan/wan.inc;
include $JTESTS/newWan/p2p.inc;
include $JTESTS/newWan/wan_p2p_locator_2host.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is peer-to-peer in its own distributed system. Locators creates ring topology between wan sites.
Tests create locators at each site, kills locators repeatedly, verify all locators has correct and consistent information.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec       = 22000;  //test is load base
hydra.Prms-maxResultWaitSec       = ${resultWaitSec};
newWan.WANTestPrms-maxOperations  = ${maxOps};

//------------------------------------------------------------------------------
// TEST Configuration
//------------------------------------------------------------------------------
hydra.Prms-serialExecution=true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 5 10 20 50 100 500 FOENO;
util.ValueHolderPrms-useExtraObject = true;

newWan.WANTestPrms-senderQueueRegionListener 	= none;

util.TestHelperPrms-minTaskGranularitySec = 10;
util.OperationsClientPrms-numOpsPerTask = 100;
util.OperationsClientPrms-entryOperations = ONEOF add add putAll putIfAbsent replace update getNew get destroy remove FOENO;
util.OperationsClientPrms-upperThreshold = 1000;
util.OperationsClientPrms-upperThresholdOperations = ONEOF remove destroy FOENO;
util.OperationsClientPrms-lowerThreshold = 500;
util.OperationsClientPrms-lowerThresholdOperations = ONEOF putIfAbsent add update putAll FOENO;
newWan.WANOperationsClientPrms-useUniqueKeyPerThread = true;
newWan.WANOperationsClientPrms-numPutAllNewKeys = ONEOF 1 2 3 4 5 FOENO;
newWan.WANOperationsClientPrms-numPutAllExistingKeys = ONEOF 1 2 3 4 5 FOENO;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = RANGE 1 fcn (${locatorHostsPerSite} * ${locatorVMsPerHost}) -1  ncf EGNAR;

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, Cache, GatewaySender, GatewayReceiver)
//------------------------------------------------------------------------------
// initialize for stop/start
INITTASK     taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask;

/** Configures the locators. */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator runMode = always;
         
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectAndVerifyLocatorTask
         threadGroups = locator runMode = always;

/** Configures the client peer with gateway senders and receiver. */
INITTASK taskClass = newWan.WANTest taskMethod = HydraTask_initPeerTask
         threadGroups = peer;

//------------------------------------------------------------------------------
// TASK
//------------------------------------------------------------------------------
 
TASK taskClass = newWan.WANTest taskMethod = killAndVerifyLocatorsTask  
     threadGroups = locator;

TASK taskClass = newWan.WANTest taskMethod = doEntryOperationTask  
     threadGroups = peer
     endInterval=5 ;
     
newWan.WANTestPrms-sleepSec = 0;
        
//------------------------------------------------------------------------------
// CLOSETASK 
//------------------------------------------------------------------------------                           
CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = peer;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = peer;          

CLOSETASK taskClass = newWan.WANTest taskMethod = validateDoEntryOperationTask
          threadGroups = peer;
                           
CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = peer;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = peer;   

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;                  
