//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_locator.inc;
include $JTESTS/newWan/wan.inc;
include $JTESTS/newWan/p2p.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="This WAN test creates 3 sites connected as B <-> A <-> C. 
B (Site-2) is running Gemfire ${version2} and using only new (7.0 or later) wan API,
A (Site-1) is running Gemfire ${version1} and using both old (6.5 or earlier) and new (7.0 or later) wan APIs, 
C (Site-3) is running Gemfire ${version3} and using only old (6.5 or earlier) wan API. 
Old wan API consist of GatewayHub and Gateways. New wan API consist of GatewaySender and GatwayReceiver. 
Each site is peer-to-peer in its own distributed system. ";

/**** version 70 ***/
hydra.GatewaySenderPrms-remoteDistributedSystemsAlgorithm =  newWan.WanMultiVersion getDistributedSystemsForV70;
hydra.GemFirePrms-remoteDistributedSystems = ds_2, ds_1, none;
       
/*** version 65 ***/
hydra.ConfigPrms-gatewayHubConfig = hub;
hydra.GatewayHubPrms-names = hub;

hydra.ConfigPrms-gatewayConfig = gateway;
hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-diskStoreName = disk;
hydra.DiskStorePrms-names = disk senderDisk;

hydra.RegionPrms-enableGateway = true;
hydra.RegionPrms-cacheListeners	 = util.SilenceListener;

// the first wan site uses version1 and the rest use version2
hydra.ClientPrms-versionNames =
  fcn "hydra.TestConfigFcns.duplicate
      (\"version1\", ${locatorHostsPerSite})" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"version2\", ${locatorHostsPerSite})" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"version3\", ${locatorHostsPerSite})" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"version1\", ${peerHostsPerSite})" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"version2\", ${peerHostsPerSite})" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"version3\", ${peerHostsPerSite})" ncf;

hydra.VersionPrms-names   = version1    version2    version3;
hydra.VersionPrms-version = ${version1}  ${version2} ${version3};

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 5 10 20 50 100 500 FOENO;
util.ValueHolderPrms-useExtraObject = true;

THREADGROUP locatorsite1
  totalThreads = fcn ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
           (\"locator_1_\", ${locatorHostsPerSite}, true)" ncf;

THREADGROUP locatorsite2
  totalThreads = fcn ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
           (\"locator_2_\", ${locatorHostsPerSite}, true)" ncf;
                      
THREADGROUP locatorsite3
  totalThreads = fcn ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
           (\"locator_3_\", ${locatorHostsPerSite}, true)" ncf;
           
THREADGROUP peersite1
  totalThreads = fcn ${peerHostsPerSite}
               * ${peerVMsPerHost} * ${peerThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                 (\"peer_1_\", ${peerHostsPerSite}, true)" ncf;

THREADGROUP peersite2
  totalThreads = fcn ${peerHostsPerSite}
               * ${peerVMsPerHost} * ${peerThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                 (\"peer_2_\", ${peerHostsPerSite}, true)" ncf;

THREADGROUP peersite3
  totalThreads = fcn ${peerHostsPerSite}
               * ${peerVMsPerHost} * ${peerThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                 (\"peer_3_\", ${peerHostsPerSite}, true)" ncf;                                

           
//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;
hydra.Prms-maxResultWaitSec = 300;

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, Cache, GatewaySender, GatewayReceiver)
//------------------------------------------------------------------------------
/** Configures the locators. */
INITTASK taskClass = newWan.WanMultiVersion taskMethod = createLocatorTask
         threadGroups = locatorsite1, locatorsite2, locatorsite3;
INITTASK taskClass = newWan.WanMultiVersion taskMethod = startLocatorAndAdminDSTask
         threadGroups = locatorsite1, locatorsite2, locatorsite3;

/** Configures the client cache. */
INITTASK taskClass = newWan.WanMultiVersion taskMethod = initPeerTask
         newWan.WANTestPrms-isNewWanConfig = true 
         threadGroups = peersite1, peersite2;

INITTASK taskClass = newWan.WanMultiVersion taskMethod = initPeerTask          
         threadGroups = peersite3;
         
/*** configuration for version 70 ****/
/** Configure gateway receiver */
INITTASK taskClass = newWan.WanMultiVersion taskMethod = initGatewayReceiverTask
         threadGroups = peersite1, peersite2;

/** Configure gateway sender */
INITTASK taskClass = newWan.WanMultiVersion taskMethod = initGatewaySenderTask
         threadGroups = peersite1, peersite2;         

/*** Configuration for version 65 ***/
INITTASK taskClass = newWan.WanMultiVersion taskMethod = createGatewayHubTask
         threadGroups = peersite1, peersite3;
         
INITTASK taskClass = newWan.WanMultiVersion taskMethod = startGatewayHubTask
         threadGroups = peersite1, peersite3;

// do task
INITTASK taskClass = newWan.WanMultiVersion taskMethod = putSequentialKeysTask 
         threadGroups = peersite1, peersite2, peersite3;
        
// verify        
CLOSETASK taskClass = newWan.WanMultiVersion taskMethod = waitForListenerSilence
            threadGroups = peersite1, peersite2, peersite3;

CLOSETASK taskClass = newWan.WanMultiVersion taskMethod = printRegionDataTask
            threadGroups = peersite1, peersite2, peersite3;

CLOSETASK taskClass = newWan.WanMultiVersion taskMethod = waitForQueuesToDrainTask
            threadGroups = peersite1, peersite2;

CLOSETASK taskClass = newWan.WanMultiVersion taskMethod = validateSequentialKeysTask
          threadGroups = peersite1, peersite2, peersite3;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = peersite1, peersite2, peersite3;
