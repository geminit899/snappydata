//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_locator.inc;
include $JTESTS/newWan/wan.inc;


//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is peer-to-peer in its own distributed system and each VM 
 is a gateway sender and gateway receiver to other sites.  Each locator from a site connects to all locators from next site to form a ring topology between sites. 
 Each sender from a site connects to all other remote sites to form all-to-all topology. In this test, first we do operations from all sites, 
 then restart site-1, then start receivers at all sites. In the end verify that the updates are received by all sites. Enabled sender queue persistence.";
 
//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec       = 100;
hydra.Prms-maxResultWaitSec       = ${resultWaitSec};

//------------------------------------------------------------------------------
// TEST Configuration
//------------------------------------------------------------------------------

// include $JTESTS/newWan/p2p.inc;
hydra.CachePrms-names = peer;

hydra.RegionPrms-names         = peer;
hydra.RegionPrms-regionName		= peerRegion;
hydra.RegionPrms-dataPolicy    = replicate;
hydra.RegionPrms-scope         = dack;
hydra.RegionPrms-cacheListeners	 = util.SilenceListener;

hydra.ConfigPrms-cacheConfig = peer;
hydra.ConfigPrms-regionConfig = peer;

newWan.WANTestPrms-senderQueueRegionListener 	= none;

hydra.GemFirePrms-conserveSockets = false;

 hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\", ${locatorHostsPerSite} * ${wanSites}, true)" ncf  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${peerMem} -Xmx${peerMem}\", ${peerHostsPerSite} * ${wanSites}, true)" ncf;

//------------------------------------------------------------------------------------------
      
hydra.RegionPrms-names           = peer;
hydra.RegionPrms-regionName		 = peerRegion;
hydra.RegionPrms-dataPolicy      = replicate;
hydra.RegionPrms-scope           = dack;
hydra.RegionPrms-diskStoreName   = none;
hydra.RegionPrms-diskSynchronous = default;

hydra.GatewaySenderPrms-persistenceEnabled = true;
hydra.GatewaySenderPrms-diskStoreName = disk;

hydra.DiskStorePrms-names = disk diskStore1;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 5 10 20 50 100 500 FOENO;
util.ValueHolderPrms-useExtraObject = true;

hydra.RegionPrms-cacheListeners	 = newWan.WANSilenceListener;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = fcn (${peerHostsPerSite} * ${peerVMsPerHost}) ncf;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;
           
//threads from site-1
THREADGROUP peerSite1
  totalThreads = fcn ${peerHostsPerSite} * ${peerVMsPerHost} * ${peerThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"peer_1_\", ${peerHostsPerSite}, true)" ncf;

THREADGROUP peer
  totalThreads = fcn (${wanSites} - 1) * ${peerHostsPerSite} * ${peerVMsPerHost} * ${peerThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"peer\", ${wanSites}, ${peerHostsPerSite}, false, true)" ncf;                                  
//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, Cache, GatewaySender, GatewayReceiver)
//------------------------------------------------------------------------------
// initialize for stop/start
INITTASK     taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask;

/** Configures the locators. */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configures the client cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initPeerCacheTask
         threadGroups = peer, peerSite1 runMode = always ;

/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         threadGroups = peer, peerSite1 runMode = always;         
         
/** Configures the client region. */
INITTASK taskClass = newWan.WANTest taskMethod = initPeerRegionTask
         threadGroups = peer, peerSite1 runMode = always;

/** Configure gateway receiver on site-1 */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         threadGroups = peerSite1 runMode = always;
         
/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         threadGroups = peer, peerSite1 runMode = always;      
         
INITTASK taskClass = newWan.WANTest taskMethod = putSequentialKeysTask  
     threadGroups = peer, peerSite1 runMode = always;

INITTASK taskClass = newWan.WANTest taskMethod = waitForListenerSilence  
     threadGroups = peer, peerSite1;
          
TASK taskClass = newWan.WANTest taskMethod = restartMembersTask
          threadGroups = locator  maxTimesToRun = 1
          newWan.WANTestPrms-memberClientName = peer_1; 
          
CLOSETASK taskClass = newWan.WANTest taskMethod = putSequentialKeysTask  
     threadGroups = peer;

/** Configure gateway receiver on sites other than site-1 */
CLOSETASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         threadGroups = peer;

CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = peer, peerSite1;
         
CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = peer, peerSite1;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = waitForListenerSilence  
     threadGroups = peer, peerSite1;
               
CLOSETASK taskClass = newWan.WANTest taskMethod = validateSequentialKeysTask
          threadGroups = peer;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = peer, peerSite1;
                    
RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = peer, peerSite1;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = peer, peerSite1;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;           
