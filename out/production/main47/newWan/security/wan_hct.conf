//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/security/topology_wan_hct_locator.inc;
include $JTESTS/newWan/security/hct.inc;

hydra.SecurityPrms-names = dummyScheme ldapScheme pkcsScheme;
hydra.SecurityPrms-peerAuthInit = templates.security.UserPasswordAuthInit.create templates.security.UserPasswordAuthInit.create templates.security.PKCSAuthInit.create;
hydra.SecurityPrms-peerExtraProperties = security.DummyUserPasswordPrms security.LdapUserPasswordPrms security.PKCSUserPasswordPrms;
hydra.SecurityPrms-peerAuthenticator   = templates.security.DummyAuthenticator.create templates.security.LdapUserAuthenticator.create templates.security.PKCSAuthenticator.create;
hydra.SecurityPrms-clientAuthInit          = security.SecurityTestAuthInit.create security.SecurityTestAuthInit.create	security.PKCSTestAuthInit.create;
hydra.SecurityPrms-clientAuthenticator = templates.security.DummyAuthenticator.create templates.security.LdapUserAuthenticator.create templates.security.PKCSAuthenticator.create;
hydra.SecurityPrms-clientExtraProperties = security.DummyUserPasswordPrms security.LdapUserPasswordPrms security.PKCSUserPasswordPrms;
hydra.SecurityPrms-clientAccessor = templates.security.DummyAuthorization.create templates.security.XmlAuthorization.create;

security.DummyUserPasswordPrms-authzXmlUri = $JTESTS/lib/authz-dummy.xml;
security.LdapUserPasswordPrms-authzXmlUri = $JTESTS/lib/authz-ldap.xml;
security.LdapUserPasswordPrms-ldapServer = "ldap";
security.LdapUserPasswordPrms-ldapBasedn = "ou=ldapTesting,dc=pune,dc=gemstone,dc=com";
security.SecurityClientsPrms-regionName = Portfolios;
security.PKCSUserPasswordPrms-publickeyFilepath =
  fcn "security.SecurityFcns.getKeystore(\"publickeyfile\")" ncf;
security.PKCSUserPasswordPrms-keystorepass="gemfire";

hydra.GemFirePrms-securityName      = oneof dummyScheme ldapScheme pkcsScheme foeno;
hydra.SecurityPrms-logLevel = info;
hydra.Prms-useFixedRandomInMaster = true;

hydra.RegionPrms-cacheListeners	 = util.SilenceListener;

hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-contactNum = 1;
      
//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 10;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = validlocator,invalidlocator;
         
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         security.DummyUserPasswordPrms-username = admin
         security.DummyUserPasswordPrms-password = admin
         security.LdapUserPasswordPrms-username = gemfire1
         security.LdapUserPasswordPrms-password = gemfire1
         security.PKCSUserPasswordPrms-keystorepath =
           fcn "security.SecurityFcns.getKeystore(\"gemfire1.keystore\")" ncf
         security.PKCSUserPasswordPrms-alias = gemfire1
         threadGroups = validlocator,invalidlocator;

INITTASK taskClass = newWan.WANTest taskMethod = createGatewaySenderIdsTask
         threadGroups = validpeer,invalidpeer;
                  
INITTASK taskClass = newWan.security.WanSecurity taskMethod = initSecurityServerCacheTask
		 security.DummyUserPasswordPrms-username = writer1
         security.DummyUserPasswordPrms-password = writer1
         security.LdapUserPasswordPrms-username = gemfire6
         security.LdapUserPasswordPrms-password = gemfire6
         security.PKCSUserPasswordPrms-keystorepath =
           fcn "security.SecurityFcns.getKeystore(\"gemfire6.keystore\")" ncf
         security.PKCSUserPasswordPrms-alias = gemfire6
         threadGroups = validpeer,invalidpeer;
                        
         
INITTASK taskClass = newWan.security.WanSecurity taskMethod = HydraTask_initWANComponents
         threadGroups = validpeer;

INITTASK taskClass = newWan.security.WanSecurity taskMethod = HydraTask_initWANComponents
		 security.SecurityClientsPrms-isExpectedException = true	
		 hydratest.security.SecurityTestPrms-useBogusPassword = true
         threadGroups = invalidpeer;
         
/**
 * Configures the edge client cache.
 */
INITTASK taskClass = newWan.security.WanSecurity taskMethod = initEdgeClientCacheTask
         security.DummyUserPasswordPrms-username = admin
         security.DummyUserPasswordPrms-password = admin
         security.LdapUserPasswordPrms-username = gemfire1
         security.LdapUserPasswordPrms-password = gemfire1
         security.PKCSUserPasswordPrms-keystorepath =
           fcn "security.SecurityFcns.getKeystore(\"gemfire1.keystore\")" ncf
         security.PKCSUserPasswordPrms-alias = gemfire1
         threadGroups = validedge, invalidedge;


//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------

INITTASK taskClass = newWan.security.WanSecurity taskMethod = clientPutSequentialKeysTask
     threadGroups = validedge, invalidedge;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------
CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = validpeer,invalidpeer;

CLOSETASK taskClass = newWan.security.WanSecurity taskMethod = waitForQueuesToDrainTask
          threadGroups = validpeer;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = validedge, invalidedge;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = waitForListenerSilence
          threadGroups = validedge,invalidedge;
                    
CLOSETASK taskClass = newWan.WANTest taskMethod = printSequentialKeysTask
          threadGroups = validedge,invalidedge;
          
CLOSETASK taskClass = newWan.security.WanSecurity taskMethod = clientValidateSequentialKeysTask
          threadGroups = validedge, invalidedge;
                           
CLOSETASK taskClass = newWan.WANTest taskMethod = closeEdgeClientCacheTask
          threadGroups = validedge, invalidedge;

THREADGROUP validedge
  totalThreads = fcn ${validWanSites}* ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge1\", ${validWanSites}, ${edgeHostsPerSite}, false, true)" ncf;
                 
THREADGROUP invalidedge
  totalThreads = fcn ${invalidWanSites}* ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge2\", ${invalidWanSites}, ${edgeHostsPerSite}, false, true)" ncf;