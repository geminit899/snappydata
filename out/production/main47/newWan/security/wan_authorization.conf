include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/security/p2p_authorization_topology.conf;
include $JTESTS/newWan/security/p2p_Authorization.inc;


hydra.SecurityPrms-names = dummyScheme ldapScheme pkcsScheme;
hydra.SecurityPrms-peerAuthInit = templates.security.UserPasswordAuthInit.create templates.security.UserPasswordAuthInit.create templates.security.PKCSAuthInit.create;
hydra.SecurityPrms-peerExtraProperties = security.DummyUserPasswordPrms security.LdapUserPasswordPrms security.PKCSUserPasswordPrms;
hydra.SecurityPrms-peerAuthenticator   = templates.security.DummyAuthenticator.create templates.security.LdapUserAuthenticator.create templates.security.PKCSAuthenticator.create;
hydra.SecurityPrms-clientAuthInit          = security.SecurityTestAuthInit.create security.SecurityTestAuthInit.create	security.PKCSTestAuthInit.create;
hydra.SecurityPrms-clientAuthenticator = templates.security.DummyAuthenticator.create templates.security.LdapUserAuthenticator.create templates.security.PKCSAuthenticator.create;
hydra.SecurityPrms-clientExtraProperties = security.DummyUserPasswordPrms security.LdapUserPasswordPrms security.PKCSUserPasswordPrms;
hydra.SecurityPrms-clientAccessor = templates.security.DummyAuthorization.create templates.security.XmlAuthorization.create;

security.DummyUserPasswordPrms-authzXmlUri = $JTESTS/lib/authz-dummy.xml;
security.LdapUserPasswordPrms-authzXmlUri = $JTESTS/lib/authz-ldap.xml;
security.LdapUserPasswordPrms-ldapServer = "ldap";
security.LdapUserPasswordPrms-ldapBasedn = "ou=ldapTesting,dc=pune,dc=gemstone,dc=com";
security.SecurityClientsPrms-regionName = Portfolios;
security.PKCSUserPasswordPrms-publickeyFilepath =
  fcn "security.SecurityFcns.getKeystore(\"publickeyfile\")" ncf;
security.PKCSUserPasswordPrms-keystorepass="gemfire";

hydra.GemFirePrms-securityName      = oneof dummyScheme ldapScheme pkcsScheme foeno;
hydra.SecurityPrms-logLevel = info;
hydra.Prms-useFixedRandomInMaster = true;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test with authrorization credentials";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = writerlocator,readerlocator;
         
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         security.DummyUserPasswordPrms-username = admin
         security.DummyUserPasswordPrms-password = admin
         security.LdapUserPasswordPrms-username = gemfire1
         security.LdapUserPasswordPrms-password = gemfire1
         security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire1.keystore\")" ncf
         security.PKCSUserPasswordPrms-alias = gemfire1
         threadGroups = writerlocator,readerlocator;

INITTASK taskClass = newWan.WANTest taskMethod = createGatewaySenderIdsTask
         threadGroups = writerpeer,readerpeer;
                  
INITTASK taskClass = newWan.security.WanSecurity taskMethod = HydraTask_initSecurityPeerCache
		 security.DummyUserPasswordPrms-username = writer1
         security.DummyUserPasswordPrms-password = writer1
         security.LdapUserPasswordPrms-username = gemfire6
         security.LdapUserPasswordPrms-password = gemfire6
         security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire6.keystore\")" ncf
         security.PKCSUserPasswordPrms-alias = gemfire6
         threadGroups = writerpeer;
         
INITTASK taskClass = newWan.security.WanSecurity taskMethod = HydraTask_initSecurityPeerCache
		 security.DummyUserPasswordPrms-username = reader1
         security.DummyUserPasswordPrms-password = reader1
         security.LdapUserPasswordPrms-username = gemfire3
         security.LdapUserPasswordPrms-password = gemfire3
         security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire3.keystore\")" ncf
         security.PKCSUserPasswordPrms-alias = gemfire3
         threadGroups = readerpeer;

INITTASK taskClass = newWan.security.WanSecurity taskMethod = HydraTask_initWANComponents
         threadGroups = writerpeer,readerpeer;

//------------------------------------------------------------------------------
// PRIMARY WORK (cache operations)
//------------------------------------------------------------------------------

INITTASK taskClass = newWan.security.WanSecurity taskMethod = putSequentialKeysTaskForWriter
     threadGroups = writerpeer;
     
INITTASK taskClass = newWan.security.WanSecurity taskMethod = putSequentialKeysTaskForReader
     threadGroups = readerpeer;


//------------------------------------------------------------------------------
// FINAL WORK (validate and close)
//------------------------------------------------------------------------------
CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = writerpeer,readerpeer;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = writerpeer,readerpeer;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = printSequentialKeysTask
          threadGroups = writerpeer,readerpeer;

CLOSETASK taskClass = newWan.security.WanSecurity taskMethod = printKeyListTask
          threadGroups = writerpeer,readerpeer;
          
CLOSETASK taskClass = newWan.security.WanSecurity taskMethod = validateWriterWanSiteEntriesTask
          threadGroups = writerpeer;
          
CLOSETASK taskClass = newWan.security.WanSecurity taskMethod = validateReaderWanSiteEntriesTask
          threadGroups = readerpeer; 
          
CLOSETASK taskClass = newWan.security.WanSecurity taskMethod = readerDestroyAllKeysTask
          threadGroups = readerpeer;
 
CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = writerpeer,readerpeer;
                    
CLOSETASK taskClass = newWan.WANTest taskMethod = printSequentialKeysTask
          threadGroups = writerpeer,readerpeer;

CLOSETASK taskClass = newWan.security.WanSecurity taskMethod = validateWriterWanSiteEntriesTask
          threadGroups = writerpeer;
          
CLOSETASK taskClass = newWan.security.WanSecurity taskMethod = writerDestroyCreatedKeysTask
          threadGroups = writerpeer;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = writerpeer;
          
CLOSETASK taskClass = newWan.security.WanSecurity taskMethod = checkWriterRegionContentsEmpty
          threadGroups = writerpeer;          
                                       
