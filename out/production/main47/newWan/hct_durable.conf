//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/newWan/wan.inc;
include $JTESTS/newWan/hct.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway sender and receiver to other cache servers.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec       = 22000;  //test is load base
hydra.Prms-maxResultWaitSec       = ${resultWaitSec};
newWan.WANTestPrms-maxOperations  = ${maxOps};

//------------------------------------------------------------------------------
// TEST CONFIGURATION
//------------------------------------------------------------------------------

hydra.GemFirePrms-enableDurableClient	= false true;
wan.CacheClientPrms-interestPolicy      = keys;
hydra.PoolPrms-subscriptionRedundancy	= 1;
hydra.PoolPrms-minConnections 			= 3;

hydra.RegionPrms-cacheListeners =
      newWan.WANSilenceListener, 			   // bridge
      newWan.WanDCEventListener;               // edge

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 5 10 20 50 100 500 FOENO;
util.ValueHolderPrms-useExtraObject = true;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, sender, receiver)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configures the server cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerCacheTask
         threadGroups = bridge;

/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         threadGroups = bridge;         
      
/** Configures the server region. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerRegionTask
         threadGroups = bridge;

/** Configure gateway receiver */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         threadGroups = bridge;

/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         threadGroups = bridge;      

/**
 * Configures the edge client cache.
 */ 
INITTASK taskClass = newWan.WANTest taskMethod = initEdgeClientCacheTask
         threadGroups = edge,opThread,reference
         runMode = always;
         
/**
 * Declaring one client vm as the reference vm. This vm will never be brought down
 */         
INITTASK taskClass = newWan.WANTest taskMethod = mentionReferenceInBlackboard
         threadGroups = reference;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = newWan.WANTest taskMethod = putSequentialKeysTask
     threadGroups = opThread;
     
TASK taskClass = newWan.WANTest taskMethod = killClient
     threadGroups = edge
     maxTimesToRun = 3  maxThreads = 1;

wan.CacheClientPrms-sleepSec = 0;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = bridge;

CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = bridge;
          
CLOSETASK taskClass = wan.WANClient taskMethod = waitForListenerSilence
          batch
          threadGroups = edge,opThread,reference;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = validateSequentialKeysTask
          threadGroups = edge,opThread,reference, bridge;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge,opThread,reference;

CLOSETASK taskClass = newWan.WANTest taskMethod = validateEventsReceived
          threadGroups = edge; 
          
RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

CLOSETASK taskClass = newWan.WANTest taskMethod = closeEdgeClientCacheTask
          threadGroups = edge,opThread,reference;
                    
CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;   
         

THREADGROUP edge
  totalThreads = fcn "${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} - 2 * ${edgeThreadsPerVM} " ncf
//  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
//                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

    totalVms = fcn "${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} - 2" ncf;
    
THREADGROUP opThread
  totalThreads = fcn "${edgeThreadsPerVM}" ncf
  totalVms = 1;
  
  THREADGROUP reference
  totalThreads = fcn "${edgeThreadsPerVM}" ncf
  totalVms = 1;

