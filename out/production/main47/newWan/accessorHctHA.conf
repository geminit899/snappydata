//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/newWan/wan.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site. Each bridge VM is either datastore or accessor.
Accesor vms has EMPTY region and either sender or receiver on it.
Each locator from a site connects to all locators from next site to form a ring topology between sites. 
Each sender from a site connects to all other remote sites to form all-to-all topology.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 22000;  //test is load base
hydra.Prms-maxResultWaitSec = ${resultWaitSec};
newWan.WANTestPrms-maxOperations=${maxOps}; 

//------------------------------------------------------------------------------
// TEST Configuration
//------------------------------------------------------------------------------
hydra.BridgePrms-names = bridge;
hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; 

hydra.PoolPrms-names    = brloader     ;
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper getRandomEndpointsInWanHctSite;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-readTimeout = 30000;

hydra.CachePrms-names = bridgeCache edgeCache;

hydra.RegionPrms-names          = datastoreRegion  accessorRegion clientRegion;
hydra.RegionPrms-poolName		= none             none           brloader;
hydra.RegionPrms-dataPolicy     = replicate        empty          default;
hydra.RegionPrms-interestPolicy = default          all            default;
hydra.RegionPrms-scope          = dack             dack           local;

hydra.ConfigPrms-cacheConfig	= bridgeCache;
hydra.ConfigPrms-regionConfig	= bridgeRegion;
hydra.ConfigPrms-bridgeConfig	= bridge;

newWan.WANTestPrms-clientCacheConfig = edgeCache;
newWan.WANTestPrms-senderQueueRegionListener 	= none;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 5 10 20 50 100 500 FOENO;
util.ValueHolderPrms-useExtraObject = true;

util.TestHelperPrms-minTaskGranularitySec = 10;
util.OperationsClientPrms-numOpsPerTask = 100;
util.OperationsClientPrms-entryOperations = ONEOF add add putAll update getNew get destroy remove FOENO;
util.OperationsClientPrms-upperThreshold = 1000;
util.OperationsClientPrms-upperThresholdOperations = ONEOF remove destroy FOENO;
util.OperationsClientPrms-lowerThreshold = 500;
util.OperationsClientPrms-lowerThresholdOperations = ONEOF add update putAll FOENO;
newWan.WANOperationsClientPrms-useUniqueKeyPerThread = true;
newWan.WANOperationsClientPrms-numPutAllNewKeys = 1;
newWan.WANOperationsClientPrms-numPutAllExistingKeys = 1;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = 1;

hydra.GemFirePrms-remoteDistributedSystems =
     fcn "newWan.WANTest.generateRingRemoteDSName
          (\"bridgeds_\", ${wanSites}, ${locatorHostsPerSite})" ncf         
     ,
     none
     ; 
     
THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;

THREADGROUP bridge
  totalThreads = fcn ${wanSites} * ${bridgeHostsPerSite}
               * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} / 3 ncf
  clientNames  = fcn "newWan.WANTest.generateDoubleSuffixedNames
           (\"bridge\", ${wanSites}, ${bridgeHostsPerSite} / 3, 1, 1, false, true)" ncf;

THREADGROUP sender
  totalThreads = fcn ${wanSites} * ${bridgeHostsPerSite}
               * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} / 3 ncf
  clientNames  = fcn "newWan.WANTest.generateDoubleSuffixedNames
           (\"bridge\", ${wanSites}, ${bridgeHostsPerSite} / 3, 1, 3, false, true)" ncf;

THREADGROUP receiver
  totalThreads = fcn ${wanSites} * ${bridgeHostsPerSite}
               * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} / 3 ncf
  clientNames  = fcn "newWan.WANTest.generateDoubleSuffixedNames
           (\"bridge\", ${wanSites}, ${bridgeHostsPerSite} / 3, 1, 5, false, true)" ncf;

THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;
                 
hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${serverMem} -Xmx${serverMem}\",
          ${bridgeHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${clientMem} -Xmx${clientMem}\",
          ${edgeHostsPerSite} * ${wanSites}, true)" ncf;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, sender, receiver)
//------------------------------------------------------------------------------
INITTASK     taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask;

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configure gateway senderIds */
INITTASK taskClass = newWan.WANTest taskMethod = createGatewaySenderIdsTask
         runMode = always
          threadGroups = bridge, sender, receiver;

/** Configures the server cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerCacheTask
         runMode = always
         threadGroups = bridge, sender, receiver;

/** Configure gateway receiver */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         runMode = always
         threadGroups = receiver;
         
/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         runMode = always  
         threadGroups = sender;         

/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         runMode = always
         threadGroups = sender;      

/** Configures the client region. */
INITTASK taskClass = newWan.WANTest taskMethod = initAccessorRegionTask
         runMode = always
         threadGroups = sender, receiver;
                  
/** Configures the server region. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerRegionTask
         runMode = always 
         threadGroups = bridge;
   
/**
 * Configures the edge client cache.
 */
INITTASK taskClass = newWan.WANTest taskMethod = initEdgeClientCacheTask
         runMode = always
         threadGroups = edge;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = newWan.WANTest taskMethod = doHAEntryOperationTask  
     threadGroups = edge;
     
TASK taskClass = newWan.WANTest taskMethod = killPeerAndDoOpsTask  
     threadGroups = edge maxThreads = 1;	

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = sender;

CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = sender;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = validateDoEntryOperationTask
          threadGroups = bridge;

CLOSETASK taskClass = newWan.WANTest taskMethod = validateDoEntryOperationTask
          threadGroups = edge;
          
CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge;

RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

CLOSETASK taskClass = newWan.WANTest taskMethod = closeEdgeClientCacheTask
          threadGroups = edge;
                    
CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = sender;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = receiver;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;   

