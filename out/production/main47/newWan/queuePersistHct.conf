//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/newWan/wan.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway sender to other sites. 
Each locator from a site connects to all locators from next site to form a ring topology between sites. Each sender from a site connects to all other remote sites to form all-to-all topology. 
In this test, first we do operations from all sites, then restart site-1, then start receivers at all sites. In the end verify that the updates are received by all sites. Enabled sender queue persistence."; 

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec       = 100;
hydra.Prms-maxResultWaitSec       = ${resultWaitSec};

//------------------------------------------------------------------------------
// TEST Configuration
//------------------------------------------------------------------------------
hydra.ConfigPrms-cacheConfig	= bridgeCache;
hydra.ConfigPrms-regionConfig	= bridgeRegion;
hydra.ConfigPrms-bridgeConfig	= bridge;

hydra.RegionPrms-names           = bridgeRegion	clientRegion;
hydra.RegionPrms-dataPolicy      = replicate    default;
hydra.RegionPrms-diskStoreName   = none;
hydra.RegionPrms-diskSynchronous = default      default;
hydra.RegionPrms-poolName	 	 = none        	brloader;
hydra.RegionPrms-scope           = dack        	local;
hydra.RegionPrms-cacheListeners	 = newWan.WANSilenceListener;

hydra.BridgePrms-names       = bridge;
hydra.BridgePrms-maxThreads  = ONEOF default 16 FOENO; 

hydra.PoolPrms-names                = brloader;
hydra.PoolPrms-contactAlgorithm     = hydra.EdgeHelper getRandomEndpointsInWanHctSite;
hydra.PoolPrms-subscriptionEnabled  = true;
hydra.PoolPrms-readTimeout          = 30000;

hydra.CachePrms-names = bridgeCache edgeCache;

newWan.WANTestPrms-clientCacheConfig          = edgeCache;
newWan.WANTestPrms-senderQueueRegionListener  = none;

hydra.GemFirePrms-conserveSockets = false;

hydra.GatewaySenderPrms-persistenceEnabled = true;
hydra.GatewaySenderPrms-diskStoreName = disk;

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 5 10 20 50 100 500 FOENO;
util.ValueHolderPrms-useExtraObject = true;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = fcn (${bridgeHostsPerSite} * ${bridgeVMsPerHost}) ncf;

hydra.GemFirePrms-remoteDistributedSystems =
     fcn "newWan.WANTest.generateRingRemoteDSName
          (\"bridgeds_\", ${wanSites}, ${locatorHostsPerSite})" ncf         
     ,
     none
     ; 
     
hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${serverMem} -Xmx${serverMem}\",
          ${bridgeHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${clientMem} -Xmx${clientMem}\",
          ${edgeHostsPerSite} * ${wanSites}, true)" ncf;
          
THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;

THREADGROUP bridge
  totalThreads = fcn (${wanSites} - 1) * ${bridgeHostsPerSite}
               * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"bridge\", ${wanSites}, ${bridgeHostsPerSite}, false, true)" ncf;

//bridge threads from site_1
THREADGROUP bridge1
  totalThreads = fcn ${bridgeHostsPerSite} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"bridge_1_\", ${bridgeHostsPerSite}, true)" ncf;
            
THREADGROUP edge
  totalThreads = fcn (${wanSites} - 1) * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;   

//edge threads from site_1
THREADGROUP edge1
  totalThreads = fcn ${edgeHostsPerSite} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"edge_1_\", ${edgeHostsPerSite}, true)" ncf;   
                                               
//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, sender, receiver)
//------------------------------------------------------------------------------
// initialize for stop/start
INITTASK     taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask;

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configures the server cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerCacheTask
         threadGroups = bridge, bridge1 runMode = always;

/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         threadGroups = bridge, bridge1 runMode = always;         
      
/** Configures the server region. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerRegionTask
         threadGroups = bridge, bridge1 runMode = always;


/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         threadGroups = bridge, bridge1 runMode = always;      
   
/**
 * Configures the edge client cache.
 */
INITTASK taskClass = newWan.WANTest taskMethod = initEdgeClientCacheTask
         threadGroups = edge, edge1;

INITTASK taskClass = newWan.WANTest taskMethod = putSequentialKeysTask  
     threadGroups = edge, edge1;

INITTASK taskClass = newWan.WANTest taskMethod = waitForListenerSilence  
     threadGroups = bridge, bridge1, edge, edge1;
     
TASK taskClass = newWan.WANTest taskMethod = restartMembersTask
          threadGroups = edge  maxTimesToRun = 1
          newWan.WANTestPrms-memberClientName = bridge_1; 

CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = bridge1, edge1;

/** Configure gateway receiver as a closetask, so that event dispatch happens lately */
CLOSETASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         threadGroups = bridge, bridge1;          

CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = bridge1;

CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = bridge, bridge1;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = validateSequentialKeysTask
          threadGroups = edge, bridge;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge1;

RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;
        
CLOSETASK taskClass = newWan.WANTest taskMethod = closeEdgeClientCacheTask
          threadGroups = edge, edge1;
                    
CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = bridge, bridge1;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = bridge, bridge1;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;   

ENDTASK     taskClass   = util.PersistenceUtil  taskMethod = HydraTask_doOfflineValAndCompactionOnce;
