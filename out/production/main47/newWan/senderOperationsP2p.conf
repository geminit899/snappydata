//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_locator.inc;
include $JTESTS/newWan/wan.inc;
include $JTESTS/newWan/p2p.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is peer-to-peer in its own distributed system and each VM 
 is a gateway sender and gateway receiver to other sites. Each locator from a site connects to all locators from next site to form a ring topology between sites. 
 Each sender from a site connects to all other remote sites to form all-to-all topology. Sender operations such as start/stop/pause/resume are carried out senders.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec       = 22000;  //test is load base
hydra.Prms-maxResultWaitSec       = ${resultWaitSec};
newWan.WANTestPrms-maxOperations  = ${maxOps};

//------------------------------------------------------------------------------
// TEST Configuration
//------------------------------------------------------------------------------
hydra.GatewaySenderPrms-remoteDistributedSystemsAlgorithm =  hydra.GatewaySenderHelper getRingDistributedSystems;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 5 10 20 50 100 500 FOENO;
util.ValueHolderPrms-useExtraObject = true;

newWan.WANTestPrms-senderQueueRegionListener 	= newWan.SerialSenderOpsRegionQueueListener;

util.TestHelperPrms-minTaskGranularitySec = 60;
util.OperationsClientPrms-numOpsPerTask = 1000;
util.OperationsClientPrms-entryOperations = ONEOF add add putAll putIfAbsent replace update getNew get destroy remove FOENO;
util.OperationsClientPrms-upperThreshold = 1000;
util.OperationsClientPrms-upperThresholdOperations = ONEOF remove destroy FOENO;
util.OperationsClientPrms-lowerThreshold = 500;
util.OperationsClientPrms-lowerThresholdOperations = ONEOF putIfAbsent add update putAll FOENO;
newWan.WANOperationsClientPrms-useUniqueKeyPerThread = true;
newWan.WANOperationsClientPrms-numPutAllNewKeys = ONEOF 1 2 3 4 5 FOENO;
newWan.WANOperationsClientPrms-numPutAllExistingKeys = ONEOF 1 2 3 4 5 FOENO;
newWan.WANOperationsClientPrms-senderOperations = ONEOF start stop pause resume FOENO;


//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, Cache, GatewaySender, GatewayReceiver)
//------------------------------------------------------------------------------
/** Configures the locators. */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configures the client cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initPeerCacheTask
         threadGroups = peer;

/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         threadGroups = peer;         
         
/** Configures the client region. */
INITTASK taskClass = newWan.WANTest taskMethod = initPeerRegionTask
         threadGroups = peer;

/** Configure gateway receiver */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         threadGroups = peer;

/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         threadGroups = peer;      
         
//------------------------------------------------------------------------------
// TASK
//------------------------------------------------------------------------------
 
TASK taskClass = newWan.WANTest taskMethod = doSenderOperationTask  
     threadGroups = peer;

TASK taskClass = newWan.WANTest taskMethod = verifySenderOperationTask  
     threadGroups = peer;

TASK taskClass = newWan.WANTest taskMethod = doEntryOperationTask  
     threadGroups = peer endInterval=5;     
        
//------------------------------------------------------------------------------
// CLOSETASK 
//------------------------------------------------------------------------------                           
// start all sender if stopped or paused
CLOSETASK taskClass = newWan.WANTest taskMethod = startResumeSenderTask
         threadGroups = peer;  
         
CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = peer;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = peer;

CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = peer;
                    
//CLOSETASK taskClass = newWan.WANTest taskMethod = validateDoEntryOperationTask
//          threadGroups = peer;
                    
CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = peer;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = peer;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;           
         
