//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_locator.inc;
include $JTESTS/newWan/wan.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is peer-to-peer in its own distributed system. Each VM is either peer or gateway sender or gateway receiver.
 The VM having Sender or receiver has EMPTY regions.    
 Each locator from a site connects to all locators from next site to form a ring topology between sites.
 Each sender from a site connects to all other remote sites to form all-to-all topology.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 22000;  //test is load base
hydra.Prms-maxResultWaitSec = ${resultWaitSec};
newWan.WANTestPrms-maxOperations=${maxOps}; 

//------------------------------------------------------------------------------
// TEST Configuration
//------------------------------------------------------------------------------
hydra.ConfigPrms-cacheConfig = peer;
hydra.CachePrms-names = peer;

hydra.RegionPrms-names         = datastoreRegion accessorRegion;
hydra.RegionPrms-regionName	   = peerRegion;
hydra.RegionPrms-dataPolicy    = replicate       empty;
hydra.RegionPrms-interestPolicy = default        all;
hydra.RegionPrms-scope         =  dack;

newWan.WANTestPrms-senderQueueRegionListener 	= none;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 5 10 20 50 100 500 FOENO;
util.ValueHolderPrms-useExtraObject = true;

util.TestHelperPrms-minTaskGranularitySec = 10;
util.OperationsClientPrms-numOpsPerTask = 100;
util.OperationsClientPrms-entryOperations = ONEOF add add putAll update getNew get destroy remove FOENO;
util.OperationsClientPrms-upperThreshold = 1000;
util.OperationsClientPrms-upperThresholdOperations = ONEOF remove destroy FOENO;
util.OperationsClientPrms-lowerThreshold = 500;
util.OperationsClientPrms-lowerThresholdOperations = ONEOF add update putAll FOENO;
newWan.WANOperationsClientPrms-useUniqueKeyPerThread = true;
newWan.WANOperationsClientPrms-numPutAllNewKeys = 1;
newWan.WANOperationsClientPrms-numPutAllExistingKeys = 1;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = 1;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;

THREADGROUP peer
  totalThreads = fcn ${wanSites} * ${peerHostsPerSite}
               * ${peerVMsPerHost} * ${peerThreadsPerVM} / 3 ncf
  clientNames  = fcn "newWan.WANTest.generateDoubleSuffixedNames
                 (\"peer\", ${wanSites}, ${peerHostsPerSite} / 3, 1, 1, false, true)" ncf;

THREADGROUP sender
  totalThreads = fcn ${wanSites} * ${peerHostsPerSite}
               * ${peerVMsPerHost} * ${peerThreadsPerVM} / 3 ncf
  clientNames  = fcn "newWan.WANTest.generateDoubleSuffixedNames
                 (\"peer\", ${wanSites}, ${peerHostsPerSite} / 3, 1, 3, false, true)" ncf;

THREADGROUP receiver
  totalThreads = fcn ${wanSites} * ${peerHostsPerSite}
               * ${peerVMsPerHost} * ${peerThreadsPerVM} / 3 ncf
  clientNames  = fcn "newWan.WANTest.generateDoubleSuffixedNames
                 (\"peer\", ${wanSites}, ${peerHostsPerSite} / 3, 1, 5, false, true)" ncf;
                                  
 hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\", ${locatorHostsPerSite} * ${wanSites}, true)" ncf  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${peerMem} -Xmx${peerMem}\", ${peerHostsPerSite} * ${wanSites}, true)" ncf;

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, Cache, GatewaySender, GatewayReceiver)
//------------------------------------------------------------------------------

INITTASK     taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask;

/** Configures the locators. */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configure gateway senderIds */
INITTASK taskClass = newWan.WANTest taskMethod = createGatewaySenderIdsTask
         runMode = always
          threadGroups = peer, sender, receiver;
         
/** Configures the client cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initPeerCacheTask
		 runMode = always
         threadGroups = peer, sender, receiver;

/** Configure gateway receiver */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         runMode = always
         threadGroups = receiver;
         
/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         runMode = always
         threadGroups = sender;         
 
/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         runMode = always
         threadGroups = sender;

/** Configures the client region. */
INITTASK taskClass = newWan.WANTest taskMethod = initAccessorRegionTask
         runMode = always
         threadGroups = sender, receiver;
                           
/** Configures the client region. */
INITTASK taskClass = newWan.WANTest taskMethod = initPeerRegionTask
         runMode = always
         threadGroups = peer;         
         
//------------------------------------------------------------------------------
// TASK
//------------------------------------------------------------------------------

TASK taskClass = newWan.WANTest taskMethod = doHAEntryOperationTask  
     threadGroups = peer, sender, receiver;
      
TASK taskClass = newWan.WANTest taskMethod = killPeerAndDoOpsTask  
     threadGroups = peer, sender, receiver maxThreads = 1;

//------------------------------------------------------------------------------
// CLOSETASK 
//------------------------------------------------------------------------------                           
CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = sender;

CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = sender;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = validateDoEntryOperationTask
          threadGroups = peer;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = peer;
                    
RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = sender;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = receiver;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;           
         
