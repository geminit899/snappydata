//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/newWan/wan.inc;
include $JTESTS/newWan/hct.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway sender and receiver to other cache servers.
Each locator from a site connects to all locators from next site to form a ring topology between sites. 
 Each sender from a site connects to all other remote sites to form all-to-all topology. Use PDX objests";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec       = 22000;  //test is load base
hydra.Prms-maxResultWaitSec       = ${resultWaitSec};
newWan.WANTestPrms-maxOperations  = ${maxOps};

//------------------------------------------------------------------------------
// TEST Configuration
//------------------------------------------------------------------------------
hydra.Prms-serialExecution=true;
newWan.WANTestPrms-senderQueueRegionListener 	= none;
hydra.RegionPrms-cacheListeners                 = pdx.PdxSilenceListener;

pdx.PdxPrms-initClassLoader=true;

INCLUDE $JTESTS/util/randomValues.inc;
util.ValueHolderPrms-objectType = util.PdxVersionedValueHolder;
util.ValueHolderPrms-useExtraObject = true;
util.RandomValuesPrms-objectDepth = 2;
util.RandomValuesPrms-elementSize = RANGE 1 5 EGNAR;

// the type registry is required to be persistence for wan with pdx
hydra.CachePrms-pdxPersistent = true false;
hydra.CachePrms-pdxDiskStoreName = disk;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = RANGE 1 fcn (${bridgeHostsPerSite} * ${bridgeVMsPerHost}) - 1 ncf EGNAR;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, sender, receiver)
//------------------------------------------------------------------------------
// initialize for stop/start
INITTASK     taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask;

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configures the server cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerCacheTask
         threadGroups = bridge runMode = always;

/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         threadGroups = bridge runMode = always;         
      
/** Configures the server region. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerRegionTask
         threadGroups = bridge runMode = always;

/** Configure gateway receiver */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         threadGroups = bridge runMode = always;

/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         threadGroups = bridge runMode = always;      
   
/**
 * Configures the edge client cache.
 */
INITTASK taskClass = newWan.WANTest taskMethod = initEdgeClientCacheTask
         threadGroups = edge;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = newWan.WANTest taskMethod = putSequentialKeysAndHATask  
     threadGroups = edge;

newWan.WANTestPrms-sleepSec = 0;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = bridge;

CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = bridge;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = validateSequentialKeysTask
          threadGroups = edge, bridge;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge;

CLOSETASK taskClass = newWan.WANTest taskMethod = closeEdgeClientCacheTask
          threadGroups = edge;
                    
CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;   

THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;
