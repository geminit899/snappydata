hydra.Prms-testDescription = "
This test creates an HDFS_PARTITION Region, then does various entry operations on a known key
range. Values are checked for correctness in the close task.
";

THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\", ${locatorHosts}, true)" ncf;

STARTTASK taskClass   = hdfs.HDFSUtil
          taskMethod  = configureHadoopTask
          clientNames = locator1
          ;

INITTASK taskClass    = hdfs.HDFSUtil
         taskMethod   = startCluster
         threadGroups = locator
         ;

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/parReg/colocation/colocationWithOpsHA.conf;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2_locator.inc;

hydra.Prms-manageLocatorAgents = true; // turn on master-managed locators
hydra.Prms-alwaysDoEndTasks = true;

CLOSETASK    taskClass = parReg.colocation.ParRegColocation taskMethod = HydraTask_disconnect
             threadGroups = verifyThreads, accessorVMThreads;
CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_p2p_dataStoreInitialize
             threadGroups = dataStoreVMThreads;
CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_p2p_accessorInitialize
             threadGroups = accessorVMThreads;
CLOSETASK    taskClass   = parReg.colocation.ParRegColocation  taskMethod = HydraTask_logLocalSize
             threadGroups = dataStoreVMThreads;
CLOSETASK    taskClass     = parReg.ParRegUtil  taskMethod  = HydraTask_waitForRecovery
             threadGroups = verifyThreads;
CLOSETASK    taskClass       = parReg.ParRegUtil  taskMethod  = HydraTask_recreateBucketsFromHDFS
             threadGroups = verifyThreads;
CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyPrimaries
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyBucketCopies
             threadGroups = verifyThreads
             ;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyColocatedRegions
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = verifyThreads
             ;

ENDTASK      taskClass = hdfs.HDFSUtil taskMethod = stopCluster
             clientNames = locator1
             ;

hydra.VmPrms-extraClassPaths +=
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${locatorHosts})" ncf
  ,                          
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${A}Hosts})" ncf
  ,                          
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${B}Hosts})" ncf
  ;                          

hydra.Prms-checkTaskMethodsExist = false;
hydra.Prms-maxResultWaitSec=3600;  // closetask HydraTask_verifyColocatedRegions takes a long time on slower hosts
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

// for now, do not attempt to re-initialize regions based on generated cache.xml files
util.CachePrms-useDeclarativeXmlFile = false;

hydra.ConfigPrms-hadoopConfig = hadoop;
hydra.ConfigPrms-hdfsStoreConfig = hdfsstore;
hydra.HadoopPrms-names = hadoop;

hydra.RegionPrms-names          = accessorRegion1   accessorRegion2     accessorRegion3         dataStoreRegion1  dataStoreRegion2  dataStoreRegion3;
hydra.RegionPrms-regionName     = testRegion1       testRegion2         testRegion3             testRegion1       testRegion2       testRegion3;
hydra.RegionPrms-dataPolicy     = hdfsPartition;
hydra.RegionPrms-hdfsStoreName  = hdfsstore;
hydra.RegionPrms-hdfsWriteOnly  = false;
hydra.RegionPrms-diskStoreName  = none;
hydra.RegionPrms-cacheListeners = util.SilenceListener;
hydra.RegionPrms-diskSynchronous = ONEOF true false FOENO;

hydra.RegionPrms-partitionName      = apr1              apr2                apr3                    pr1               pr2               pr3;
hydra.PartitionPrms-colocatedWith   = none              testRegion1         testRegion2             none              testRegion1       testRegion2;

hydra.PartitionPrms-names           = apr1              apr2                apr3                    pr1               pr2               pr3;
hydra.PartitionPrms-localMaxMemory  = 0                 0                   0                       default           default           default;

hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-partitionResolver = parReg.colocation.MonthPartitionResolver;
hydra.PartitionPrms-totalNumBuckets = 12;  // works with MonthPartitionResolver

parReg.ParRegPrms-partitionResolverData = BB;
parReg.ParRegPrms-isWithRoutingResolver = true;

parReg.ParRegPrms-numberOfDataStore = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf;

hydra.RegionPrms-dataPolicy     = hdfsPartition;
hydra.RegionPrms-hdfsStoreName  = hdfsstore;
hydra.RegionPrms-hdfsWriteOnly  = false;
hydra.RegionPrms-diskStoreName  = none;

hydra.HDFSStorePrms-names = hdfsstore;
hydra.HDFSStorePrms-hadoopName = hadoop;
hydra.HDFSStorePrms-diskStoreName = disk;
hydra.HDFSStorePrms-batchSizeMB = 5;
hydra.HDFSStorePrms-homeDir = gemfire_data;
hydra.HDFSStorePrms-maximumQueueMemory = 50;
hydra.HDFSStorePrms-persistent = true;

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

// not used in this test
//hydra.HDFSStorePrms-batchTimeInterval = ????;
//hydra.HDFSStorePrms-blockCacheSize = ????;
//hydra.HDFSStorePrms-diskSynchronous = true/false;
//hydra.HDFSStorePrms-fileRolloverInterval = ????;
//hydra.HDFSStorePrms-maxFileSize = ????;
