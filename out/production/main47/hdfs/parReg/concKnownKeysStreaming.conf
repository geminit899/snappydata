hydra.Prms-testDescription = "
This test creates a persistent partitioned region, then does various entry operations on a known key
range. Values are checked for correctness in the close task.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

hydra.VmPrms-extraVMArgs  += fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms400m -Xmx400m \", ${peerHosts}, true)"
                             ncf;

// avoid garbage buildup during validation (see BUG 49828)
hydra.VmPrms-extraVMArgsSUN += "-XX:+UseConcMarkSweepGC -XX:+UseCMSInitiatingOccupancyOnly -XX:CMSInitiatingOccupancyFraction=10";

hydra.VmPrms-extraClassPaths +=
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${configHosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${peerHosts})" ncf
  ;

// this test uses tasks from getInitialImage tests to load the region,
STARTTASK taskClass  = parReg.KnownKeysTest
          taskMethod = StartTask_initialize
          ;
STARTTASK taskClass   = hdfs.HDFSUtil
          taskMethod  = configureHadoopTask
          clientNames = config1
          ;

INITTASK taskClass    = hdfs.HDFSUtil
         taskMethod   = startCluster
         threadGroups = configThreads
         ;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_initialize
             threadGroups = verifyThreads, peerThreads
             ;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_loadRegion
             threadGroups = verifyThreads, peerThreads
             batch;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_verifyHDFSRegionSize
             threadGroups = verifyThreads
             batch;

// prepare for end task recovery
INITTASK    taskClass   = parReg.KnownKeysTest  taskMethod = HydraTask_writeDiskDirsToBB
            threadGroups = verifyThreads, peerThreads
            runMode = once;

TASK         taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_doOps
             threadGroups = verifyThreads, peerThreads;
 
CLOSETASK    taskClass     = parReg.ParRegUtil  taskMethod  = HydraTask_rebalance
             threadGroups = verifyThreads, peerThreads;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyPrimaries
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyBucketCopiesBatched
             threadGroups = verifyThreads
             batch;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyHDFSRegionContents
             threadGroups = verifyThreads
             batch;

ENDTASK     taskClass   = hdfs.KnownKeysTestStreamingValidator taskMethod = HydraTask_initialize
            parReg.ParRegPrms-recoverFromDisk = true
            hydra.ConfigPrms-cacheConfig  = cache1
            hydra.ConfigPrms-regionConfig = clientRegion
            hydra.ConfigPrms-bridgeConfig = bridge
            clientNames = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", ${${B}Hosts}, true)" ncf
            ;

ENDTASK     taskClass   = hdfs.HDFSUtil            taskMethod = HydraTask_startQueueMonitor
           clientNames = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", ${${B}Hosts}, true)" ncf;

ENDTASK     taskClass   = hdfs.HDFSUtil            taskMethod = HydraTask_waitForQueuesToDrain
           clientNames = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", ${${B}Hosts}, true)" ncf;

ENDTASK     taskClass   = parReg.KnownKeysTest     taskMethod = HydraTask_disconnect
           clientNames = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", ${${B}Hosts}, true)" ncf;

ENDTASK     taskClass   = hdfs.KnownKeysTestStreamingValidator taskMethod = HydraTask_initialize
            hydra.ConfigPrms-cacheConfig  = cache1
            hydra.ConfigPrms-regionConfig = validationRegion
            hydra.ConfigPrms-bridgeConfig = bridge
            ;

ENDTASK taskClass   = hdfs.KnownKeysTestStreamingValidator
        taskMethod  = HydraTask_loadDataFromHDFS
        clientNames = config1
        ;
ENDTASK taskClass   = hdfs.KnownKeysTestStreamingValidator
        taskMethod  = HydraTask_verifyRegionContents
        clientNames = peer1
        ;
ENDTASK taskClass   = hdfs.HDFSUtil
        taskMethod  = stopCluster
        clientNames = config1
        ;

THREADGROUP configThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM} ncf
    totalVMs     = fcn "${${A}VMsPerHost} * ${${A}Hosts}" ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\", ${${A}Hosts}, true)" ncf
    ;
// need one verify thread per vm to verify each vm's view
THREADGROUP verifyThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    totalVMs     = fcn "${${B}VMsPerHost} * ${${B}Hosts}" ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", ${${B}Hosts}, true)" ncf
    ;
THREADGROUP peerThreads
    totalThreads = fcn (${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}) - (${${B}Hosts} * ${${B}VMsPerHost}) ncf
    totalVMs     = fcn "${${B}VMsPerHost} * ${${B}Hosts}" ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", ${${B}Hosts}, true)" ncf
    ;

hydra.Prms-checkTaskMethodsExist = false;
hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 900;
hydra.Prms-maxEndTaskResultWaitSec = 31536000;  // whatever it takes
hydra.Prms-doStartAndEndTasksLockStep = true;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.ConfigPrms-hadoopConfig = hadoop;
hydra.ConfigPrms-hdfsStoreConfig = hdfsstore;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

// to avoid bug 34430, scope must be ack
hydra.RegionPrms-names          = clientRegion          validationRegion;
hydra.RegionPrms-regionName     = partitionedRegion     validationRegion;
hydra.RegionPrms-dataPolicy     = hdfsPartition;
hydra.RegionPrms-hdfsStoreName  = hdfsstore;
hydra.RegionPrms-hdfsWriteOnly  = true                  false;
hydra.RegionPrms-cacheListeners = util.SummaryLogListener;
hydra.RegionPrms-partitionName  = pr;

hydra.PartitionPrms-names       = pr;

hydra.CachePrms-resourceManagerName = manager;
hydra.ResourceManagerPrms-names = manager;
hydra.ResourceManagerPrms-evictionHeapPercentage = 90;
hydra.ResourceManagerPrms-criticalHeapPercentage = 99;
hydra.RegionPrms-evictionAttributes = lruHeapPercentage default default;

// for now, do not attempt to re-initialize regions based on generated cache.xml files
util.CachePrms-useDeclarativeXmlFile = false;

hydra.HadoopPrms-names = hadoop;

hydra.HDFSStorePrms-names = hdfsstore;
hydra.HDFSStorePrms-hadoopName = hadoop;
hydra.HDFSStorePrms-diskStoreName = disk;
hydra.HDFSStorePrms-batchSizeMB = ${batchSizeMB};
hydra.HDFSStorePrms-batchTimeInterval = ${batchTimeInterval};
hydra.HDFSStorePrms-homeDir = gemfire_data;
hydra.HDFSStorePrms-maximumQueueMemory = 50;
hydra.HDFSStorePrms-persistent = true;

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

// not used in this test
//hydra.HDFSStorePrms-blockCacheSize = ????;
//hydra.HDFSStorePrms-diskSynchronous = true/false;
//hydra.HDFSStorePrms-fileRolloverInterval = ????;
//hydra.HDFSStorePrms-maxFileSize = ????;
