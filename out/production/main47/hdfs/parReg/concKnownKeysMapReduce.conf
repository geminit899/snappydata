hydra.Prms-testDescription = "
This test creates a persistent partitioned region, then does various entry operations on a known key
range. Values are checked for correctness in the close task.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p.inc;

hydra.VmPrms-extraVMArgs  += fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms400m -Xmx400m \", ${peerHosts}, true)"
                             ncf;

// this test uses tasks from getInitialImage tests to load the region,
STARTTASK    taskClass     = parReg.KnownKeysTest  taskMethod = StartTask_initialize;

STARTTASK    taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
             clientNames = client1
             ;

STARTTASK    taskClass = hdfs.HDFSUtil taskMethod = startCluster
             clientNames = client1
             ;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_initialize;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_loadRegion
             threadGroups = verifyThreads, default
             batch;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

INITTASK     taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_verifyHDFSRegionSize
             threadGroups = verifyThreads
             batch;

// prepare for end task recovery
INITTASK    taskClass   = parReg.KnownKeysTest  taskMethod = HydraTask_writeDiskDirsToBB
            runMode = once;

INITTASK     taskClass = hdfs.HDFSUtil          taskMethod = HydraTask_startQueueMonitor
             threadGroups = verifyThreads;
 
TASK         taskClass     = parReg.KnownKeysTest  taskMethod = HydraTask_doOps
             threadGroups = verifyThreads, default;
 
CLOSETASK    taskClass     = parReg.ParRegUtil  taskMethod  = HydraTask_rebalance;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyPrimaries
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyBucketCopiesBatched
             threadGroups = verifyThreads
             batch;

CLOSETASK    taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyHDFSRegionContents
             threadGroups = verifyThreads
             batch;

CLOSETASK   taskClass   = hdfs.HDFSUtil            taskMethod = HydraTask_waitForQueuesToDrain
            threadgroups = verifyThreads;

// recover from disk and validate recovery
hydra.Prms-checkTaskMethodsExist = false;
hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-doStartAndEndTasksLockStep = true;

// setup validation region for use by map/reduce job
// note that the GFOutputFormatter requires our gemfire instance to be a server
ENDTASK     taskClass   = hdfs.KnownKeysTestStreamingValidator taskMethod = HydraTask_initialize
            hydra.ConfigPrms-cacheConfig  = cache1
            hydra.ConfigPrms-regionConfig = validationRegion
            hydra.ConfigPrms-bridgeConfig   = bridge
            ;

hdfs.HDFSPrms-mapReduceClassName = ${mapReduceClass};
ENDTASK      taskClass    = hdfs.HDFSUtil         taskMethod = execMapReduceJob
             hydra.ConfigPrms-regionConfig = clientRegion
             clientNames = client1
             ;

ENDTASK      taskClass     = parReg.KnownKeysTest  taskMethod  = HydraTask_verifyRegionContents
             clientNames = client1
             ;

ENDTASK      taskClass = hdfs.HDFSUtil taskMethod = stopCluster
             clientNames = client1
             ;

// need one verify thread per vm to verify each vm's view
THREADGROUP verifyThreads totalThreads = fcn "${peerVMsPerHost} * ${peerHosts}" ncf
                          totalVMs = fcn "${peerVMsPerHost} * ${peerHosts}" ncf;

hydra.Prms-totalTaskTimeSec = 14400; // test is workload based
hydra.Prms-maxResultWaitSec = 1800;
hydra.Prms-maxEndTaskResultWaitSec = 31536000;  // whatever it takes
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${byteArraySize};
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

// HDFS additions
hydra.VmPrms-extraClassPaths += fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${peerHosts})" ncf;

// for now, do not attempt to re-initialize regions based on generated cache.xml files
util.CachePrms-useDeclarativeXmlFile = false;

hydra.ConfigPrms-hadoopConfig = hadoop;
hydra.ConfigPrms-hdfsStoreConfig = hdfsstore;
hydra.HadoopPrms-names = hadoop;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.BridgePrms-names = bridge;

// to avoid bug 34430, scope must be ack
hydra.RegionPrms-names          = clientRegion           validationRegion;
hydra.RegionPrms-regionName     = partitionedRegion      validationRegion;
hydra.RegionPrms-dataPolicy     = hdfsPartition;
hydra.RegionPrms-hdfsStoreName  = hdfsstore;
hydra.RegionPrms-hdfsWriteOnly  = ${hdfsWriteOnly};
hydra.RegionPrms-poolName       = none;
hydra.RegionPrms-partitionName  = pr;

hydra.PartitionPrms-names       = pr;

hydra.HDFSStorePrms-names = hdfsstore;
hydra.HDFSStorePrms-hadoopName = hadoop;
hydra.HDFSStorePrms-diskStoreName = disk;
hydra.HDFSStorePrms-batchSizeMB = ${batchSizeMB};
hydra.HDFSStorePrms-batchTimeInterval = ${batchTimeInterval};
hydra.HDFSStorePrms-homeDir = gemfire_data;
hydra.HDFSStorePrms-maximumQueueMemory = 50;
hydra.HDFSStorePrms-persistent = true;

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

// not used in this test
//hydra.HDFSStorePrms-blockCacheSize = ????;
//hydra.HDFSStorePrms-diskSynchronous = true/false;
//hydra.HDFSStorePrms-fileRolloverInterval = ????;
//hydra.HDFSStorePrms-maxFileSize = ????;



