hydra.Prms-testRequirement = "Test persistent partitioned regions with a variety of operations with careful validation and concurrent execution";

STARTTASK    taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
             clientNames = client1
             ;

STARTTASK    taskClass = hdfs.HDFSUtil taskMethod = startCluster
             clientNames = client1
             ;

INCLUDE $JTESTS/parReg/concParReg.conf;

// add another 100MB for the HDFS AEQ (maxMemory in MB)
hydra.VmPrms-extraVMArgs  += fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms400m -Xmx400m \", ${peerHosts}, true)"
                             ncf;

// prepare for end task recovery
INITTASK    taskClass   = parReg.ParRegTest  taskMethod = HydraTask_writeDiskDirsToBB
            runMode = once;

// each thread is also an admin vm so it can potentially call online backup
INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS;

ENDTASK     taskClass   = hdfs.ParRegTestStreamingValidator taskMethod = HydraTask_initialize
            parReg.ParRegPrms-recoverFromDisk = true
            hydra.ConfigPrms-regionConfig = clientRegion
            ;

ENDTASK     taskClass   = hdfs.HDFSUtil            taskMethod = HydraTask_startQueueMonitor;

ENDTASK     taskClass   = hdfs.HDFSUtil            taskMethod = HydraTask_waitForQueuesToDrain;

ENDTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_disconnect;

ENDTASK     taskClass   = hdfs.ParRegTestStreamingValidator taskMethod = HydraTask_initialize
            hydra.ConfigPrms-regionConfig    = validationRegion
            ;

ENDTASK     taskClass   = hdfs.ParRegTestStreamingValidator taskMethod = HydraTask_loadDataFromHDFS
            clientNames = client1
            ;

ENDTASK     taskClass   = hdfs.ParRegTestStreamingValidator taskMethod = HydraTask_validateRegionContents
            clientNames = client1
            ;

ENDTASK     taskClass = hdfs.HDFSUtil taskMethod = stopCluster
            clientNames = client1
            ;

parReg.ParRegPrms-entryOperations = ONEOF add getNew putIfAbsentAsCreate update get destroy remove
                                          add getNew putIfAbsentAsCreate replaceNoInval replaceOldNoInval 
                                    FOENO; 
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsentAsCreate FOENO;

// uncomment these lines to remove concurrentMap ops
//parReg.ParRegPrms-entryOperations = ONEOF add getNew update get FOENO; 
//parReg.ParRegPrms-upperThresholdOperations = ONEOF update FOENO;
//parReg.ParRegPrms-lowerThresholdOperations = ONEOF add getNew FOENO;

// End tasks for persistent peer tests; recover from disk and validate recovery 
hydra.Prms-checkTaskMethodsExist = false;
hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-doStartAndEndTasksLockStep = true;
hydra.Prms-maxEndTaskResultWaitSec = 7200;
parReg.ParRegPrms-secondsToRun = 300;
hydra.Prms-maxResultWaitSec = 1200;  // allow more time for HDFS versions (since region size not limited)

// todo@lhughes -- add this in once apis agreed upon
//parReg.ParRegPrms-doOnlineBackup = true;

util.AdminHelperPrms-adminInDsVm=true;

hydra.VmPrms-extraClassPaths += fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${peerHosts})" ncf;

// for now, do not attempt to re-initialize regions based on generated cache.xml files
util.CachePrms-useDeclarativeXmlFile = false;

hydra.ConfigPrms-hadoopConfig = hadoop;
hydra.ConfigPrms-hdfsStoreConfig = hdfsstore;

hydra.HadoopPrms-names = hadoop;

hydra.RegionPrms-names          = clientRegion      validationRegion;
hydra.RegionPrms-regionName     = partitionedRegion validationRegion;
hydra.RegionPrms-dataPolicy     = hdfsPartition;
hydra.RegionPrms-hdfsStoreName  = hdfsstore;
hydra.RegionPrms-hdfsWriteOnly  = true              false;
hydra.RegionPrms-diskStoreName  = none;
hydra.RegionPrms-cacheListeners = util.SummaryLogListener;

hydra.HDFSStorePrms-names = hdfsstore;
hydra.HDFSStorePrms-hadoopName = hadoop;
hydra.HDFSStorePrms-diskStoreName = disk;
hydra.HDFSStorePrms-batchSizeMB = 5;
hydra.HDFSStorePrms-batchTimeInterval = 5000;
hydra.HDFSStorePrms-homeDir = gemfire_data;
hydra.HDFSStorePrms-maximumQueueMemory = 50;
hydra.HDFSStorePrms-persistent = true;

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

// not used in this test
//hydra.HDFSStorePrms-blockCacheSize = ????;
//hydra.HDFSStorePrms-diskSynchronous = true/false;
//hydra.HDFSStorePrms-fileRolloverInterval = ????;
//hydra.HDFSStorePrms-maxFileSize = ????;
