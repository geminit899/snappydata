hydra.Prms-testRequirement = "Test persistent partitioned regions with a variety of operations with careful validation and serial execution";

STARTTASK    taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
             clientNames = client1
             ;

STARTTASK    taskClass = hdfs.HDFSUtil taskMethod = startCluster
             clientNames = client1
             ;

INCLUDE $JTESTS/parReg/serialParReg.conf;

// prepare for end task recovery
INITTASK    taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
            runMode = once;

INITTASK    taskClass   = parReg.ParRegTest  taskMethod = HydraTask_writeDiskDirsToBB
            runMode = once;

// each thread is also an admin vm so it can potentially call online backup
INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS;

// recover HDFS AEQ from disk 
ENDTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initialize
            parReg.ParRegPrms-recoverFromDisk = true;

// validate region contents while redundancy recovery is running,
// wait for redundancy recovery and verify PR internals 
ENDTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_validateRegionContents
             clientNames = client1
             ;

ENDTASK      taskClass = hdfs.HDFSUtil taskMethod = stopCluster
             clientNames = client1
             ;

// End tasks for persistent peer tests; recover from disk and validate recovery 
hydra.Prms-checkTaskMethodsExist = false;
hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-doStartAndEndTasksLockStep = true;
hydra.Prms-maxEndTaskResultWaitSec = 7200;
hydra.Prms-totalTaskTimeSec = 300;

parReg.ParRegPrms-entryOperations = ONEOF add add add add update get remove destroy
                                          putIfAbsentAsCreate replaceNoInval replaceOldNoInval 
                                    FOENO;
parReg.ParRegPrms-upperThresholdOperations = ONEOF remove destroy FOENO;

util.AdminHelperPrms-adminInDsVm=true;

hydra.VmPrms-extraClassPaths += fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${peerHosts})" ncf;

// for now, do not attempt to re-initialize regions based on generated cache.xml files
util.CachePrms-useDeclarativeXmlFile = false;

hydra.ConfigPrms-hadoopConfig = hadoop;
hydra.ConfigPrms-hdfsStoreConfig = hdfsstore;

hydra.HadoopPrms-names = hadoop;

hydra.RegionPrms-dataPolicy     = hdfsPartition;
hydra.RegionPrms-hdfsStoreName  = hdfsstore;
hydra.RegionPrms-hdfsWriteOnly  = false;
hydra.RegionPrms-diskStoreName  = none;

hydra.HDFSStorePrms-names = hdfsstore;
hydra.HDFSStorePrms-hadoopName = hadoop;
hydra.HDFSStorePrms-diskStoreName = disk;
hydra.HDFSStorePrms-batchSizeMB = 5;
hydra.HDFSStorePrms-homeDir = gemfire_data;
hydra.HDFSStorePrms-maximumQueueMemory = 100;
hydra.HDFSStorePrms-persistent = true;

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

// not used in this test
//hydra.HDFSStorePrms-batchTimeInterval = ????;
//hydra.HDFSStorePrms-blockCacheSize = ????;
//hydra.HDFSStorePrms-diskSynchronous = true/false;
//hydra.HDFSStorePrms-fileRolloverInterval = ????;
//hydra.HDFSStorePrms-maxFileSize = ????;
