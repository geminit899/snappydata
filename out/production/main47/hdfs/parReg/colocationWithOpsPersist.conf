hydra.Prms-testDescription = "
This test creates an HDFS_PARTITION Region, then does various entry operations on a known key
range. Values are checked for correctness in the close task.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p.inc;

hydra.VmPrms-extraVMArgs  += fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms400m -Xmx400m \", ${peerHosts}, true)"
                             ncf;

// this test uses tasks from getInitialImage tests to load the region,

STARTTASK    taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
             clientNames = client1
             ;

STARTTASK    taskClass = hdfs.HDFSUtil taskMethod = startCluster
             clientNames = client1
             ;

INCLUDE $JTESTS/parReg/colocation/colocationWithOps.conf;

CLOSETASK     taskClass = parReg.colocation.ParRegColocation taskMethod = HydraTask_disconnect
              threadGroups = verifyThreads;

CLOSETASK     taskClass     = parReg.colocation.ParRegColocation  taskMethod = HydraTask_initialize
              threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.ParRegUtil  taskMethod  = HydraTask_waitForRecovery
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.ParRegUtil  taskMethod  = HydraTask_recreateBucketsFromHDFS
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyPrimaries
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyPRMetaData
             threadGroups = verifyThreads; 
             
CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyColocatedRegions
             threadGroups = verifyThreads;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyRegionContents
             threadGroups = verifyThreads
             ;

CLOSETASK    taskClass     = parReg.colocation.ParRegColocation  taskMethod  = HydraTask_verifyBucketCopies
             threadGroups = verifyThreads
             ;

ENDTASK      taskClass = hdfs.HDFSUtil taskMethod = stopCluster
             clientNames = client1
             ;

hydra.Prms-checkTaskMethodsExist = false;
hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-useFixedRandomInMaster = true;
hydra.Prms-maxResultWaitSec = 1200;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

hydra.VmPrms-extraVMArgs = "-Xmx1000m";
hydra.VmPrms-extraClassPaths += fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${peerHosts})" ncf;                          

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

util.CachePrms-useDeclarativeXmlFile = false;

hydra.RegionPrms-names          = clientRegion1 clientRegion2 clientRegion3 clientRegion4 clientRegion5 clientRegion6 clientRegion7;
hydra.RegionPrms-regionName     = clientRegion1 clientRegion2 clientRegion3 clientRegion4 clientRegion5 clientRegion6 clientRegion7;
hydra.RegionPrms-partitionName  = pr1           pr2           pr3           pr4           pr5           pr6           pr7;
hydra.PartitionPrms-names       = pr1           pr2           pr3           pr4           pr5           pr6           pr7;
hydra.PartitionPrms-colocatedWith = none        clientRegion1 clientRegion2 clientRegion3 clientRegion4 clientRegion5 clientRegion6;
hydra.RegionPrms-dataPolicy     = hdfsPartition;
hydra.RegionPrms-hdfsStoreName  = hdfsstore;
hydra.RegionPrms-hdfsWriteOnly  = false;
hydra.RegionPrms-diskStoreName  = none;

hydra.PartitionPrms-partitionResolver = parReg.colocation.MonthPartitionResolver;
hydra.PartitionPrms-totalNumBuckets = 12;  // works with MonthPartitionResolver
hydra.PartitionPrms-redundantCopies = ONEOF 1 2 3 FOENO;

// for now, do not attempt to re-initialize regions based on generated cache.xml files
util.CachePrms-useDeclarativeXmlFile = false;

hydra.ConfigPrms-hadoopConfig = hadoop;
hydra.ConfigPrms-hdfsStoreConfig = hdfsstore;

hydra.HadoopPrms-names = hadoop;

hydra.HDFSStorePrms-names = hdfsstore;
hydra.HDFSStorePrms-hadoopName = hadoop;
hydra.HDFSStorePrms-diskStoreName = disk;
hydra.HDFSStorePrms-batchSizeMB = 5;
hydra.HDFSStorePrms-homeDir = gemfire_data;
hydra.HDFSStorePrms-maximumQueueMemory = 50;
hydra.HDFSStorePrms-persistent = true;

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;

// not used in this test
//hydra.HDFSStorePrms-batchTimeInterval = ????;
//hydra.HDFSStorePrms-blockCacheSize = ????;
//hydra.HDFSStorePrms-diskSynchronous = true/false;
//hydra.HDFSStorePrms-fileRolloverInterval = ????;
//hydra.HDFSStorePrms-maxFileSize = ????;


