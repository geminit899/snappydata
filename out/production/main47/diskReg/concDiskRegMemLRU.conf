hydra.Prms-testDescription =
"This test runs in serial execution mode in a distributed environment and 
carefully validates disk regions. Each run of this test creates 
and validates one of 3 region configurations: 1) disk for overflow 
2) disk for persistence 3) disk for overflow and persistence. This test validates 
the LRU aspect of diskRegions, where values live (VM or disk), and spreading 
of data across disk directories. Overflow is done with MemLRU.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams3.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = 2; // one VM for each disk region configuration
hydra.ClientPrms-vmThreads    = 10;

STARTTASK    taskClass   = diskReg.DiskRegBB taskMethod  = HydraTask_initialize;

INITTASK     taskClass   = diskReg.ConcDiskRegTest taskMethod  = HydraTask_initialize;

TASK         taskClass   = diskReg.DiskRegTest taskMethod  = HydraTask_doEntryOperations;

ENDTASK      taskClass   = diskReg.DiskRegTest taskMethod  = HydraTask_endTask;

hydra.Prms-totalTaskTimeSec = 1800;  
hydra.Prms-maxResultWaitSec = 360;
hydra.Prms-serialExecution = false;
hydra.Prms-alwaysDoEndTasks = false;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 50;
util.TestHelperPrms-printObjectDepth = 0;
util.TestHelperPrms-minTaskGranularitySec = 60;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10000;
util.RandomValuesPrms-objectDepth = 0; 
util.ValueHolderPrms-useExtraObject = true;

hydra.ConfigPrms-cacheConfig = gemfireCache;
hydra.CachePrms-names = gemfireCache;

hydra.Prms-useFixedRandomInMaster = true;
hydra.ConfigPrms-regionConfig = oneof testRegion1 testRegion2 testRegion3 foeno;
hydra.RegionPrms-names =              testRegion1         
                                      testRegion2 
                                      testRegion3;
hydra.RegionPrms-regionName = testRegion;
hydra.RegionPrms-scope = oneof ack noack global foeno;
hydra.RegionPrms-dataPolicy =         persistentReplicate 
                                      replicate   
                                      persistentReplicate;
hydra.RegionPrms-cacheListeners = diskReg.DiskRegListener;
hydra.RegionPrms-cacheLoader = diskReg.DiskRegLoader;
hydra.RegionPrms-evictionAttributes = lruMemorySize 1 none overflowToDisk,
                                      lruMemorySize 1 none overflowToDisk, 
                                      lruMemorySize 1 none overflowToDisk;
hydra.DiskStorePrms-diskDirNum = oneof 1 2 3 4 foeno;

hydra.RegionPrms-diskStoreName  = diskStore1;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.RegionPrms-diskSynchronous = oneof true false foeno;
hydra.DiskStorePrms-timeInterval = oneof 1000 2000 3000 4000 foeno;

diskReg.DiskRegPrms-useComplexObject = ONEOF true false FOENO;
diskReg.DiskRegPrms-useCacheLoader = ONEOF true false FOENO;
diskReg.DiskRegPrms-entryOperations = ONEOF add add add destroy invalidate read update putIfAbsent remove replace FOENO;

// for a workload based test, set this parameter
//diskReg.DiskRegPrms-endTestOnNumKeysInRegion = 30000;
diskReg.DiskRegPrms-lowerThreshold = 10000;
diskReg.DiskRegPrms-upperThreshold = 30000;
diskReg.DiskRegPrms-lowerThresholdOperations = ONEOF add FOENO;
diskReg.DiskRegPrms-upperThresholdOperations = ONEOF remove FOENO;

hydra.VmPrms-extraVMArgs=-Xmx350m;
