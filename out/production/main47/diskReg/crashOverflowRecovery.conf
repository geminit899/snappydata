hydra.Prms-testDescription =
"This test runs in serial execution mode executing the following steps:
 INITTASKS create region & maxKeys entries in the region
 TASK doEntryOperations performs destroy, invalidate and update specific ranges of the key space
 TASK stopClientVm waits for a minimum number of operations to occur, then stops
      the clientVm performing doEntryOperations
 TASKS readyEntries & updateEntries constantly access the entries in the key space
 ENDTASK validates the correctness of each entry after recovery

This uses only VM regions, since VM regions are the only regions that can be disk regions. 
There is no distribution in this test; its mission is to verify persistent disk
regions and the ability to restore the cache from the diskRegion.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams2.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 5;

STARTTASK    taskClass   = diskReg.DiskRegBB taskMethod  = HydraTask_initialize;

INITTASK     taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_initialize
             ;

INITTASK     taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_createEntries
             threadgroups = target
             ;

TASK         taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_doEntryOperations
             maxTimesToRun = 1
             threadgroups = target
             ;

TASK         taskClass   = diskReg.DiskRegRecoveryTest taskMethod = HydraTask_stopClientVm
             threadgroups = stopper
             ;

TASK         taskClass   = diskReg.DiskRegRecoveryTest taskMethod = HydraTask_readEntries
             threadgroups = accessor
             ;

TASK         taskClass   = diskReg.DiskRegRecoveryTest taskMethod = HydraTask_updateEntries
             threadgroups = accessor
             ;

ENDTASK      taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_initialize
             diskReg.DiskRegPrms-useBackupDiskDirs = true
             ;

ENDTASK      taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_validateRecovery
             ;

   
THREADGROUP target  totalThreads = 1 totalVMs = 1 clientNames=client1;
THREADGROUP stopper totalThreads = 1 totalVMs = 1 clientNames=client1;
THREADGROUP accessor 
   totalThreads = 3 totalVMs = 1 clientNames=client1
   totalThreads = 5 totalVMs = 1 clientNames=client2
   ;

hydra.Prms-totalTaskTimeSec = 180;  
hydra.Prms-maxResultWaitSec = 120;
hydra.Prms-alwaysDoEndTasks = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;
util.TestHelperPrms-minTaskGranularitySec = 10;

hydra.ConfigPrms-cacheConfig = gemfireCache;
hydra.CachePrms-names = gemfireCache;
hydra.CachePrms-resourceManagerName = manager;

hydra.ResourceManagerPrms-names = manager;
hydra.ResourceManagerPrms-evictionHeapPercentage = 1;

hydra.ConfigPrms-regionConfig = testRegion;

hydra.RegionPrms-names = testRegion;
hydra.RegionPrms-regionName = testRegion;
hydra.RegionPrms-scope = oneof ack noack global foeno;
hydra.RegionPrms-dataPolicy = persistentReplicate;
hydra.RegionPrms-cacheListeners = diskReg.DiskRegListener;
hydra.RegionPrms-cacheLoader = diskReg.DiskRegLoader;
hydra.RegionPrms-evictionAttributes = lruEntryCount oneof 100 1000 foeno overflowToDisk, 
										lruHeapPercentage default overflowToDisk;
hydra.DiskStorePrms-diskDirNum = oneof 1 2 3 4 foeno;

hydra.RegionPrms-diskStoreName  = diskStore1;

hydra.DiskStorePrms-names = diskStore1;
hydra.RegionPrms-diskSynchronous = true;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1000 2000 3000 4000 foeno;

diskReg.DiskRegPrms-useCacheLoader = ONEOF true false FOENO;

util.RandomValuesPrms-objectType = byte[];

diskReg.DiskRecoveryPrms-maxKeys = ${maxKeys};
diskReg.DiskRecoveryPrms-objectType = ${objectType};
diskReg.DiskRecoveryPrms-stopType = "mean_kill";

objects.ArrayOfBytePrms-size = 1024;
objects.NestedOrderVectorPrms-width = 5;
objects.NestedOrderVectorPrms-depth = 5;
