hydra.Prms-testDescription =
"This test runs in concurrent execution mode executing the following steps:
 INITTASKS create region & maxKeys entries in the region
 TASK doEntryOperations performs destroy, invalidate and update on specific ranges of the key space
 TASKS readEntries & updateEntries constantly access the key space
 ENDTASK validates the correctness of each entry after recovery

This uses only VM regions, since VM regions are the only regions that can be disk regions. 
There is no distribution in this test; its mission is to verify persistent disk
regions and the ability to restore the cache from the diskRegion.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams1.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 5;

STARTTASK    taskClass   = diskReg.DiskRegBB taskMethod  = HydraTask_initialize;

INITTASK     taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_initialize
             diskReg.DiskRegPrms-diskDirNames = vader1 vader2 vader3
             ;

INITTASK     taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_createEntries
             threadgroups = target;
             ;

TASK         taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_doEntryOperations
             threadgroups = target
             maxTimesToRun = 1
             ;

TASK         taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_readEntries
             threadgroups = accessor
             ;

TASK         taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_updateEntries
             threadgroups = accessor
             ;

CLOSETASK    taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_checkStats
             ;

ENDTASK      taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_initialize
             diskReg.DiskRegPrms-useBackupDiskDirs = true
             ;

ENDTASK      taskClass   = diskReg.DiskRegRecoveryTest taskMethod  = HydraTask_validateRecovery
             ;

THREADGROUP target totalThreads = 1;
THREADGROUP accessor totalThreads = 4;
   
hydra.Prms-totalTaskTimeSec = 1200;  
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-alwaysDoEndTasks = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;
util.TestHelperPrms-minTaskGranularitySec = 10;

hydra.ConfigPrms-cacheConfig = gemfireCache;
hydra.CachePrms-names = gemfireCache;

hydra.ConfigPrms-regionConfig = testRegion;

hydra.RegionPrms-names = testRegion;
hydra.RegionPrms-regionName = testRegion;
hydra.RegionPrms-scope = local;
hydra.RegionPrms-dataPolicy = persistentReplicate;
hydra.RegionPrms-cacheLoader = diskReg.DiskRegLoader;
hydra.DiskStorePrms-diskDirNum = 3;

hydra.RegionPrms-diskStoreName  = diskStore1;

hydra.DiskStorePrms-names = diskStore1;
hydra.RegionPrms-diskSynchronous = true;

diskReg.DiskRegPrms-useCacheLoader = ONEOF true false FOENO;

util.RandomValuesPrms-objectType = byte[];

diskReg.DiskRecoveryPrms-maxKeys = ${maxKeys};
diskReg.DiskRecoveryPrms-objectType = ${objectType};

objects.ArrayOfBytePrms-size = 1024;
objects.NestedOrderVectorPrms-width = 5;
objects.NestedOrderVectorPrms-depth = 5;
