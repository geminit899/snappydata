include $JTESTS/hydraconfig/hydraparams1.inc;

hydra.Prms-testDescription = "TBD";

hydra.HostPrms-names                = host;
hydra.VmPrms-names                  = vm;
hydra.VmPrms-hostNames              = host;
hydra.GemFirePrms-names             = bridge             edge;
hydra.GemFirePrms-hostNames         = host;
hydra.GemFirePrms-distributedSystem = ds                 loner;
hydra.GemFirePrms-securityName      = bridgeScheme       edgeScheme;

hydra.SecurityPrms-names               = bridgeScheme edgeScheme;
hydra.SecurityPrms-peerAuthInit        = hydratest.security.UserPassword.create;
hydra.SecurityPrms-peerExtraProperties = hydratest.security.UserPasswordPrms;

hydratest.security.SecurityTestPrms-useBogusPassword = false;

hydratest.security.UserPasswordPrms-username = oneof root admin king queen boss ruler bigcheese foeno;
hydratest.security.UserPasswordPrms-password = Fr3d;

hydra.ClientPrms-names              = bridge   edge;
hydra.ClientPrms-vmNames            = vm;
hydra.ClientPrms-gemfireNames       = bridge   edge;
hydra.ClientPrms-vmQuantities       = 2        2;
hydra.ClientPrms-vmThreads          = 2        5;

THREADGROUP bridge totalThreads = 4 clientNames = bridge;
THREADGROUP edge   totalThreads = 10 clientNames = edge;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadGroups = bridge
          hydratest.security.UserPasswordPrms-password = r00t
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadGroups = edge
          hydratest.security.UserPasswordPrms-username = oneof reader1 reader2 reader3 reader4 writer1 writer2 writer3 writer4 foeno
          hydratest.security.UserPasswordPrms-password = uZer
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          distcache.gemfire.GemFireCachePrms-interestResultPolicy = none
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = registerInterestTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = sameKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          cacheperf.CachePerfPrms-interestBatchSize = 100
          threadGroups = edge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = bridge
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          threadGroups = bridge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          threadGroups = bridge, edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          threadGroups = bridge, edge
          ;

cacheperf.CachePerfPrms-batchSeconds = 5;
cacheperf.CachePerfPrms-trimSeconds  = 5;
cacheperf.CachePerfPrms-workSeconds  = 5;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 2 seconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 2 seconds;
cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;
hydra.Prms-totalTaskTimeSec = 9999999;

cacheperf.CachePerfPrms-maxKeys = 100;
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size = 100;

hydra.GemFirePrms-conserveSockets = false;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names          = bridge    edge;
hydra.RegionPrms-cacheListeners = none,     cacheperf.gemfire.LatencyListener;
hydra.RegionPrms-scope          = dack      local;
hydra.RegionPrms-dataPolicy     = replicate normal;
hydra.RegionPrms-poolName       = none      pool;

hydra.BridgePrms-names                = bridge;

hydra.PoolPrms-names                  = pool;
hydra.PoolPrms-contactAlgorithm       = hydra.EdgeHelper getRoundRobinEndpoints;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = true;
