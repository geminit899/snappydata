include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_hct_locator.inc;

hydra.Prms-testDescription = "Run bridge test with two edge versions.";
hydra.Prms-maxClientStartupWaitSec = 120; // fail faster

hydra.ClientPrms-versionNames =
  fcn "hydra.TestConfigFcns.duplicate(\"none\",  ${locatorHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"none\",  ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version1\", ${edgeHosts}/2)" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version2\", ${edgeHosts}/2)" ncf
  ;

hydra.VersionPrms-names   = version1    version2;
hydra.VersionPrms-version = ${version1} ${version2};

THREADGROUP locator
  totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                     * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)" ncf
  ;
THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost}
                                    * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf
  ;
THREADGROUP edge
  totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost}
                                     * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)" ncf
  ;

INITTASK  taskClass = cacheperf.CachePerfClient
          taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.version.partition.PartitionClient
          taskMethod = openCacheTask
          threadGroups = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          ;
INITTASK  taskClass = hydratest.version.partition.PartitionClient
          taskMethod = openCacheTask
          threadGroups = edge
          hydra.ConfigPrms-poolConfig = pool
          ;
INITTASK  taskClass = hydratest.version.partition.PartitionClient
          taskMethod = createAsyncEventQueueTask
          threadGroups = bridge
          hydra.ConfigPrms-asyncEventQueueConfig = queueA
          ;
INITTASK  taskClass = hydratest.version.partition.PartitionClient
          taskMethod = createAsyncEventQueueTask
          threadGroups = bridge
          hydra.ConfigPrms-asyncEventQueueConfig = queueB
          ;
INITTASK  taskClass = hydratest.version.partition.PartitionClient
          taskMethod = createRegionTask
          threadGroups = bridge, edge
          hydra.ConfigPrms-regionConfig = colocated
          ;
INITTASK  taskClass = hydratest.version.partition.PartitionClient
          taskMethod = createRegionTask
          threadGroups = bridge
          hydra.ConfigPrms-regionConfig = bridge
          ;
INITTASK  taskClass = hydratest.version.partition.PartitionClient
          taskMethod = createRegionTask
          threadGroups = edge
          hydra.ConfigPrms-regionConfig = edge
          ;
INITTASK  taskClass = hydratest.version.partition.PartitionClient
          taskMethod = reportPartitionAttributesTask
          threadGroups = bridge, edge
          ;
CLOSETASK taskClass = hydratest.version.partition.PartitionClient
          taskMethod = closeCacheTask
          threadGroups = edge
          ;
CLOSETASK taskClass = hydratest.version.partition.PartitionClient
          taskMethod = closeCacheTask
          threadGroups = bridge
          ;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache; 
hydra.CachePrms-pdxDiskStoreName = disk;
hydra.CachePrms-pdxPersistent = true;

hydra.DiskStorePrms-names = disk;

hydra.Prms-removeDiskFilesAfterTest = true;

hydra.RegionPrms-names         = bridge      edge         colocated;
hydra.RegionPrms-asyncEventQueueNames = queueA queueB, none, none;
hydra.RegionPrms-regionName    = default     default      colocatedRegion;
hydra.RegionPrms-dataPolicy    = partitioned partitioned  partitioned;
hydra.RegionPrms-partitionName = bridge      edge         colocated;
hydra.RegionPrms-poolName      = none        none;
//hydra.RegionPrms-poolName      = none        pool;
// pools don't work with partitioned regions, and there's no other way
// to illustrate versioning until more product changes are made

hydra.AsyncEventQueuePrms-names = queueA queueB;
hydra.AsyncEventQueuePrms-asyncEventListener =
      hydratest.version.partition.TestAsyncEventListener;
hydra.AsyncEventQueuePrms-batchConflationEnabled = default true;
hydra.AsyncEventQueuePrms-batchTimeInterval = default 1000;
hydra.AsyncEventQueuePrms-diskStoreName = disk;
hydra.AsyncEventQueuePrms-diskSynchronous = true default;
hydra.AsyncEventQueuePrms-dispatcherThreads = 5 default;
hydra.AsyncEventQueuePrms-maximumQueueMemory = 5 7;
hydra.AsyncEventQueuePrms-orderPolicy = default partition;

hydra.PartitionPrms-names         = bridge          edge            colocated;
hydra.PartitionPrms-colocatedWith = colocatedRegion colocatedRegion none;
hydra.PartitionPrms-partitionListeners =
  none
  ,
  hydratest.version.partition.TestPartitionListener
  hydratest.version.partition.TestPartitionListener2
  ,
  none
  ;
hydra.PartitionPrms-partitionResolver =
  parReg.colocation.MonthPartitionResolver
  parReg.colocation.MonthPartitionResolver
  none;
parReg.ParRegPrms-partitionResolverData = key;

hydra.PartitionPrms-recoveryDelay = 1234567;
hydra.PartitionPrms-startupRecoveryDelay = 7654321;

hydra.BridgePrms-names = bridge;

hydra.PoolPrms-names = pool;
hydra.PoolPrms-contactAlgorithm = hydra.PoolHelper getRandomContacts;

cacheperf.CachePerfPrms-batchSeconds = 5;
cacheperf.CachePerfPrms-trimSeconds  = 5;
cacheperf.CachePerfPrms-workSeconds  = 5;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 2 seconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 2 seconds;
cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;
hydra.Prms-totalTaskTimeSec = 9999999;

cacheperf.CachePerfPrms-maxKeys = 100;
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size = 100;
