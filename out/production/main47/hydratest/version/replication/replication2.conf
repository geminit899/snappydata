include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_hct_locator.inc;

hydra.Prms-testDescription = "Run bridge test with two edge versions.";
hydra.Prms-maxClientStartupWaitSec = 120; // fail faster

hydra.ClientPrms-versionNames =
  fcn "hydra.TestConfigFcns.duplicate(\"none\",  ${locatorHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"none\",  ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version1\", ${edgeHosts}/2)" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version2\", ${edgeHosts}/2)" ncf
  ;

hydra.VersionPrms-names   = version1    version2;
hydra.VersionPrms-version = ${version1} ${version2};

THREADGROUP locator
  totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                     * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)" ncf
  ;
THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost}
                                    * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf
  ;
THREADGROUP edge
  totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost}
                                     * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)" ncf
  ;

INITTASK  taskClass = cacheperf.CachePerfClient
          taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.version.replication.ReplicationClient
          taskMethod = openCacheTask
          threadGroups = bridge
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          ;
INITTASK  taskClass = hydratest.version.replication.ReplicationClient
          taskMethod = openCacheTask
          threadGroups = edge
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-poolConfig = pool
          ;
INITTASK  taskClass = hydratest.version.replication.ReplicationClient
          taskMethod = createRegionTask
          threadGroups = bridge, edge
          hydra.ConfigPrms-regionConfig = colocated
          ;
INITTASK  taskClass = hydratest.version.replication.ReplicationClient
          taskMethod = createRegionTask
          threadGroups = bridge
          hydra.ConfigPrms-regionConfig = bridge
          ;
INITTASK  taskClass = hydratest.version.replication.ReplicationClient
          taskMethod = createRegionTask
          threadGroups = edge
          hydra.ConfigPrms-regionConfig = edge
          ;
INITTASK  taskClass = hydratest.version.replication.ReplicationClient
          taskMethod = reportCacheTask
          threadGroups = bridge, edge
          ;
INITTASK  taskClass = hydratest.version.replication.ReplicationClient
          taskMethod = reportDiskAttributesTask
          threadGroups = edge
          ;
CLOSETASK taskClass = hydratest.version.replication.ReplicationClient
          taskMethod = closeCacheTask
          threadGroups = edge
          ;
CLOSETASK taskClass = hydratest.version.replication.ReplicationClient
          taskMethod = closeCacheTask
          threadGroups = bridge
          ;

hydra.CachePrms-names               = bridge  edge; 

hydra.RegionPrms-names         = bridge    edge                colocated;
hydra.RegionPrms-regionName    = default   default             colocatedRegion;
hydra.RegionPrms-dataPolicy    = replicate persistentReplicate replicate;
hydra.RegionPrms-diskStoreName = none      edisk               none;
hydra.RegionPrms-diskSynchronous = default true                default;
hydra.RegionPrms-poolName      = none      pool;

hydra.DiskStorePrms-names = bdisk edisk;
hydra.DiskStorePrms-allowForceCompaction = true false;
hydra.DiskStorePrms-autoCompact = false true;
hydra.DiskStorePrms-compactionThreshold = 60 90;
hydra.DiskStorePrms-diskDirNum = 3 2;
hydra.DiskStorePrms-maxOplogSize = 11111 22222;
hydra.DiskStorePrms-queueSize = 42 24;

hydra.Prms-removeDiskFilesAfterTest = true;

hydra.BridgePrms-names = bridge;
hydra.BridgePrms-diskStoreName = bdisk;
hydra.BridgePrms-evictionPolicy = entry;

hydra.PoolPrms-names = pool;
hydra.PoolPrms-contactAlgorithm = hydra.PoolHelper getRandomContacts;
hydra.PoolPrms-subscriptionEnabled = true;

cacheperf.CachePerfPrms-batchSeconds = 5;
cacheperf.CachePerfPrms-trimSeconds  = 5;
cacheperf.CachePerfPrms-workSeconds  = 5;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 2 seconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 2 seconds;
cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;
hydra.Prms-totalTaskTimeSec = 9999999;

cacheperf.CachePerfPrms-maxKeys = 100;
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size = 100;
