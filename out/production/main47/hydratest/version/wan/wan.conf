include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;

hydra.Prms-testDescription = "Run client/server WAN test with two site versions.";
hydra.Prms-maxClientStartupWaitSec = 120; // fail faster

// the first wan site uses version1 and the rest use version2
hydra.ClientPrms-versionNames =
  fcn "hydra.TestConfigFcns.duplicate
      (\"version1\", ${locatorHostsPerSite})" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"version2\", (${wanSites}-1) * ${locatorHostsPerSite})" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"version1\", ${bridgeHostsPerSite})" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"version2\", (${wanSites}-1) * ${bridgeHostsPerSite})" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"version1\", ${edgeHostsPerSite})" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"version2\", (${wanSites}-1) * ${edgeHostsPerSite})" ncf;

hydra.VersionPrms-names   = version1    version2;
hydra.VersionPrms-version = ${version1} ${version2};

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;
THREADGROUP bridge
  totalThreads = fcn ${wanSites} * ${bridgeHostsPerSite}
                   * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"bridge\", ${wanSites}, ${bridgeHostsPerSite}, false, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)"
                 ncf;

INITTASK  taskClass = cacheperf.CachePerfClient
          taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.version.wan.WANClient
          taskMethod = openCacheTask
          threadGroups = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          ;
INITTASK  taskClass = hydratest.version.wan.WANClient
          taskMethod = createRegionTask
          threadGroups = bridge
          hydra.ConfigPrms-regionConfig = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createGatewayHubTask
          hydra.ConfigPrms-gatewayHubConfig = hub
          threadgroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = addGatewaysTask
          hydra.ConfigPrms-gatewayConfig = gateway
          threadgroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = startGatewayHubTask
          threadgroups = bridge
          ;
INITTASK  taskClass = hydratest.version.wan.WANClient
          taskMethod = openCacheTask
          threadGroups = edge
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-poolConfig = pool
          ;
INITTASK  taskClass = hydratest.version.wan.WANClient
          taskMethod = createRegionTask
          threadGroups = edge
          hydra.ConfigPrms-regionConfig = edge
          ;
INITTASK  taskClass = hydratest.version.replication.ReplicationClient
          taskMethod = reportCacheTask
          threadGroups = bridge, edge
          ;
INITTASK  taskClass = hydratest.version.wan.WANClient
          taskMethod = reportGatewayAttributesTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = hydratest.version.wan.WANClient
          taskMethod = closeCacheTask
          threadGroups = edge
          ;
CLOSETASK taskClass = hydratest.version.wan.WANClient
          taskMethod = closeCacheTask
          threadGroups = bridge
          ;

hydra.ConfigPrms-cacheConfig = bridge;

hydra.CachePrms-names = bridge edge; 
hydra.CachePrms-gatewayConflictResolver =
  hydratest.version.wan.MyGatewayConflictResolver none;

hydra.GemFirePrms-remoteDistributedSystems = bridgeds_1, none;

hydra.RegionPrms-names         = bridge      edge;
hydra.RegionPrms-enableGateway = true        false;
hydra.RegionPrms-dataPolicy    = replicated  empty;
hydra.RegionPrms-gatewaySenderNames = sender;
hydra.RegionPrms-poolName      = none        pool;

hydra.BridgePrms-names = bridge;

hydra.PoolPrms-names = pool;
hydra.PoolPrms-contactAlgorithm = hydra.PoolHelper getRandomContactsInWanHctSite;

hydra.GatewayHubPrms-names = hub;

hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-alertThreshold = 60000;
hydra.GatewayPrms-concurrencyLevel = 2;
hydra.GatewayPrms-diskStoreName = disk;
hydra.GatewayPrms-orderPolicy = key;

hydra.GatewayReceiverPrms-names = receiver;

hydra.GatewaySenderPrms-names = sender;
hydra.GatewaySenderPrms-diskStoreName = disk;
hydra.GatewaySenderPrms-manualStart = true;
hydra.GatewaySenderPrms-parallel = false;

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-allowForceCompaction = true;
hydra.DiskStorePrms-autoCompact = false;
hydra.DiskStorePrms-compactionThreshold = 60;
hydra.DiskStorePrms-diskDirNum = 3;
hydra.DiskStorePrms-maxOplogSize = 11111;
hydra.DiskStorePrms-queueSize = 42;

cacheperf.CachePerfPrms-batchSeconds = 5;
cacheperf.CachePerfPrms-trimSeconds  = 5;
cacheperf.CachePerfPrms-workSeconds  = 5;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 2 seconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 2 seconds;
cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;
hydra.Prms-totalTaskTimeSec = 9999999;

cacheperf.CachePerfPrms-maxKeys = 100;
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size = 100;
