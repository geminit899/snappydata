include $JTESTS/hydraconfig/hydraparams1.inc;

hydra.Prms-testDescription = "Hydra client-managed locators with multiple admin-ds locators that are created then started/connected.";

hydra.Prms-manageLocatorAgents = false;

hydra.HostPrms-names                = host;
hydra.VmPrms-names                  = vm;
hydra.VmPrms-hostNames              = host;
hydra.GemFirePrms-names             = loc  pub  sub;
hydra.GemFirePrms-hostNames         = host;
hydra.GemFirePrms-distributedSystem = ds;
hydra.ClientPrms-names              = locA locB pubA pubB sub;
hydra.ClientPrms-vmNames            = vm;
hydra.ClientPrms-gemfireNames       = loc  loc  pub  pub  sub;
hydra.ClientPrms-vmQuantities       = 2    2    1    1    1;
hydra.ClientPrms-vmThreads          = 2    2    2    2    1;

THREADGROUP locA totalThreads = 4 clientNames  = locA;
THREADGROUP locB totalThreads = 4 clientNames  = locB;
THREADGROUP pubA totalThreads = 2 clientNames  = pubA;
THREADGROUP pubB totalThreads = 2 clientNames  = pubB;
THREADGROUP sub  totalThreads = 1 clientNames  = sub;

INITTASK  taskClass = hydratest.locators.LocatorClient taskMethod = createLocatorTask
          threadGroups = locA, locB
          ;
INITTASK  taskClass = hydratest.locators.LocatorClient taskMethod = startFirstLocatorAndAdminDSTask
          threadGroups = locA, locB
          ;
INITTASK  taskClass = hydratest.locators.LocatorClient taskMethod = startLocatorAndAdminDSTask
          threadGroups = locA, locB
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadGroups = pubA, pubB, sub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = pub
          threadGroups = pubA, pubB
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = sub
          threadGroups = sub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = pubA, pubB
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createKeysTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = sameKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = sub
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-keyAllocation = sameKeysRandomWrap
          threadGroups = pubA, pubB
          ;
CLOSETASK taskClass = hydratest.locators.LocatorClient taskMethod = validateExpectedMembersTask
          hydratest.locators.LocatorPrms-expectedMembers = 3
          threadGroups = locA, locB, pubA, pubB, sub
          ;
CLOSETASK taskClass = hydratest.locators.LocatorClient taskMethod = validateExpectedEventsTask
          threadGroups = sub
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = pubA, pubB, sub
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          threadGroups = pubA, pubB, sub
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          threadGroups = pubA, pubB, sub
          ;
CLOSETASK taskClass = hydratest.locators.LocatorClient taskMethod = stopLocatorTask
          threadGroups = locA, locB
          ;

cacheperf.CachePerfPrms-batchSeconds = 5;
cacheperf.CachePerfPrms-trimSeconds  = 5;
cacheperf.CachePerfPrms-workSeconds  = 5;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 2 seconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 2 seconds;
cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;
hydra.Prms-totalTaskTimeSec = 9999999;

cacheperf.CachePerfPrms-maxKeys = 100;
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size = 100;

hydra.GemFirePrms-conserveSockets = false;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names          = pub       sub;
hydra.RegionPrms-cacheListeners = none,     cacheperf.gemfire.LatencyListener;
hydra.RegionPrms-scope          = dack;
