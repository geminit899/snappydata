include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;

hydra.Prms-testDescription = "Create and start hydra-client-managed locators with admin DS.";

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;
THREADGROUP bridge
  totalThreads = fcn ${wanSites} * ${bridgeHostsPerSite}
                   * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"bridge\", ${wanSites}, ${bridgeHostsPerSite}, false, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)"
                 ncf;

INITTASK  taskClass = hydratest.locators.LocatorClient
          taskMethod = createLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.locators.LocatorClient
          taskMethod = startFirstLocatorAndAdminDSTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.locators.LocatorClient
          taskMethod = startLocatorAndAdminDSTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.locators.LocatorClient
          taskMethod = connectTask
          threadGroups = bridge, edge
          ;
INITTASK  taskClass = hydratest.locators.LocatorClient
          taskMethod = openCacheTask
          threadGroups = bridge
          hydra.ConfigPrms-gatewaySenderConfig = sender
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          ;
INITTASK  taskClass = hydratest.locators.LocatorClient
          taskMethod = openCacheTask
          threadGroups = edge
          hydra.ConfigPrms-regionConfig = edge
          ;
CLOSETASK taskClass = hydratest.locators.LocatorClient
          taskMethod = validateExpectedMembersTask
          threadGroups = edge
          hydratest.locators.LocatorPrms-expectedMembers = 1
          ;
CLOSETASK taskClass = hydratest.locators.LocatorClient
          taskMethod = validateExpectedMembersTask
          threadGroups = locator, bridge
          hydratest.locators.LocatorPrms-expectedMembers =
            fcn ${bridgeHostsPerSite} * ${bridgeVMsPerHost} ncf
          ;
CLOSETASK taskClass = hydratest.locators.LocatorClient
          taskMethod = closeCacheTask
          threadGroups = edge
          ;
CLOSETASK taskClass = hydratest.locators.LocatorClient
          taskMethod = closeCacheTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = hydratest.locators.LocatorClient
          taskMethod = stopLocatorTask
          threadGroups = locator
          ;

//------------------------------------------------------------------------------

hydra.VmPrms-extraVMArgs = -Xmx68m;

hydra.GemFirePrms-remoteDistributedSystems =
  fcn "hydra.TestConfigFcns.generateNamesRepeatedlyShift
      (\"bridgeds_\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
  ncf
  ,
  none
  ;

hydra.DiskStorePrms-names = disk;

hydra.ConfigPrms-cacheConfig     = cache;

hydra.CachePrms-names            = cache;
hydra.RegionPrms-names           = bridge edge;
hydra.RegionPrms-gatewaySenderNames = sender;
hydra.RegionPrms-poolName        = none   pool;
hydra.BridgePrms-names           = bridge;
hydra.PoolPrms-names             = pool;
hydra.PoolPrms-contactAlgorithm  = hydra.EdgeHelper getRandomEndpointsInWanHctSite;

hydra.GatewaySenderPrms-names = sender;
hydra.GatewaySenderPrms-diskStoreName = disk;
hydra.GatewaySenderPrms-parallel = false;
hydra.GatewaySenderPrms-remoteDistributedSystemsAlgorithm =
  hydra.GatewaySenderHelper getHubAndSpokeDistributedSystems;
