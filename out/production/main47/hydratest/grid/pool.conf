include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_hct_locator.inc;

hydra.Prms-testDescription = "Check use of pools with both types of contacts.";

THREADGROUP peerLocator   totalThreads = 2 totalVMs = 2 clientNames  = locator1;
THREADGROUP serverLocator totalThreads = 2 totalVMs = 2 clientNames  = locator2;

THREADGROUP bridge totalThreads = 4 totalVMs = 4;

THREADGROUP edge1 totalThreads = 4 totalVMs = 2 clientNames  = edge1;
THREADGROUP edge2 totalThreads = 4 totalVMs = 2 clientNames  = edge2;

INITTASK  taskClass = cacheperf.CachePerfClient
          taskMethod = createAndStartLocatorTask
          threadGroups = peerLocator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient
          taskMethod = createAndStartLocatorTask
          threadGroups = serverLocator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadGroups = bridge, edge1, edge2
          ;
INITTASK  taskClass = cacheperf.CachePerfClient
          taskMethod = openCacheTask
          threadGroups = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient
          taskMethod = openCacheTask
          threadGroups = edge1
          hydra.ConfigPrms-regionConfig = edge1
          hydra.ConfigPrms-poolConfig = locators
          ;
INITTASK  taskClass = cacheperf.CachePerfClient
          taskMethod = openCacheTask
          threadGroups = edge2
          hydra.ConfigPrms-regionConfig = edge2
          hydra.ConfigPrms-poolConfig = servers
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-keyAllocation = sameKeysRandomWrap
          threadGroups = edge1, edge2
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          threadGroups = bridge, edge1, edge2
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient
          taskMethod = reportTrimIntervalsTask
          threadGroups = edge1, edge2
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient
          taskMethod = closeCacheTask
          threadGroups = edge1, edge2
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient
          taskMethod = closeCacheTask
          threadGroups = bridge
          ;

hydra.GemFirePrms-isPeerLocator =
  fcn "hydra.TestConfigFcns.duplicate(\"true\",    ${locatorHosts}/2)" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"false\",   ${locatorHosts}/2)" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"default\", ${bridgeHosts})"    ncf
  fcn "hydra.TestConfigFcns.duplicate(\"default\", ${edgeHosts})"      ncf;
hydra.GemFirePrms-isServerLocator =
  fcn "hydra.TestConfigFcns.duplicate(\"false\",   ${locatorHosts}/2)" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"true\",    ${locatorHosts}/2)" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"default\", ${bridgeHosts})"    ncf
  fcn "hydra.TestConfigFcns.duplicate(\"default\", ${edgeHosts})"      ncf;

hydra.ConfigPrms-cacheConfig = cache;

hydra.CachePrms-names = cache; 

hydra.RegionPrms-names      = bridge     edge1     edge2;
hydra.RegionPrms-dataPolicy = replicated empty     empty;
hydra.RegionPrms-poolName   = none       locators  servers;

hydra.BridgePrms-names = bridge;

hydra.PoolPrms-names            = locators         servers;
hydra.PoolPrms-contactAlgorithm = hydra.PoolHelper getRandomContacts,
                                  hydra.EdgeHelper getRandomEndpoints;

hydra.VmPrms-extraVMArgs = -Xmx68m;

cacheperf.CachePerfPrms-batchSeconds = 5;
cacheperf.CachePerfPrms-trimSeconds  = 5;
cacheperf.CachePerfPrms-workSeconds  = 5;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 2 seconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 2 seconds;
cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;
hydra.Prms-totalTaskTimeSec = 9999999;

cacheperf.CachePerfPrms-maxKeys = 100;
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size = 100;
