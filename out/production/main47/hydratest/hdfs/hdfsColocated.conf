include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_2_locator.inc;

hydra.Prms-testDescription = "Configure HDFS using GemFire APIs.";

THREADGROUP locator
  totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                     * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)" ncf;
THREADGROUP server
  totalThreads = fcn ${serverHosts} * ${serverVMsPerHost}
                                    * ${serverThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"server\", ${serverHosts}, true)" ncf;
THREADGROUP client
  totalThreads = fcn ${clientHosts} * ${clientVMsPerHost}
                                  * ${clientThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"client\", ${clientHosts}, true)" ncf;

INITTASK  taskClass = hydratest.hdfs.HDFSClient
          taskMethod = configureHadoopTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.hdfs.HDFSClient
          taskMethod = formatNameNodesTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.hdfs.HDFSClient
          taskMethod = startNameNodesTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.hdfs.HDFSClient
          taskMethod = startDataNodesTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.hdfs.HDFSClient
          taskMethod = createLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.hdfs.HDFSClient
          taskMethod = startLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = hydratest.hdfs.HDFSClient
          taskMethod = createCacheTask
          threadGroups = server
          hydra.ConfigPrms-cacheConfig = cache
          ;
INITTASK  taskClass = hydratest.hdfs.HDFSClient
          taskMethod = createCacheTask
          threadGroups = client
          hydra.ConfigPrms-cacheConfig = cache
          ;
INITTASK  taskClass = hydratest.hdfs.HDFSClient
          taskMethod = createRegionTask
          threadGroups = server
          hydra.ConfigPrms-regionConfig = server1
          ;
INITTASK  taskClass = hydratest.hdfs.HDFSClient
          taskMethod = createRegionTask
          threadGroups = server
          hydra.ConfigPrms-regionConfig = server2
          ;
INITTASK  taskClass = hydratest.hdfs.HDFSClient
          taskMethod = createRegionTask
          threadGroups = client
          hydra.ConfigPrms-regionConfig = client
          ;
TASK      taskClass = hydratest.hdfs.HDFSClient
          taskMethod = putDataTask
          threadGroups = client
          hydra.ConfigPrms-regionConfig = client
          ;
CLOSETASK taskClass = hydratest.hdfs.HDFSClient
          taskMethod = closeCacheTask
          threadGroups = client
          ;
CLOSETASK taskClass = hydratest.hdfs.HDFSClient
          taskMethod = closeCacheTask
          threadGroups = server
          ;
CLOSETASK taskClass = hydratest.hdfs.HDFSClient
          taskMethod = stopDataNodesTask
          threadGroups = locator
          ;
CLOSETASK taskClass = hydratest.hdfs.HDFSClient
          taskMethod = stopNameNodesTask
          threadGroups = locator
          ;

hydra.Prms-totalTaskTimeSec = 20;
hydra.VmPrms-extraVMArgs = -Xmx128m;
hydra.GemFirePrms-isServerLocator = true;

hydra.CachePrms-names = cache;

hydra.DiskStorePrms-names = disk;

hydra.RegionPrms-names = server1 server2 client;
hydra.RegionPrms-dataPolicy = hdfsPartition;
hydra.RegionPrms-hdfsStoreName = hdfsstore;
hydra.RegionPrms-partitionName = server1 server2 client;
hydra.RegionPrms-regionName = region1 region2 region1;

hydra.PartitionPrms-names = server1 server2 client;
hydra.PartitionPrms-colocatedWith = default region1 default;
hydra.PartitionPrms-localMaxMemory = default default 0;

hydra.ConfigPrms-hadoopConfig = hdfs;

hydra.HDFSStorePrms-names = hdfsstore;
hydra.HDFSStorePrms-diskStoreName = disk;
hydra.HDFSStorePrms-hadoopName = hdfs;
hydra.HDFSStorePrms-persistent = false;

hydra.HadoopPrms-names = hdfs;

hydra.VmPrms-extraClassPaths =
  fcn "hydra.TestConfigFcns.duplicate(\"none\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${serverHosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${clientHosts})" ncf
  ;
