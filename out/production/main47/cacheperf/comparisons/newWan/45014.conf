include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_locator.inc;
include $JTESTS/cacheperf/comparisons/newWan/wanSerial.inc;

hydra.Prms-testDescription = "Peer put replicated data on server datahost having serial gateway sender. Objects are byte arrays of size ${dataSize}.";

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

//------------------------------------------------------------------------------
// Threadgroups
//------------------------------------------------------------------------------
THREADGROUP bridgePub
  totalThreads = fcn ${peerHostsPerSite} * ${peerVMsPerHost}
                                           * ${peerThreadsPerVM} ncf
  clientNames = fcn "hydra.TestConfigFcns.generateNames(
                        \"peer_1_\", ${peerHostsPerSite}, true)" ncf;
THREADGROUP bridgeSub
  totalThreads = fcn ${peerHostsPerSite} * ${peerVMsPerHost}
                                           * ${peerThreadsPerVM} ncf
  clientNames = fcn "hydra.TestConfigFcns.generateNames(
                        \"peer_2_\", ${peerHostsPerSite}, true)" ncf;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                        (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;
                        
//------------------------------------------------------------------------------
// Tasks
//------------------------------------------------------------------------------

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createGatewaySenderIdsTask  
          hydra.ConfigPrms-gatewaySenderConfig = sender        
          threadgroups = bridgePub 
          ;                    
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridgePub
          hydra.ConfigPrms-regionConfig = bridgePub          
          threadgroups = bridgePub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridgeSub
          hydra.ConfigPrms-regionConfig = bridgeSub          
          threadgroups = bridgeSub
          ;                    
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = initGatewaySenderTask
          hydra.ConfigPrms-gatewaySenderConfig = sender
          threadgroups = bridgePub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = initGatewayReceiverTask
          hydra.ConfigPrms-gatewayReceiverConfig = receiver
          threadgroups = bridgeSub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadgroups = bridgePub
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataGWSenderTask
          cacheperf.CachePerfPrms-keyAllocation = ownKey
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = bridgePub
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridgePub, bridgeSub
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

//------------------------------------------------------------------------------
cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 240;


//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

hydra.CachePrms-names = bridgePub  bridgeSub;

hydra.RegionPrms-names          = bridgePub  bridgeSub;

hydra.RegionPrms-dataPolicy     = normal;
hydra.RegionPrms-scope          = default;
hydra.RegionPrms-gatewaySenderNames = sender none;
hydra.RegionPrms-cacheListeners = none,     cacheperf.gemfire.LatencyListener;

hydra.GemFirePrms-remoteDistributedSystems =
     fcn "newWan.WANTest.generateRingRemoteDSName (\"ds_\", ${wanSites}, ${locatorHostsPerSite})" ncf         
     ,
     none
     ; 

//------------------------------------------------------------------------------
// Data
//------------------------------------------------------------------------------
cacheperf.CachePerfPrms-maxKeys         = fcn ${peerHostsPerSite} * ${peerVMsPerHost} * ${peerThreadsPerVM} ncf;
cacheperf.CachePerfPrms-objectType      = objects.ArrayOfByte;
objects.ArrayOfBytePrms-encodeKey       = true;
objects.ArrayOfBytePrms-encodeTimestamp = true;
objects.ArrayOfBytePrms-size            = ${dataSize};

cacheperf.CachePerfPrms-gatewayQueueEntries = fcn 100 * 1000000 
                                               / ( ( ${dataSize} + 200 ) * ${peerHostsPerSite} * ${peerVMsPerHost} * ${peerThreadsPerVM} ) ncf;
                                                                                            
//------------------------------------------------------------------------------
// Hostname mapping
//------------------------------------------------------------------------------     
hydra.HostPrms-names =
  masterHost
  fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
      (\"locatorhost\", ${wanSites}, ${locatorHostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
      (\"peerhost\", ${wanSites}, ${peerHostsPerSite}, false)"
  ncf
  ;
   
//------------------------------------------------------------------------------
// Correct for clock skew to get accurate latencies.
//------------------------------------------------------------------------------
hydra.timeserver.TimeServerPrms-clockSkewUpdateFrequencyMs = 1000;
hydra.timeserver.TimeServerPrms-clockSkewMaxLatencyMs = 25;
    
//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------     

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms1g -Xmx1g\", ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${peerMem} -Xmx${peerMem}\", ${peerHostsPerSite} * ${wanSites}, true)" ncf
  ;
          
hydra.VmPrms-extraVMArgsSUN = -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/newWan/newWan.spec;
