include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2_locator.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Test has ${accessorHosts} accessor and ${dataHosts} datastores on separate hosts. ${accessorThreadsPerVM} accessor threads does continues put operations uniformly distributed over 22600 Integer keys on user PR.";

INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = openStatisticsTask
          ;       
INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig  = accessorCache
          hydra.ConfigPrms-regionConfig = accessorRegion
          hydra.ConfigPrms-asyncEventQueueConfig  = aeq // For #47656, create aeq on accessors
          threadgroups = accessor 
          ;                 
INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig  = dataCache
          hydra.ConfigPrms-regionConfig = dataRegion
          hydra.ConfigPrms-asyncEventQueueConfig  = aeq
          threadgroups = datastore
          ;
INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = createDataTask
          sequential          
          cacheperf.CachePerfPrms-keyAllocation          = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod    = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadgroups = accessor          
          ;
TASK      taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = putDataGWSenderTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysWrap
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = accessor
          ;
CLOSETASK taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = closeCacheTask
          threadgroups = accessor, datastore
          ;
CLOSETASK taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
                   
THREADGROUP datastore
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost}
                                    * ${${A}ThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
                   
THREADGROUP accessor
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost}
                                    * ${${B}ThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

//----------------------------------------------------------------------------

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 60 seconds;
cacheperf.CachePerfPrms-workSeconds               = 360;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;
                   
//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

hydra.CachePrms-names = dataCache accessorCache;
     
hydra.RegionPrms-names           = dataRegion  accessorRegion;
hydra.RegionPrms-cacheListeners  = none,       none;
hydra.RegionPrms-dataPolicy      = partition;
hydra.RegionPrms-scope           = default;
hydra.RegionPrms-asyncEventQueueNames = aeq;

hydra.RegionPrms-partitionName      = dataPR   accessorPR;
hydra.PartitionPrms-names           = dataPR   accessorPR;
hydra.PartitionPrms-localMaxMemory  = default  0; 
hydra.PartitionPrms-redundantCopies = ${redundancy};

//--------------  WBCL configuration
hydra.AsyncEventQueuePrms-names                 = aeq;
hydra.AsyncEventQueuePrms-asyncEventListener    = cacheperf.comparisons.newWan.MyAsyncEventListener;
hydra.AsyncEventQueuePrms-parallel              = true; 
hydra.AsyncEventQueuePrms-batchSize             = 1000;
//hydra.AsyncEventQueuePrms-maximumQueueMemory    = 100;

hydra.AsyncEventQueuePrms-diskStoreName         = wbclDisk;
hydra.DiskStorePrms-names                       = disk wbclDisk;

hydra.GatewayReceiverPrms-names           = receiver;

//------------------------------------------------------------------------------
// data
//------------------------------------------------------------------------------     

cacheperf.CachePerfPrms-maxKeys         = 22600;
cacheperf.CachePerfPrms-keyType         = java.lang.Integer;
cacheperf.CachePerfPrms-objectType      = objects.ArrayOfByte;
objects.ArrayOfBytePrms-encodeKey       = true;
objects.ArrayOfBytePrms-encodeTimestamp = true;
objects.ArrayOfBytePrms-size            = ${objectSize};

// pdx objects
//cacheperf.CachePerfPrms-objectType = objects.PdxPortfolio;
//hydra.RegionPrms-valueConstraint = objects.PdxPortfolio;

//------------------------------------------------------------------------------
// Hostname mapping
//------------------------------------------------------------------------------     

hydra.HostPrms-names = 
  masterhost
  fcn "hydra.TestConfigFcns.generateNames
      (\"${A}host\", ${${A}Hosts})"
  ncf
  fcn "hydra.TestConfigFcns.generateNames
      (\"${B}host\", ${${B}Hosts})"
  ncf;
  
hydra.GemFirePrms-hostNames =
  fcn "hydra.TestConfigFcns.duplicate
      (\"masterhost\", ${locatorHosts}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateNames
      (\"${A}host\", ${${A}Hosts})"
  ncf
  fcn "hydra.TestConfigFcns.generateNames
      (\"${B}host\", ${${B}Hosts})"
  ncf;
  ;
  
hydra.VmPrms-hostNames =
  fcn "hydra.TestConfigFcns.duplicate
      (\"masterhost\", ${locatorHosts}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateNames
      (\"${A}host\", ${${A}Hosts})"
  ncf
  fcn "hydra.TestConfigFcns.generateNames
      (\"${B}host\", ${${B}Hosts})"
  ncf;
  ;

//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------     

//conserveSockets should be false in case of wan
hydra.GemFirePrms-conserveSockets = false;

cacheperf.CachePerfPrms-gatewayQueueEntries = 5000;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms256m -Xmx256m\", ${locatorHosts}, true)" ncf  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${dataMem} -Xmx${dataMem}\", ${${A}Hosts}, true)" ncf ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms256m -Xmx256m\", ${${B}Hosts}, true)" ncf;        

hydra.VmPrms-extraVMArgsSUN = -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;

//------------------------------------------------------------------------------
// Correct for clock skew to get accurate latencies.
//------------------------------------------------------------------------------
hydra.timeserver.TimeServerPrms-clockSkewUpdateFrequencyMs = 1000;
hydra.timeserver.TimeServerPrms-clockSkewMaxLatencyMs      = 25;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/common.spec;
