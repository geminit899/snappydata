include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_2_locator.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Tests has 2 wan sites, site-1 is a publisher and site-2 is a subscriber. Each site has locators, accessors and datastores on separate hosts. The datastore at publisher site is also a sender. Datastore at subscriber site is also a receiver. Uses Partitioned Region where key is Integer and value is byte arrays of size ${objectSize}. Accessor threads does continues put operations uniformly distributed over 226 Integer kyes.";

INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = createGatewaySenderIdsTask
          hydra.ConfigPrms-gatewaySenderConfig = sender          
          threadgroups = pub,pubAccessor
          ;                    
INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig  = pub
          hydra.ConfigPrms-regionConfig = pub
          hydra.ConfigPrms-gatewaySenderConfig = sender
          threadgroups = pub
          ;
INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = startQueueMonitorTask
          threadgroups = pub
          ;          
INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig  = sub
          hydra.ConfigPrms-regionConfig = sub
          hydra.ConfigPrms-gatewayReceiverConfig = receiver
          threadgroups = sub
          ;
INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig  = accessor
          hydra.ConfigPrms-regionConfig = accessor
          threadgroups = pubAccessor,subAccessor 
          ;
INITTASK  taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation           = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod  = none
          cacheperf.CachePerfPrms-taskTerminatorMethod    = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadgroups = pubAccessor
          ;
TASK      taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = putDataGWSenderTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysWrap
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = pubAccessor
          ;
CLOSETASK taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = closeCacheTask
          threadgroups = pub,sub,pubAccessor,subAccessor
          ;
CLOSETASK taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.comparisons.newWan.NewWanPSTClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP pubAccessor
  totalThreads = fcn ${accessorHostsPerSite} * ${accessorVMsPerHost} * ${accessorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"accessor_1_\", ${accessorHostsPerSite}, true)" ncf;

THREADGROUP subAccessor
  totalThreads = fcn ${accessorHostsPerSite} * ${accessorVMsPerHost} * ${accessorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"accessor_2_\", ${accessorHostsPerSite}, true)" ncf;
                                                
THREADGROUP pub
  totalThreads = fcn ${dataHostsPerSite} * ${dataVMsPerHost} * ${dataThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"data_1_\", ${dataHostsPerSite}, true)" ncf;

THREADGROUP sub
  totalThreads = fcn ${dataHostsPerSite} * ${dataVMsPerHost} * ${dataThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"data_2_\", ${dataHostsPerSite}, true)" ncf;
                                                
THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                        (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;

//----------------------------------------------------------------------------

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 60 seconds;
cacheperf.CachePerfPrms-workSeconds               = 360;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

hydra.CachePrms-names = pub sub accessor;
     
hydra.RegionPrms-names           = pub   sub  accessor;
hydra.RegionPrms-cacheListeners  = none, cacheperf.gemfire.LatencyListener, none;
hydra.RegionPrms-dataPolicy      = partition;
hydra.RegionPrms-scope           = default;
hydra.RegionPrms-gatewaySenderNames = sender;

hydra.RegionPrms-partitionName      = pubPR subPR accessorPR;
hydra.PartitionPrms-names           = pubPR subPR accessorPR;
hydra.PartitionPrms-localMaxMemory  = default default  0;
hydra.PartitionPrms-redundantCopies = ${redundancy};

//--------------  WAN configuration
hydra.GatewaySenderPrms-names          = sender;
hydra.GatewaySenderPrms-parallel       = true;
hydra.GatewaySenderPrms-remoteDistributedSystemsAlgorithm =  hydra.GatewaySenderHelper getRemoteDistributedSystems;
hydra.GatewaySenderPrms-maximumQueueMemory  = default;
hydra.GatewaySenderPrms-diskStoreName       = senderDisk;

hydra.DiskStorePrms-names              = disk senderDisk;

hydra.GatewayReceiverPrms-names           = receiver;

hydra.GemFirePrms-remoteDistributedSystems =
     fcn "newWan.WANTest.generateAllRemoteDSNameLists (\"ds_\", ${wanSites}, ${locatorHostsPerSite})" ncf         
     ,
     none
     ; 

//------------------------------------------------------------------------------
// data
//------------------------------------------------------------------------------  
cacheperf.CachePerfPrms-maxKeys         = 22600;
cacheperf.CachePerfPrms-keyType         = java.lang.Integer;
cacheperf.CachePerfPrms-objectType      = objects.ArrayOfByte;
objects.ArrayOfBytePrms-encodeKey       = true;
objects.ArrayOfBytePrms-encodeTimestamp = true;
objects.ArrayOfBytePrms-size            = ${objectSize};

// pdx objects
//cacheperf.CachePerfPrms-objectType = objects.PdxPortfolio;
//hydra.RegionPrms-valueConstraint = objects.PdxPortfolio;



//------------------------------------------------------------------------------
// Hostname mapping
//------------------------------------------------------------------------------     

hydra.HostPrms-names =  
  masterhost
  fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
      (\"${A}host\", ${wanSites}, ${${A}HostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
      (\"${B}host\", ${wanSites}, ${${B}HostsPerSite}, false)"
  ncf
  ;
  
hydra.GemFirePrms-hostNames =
  fcn "hydra.TestConfigFcns.duplicate
      (\"masterhost\", ${wanSites} * ${locatorHostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
      (\"${A}host\", ${wanSites}, ${${A}HostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
      (\"${B}host\", ${wanSites}, ${${B}HostsPerSite}, false)"
  ncf
  ;
  
hydra.VmPrms-hostNames =
  fcn "hydra.TestConfigFcns.duplicate
      (\"masterhost\", ${wanSites} * ${locatorHostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
      (\"${A}host\", ${wanSites}, ${${A}HostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
      (\"${B}host\", ${wanSites}, ${${B}HostsPerSite}, false)"
  ncf
  ;
 
//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------     

//conserveSockets should be false in case of wan
hydra.GemFirePrms-conserveSockets = false;
     
// Gateway sender queue has 100MB (default). Allow for key and entry overhead by 70%
cacheperf.CachePerfPrms-gatewayQueueEntries = fcn 100*1000000*0.7/(${objectSize}*${accessorThreadsPerVM}) ncf;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms256m -Xmx256m\", ${locatorHostsPerSite} * ${wanSites}, true)" ncf  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${dataMem} -Xmx${dataMem}\", ${dataHostsPerSite} * ${wanSites}, true)" ncf ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms256m -Xmx256m\", ${accessorHostsPerSite} * ${wanSites}, true)" ncf;        

hydra.VmPrms-extraVMArgsSUN = -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;


//------------------------------------------------------------------------------
// Correct for clock skew to get accurate latencies.
//------------------------------------------------------------------------------
hydra.timeserver.TimeServerPrms-clockSkewUpdateFrequencyMs = 1000;
hydra.timeserver.TimeServerPrms-clockSkewMaxLatencyMs      = 25;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/perf038.spec;
