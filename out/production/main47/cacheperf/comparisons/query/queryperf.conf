include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-testDescription = "Query performance for a cache with scope ${scope} and dataPolicy ${dataPolicy} for objects of type ${objectType} using ${hydra.numHosts} hosts, ${vmQuantities} VMs per host, and ${vmThreads} threads per VM. Total number of keys is ${maxKeys}. Create index is ${createIndex}. ";

hydra.Prms-testRequirement = " TBD ";

hydra.Prms-maxResultWaitSec = 180;    // 20 minutes
hydra.Prms-totalTaskTimeSec = 360000; // 100 hours

hydra.VmPrms-extraClassPaths = 
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${hydra.numHosts}, true)" ncf;

hydra.ClientPrms-vmThreads    = ${vmThreads};
hydra.ClientPrms-vmQuantities = ${vmQuantities};

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;
hydra.ConfigPrms-regionConfig = region;
hydra.RegionPrms-names = region;
hydra.RegionPrms-valueConstraint = parReg.query.NewPortfolio;
hydra.RegionPrms-scope = ${scope};
hydra.RegionPrms-dataPolicy = ${dataPolicy};

cacheperf.CachePerfPrms-batchSeconds              = 60;
cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 30 seconds;
cacheperf.CachePerfPrms-workSeconds               = ${workSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 30 seconds;

hydra.VmPrms-extraVMArgs += "-Xms512m -Xmx512m";

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.comparisons.query.QueryPerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.comparisons.query.QueryPerfClient taskMethod = openCacheTask
          ;
INITTASK  taskClass = cacheperf.comparisons.query.QueryPerfClient taskMethod = createDataTask
          threadGroups = creator
          batch
	  cacheperf.CachePerfPrms-keyAllocation = sameKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          ;

INITTASK  taskClass = cacheperf.comparisons.query.QueryPerfClient taskMethod = initQueryTask
	  ;

INITTASK  taskClass = cacheperf.comparisons.query.QueryPerfClient taskMethod = createIndexTask
	  ;          
          
TASK      taskClass = cacheperf.comparisons.query.QueryPerfClient taskMethod = queryTask
	  cacheperf.CachePerfPrms-keyAllocation = sameKeysRandomWrap
          threadGroups = creator, default
          ;
CLOSETASK taskClass = cacheperf.comparisons.query.QueryPerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.comparisons.query.QueryPerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.comparisons.query.QueryPerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.comparisons.query.QueryPerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP creator totalThreads = 1 totalVMs =1 clientNames = client1;

hydra.Prms-maxResultWaitSec = 300;  

hydra.GemFirePrms-conserveSockets = true;

cacheperf.CachePerfPrms-objectType = ${objectType};

cacheperf.CachePerfPrms-maxKeys = ${maxKeys};
cacheperf.comparisons.query.QueryPerfPrms-createIndex = ${createIndex};
cacheperf.comparisons.query.QueryPerfPrms-exeQueryNum = ${executeQueryNum};

//query.index.IndexPrms-numOfIndexes = ${numOfIndexes};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/query/query.spec;
