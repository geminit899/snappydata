include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-maxResultWaitSec = 1200;    // 20 minutes
hydra.Prms-totalTaskTimeSec = 360000; // 100 hours

hydra.ClientPrms-vmThreads    = ${vmThreads};
hydra.ClientPrms-vmQuantities = ${vmQuantities};

hydra.CachePrms-names = cache;
hydra.RegionPrms-names = region;
hydra.RegionPrms-scope = ${scope};
hydra.RegionPrms-dataPolicy = ${dataPolicy};

hydra.Prms-testDescription = "Cache hit performance with scope ${scope} and dataPolicy ${dataPolicy} for objects of type ${objectType} and size 1K using ${hydra.numHosts} hosts, ${vmQuantities} VMs per host, and ${vmThreads} threads per VM.  First, all threads on all VMs on one host create N total entries, then each remaining thread does gets using its own key.";

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = region
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          threadGroups = creator
	  batch
	  cacheperf.CachePerfPrms-keyAllocation = ownKeys
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
          threadGroups = opThreads
	  cacheperf.CachePerfPrms-keyAllocation = sameKeysWrap
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnTotalIterations
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

hydra.GemFirePrms-conserveSockets = true;

cacheperf.CachePerfPrms-objectType = ${objectType};
objects.ArrayOfBytePrms-size = 1024;
objects.SizedStringPrms-size = 1024;
objects.NestedOrderVectorPrms-width = 2;
objects.NestedOrderVectorPrms-depth = 3;

cacheperf.CachePerfPrms-trimIterations = ${trimIterations};
cacheperf.CachePerfPrms-workIterations = ${workIterations};
cacheperf.CachePerfPrms-batchSize      = ${batchSize};
cacheperf.CachePerfPrms-maxKeys        = fcn ( ${hydra.numHosts} - 1 ) * ${vmQuantities} * ${vmThreads} ncf;

THREADGROUP creator totalThreads = fcn ${vmThreads} * ${vmQuantities} ncf totalVMs = ${vmQuantities} clientNames = client1;
THREADGROUP opThreads totalThreads = fcn ( ${hydra.numHosts} - 1 ) * ${vmQuantities} * ${vmThreads} ncf;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/gets.spec;
