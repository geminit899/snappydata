include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-testDescription = "Cache put with listeners performance for Message objects of size ${messageSize} using ${hydra.numHosts} hosts, ${vmQuantities} VMs per host, and ${vmThreads} threads per VM.  Each thread on each VM on each host puts random keys from its own keyset over and over; all threads on all hosts listen for and process events.";

hydra.ConfigPrms-cacheConfig = cache;
hydra.ConfigPrms-regionConfig = region;

hydra.CachePrms-names = cache;
hydra.RegionPrms-names = region;
hydra.RegionPrms-scope = ${scope};
hydra.RegionPrms-dataPolicy = replicate;
hydra.RegionPrms-cacheListeners = cacheperf.gemfire.LatencyListener;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          ;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;

TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
	  cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          cacheperf.CachePerfPrms-sleepBeforeOp = ${sleepBeforeOp}
          cacheperf.CachePerfPrms-sleepMs = ${sleepMs}
          cacheperf.CachePerfPrms-sleepOpCount = ${sleepOpCount}
          cacheperf.CachePerfPrms-warmupTerminatorFrequency = 180 seconds

	  cacheperf.CachePerfPrms-taskTerminatorMethod = none  // let master terminate on totalTaskTimeSec
          ;

CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;

CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;

CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

hydra.Prms-maxResultWaitSec = 600;    // 10 minutes
hydra.Prms-totalTaskTimeSec = 600;    // 10 minutes

hydra.ClientPrms-vmThreads    = ${vmThreads};
hydra.ClientPrms-vmQuantities = ${vmQuantities};

hydra.VmPrms-extraVMArgs += "-Xmx250m -Xms250m -XX:MaxDirectMemorySize=256M";

hydra.GemFirePrms-conserveSockets = ${conserveSockets};

cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size = ${messageSize};

cacheperf.CachePerfPrms-trimIterations = 0;
cacheperf.CachePerfPrms-workIterations = 1000000000; 
cacheperf.CachePerfPrms-batchSize      = ${batchSize};
cacheperf.CachePerfPrms-maxKeys = 20000;

cacheperf.gemfire.GemFireCachePrms-processListenerEvents = true;
cacheperf.gemfire.GemFireCachePrms-processRemoteEventsOnly = true;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/specs/putupdateEvents.spec;
