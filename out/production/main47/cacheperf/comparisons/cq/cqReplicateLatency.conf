include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_3.inc;

hydra.GemFirePrms-conserveSockets = false;
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${feedHosts})"   ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})"   ncf;

hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar;
hydra.VmPrms-extraVMArgs = -Xms256m -Xmx256m;
hydra.VmPrms-extraVMArgs +=
  -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;

THREADGROUP feed
  totalThreads = fcn ${feedHosts} * ${feedVMsPerHost}
                                  * ${feedThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"feed\", ${feedHosts}, true)" ncf;
THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost}
                                    * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP edge
  totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost}
                                  * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)" ncf;

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              =
                        fcn ${trimSeconds} + ${workSeconds} + 5 ncf;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 15 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 15 seconds;
cacheperf.CachePerfPrms-workSeconds               = ${workSeconds};

hydra.Prms-testDescription = "Measure latency for hierarchical cache hosting a data feed pushing updates through to edges.  The feed updates replicated bridge servers serving empty edges.  The cache contains ${maxKeys} entries each of size ${dataSize} bytes.  The edges use thread local connections and define a CQ returning ${interestPercentage}% of the keys, chosen randomly.";

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = fcn ${trimSeconds} + ${workSeconds} + 120 ncf;

cacheperf.comparisons.cq.CQPrms-cqListener =
          cacheperf.comparisons.cq.CQLatencyListener;

cacheperf.comparisons.dataFeed.DataFeedPrms-useFixedKeys = false;
cacheperf.comparisons.dataFeed.DataFeedPrms-useFixedVal  = false;
cacheperf.comparisons.dataFeed.DataFeedPrms-throttledOpsPerSec = 1000;

hydra.BridgePrms-names                = bridge;

hydra.PoolPrms-names                  = pool;
hydra.PoolPrms-readTimeout            = 10000000;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = true;

hydra.CachePrms-names  = feed bridge edge;

hydra.RegionPrms-names                  = feed      bridge    edge;
hydra.RegionPrms-cacheListeners         = none,     none,     none;
hydra.RegionPrms-dataPolicy             = empty     replicate empty;
hydra.RegionPrms-enableSubscriptionConflation = default   false     default;
hydra.RegionPrms-interestPolicy         = default   default   all;
hydra.RegionPrms-poolName               = none      none      pool;
hydra.RegionPrms-scope                  = ack       ack       local;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = feed
          hydra.ConfigPrms-regionConfig = feed
          threadGroups = feed
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          distcache.gemfire.GemFireCachePrms-interestResultPolicy = none
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = feed
          ;
INITTASK  taskClass = cacheperf.comparisons.cq.CQClient taskMethod = registerCQsTask
          threadGroups = edge
          ;
TASK      taskClass = cacheperf.comparisons.dataFeed.DataFeedClient taskMethod = feedDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          threadGroups = feed
          cacheperf.CachePerfPrms-isMainWorkload = true
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = feed, edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask;
ENDTASK   taskClass = cacheperf.comparisons.dataFeed.DataFeedClient taskMethod = validateMessagesFailedQueuedTask
          clientNames = edge1;

cacheperf.CachePerfPrms-keyType = objects.BatchString;
objects.BatchStringPrms-batchSize =
  fcn (int)Math.ceil((${interestPercentage}/100.0) * ${maxKeys}) ncf;
cacheperf.CachePerfPrms-maxKeys = ${maxKeys};

cacheperf.CachePerfPrms-objectType = objects.BatchObject;
objects.BatchObjectPrms-size       = ${dataSize};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/cq/cq.spec;
