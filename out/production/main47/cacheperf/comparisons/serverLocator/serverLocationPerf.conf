include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_hct_locator.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Fake client VMs do lots of server location requests against a locator with a static number of bridge servers configured. Testing the load that the locator can handle";

//TODO - bounce a few bridge servers to stir up the mix?

//------------------------------------------------------------------------------
// Threadgroups
//------------------------------------------------------------------------------

//NOTE - the number of edge threads should be a multiple of the 
//number of locator hosts for the most even spread. Each edge is assigned
//to a locator.
THREADGROUP locator
  totalThreads = fcn
                 ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)"
                 ncf;
THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * 1
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;

TASK      taskClass = cacheperf.comparisons.serverLocator.GridPerfClient taskMethod = requestServerLocationTask
          threadGroups = edge
          ;
          
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

//------------------------------------------------------------------------------
// Termination
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 259200;  // workload-based
hydra.Prms-maxResultWaitSec = 600;

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 60;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 60;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;
//not used, but CachePerfClient really wants it, so we'll make it happy.
cacheperf.CachePerfPrms-maxKeys = 50;
          
//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

hydra.CachePrms-names = bridge;

hydra.RegionPrms-names         = bridge;
//hydra.RegionPrms-scope         = default;
//hydra.RegionPrms-dataPolicy    = replicate;

hydra.BridgePrms-names = bridge;
//hydra.BridgePrms-maxThreads = ${maxThreads};

//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------

hydra.VmPrms-extraVMArgs  = fcn "hydra.TestConfigFcns.duplicate
                                 (\"-Xms128m -Xmx128m\", ${locatorHosts}, true)"
                            ncf
                            ,
                            fcn "hydra.TestConfigFcns.duplicate
                                 (\"-Xms32m -Xmx32m\", ${bridgeHosts}, true)"
                            ncf
                            ,
                            fcn "hydra.TestConfigFcns.duplicate
                                 (\"-Xms128m -Xmx128m\", ${edgeHosts}, true)"
                            ncf;
hydra.VmPrms-extraVMArgs += -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
                            -XX:+DisableExplicitGC;


perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/smoketest/perf/common.spec;
