include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

hydra.Prms-testDescription = "PutAll performance for a cache with scope ${scope} and dataPolicy ${dataPolicy} for objects of type ${objectType} using ${bridgeHosts} bridge hosts, ${bridgeVMsPerHost} VMs per bridge host, and ${bridgeThreadsPerVM} threads per VM. There are ${edgeHosts} edge hosts and ${edgeVMsPerHost} VMs per edge host registered interest for ALL_KEY. Number of edges performing putAll operations is ${putAllEdgeHosts} and putAll mapSize is ${mapSize}.";
hydra.Prms-testRequirement = " TBD ";

hydra.Prms-maxResultWaitSec = 180;    // 20 minutes
hydra.Prms-totalTaskTimeSec = 360000; // 100 hours

//hydra.ClientPrms-vmThreads    = ${vmThreads};
//hydra.ClientPrms-vmQuantities = ${vmQuantities};

THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost}
                                    * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP edge
  totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                       - ${putAllEdgeHosts} * ${putAllThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)" ncf;
                    
THREADGROUP putAll
  totalThreads = fcn  ${putAllEdgeHosts} * ${putAllThreadsPerVM} ncf
  totalVMs =   ${putAllEdgeHosts}
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${putAllEdgeHosts}, true)" ncf;                      
                    

hydra.GemFirePrms-conserveSockets = true;

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              =
                        fcn ${trimSeconds} + ${workSeconds} + 5 ncf;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 15 seconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 15 seconds;
cacheperf.CachePerfPrms-workSeconds               = ${workSeconds};

//hydra.VmPrms-extraVMArgs += "-Xms512m -Xmx512m";
hydra.Prms-maxResultWaitSec = 900;
hydra.Prms-errorOnFailedGFStartup = false;
hydra.Prms-serialExecution = false;

hydra.CachePrms-names           = bridge                   edge;
hydra.RegionPrms-names          = bridge                   edge;
//hydra.RegionPrms-cacheListeners = event.OperationListener, hct.EventListener;
hydra.RegionPrms-poolName    = none                     brloader;
hydra.RegionPrms-dataPolicy     =  ${dataPolicy}           default;
hydra.RegionPrms-scope          = ${scope}                 local;

hydra.BridgePrms-names          = bridge;

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections = 3;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout = 120000;
hydra.PoolPrms-subscriptionRedundancy = -1;
                 
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.comparisons.putAll.PutAllPerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          //distcache.gemfire.GemFireCachePrms-interestResultPolicy = none
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge, putAll
          ;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = registerInterestRegexAllTask
          threadGroups = edge
          ;
          
INITTASK  taskClass = cacheperf.comparisons.putAll.PutAllPerfClient taskMethod = initPutAllTask
          threadGroups = putAll
	  ;      
          
TASK      taskClass = cacheperf.comparisons.putAll.PutAllPerfClient taskMethod = putAllTask
          threadGroups = putAll
          ;
CLOSETASK taskClass = cacheperf.comparisons.putAll.PutAllPerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.comparisons.putAll.PutAllPerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.comparisons.putAll.PutAllPerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.comparisons.putAll.PutAllPerfClient taskMethod = reportTrimIntervalsTask
          ;

cacheperf.CachePerfPrms-objectType = ${objectType};
objects.BatchStringPrms-batchSize = ${mapSize};
cacheperf.comparisons.putAll.PutAllPerfPrms-mapSize = ${mapSize};
cacheperf.CachePerfPrms-maxKeys = ${mapSize};  //for samekeys wrap
cacheperf.CachePerfPrms-keyAllocation = sameKeysWrap;
perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/putAll/putAll.spec;
hydra.GemFirePrms-memberTimeout = 60000;
