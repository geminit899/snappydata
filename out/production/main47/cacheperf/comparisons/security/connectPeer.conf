include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_2_locator.inc;
include $JTESTS/cacheperf/comparisons/security/schemes.inc;

hydra.Prms-testDescription = "Peers cycle distributed system connections using security authorization scheme \"${securityScheme}\", using XML to create a cache and region.  Connections are throttled by ${sleepMs} sleeps.";
hydra.Prms-testRequirement = "Security has minimal impact on performance.";

//------------------------------------------------------------------------------
// Threadgroups
//------------------------------------------------------------------------------

THREADGROUP locator
  totalThreads = fcn
                 ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)"
                 ncf;
THREADGROUP archiver
  totalThreads = fcn ${archiverHosts} * ${archiverVMsPerHost}
                                      * ${archiverThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"archiver\", ${archiverHosts}, true)"
                 ncf;
THREADGROUP peer
  totalThreads = fcn
                 ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"peer\", ${peerHosts}, true)"
                 ncf;

//------------------------------------------------------------------------------
// Tasks
//------------------------------------------------------------------------------

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadgroups = archiver
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = statArchiverTask
          perffmwk.HistogramStatsPrms-enable = false // stats are sampled
          threadGroups = archiver
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = cycleDistributedSystemConnectionOnlyTask
          hydra.ConfigPrms-cacheConfig = peer
          hydra.ConfigPrms-regionConfig = peer
          cacheperf.CachePerfPrms-sleepMs = ${sleepMs}
          perffmwk.HistogramStatsPrms-enable = false // uses statarchiver
          threadGroups = peer
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          threadgroups = archiver
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          threadgroups = archiver, peer
          ;

//------------------------------------------------------------------------------
// Termination
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 259200;  // workload-based
hydra.Prms-maxResultWaitSec = 600;

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 60;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 60;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

//------------------------------------------------------------------------------
// Distributed system
//------------------------------------------------------------------------------

hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${locatorHosts})"  ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${archiverHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${peerHosts})"     ncf;

//------------------------------------------------------------------------------
// Security
//------------------------------------------------------------------------------

hydra.GemFirePrms-securityName = ${securityScheme};
hydra.GemFirePrms-sslName = ${sslScheme};

//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

/*
hydra.CachePrms-names = peer;

hydra.RegionPrms-names      = peer;
hydra.RegionPrms-dataPolicy = replicated;
hydra.RegionPrms-scope      = dack;
*/

//------------------------------------------------------------------------------
// Data
//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-maxKeys = 1; // not used

//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------

hydra.VmPrms-extraVMArgs  = fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms128m -Xmx128m\", ${locatorHosts}, true)"
                            ncf
                            ,
                            fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms128m -Xmx128m\", ${archiverHosts}, true)"
                            ncf
                            ,
                            fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms250m -Xmx250m\", ${peerHosts}, true)"
                            ncf;
hydra.VmPrms-extraVMArgs += -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
                            -XX:+DisableExplicitGC;

hydra.GemFirePrms-conserveSockets = ${conserveSockets};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/security/connect.spec;
