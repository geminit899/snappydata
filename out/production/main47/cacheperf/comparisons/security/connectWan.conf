include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_locator.inc;
include $JTESTS/cacheperf/comparisons/security/schemes.inc;

hydra.Prms-testDescription = "WAN sites cycle gateway hub connections using security authorization scheme \"${securityScheme}\".  Connections are throttled by ${sleepMs} sleeps";
hydra.Prms-testRequirement = "Security has minimal impact on performance.";

//------------------------------------------------------------------------------
// Threadgroups
//------------------------------------------------------------------------------

hydra.ClientPrms-vmThreads =
      fcn "hydra.TestConfigFcns.duplicate
           (\"${locatorThreadsPerVM}\", ${wanSites} * ${locatorHostsPerSite})"
      ncf
      fcn "hydra.TestConfigFcns.duplicateEnforced
           (\"${peerThreadsPerVM}\", \"1\", ${wanSites} * ${peerHostsPerSite})"
      ncf;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;
THREADGROUP peer
  totalThreads = fcn ${wanSites} * ${peerHostsPerSite}
                 * ${peerVMsPerHost} * ${peerThreadsPerVM} - 1
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"peer\", ${wanSites}, ${peerHostsPerSite}, false, true)"
                 ncf;
THREADGROUP cycler
  totalThreads = 1
  totalVMs = 1
  clientNames  = peer_1_1;

//------------------------------------------------------------------------------
// Tasks
//------------------------------------------------------------------------------

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadgroups = peer, cycler
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = peer
          hydra.ConfigPrms-regionConfig = peer
          threadGroups = peer, cycler
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createGatewayHubTask
          hydra.ConfigPrms-gatewayHubConfig = ${hubType}
          threadGroups = cycler
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createGatewayHubTask
          hydra.ConfigPrms-gatewayHubConfig = peer
          threadGroups = peer
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = addGatewaysTask
          hydra.ConfigPrms-gatewayConfig = peer
          threadGroups = peer, cycler
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = startGatewayHubTask
          threadGroups = cycler
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = startGatewayHubTask
          threadGroups = peer
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = stopGatewayHubTask
          threadGroups = cycler
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = cycleGatewayHubConnectionTask
          cacheperf.CachePerfPrms-isMainWorkload = true
          cacheperf.CachePerfPrms-sleepMs = ${sleepMs}
          threadGroups = cycler
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = peer, cycler
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          threadgroups = peer, cycler
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          threadgroups = peer, cycler
          ;

//------------------------------------------------------------------------------
// Termination
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 259200;  // workload-based
hydra.Prms-maxResultWaitSec = 600;

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 60;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 60;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

//------------------------------------------------------------------------------
// Security
//------------------------------------------------------------------------------

hydra.GemFirePrms-securityName = ${securityScheme};
hydra.GemFirePrms-sslName = ${sslScheme};

//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

hydra.CachePrms-names = peer;

hydra.RegionPrms-names      = peer;
hydra.RegionPrms-dataPolicy = replicated;
hydra.RegionPrms-scope      = dack;

hydra.GatewayHubPrms-names         = ${hubType} peer;
hydra.GatewayHubPrms-startupPolicy = ${hubType} default;

hydra.GatewayPrms-names = peer;

//------------------------------------------------------------------------------
// Data
//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-maxKeys = 1; // not used

//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------

hydra.VmPrms-extraVMArgs   =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms128m -Xmx128m\", ${locatorHostsPerSite} * ${wanSites}, true)"
  ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms250m -Xmx250m\", ${peerHostsPerSite} * ${wanSites}, true)"
  ncf;
hydra.VmPrms-extraVMArgs += -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
                            -XX:+DisableExplicitGC;

hydra.GemFirePrms-conserveSockets = ${conserveSockets};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/security/connect.spec;
