include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_2.inc;

hydra.GemFirePrms-distributedSystem = ds;

hydra.Prms-testDescription = "Hydra implementation of the POC useCase12 benchmark.  
    Publishers and Subscribers run in different VMs.

    Set all caches to scope ${scope} with the same region.  Set
    Subscriber caches to fully replicate Publisher caches.  The subscribers
    do not have CacheListeners installed.

    Cache entries consist of a flat data structure (EqStruct) as originally
    used in the useCase12 benchmark tests.   Publishers update keys sequentially
    from a shared data set.
";

INITTASK  taskClass = cacheperf.comparisons.useCase12.UseCase12Client taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.comparisons.useCase12.UseCase12Client taskMethod = openCacheTask
          ;
TASK      taskClass = cacheperf.comparisons.useCase12.UseCase12Client taskMethod = updateEqStructTask
          threadGroups = pub
          cacheperf.CachePerfPrms-keyAllocation = ownKeysWrap
          ;
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.comparisons.useCase12.UseCase12Client taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.comparisons.useCase12.UseCase12Client taskMethod = reportTrimIntervalsTask
          ;

cacheperf.CachePerfPrms-batchTerminatorMethod = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds =  60;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds  =  60;
cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-workSeconds  = 180;

THREADGROUP pub
    totalThreads = fcn ${pubHosts} * ${pubVMsPerHost} * ${pubThreadsPerVM} ncf 
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"pub\", ${pubHosts}, true)" ncf;
THREADGROUP sub
    totalThreads = fcn ${subHosts} * ${subVMsPerHost} * ${subThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"sub\", ${subHosts}, true)" ncf;

hydra.Prms-maxResultWaitSec = 300;   // 5 minutes
hydra.Prms-totalTaskTimeSec = 99999; // uses time-based workload

hydra.VmPrms-extraVMArgs +=     
   fcn "hydra.TestConfigFcns.duplicate(\"-Xmx1024m -Xms1024m\", ${pubHosts} * ${pubVMsPerHost}, true)" ncf 
   ,
   fcn "hydra.TestConfigFcns.duplicate(\"-Xmx512m -Xms512m\", ${subHosts} * ${subVMsPerHost}, true)" ncf
;

hydra.GemFirePrms-conserveSockets = false;

cacheperf.CachePerfPrms-maxKeys    = 10000;
cacheperf.CachePerfPrms-objectType = ${objectType};

hydra.ConfigPrms-cacheConfig = client;
hydra.ConfigPrms-regionConfig = client;

hydra.CachePrms-names = client;
hydra.RegionPrms-names = client;
hydra.RegionPrms-scope = ${scope};
hydra.RegionPrms-dataPolicy = replicated;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/useCase12/useCase12Updates.spec;
