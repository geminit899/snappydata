INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

hydra.GemFirePrms-conserveSockets = false;

THREADGROUP bridge
    totalThreads = fcn
                   ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)"
                   ncf;
THREADGROUP edge
    totalThreads = fcn
                   ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edge\", ${edgeHosts}, true)"
                   ncf;

hydra.Prms-testDescription = "UseCase12 POC operations (put, get, update object, put) on the edge(s) of a hierarchical cache.";

hydra.BridgePrms-names = bridge;

hydra.PoolPrms-names        = pool;
hydra.PoolPrms-subscriptionEnabled = true;

hydra.CachePrms-names = bridge edge;

hydra.RegionPrms-names              = bridge     edge;
hydra.RegionPrms-dataPolicy         = replicated default;
hydra.RegionPrms-scope              = noAck      local;
hydra.RegionPrms-evictionAttributes = default,   lruEntryCount 1000;
hydra.RegionPrms-poolName           = none       pool;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge
          ;
INITTASK  taskClass = cacheperf.comparisons.useCase12.UseCase12Client taskMethod = registerForInvalidatesTask
          threadGroups = edge
          ;
TASK      taskClass = cacheperf.comparisons.useCase12.UseCase12Client taskMethod = updateEqStructTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysWrap
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnTotalIterations
          threadGroups = edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask 
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

cacheperf.CachePerfPrms-batchSize      =  250000;
cacheperf.CachePerfPrms-trimIterations =  500000;
cacheperf.CachePerfPrms-workIterations = 1000000;
cacheperf.CachePerfPrms-maxKeys        =   10000;
cacheperf.CachePerfPrms-objectType = objects.EqStruct;

hydra.Prms-totalTaskTimeSec = 3600;
hydra.Prms-maxResultWaitSec = 600;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx512m -Xms512m\", ${bridgeHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx1524m -Xms1524m\", ${edgeHosts}, true)"
                             ncf;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/useCase12/useCase12Updates.spec;
