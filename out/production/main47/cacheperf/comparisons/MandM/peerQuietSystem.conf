hydra.Prms-testRequirement = "Test that CPU is relatively idle for a quiet system with monitoring enabled";
hydra.Prms-testDescription = "
Measure the cpuActive stat for a period of time in a quiet peer system.
This test does not follow the pattern of most performance tests in that
it defines multiple regions and does not load any data. 
";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_1_locator.inc;

hydra.Prms-totalTaskTimeSec = 259200;  // workload-based
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-maxClientShutdownWaitSec = 900;

//------------------------------------------------------------------------------
// Threadgroups
//------------------------------------------------------------------------------

THREADGROUP locator
  totalThreads = fcn
                 ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)"
                 ncf;
THREADGROUP peer
    totalThreads = fcn
                   ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"peer\", ${peerHosts}, true)"
                   ncf;
//------------------------------------------------------------------------------
// Tasks
//------------------------------------------------------------------------------

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask    
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadGroups = peer
          ;

INITTASK taskClass    = cacheperf.comparisons.MandM.MMHelper taskMethod = HydraTask_initialize
         threadGroups = peer;

INITTASK taskClass     = cacheperf.comparisons.MandM.MMHelper taskMethod = HydraTask_logManagerStatus
         threadGroups = peer, locator;

TASK     taskClass     = cacheperf.CachePerfClient taskMethod = sleepTaskWithTrim
         maxTimesToRun = fcn ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM} ncf
         threadGroups = peer;

CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          threadGroups = peer
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          threadGroups = peer
          ;

// required by the framework, but unused in this test
cacheperf.CachePerfPrms-maxKeys    = 1000;
cacheperf.CachePerfPrms-sleepMs = 300000;

//------------------------------------------------------------------------------
// Versioning (allows running current tests against old builds)
//------------------------------------------------------------------------------

hydra.ClientPrms-versionNames = version;

hydra.VersionPrms-names   = version;
hydra.VersionPrms-version = ${version};

//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicateString(\"-Dnone\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Xms${heapMB}m -Xmx${heapMB}m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:CMSInitiatingOccupancyFraction=33\", ${peerHosts}, true)" ncf
  ;

hydra.GemFirePrms-conserveSockets = ${conserveSockets};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/specs/cpuActive.spec;



management.jmx.JMXPrms-sleepTimeFactor = 5;
hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/gfsh-dependencies.jar;
hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
hydra.Prms-maxResultWaitSec = 900;
INCLUDE $JTESTS/management/test/cli/regions.inc;
hydra.RegionPrms-poolName           = none; // override pool settings in regions.inc

// jmx manager settings
hydra.GemFirePrms-jmxManagerPort=true; // required to have hydra autogenerate a port
hydra.GemFirePrms-jmxManager = true; // all members are willing to become managers
hydra.GemFirePrms-jmxManagerStart =
   // locators
   fcn "hydra.TestConfigFcns.duplicate
      (\"true\", ${numLocatorManagers})"
   ncf
   fcn "hydra.TestConfigFcns.duplicate
      (\"false\", (${locatorHosts} * ${locatorVMsPerHost}) - ${numLocatorManagers})"
   ncf

   // peers
   fcn "hydra.TestConfigFcns.duplicate
      (\"true\", ${numPeerManagers})"
   ncf
   fcn "hydra.TestConfigFcns.duplicate
      (\"false\", ((${peerHosts} * ${peerVMsPerHost}) - ${numPeerManagers}))"
   ncf
;

