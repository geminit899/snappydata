include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-maxResultWaitSec = 1200;    // 20 minutes
hydra.Prms-totalTaskTimeSec = 360000; // 100 hours

hydra.ClientPrms-vmThreads    = ${vmThreads};
hydra.ClientPrms-vmQuantities = ${vmQuantities};

hydra.GemFirePrms-conserveSockets = true;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.ConfigPrms-regionConfig = region;
hydra.RegionPrms-names      = region;
hydra.RegionPrms-dataPolicy = normal;
hydra.RegionPrms-scope      = local;

hydra.Prms-testDescription = "Cache put/get performance for a cache for a region with scope local using objects of type ${objectType} and size 1K using ${vmThreads} threads on ${vmQuantities} VMs on ${hydra.numHosts} hosts.  Threads do 80% gets and 20% puts, using keyAllocation ${keyAllocation} keys.";

hydra.VmPrms-extraVMArgs = -Xmx1000m;

cacheperf.CachePerfPrms-objectType = ${objectType};
objects.ArrayOfBytePrms-size = 1024;

cacheperf.CachePerfPrms-maxKeys        = 200000;
cacheperf.CachePerfPrms-putPercentage  = 20;

cacheperf.CachePerfPrms-batchSeconds              = 60;
cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 30 seconds;
cacheperf.CachePerfPrms-workSeconds               = ${workSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 30 seconds;

hydra.Prms-totalTaskTimeSec = 999999; // see terminators

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = mixPutGetDataTask
          cacheperf.CachePerfPrms-keyAllocation = ${keyAllocation}
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/localregion/localregion.spec;
