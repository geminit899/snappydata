include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-maxResultWaitSec = 1200;    // 20 minutes
hydra.Prms-totalTaskTimeSec = 360000; // 100 hours

hydra.ClientPrms-vmThreads    = ${vmThreads};
hydra.ClientPrms-vmQuantities = ${vmQuantities};

hydra.GemFirePrms-conserveSockets = true;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.ConfigPrms-regionConfig = region;
hydra.RegionPrms-names       = region;
hydra.RegionPrms-dataPolicy  = normal;
hydra.RegionPrms-scope       = local;
hydra.RegionPrms-cacheLoader = cacheperf.gemfire.SleepLoader;

cacheperf.gemfire.GemFireCachePrms-loaderSleepMs = 5;

hydra.Prms-testDescription = "Cache get/create performance for a cache for a region with scope local using objects of type ${objectType} and size 1K using ${vmThreads} threads on ${vmQuantities} VMs on ${hydra.numHosts} hosts.  Threads do 80% gets that use a local loader and 20% creates, using unique keys.";

hydra.VmPrms-extraVMArgs = -Xmx1000m;

cacheperf.CachePerfPrms-objectType = ${objectType};
objects.ArrayOfBytePrms-size = 1024;

cacheperf.CachePerfPrms-trimIterations = ${trimIterations};
cacheperf.CachePerfPrms-workIterations = ${workIterations};
cacheperf.CachePerfPrms-batchSize      = ${batchSize};
cacheperf.CachePerfPrms-maxKeys        = fcn ${trimIterations} + ${workIterations} ncf;
cacheperf.CachePerfPrms-putPercentage  = 20;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = mixCreateGetDataTask
	  cacheperf.CachePerfPrms-keyAllocation = ownKeys
	  cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimIterations
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/localregion/localregionloader.spec;
