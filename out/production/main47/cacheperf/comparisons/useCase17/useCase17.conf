include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_2.inc;

hydra.Prms-testDescription = "
    Set all caches to use the same region with scope ${scope}.  Set Subscriber
    caches to fully replicate Publisher caches.  Use a cache listener in the
    Subscriber to process update events produced by the Publisher.  Measure
    update latency.  Publishers and Subscribers run in different VMs.

    Cache entries consist of stringified int keys and timestamped messages
    with an optional 1K string payload encoded with the key.  Publishers
    update values at random keys in their own dataset at a configurable rate.
";

hydra.Prms-testRequirement = "Performance of GemFire is within 15% of the target range.";

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = pub
          threadGroups = pub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = sub
          threadGroups = sub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = validateExpectedMembersTask
          threadGroups = pub, sub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          threadGroups = pub
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          threadGroups = pub
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          cacheperf.CachePerfPrms-sleepBeforeOp = ${sleepBeforeOp}
          cacheperf.CachePerfPrms-sleepMs = range ${putSleepMsMin} ${putSleepMsMax} egnar
          cacheperf.CachePerfPrms-sleepOpCount = ${sleepOpCount}
          ;
//CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
//          threadGroups = pub, sub
//          cacheperf.CachePerfPrms-keyAllocation = sameKeys
//          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
//          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
//          cacheperf.CachePerfPrms-validateObjects = true
//          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

hydra.VmPrms-extraVMArgs = "-Xms512m -Xmx512m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC";

cacheperf.CachePerfPrms-syncSleepMs    = 4000;
cacheperf.CachePerfPrms-maxKeys        = 20000;
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size = ${messageSize};

include $JTESTS/cacheperf/comparisons/useCase17/useCase17_gemfire.inc;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/specs/putupdateEvents.spec;
