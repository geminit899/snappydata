include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_hct.inc;

hydra.Prms-testDescription = "Measure get and put throughput using a replicated region with scope ${scope} spread across bridge servers with thin clients.  The region is initialized by clients with a total of ${maxKeys} puts with data size ${dataSize} bytes.  Clients then do a mix of 80% gets and 20% puts, with eviction starting at 10 MB.";

hydra.CachePrms-names               = bridge     edge;
hydra.RegionPrms-names              = bridge     edge;
hydra.RegionPrms-scope              = ${scope}   local;
hydra.RegionPrms-dataPolicy         = replicate  default;
hydra.RegionPrms-poolName           = none       pool;
hydra.RegionPrms-evictionAttributes = none,
                                      lruMemorySize 10 objects.PSTObject;

hydra.BridgePrms-names                = bridge;

hydra.PoolPrms-names                  = pool;
hydra.PoolPrms-readTimeout            = 10000000;
hydra.PoolPrms-subscriptionEnabled    = false;
hydra.PoolPrms-threadLocalConnections = true;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge
          ;
// init task will finish when it has populated the regions with maxKeys creates
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = edge
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = mixPutGetDataTask
          threadGroups = edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 300;

hydra.GemFirePrms-conserveSockets = true;

// keys/values
cacheperf.CachePerfPrms-objectType = objects.PSTObject;
cacheperf.CachePerfPrms-maxKeys    = ${maxKeys};
objects.PSTObjectPrms-size         = ${dataSize};
cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap;

// percentage of mixed put/get operations that are puts
cacheperf.CachePerfPrms-putPercentage = 20;

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 60;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 5 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 180;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 15 seconds;
cacheperf.CachePerfPrms-workSeconds               = ${workSeconds};

// each bridge server vm gets a specific VM size; thin clients get a small size
hydra.VmPrms-extraVMArgs +=
    fcn "hydra.TestConfigFcns.duplicate(\"-Xms${bridgeVMSizeMB}m -Xmx${bridgeVMSizeMB}m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC\", ${bridgeHosts}, true)" ncf
    ,
    fcn "hydra.TestConfigFcns.duplicate(\"-Xmx250m\", ${edgeHosts}, true)" ncf
    ;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/thinClientScalability/thinClientScalability.spec;
