include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_hct_locator.inc;
include $JTESTS/hydraconfig/version.inc;

hydra.Prms-testDescription = "Measure get and put throughput using a partitioned region spread across bridge servers with empty clients.  The region is initialized by clients with a total of ${maxKeys} puts with data size ${dataSize} bytes.  Clients then do a mix of 80% gets and 20% puts."; 

hydra.GemFirePrms-conserveSockets = ${conserveSockets};

hydra.CachePrms-names          = bridge    edge;

hydra.RegionPrms-names         = bridge    edge;
hydra.RegionPrms-dataPolicy    = partition empty;
hydra.RegionPrms-partitionName = bridge    none;
hydra.RegionPrms-poolName      = none      pool;
hydra.RegionPrms-scope         = default   local;

hydra.PartitionPrms-names = bridge;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-totalNumBuckets = fcn 10 * ${bridgeHosts} * ${bridgeVMsPerHost} ncf;

hydra.BridgePrms-names = bridge;

hydra.PoolPrms-names                  = pool;
hydra.PoolPrms-contactNum             = 1;
hydra.PoolPrms-readTimeout            = 10000000;
hydra.PoolPrms-subscriptionEnabled    = false;
hydra.PoolPrms-threadLocalConnections = true;

THREADGROUP locator
  totalThreads = fcn
                 ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)"
                 ncf;
THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadGroups = bridge, edge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = assignBucketsTask
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeysChunked
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = edge
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = mixPutGetDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          threadGroups = edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          threadGroups = bridge, edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          threadGroups = bridge, edge
          ;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

cacheperf.CachePerfPrms-keyType    = java.lang.Long;
cacheperf.CachePerfPrms-objectType = objects.PSTObject;
cacheperf.CachePerfPrms-maxKeys    = ${maxKeys};
objects.PSTObjectPrms-size         = ${dataSize};

cacheperf.CachePerfPrms-putPercentage = 20;

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 180;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 5 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 180;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 15 seconds;
cacheperf.CachePerfPrms-workSeconds               = ${workSeconds};

hydra.VmPrms-extraVMArgs =
   fcn "hydra.TestConfigFcns.duplicate
        (\"-Dnone\", ${locatorHosts}, true)" ncf
   ,
   fcn "hydra.TestConfigFcns.duplicate
        (\"-Xms${bridgeVMSizeMB}m -Xmx${bridgeVMSizeMB}m\", ${bridgeHosts}, true)" ncf
   ,
   fcn "hydra.TestConfigFcns.duplicate
        (\"-Xmx128m\", ${edgeHosts}, true)" ncf;

hydra.VmPrms-extraVMArgs +=
  -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;

hydra.VmPrms-extraVMArgs += "-XX:CMSInitiatingOccupancyFraction=33";

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/dataScalability/dataScalability.spec;
