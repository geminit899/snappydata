include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p.inc;

hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-totalTaskTimeSec = 360000; // workload-based

distcache.DistCachePrms-cacheVendor = ${cacheVendor};

hydra.CachePrms-names = cache;
hydra.RegionPrms-names = region;
hydra.RegionPrms-scope = ${scope};
hydra.RegionPrms-dataPolicy = ${dataPolicy};
hydra.RegionPrms-concurrencyLevel = ${peerThreadsPerVM};
distcache.hashmap.HashMapCachePrms-concurrencyLevel = ${peerThreadsPerVM};

hydra.Prms-testDescription = "Peer threads update entries of type ${objectType} and size 1024 bytes using ${scope} and dataPolicy ${dataPolicy}}.  There is one entry per thread, and each thread updates its own entry.  Uses an optimized loop (updates a given key ${optimizationCount} times with the same value).";

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = region
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-optimizationCount = ${optimizationCount}
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

hydra.GemFirePrms-conserveSockets = false;

cacheperf.CachePerfPrms-objectType = ${objectType};
objects.ArrayOfBytePrms-size = 1024;
objects.SizedStringPrms-size = 1024;
objects.NestedOrderVectorPrms-width = 2;
objects.NestedOrderVectorPrms-depth = 3;

cacheperf.CachePerfPrms-keyAllocation = ${keyAllocation};
cacheperf.CachePerfPrms-batchSeconds = 300;
cacheperf.CachePerfPrms-trimSeconds  =  60;
cacheperf.CachePerfPrms-workSeconds  = 120;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;

cacheperf.CachePerfPrms-maxKeys = fcn ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM} * ${keysPerThread} ncf;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/puts.spec;
