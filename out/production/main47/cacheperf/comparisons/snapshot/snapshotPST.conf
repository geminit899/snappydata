hydra.Prms-testDescription = "50 peer datahosts load the region.  Region data is exported and vms shutdown.  10 new VMs are started and one imports the snapshot";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_3_locator.inc;

//------------------------------------------------------------------------------
// Threadgroups
//------------------------------------------------------------------------------

THREADGROUP locator
  totalThreads = fcn
                 ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)"
                 ncf;

THREADGROUP peer
    totalThreads = fcn
                   ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"peer\", ${peerHosts}, true)"
                   ncf;

THREADGROUP extra
    totalThreads = fcn
                   ${extraHosts} * ${extraVMsPerHost} * ${extraThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"extra\", ${extraHosts}, true)"
                   ncf;

THREADGROUP controller
    totalThreads = fcn
                   ${controllerHosts} * ${controllerVMsPerHost} * ${controllerThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"controller\", ${controllerHosts}, true)"
                   ncf;

//------------------------------------------------------------------------------
// Tasks
//------------------------------------------------------------------------------
INITTASK  taskClass = util.StopStartVMs taskMethod = StopStart_initTask;

INITTASK  taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = createAndStartLocatorTask    
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = openStatisticsTask
          threadGroups = peer
          ;
INITTASK  taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = region
          threadGroups = peer
          ;

//------------------------------------------------------------------------------
// Create adminVM
//------------------------------------------------------------------------------
INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = controller;

//------------------------------------------------------------------------------
// load region
//------------------------------------------------------------------------------
INITTASK  taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = assignBucketsTask
          threadGroups = peer
          ;

INITTASK  taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeysChunked
          cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimIterations
          cacheperf.CachePerfPrms-warmupTerminatorFrequency = 1 iterations
          cacheperf.CachePerfPrms-trimIterations = 0
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = peer
          ;

//------------------------------------------------------------------------------
// Destroy tasks cause more work for recovery and stress it
// This randomly destroys 20%  of the region
//------------------------------------------------------------------------------

INITTASK taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = destroyDataTask
         cacheperf.CachePerfPrms-keyAllocation = sameKeysRandomWrap
         cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
         cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnNumOperations
         cacheperf.CachePerfPrms-warmupTerminatorMethod = null // no warmup needed, destroys are to make recovery harder for the product
                                                               // not for performance purposes
         cacheperf.CachePerfPrms-numOperations = fcn ((int)(Math.ceil((${maxKeys} * ${peerHosts} * ${peerVMsPerHost} * 0.2) /
                                                      (${peerHosts} * ${peerVMsPerHost})))) ncf
         threadGroups = peer
         batch
         ;

//------------------------------------------------------------------------------
// Force a gc in all vms.
//------------------------------------------------------------------------------
INITTASK taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = doGC
         threadGroups = peer;

//------------------------------------------------------------------------------
// Export the region (snapshot), only one VM will export the region snapshot
//------------------------------------------------------------------------------
INITTASK taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = exportRegionSnapshot
         hydra.ConfigPrms-cacheConfig = cache
         hydra.ConfigPrms-regionConfig = region
         threadGroups = peer;

//------------------------------------------------------------------------------
// Task to stop and restart all peer vms
//------------------------------------------------------------------------------

TASK     taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = stopOtherVMs
         cacheperf.CachePerfPrms-useShutDownAllMembers = ${useShutDownAllMembers}
         cacheperf.CachePerfPrms-restartVMs = false
         weight = 100
         maxTimesToRun = 1
         threadGroups = controller;

//------------------------------------------------------------------------------
// All original VMs are shutdown gracefully
//------------------------------------------------------------------------------
CLOSETASK taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = closeCacheTask
          threadGroups = peer;
CLOSETASK taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = closeStatisticsTask
          threadGroups = peer;
CLOSETASK taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = reportTrimIntervalsTask
          threadGroups = peer;

//------------------------------------------------------------------------------
// Task to initialize new vms
//------------------------------------------------------------------------------
CLOSETASK taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = openStatisticsTask
          threadGroups = extra;

CLOSETASK taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = region
          threadGroups = extra;

CLOSETASK taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = addDataHostTask
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = region
          threadGroups = extra;

//------------------------------------------------------------------------------
// Task to import region snapshot (and validate region size)
// Only one vm will import the snapshot (vm on same host where data is exported and snapshot hosted.
// All vms will verify region.size()
//------------------------------------------------------------------------------
CLOSETASK taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = importRegionSnapshot
          threadGroups = extra;

CLOSETASK taskClass = cacheperf.comparisons.snapshot.SnapshotClient taskMethod = verifyRegionSnapshot
          threadGroups = extra;

//------------------------------------------------------------------------------
// VM args
//------------------------------------------------------------------------------
hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicateString(\"-Dnone\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Xms${heapMB}m -Xmx${heapMB}m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:CMSInitiatingOccupancyFraction=33\", ${peerHosts}, true)" ncf,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Xms${heapMB}m -Xmx${heapMB}m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:CMSInitiatingOccupancyFraction=33\", ${extraHosts}, true)" ncf,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Xms20m -Xmx20m\", ${controllerHosts}, true)" ncf
  ;

hydra.VmPrms-extraVMArgs += "-XX:-DisableExplicitGC";

hydra.Prms-totalTaskTimeSec = 259200;  // workload-based
hydra.Prms-maxResultWaitSec = 604800; // one week 

//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 300;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 60;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;


//------------------------------------------------------------------------------
// Data
//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-maxKeys    = fcn ${maxKeys} * ${peerHosts} * ${peerVMsPerHost} ncf;
cacheperf.CachePerfPrms-keyType    = java.lang.Long;
cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size       = ${objectSize};

//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicateString(\"-Dnone\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Xms${heapMB}m -Xmx${heapMB}m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:CMSInitiatingOccupancyFraction=33\", ${peerHosts}, true)" ncf
  ;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/specs/cacheOpens.spec;

//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------
hydra.GemFirePrms-conserveSockets = ${conserveSockets};

hydra.CachePrms-names = cache;
hydra.RegionPrms-names = region;
hydra.RegionPrms-scope = dack;
hydra.RegionPrms-dataPolicy = partition;
hydra.RegionPrms-scope = default;
hydra.RegionPrms-evictionAttributes = lruEntryCount 3463683 overflowToDisk;
hydra.RegionPrms-partitionName = partition;

hydra.PartitionPrms-names = partition;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-totalNumBuckets = fcn ${bucketsPerDatahost} * ${peerHosts} * ${peerVMsPerHost} ncf;

cacheperf.CachePerfPrms-keyAllocationChunkSize = fcn ${bucketsPerDatahost} * ${peerHosts} * ${peerVMsPerHost} ncf;

// Allow overflow to disk
hydra.RegionPrms-diskStoreName = disk;
hydra.RegionPrms-diskSynchronous = ${synchronous};

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-queueSize = 1200;
hydra.DiskStorePrms-diskDirNum = 1;
hydra.DiskStorePrms-diskDirSizes = 30000;

hydra.Prms-removeDiskFilesAfterTest = true;
