include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/systemparams2.inc;

hydra.Prms-testDescription = "
    Publisher:  1 host with 1 VM per host and 1 thread per VM
    Subscriber: 1 host with 1 VM per host and 1 thread per VM

    Publishers and Subscribers run in different VMs.

    Set all caches to scope distributed no ack with the same vm region.  Set
    Subscriber caches to fully replicate Publisher caches.
    Use a cache listener in the Subscriber to
    process update events produced by the Publisher.  Measure update latency.

    Cache entries consist of stringified int keys and timestamped messages
    with an optional 1K string payload encoded with the key.  Publishers
    update values at random keys in their own dataset at a configurable rate.
";
hydra.Prms-testRequirement = "Performance of GemFire is within 15% of the target range.";

hydra.ClientPrms-vmQuantities = 1 1;
hydra.ClientPrms-vmThreads =    1 1;

THREADGROUP pub totalThreads = 1 totalVMs = 1 clientNames = client1;
THREADGROUP sub totalThreads = 1 totalVMs = 1 clientNames = client2;

hydra.CachePrms-names           = pub     sub;
hydra.RegionPrms-names          = pub     sub;
hydra.RegionPrms-dataPolicy     = default replicate;
hydra.RegionPrms-cacheListeners = none,   cacheperf.gemfire.LatencyListener;
hydra.RegionPrms-scope          = noAck;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = pub
          hydra.ConfigPrms-regionConfig = pub
          threadGroups = pub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          threadGroups = pub
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = sub
          hydra.ConfigPrms-regionConfig = sub
          threadGroups = sub
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          threadGroups = pub
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          cacheperf.CachePerfPrms-sleepBeforeOp = false
          cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds
          cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds
          cacheperf.CachePerfPrms-trimSeconds  = 120
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 10 seconds
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnTotalSeconds
          cacheperf.CachePerfPrms-workSeconds  = 300
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

hydra.Prms-maxResultWaitSec = 300; // 5 minutes
hydra.Prms-totalTaskTimeSec = 300; // 5 minutes

hydra.GemFirePrms-conserveSockets = false;

hydra.VmPrms-extraVMArgs = -Xms250m -Xmx250m
                          "-XX:MaxDirectMemorySize=256m"
                          "-DLocalRegion.INLINE_EVENT_LISTENERS=true"
                        //"-Dp2p.maxMsgOutputStreams=300"
                          ;

cacheperf.CachePerfPrms-batchSeconds =  60;
cacheperf.CachePerfPrms-batchTerminatorMethod = terminateOnBatchSeconds;

cacheperf.CachePerfPrms-maxKeys        = 20000;
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size = 0;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/specs/putupdateEvents.spec;
