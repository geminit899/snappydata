include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_2.inc;

hydra.Prms-testDescription = "Each subscriber defines a cache listener that does some computational task that burns CPU.  

All members are configured to use reliable multicast.  The publisher updates cache entries at a steady rate of ~5K/sec.

To adjust the update rate, modify util.RandomValuesPrms-stringSize = 400.  This string size controls the size of the random string to be searched (the work done by the WorkerLatencyListener).
";

hydra.Prms-testRequirement = "All subscribers are able to keep up with the publisher.";

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = pub
          hydra.ConfigPrms-regionConfig = pub
          threadGroups = pub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          threadGroups = pub
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = sub
          hydra.ConfigPrms-regionConfig = sub
          threadGroups = sub
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          threadGroups = pub
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          cacheperf.CachePerfPrms-sleepBeforeOp = ${sleepBeforeOp}
          cacheperf.CachePerfPrms-sleepMs = range ${putSleepMsMin} ${putSleepMsMax} egnar
          cacheperf.CachePerfPrms-sleepOpCount = ${sleepOpCount}
	  cacheperf.CachePerfPrms-warmupTerminatorFrequency = 180 seconds
          cacheperf.CachePerfPrms-taskTerminatorMethod = none
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP pub
    totalThreads = fcn
                   ${pubHosts} * ${pubVMsPerHost} * ${pubThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"pub\", ${pubHosts}, true)"
                   ncf;
THREADGROUP sub
    totalThreads = fcn
                   ${subHosts} * ${subVMsPerHost} * ${subThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"sub\", ${subHosts}, true)"
                   ncf;

hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-totalTaskTimeSec = 1800;

hydra.GemFirePrms-conserveSockets = true;
hydra.GemFirePrms-enableMcast = ${enableMcast};
hydra.GemFirePrms-mcastTtl = 1;
hydra.GemFirePrms-useLocator = ${useLocator};

hydra.CachePrms-names             = pub     sub;
hydra.RegionPrms-names            = pub     sub;
hydra.RegionPrms-dataPolicy       = default replicated;
hydra.RegionPrms-cacheListeners   = none,
                                    cacheperf.gemfire.WorkerLatencyListener;
hydra.RegionPrms-scope            = ${scope};
hydra.RegionPrms-multicastEnabled = ${multicastEnabled};

cacheperf.CachePerfPrms-trimIterations = 0;
cacheperf.CachePerfPrms-workIterations = 1000000000; // let master terminate on totalTaskTimeSec
cacheperf.CachePerfPrms-syncSleepMs    = 4000;
cacheperf.CachePerfPrms-batchSize      = ${batchSize};
cacheperf.CachePerfPrms-maxKeys        = 200000; 
cacheperf.CachePerfPrms-objectType = objects.PSTObject;

objects.ArrayOfBytePrms-size = ${byteArraySize};

util.RandomValuesPrms-stringSize = 400;
util.RandomValuesPrms-objectType = "String";
util.RandomValuesPrms-keyType = "String";
util.RandomValuesPrms-valueType = "String";
util.RandomValuesPrms-setElementType = "String";
util.RandomValuesPrms-borderCasePercentage = 1;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/clientScalability/scaleClient.spec;
