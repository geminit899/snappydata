include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-testDescription = "Get initial image performance for gemfire with dataPolicy ${dataPolicy}, and scope ${scope}, for objects of type objects.ArrayOfByte and size ranging from 10 to 1024 bytes, using ${hydra.numHosts} hosts, 1 VM per host, and 1 thread per VM.  First, the thread on one host creates N total entries, then each remaining thread gets an initial image.";

hydra.Prms-testRequirement = "Unspecified, but need \"reasonable\" performance and scalability.";

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names      = nonopener opener;
hydra.RegionPrms-dataPolicy = normal    ${dataPolicy};
hydra.RegionPrms-scope      = ${scope};

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = nonopener
          threadGroups = creator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          threadGroups = creator
	  batch
	  cacheperf.CachePerfPrms-keyAllocation = ownKeys
	  cacheperf.CachePerfPrms-warmupTerminatorMethod = none
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = timedOpenCacheTask
          hydra.ConfigPrms-regionConfig = opener
          threadGroups = opener
	  maxTimesToRun = fcn ( ${hydra.numHosts} - 1 ) ncf // once per opener
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = validateMaxKeysRegionEntriesTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP creator totalThreads = 1 totalVMs = 1 clientNames = client1;
THREADGROUP opener  totalThreads = fcn ( ${hydra.numHosts} - 1 ) ncf;

hydra.Prms-maxResultWaitSec = 720;  // 12 minutes
hydra.Prms-totalTaskTimeSec = 1;    // so opener threads execute task only once

hydra.ClientPrms-vmThreads    = 1;
hydra.ClientPrms-vmQuantities = 1;

hydra.GemFirePrms-conserveSockets = true;

hydra.VmPrms-extraVMArgs = -Xmx750m;

cacheperf.CachePerfPrms-trimIterations = ${trimIterations};
cacheperf.CachePerfPrms-workIterations = ${workIterations};
cacheperf.CachePerfPrms-batchSize      = ${batchSize};
cacheperf.CachePerfPrms-maxKeys        = fcn ${trimIterations} + ${workIterations} ncf;

cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size = range 10 1024 egnar;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/getInitialImage/getInitialImage.spec;
