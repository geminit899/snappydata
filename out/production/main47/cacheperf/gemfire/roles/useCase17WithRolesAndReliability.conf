include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-testDescription = "
    Publisher:  ${pubHosts} hosts with ${pubVMs} VMs per host and ${pubThreads} threads per VM
    Subscriber: ${subHosts} hosts with ${subVMs} VMs per host and ${subThreads} threads per VM
                                                                                   
    Publishers and Subscribers run in different VMs.
                                                                                   
    Set all caches to scope ${scope} with the same vm region.  Set
    Subscriber caches to fully replicate Publisher caches.
    Use a cache listener in the Subscriber to process update events produced
    by the Publisher.  Measure update latency.
                                                                                   
    Cache entries consist of stringified int keys and timestamped messages
    with an optional 1K string payload encoded with the key.  Publishers
    update values at random keys in their own dataset at a configurable rate.

    This differs from the standard useCase17 test in that we define roles and membershipAttributes.
";
hydra.Prms-testRequirement = "TBD";

hydra.ClientPrms-vmQuantities =
  fcn "hydra.TestConfigFcns.duplicate( \"${pubVMs}\", ${pubHosts} )" ncf
  fcn "hydra.TestConfigFcns.duplicate( \"${subVMs}\", ${subHosts} )" ncf
  ;
hydra.ClientPrms-vmThreads =
  fcn "hydra.TestConfigFcns.duplicate( \"${pubThreads}\", ${pubHosts} )" ncf
  fcn "hydra.TestConfigFcns.duplicate( \"${subThreads}\", ${subHosts} )" ncf
  ;

THREADGROUP pub
totalThreads = fcn ${pubThreads} * ${pubVMs} * ${pubHosts} ncf
totalVMs = fcn ${pubVMs} * ${pubHosts} ncf
clientNames = fcn "hydra.TestConfigFcns.generateNames( \"client\", ${pubHosts}, 1, true )" ncf
;
THREADGROUP sub
totalThreads = fcn ${subThreads} * ${subVMs} * ${subHosts} ncf
totalVMs = fcn ${subVMs} * ${subHosts} ncf
clientNames = fcn "hydra.TestConfigFcns.generateNames( \"client\", ${subHosts}, ${pubHosts} + 1, true )" ncf
;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = pub
          threadGroups = pub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = sub
          threadGroups = sub
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          threadGroups = pub
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          threadGroups = pub
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          cacheperf.CachePerfPrms-sleepBeforeOp = ${sleepBeforeOp}
          cacheperf.CachePerfPrms-sleepMs = range ${putSleepMsMin} ${putSleepMsMax} egnar
          cacheperf.CachePerfPrms-sleepOpCount = ${sleepOpCount}
	  cacheperf.CachePerfPrms-warmupTerminatorFrequency = 180 seconds
          cacheperf.CachePerfPrms-taskTerminatorMethod = none
          ;
//CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
//          threadGroups = pub, sub
//          cacheperf.CachePerfPrms-keyAllocation = sameKeys
//          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
//          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
//          cacheperf.CachePerfPrms-validateObjects = true
//          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

hydra.Prms-maxResultWaitSec = 600; // 10 minutes
hydra.Prms-totalTaskTimeSec = 600; // 10 minutes

hydra.GemFirePrms-conserveSockets = true;

cacheperf.CachePerfPrms-trimIterations = 0;
cacheperf.CachePerfPrms-workIterations = 1000000000; // let master terminate on totalTaskTimeSec
cacheperf.CachePerfPrms-syncSleepMs    = 4000;
cacheperf.CachePerfPrms-batchSize      = ${batchSize};
cacheperf.CachePerfPrms-maxKeys        = 20000;
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size = ${messageSize};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/specs/putupdateEvents.spec;

hydra.VmPrms-extraVMArgs += "-Xms250m -Xmx250m";

hydra.GemFirePrms-roles = publisher subscriber;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names             = pub    sub;
hydra.RegionPrms-cacheListeners    = none,  cacheperf.gemfire.LatencyListener;
hydra.RegionPrms-dataPolicy        = normal replicate;
hydra.RegionPrms-scope             = ack;
hydra.RegionPrms-statisticsEnabled = true;
hydra.RegionPrms-membershipAttributes = subscriber noAccess none, // pub
                                        publisher  noAccess none; // sub
