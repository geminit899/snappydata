include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_2.inc;

hydra.Prms-testDescription = "
    Set all caches to use the same region with scope ${scope}.  Set Subscriber
    caches to fully replicate Publisher caches.  Use a cache listener in the
    Subscriber to process update events produced by the Publisher.  Measure
    update latency.  Publishers and Subscribers run in different VMs.

    Cache entries consist of stringified int keys and timestamped messages
    with an optional 1K string payload encoded with the key.  Publishers
    update values at random keys in their own dataset at a configurable rate.

    In this slowReceiver test, 1 Subscriber has installed a sleepListener (that makes him appear to be a slow Receiver).  The delay should be such that the Publisher queues messages for this subscriber, but not so slow that he is taken out of the distributed system.
";
hydra.Prms-testRequirement = "Performance of GemFire is within 15% of the target range.";

THREADGROUP pub
  totalThreads = fcn ${pubHosts} * ${pubVMsPerHost} * ${pubThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"pub\", ${pubHosts}, true)" ncf;
THREADGROUP sub
  totalThreads = fcn ${subHosts} * ${subVMsPerHost} * ${subThreadsPerVM} - 1 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"sub\", ${subHosts}, true)" ncf;

THREADGROUP slowReceiver totalThreads = 1 clientNames = sub1;

INITTASK  taskClass = cacheperf.gemfire.slowRecv.SlowRecvClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.gemfire.slowRecv.SlowRecvClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = pub
          threadGroups = pub
          ;
INITTASK  taskClass = cacheperf.gemfire.slowRecv.SlowRecvClient taskMethod = createDataTask
          threadGroups = pub
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          ;

INITTASK  taskClass = cacheperf.gemfire.slowRecv.SlowRecvClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = sub
          threadGroups = sub
          ;

INITTASK  taskClass = cacheperf.gemfire.slowRecv.SlowRecvClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = slowReceiver
          threadGroups = slowReceiver
          ;

TASK      taskClass = cacheperf.gemfire.slowRecv.SlowRecvClient taskMethod = putDataTask
          threadGroups = pub
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          cacheperf.CachePerfPrms-sleepBeforeOp = ${sleepBeforeOp}
          cacheperf.CachePerfPrms-sleepMs = range ${putSleepMsMin} ${putSleepMsMax} egnar
          cacheperf.CachePerfPrms-sleepOpCount = ${sleepOpCount}
          ;
CLOSETASK taskClass = cacheperf.gemfire.slowRecv.SlowRecvClient taskMethod =verifySlowReceiverDetectedTask 
          threadGroups = pub
          ;
CLOSETASK taskClass = cacheperf.gemfire.slowRecv.SlowRecvClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.gemfire.slowRecv.SlowRecvClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.gemfire.slowRecv.SlowRecvClient taskMethod = reportTrimIntervalsTask
          ;

hydra.Prms-maxResultWaitSec = 600; // 10 minutes
hydra.Prms-totalTaskTimeSec = 999999; // see terminators

hydra.GemFirePrms-conserveSockets = true;

// Async Messaging Properties
hydra.GemFirePrms-asyncDistributionTimeout = 10;
hydra.GemFirePrms-asyncMaxQueueSize = 500;
cacheperf.gemfire.slowRecv.SlowRecvPrms-expectQueuing = true;

hydra.VmPrms-extraVMArgs += "-Xms600m -Xmx600m";
hydra.VmPrms-extraVMArgs += "-XX:MaxDirectMemorySize=256m";

cacheperf.CachePerfPrms-batchTerminatorMethod = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds   = 30;

cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 30 seconds;
cacheperf.CachePerfPrms-trimSeconds    = 180;

cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency = 30 seconds;
cacheperf.CachePerfPrms-workSeconds    = 420;

cacheperf.CachePerfPrms-syncSleepMs    = 4000;
cacheperf.CachePerfPrms-maxKeys        = 20000;
cacheperf.CachePerfPrms-objectType = objects.Message;
objects.MessagePrms-size = ${messageSize};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/specs/putupdateEvents.spec;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names                 = pub     sub        slowReceiver;
hydra.RegionPrms-dataPolicy            = default replicated replicated;
hydra.RegionPrms-cacheListeners        = none,
                                         cacheperf.gemfire.LatencyListener,
                                         cacheperf.gemfire.SleepListener;
hydra.RegionPrms-scope                 = ${scope};
hydra.RegionPrms-enableAsyncConflation = true;

cacheperf.gemfire.SleepListenerPrms-sleepMs = ${listenerSleepTimeMs};
