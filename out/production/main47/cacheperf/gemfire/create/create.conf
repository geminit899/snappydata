include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-testDescription = "Create performance for gemfire with dataPolicy cached and scope ${scope}, for objects of type objects.ArrayOfByte and size ranging from 10 to 1024 bytes, using ${hydra.numHosts} hosts, 1 VM per host, and 1 thread per VM.  First, each thread in each VM on all but one host creates the same N keys, then the thread on the remaining host creates N total entries using the same keys.";

hydra.Prms-testRequirement = "Unspecified, but need \"reasonable\" performance and scalability.";

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createKeysTask
          threadGroups = keycreator
	  batch
	  cacheperf.CachePerfPrms-keyAllocation = sameKeys
	  cacheperf.CachePerfPrms-warmupTerminatorMethod = none
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          threadGroups = datacreator
	  cacheperf.CachePerfPrms-keyAllocation = sameKeys
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
          threadGroups = keycreator
	  cacheperf.CachePerfPrms-keyAllocation = sameKeys
	  cacheperf.CachePerfPrms-warmupTerminatorMethod = none
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
	  cacheperf.CachePerfPrms-validateObjects = ${validateObjects}
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP keycreator  totalThreads = fcn ( ${hydra.numHosts} - 1 ) ncf;
THREADGROUP datacreator totalThreads = 1 totalVMs = 1 clientNames = client1;

hydra.Prms-maxResultWaitSec = 300;    // 5 minutes
hydra.Prms-totalTaskTimeSec = 360000; // 100 hours

hydra.ClientPrms-vmThreads    = 1;
hydra.ClientPrms-vmQuantities = 1;

hydra.GemFirePrms-conserveSockets = false;

cacheperf.CachePerfPrms-trimIterations = ${trimIterations};
cacheperf.CachePerfPrms-workIterations = ${workIterations};
cacheperf.CachePerfPrms-batchSize      = ${batchSize};
cacheperf.CachePerfPrms-maxKeys        = fcn ${trimIterations} + ${workIterations} ncf;

cacheperf.CachePerfPrms-objectType = ${objectType};
objects.ArrayOfBytePrms-size = range 10 1024 egnar;
objects.NestedOrderVectorPrms-width = 2;
objects.NestedOrderVectorPrms-depth = 3;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;
hydra.ConfigPrms-regionConfig = region;
hydra.RegionPrms-names = region;
hydra.RegionPrms-scope = ${scope};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/create/create.spec;
