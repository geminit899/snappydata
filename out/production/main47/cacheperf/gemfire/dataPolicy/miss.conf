include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-testDescription = "Cache miss performance for gemfire with dataPolicy ${dataPolicy} and scope ${scope}, for objects of type objects.ArrayOfByte and size ranging from 10 to 1024 bytes, using ${hydra.numHosts} hosts, 1 VM per host, and 1 thread per VM.  First, the thread on one host creates N total entries, then each remaining thread does gets using its own subset of the N keys.";

hydra.Prms-testRequirement = "Unspecified, but need \"reasonable\" performance and scalability.";

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = creator
          hydra.ConfigPrms-regionConfig = creator
          threadGroups = creator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = getter
          hydra.ConfigPrms-regionConfig = getter
          threadGroups = getter
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          threadGroups = creator
	  batch
	  cacheperf.CachePerfPrms-keyAllocation = ownKeys
	  cacheperf.CachePerfPrms-warmupTerminatorMethod = none
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;

TASK      taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
          threadGroups = getter
	  cacheperf.CachePerfPrms-keyAllocation = ownKeys
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;

	  // NOTE: There will be fewer gets than keys if the number of creators
	  //       does not evenly divide the number of keys.

CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP creator totalThreads = 1 totalVMs = 1 clientNames = client1;
THREADGROUP getter  totalThreads = fcn ( ${hydra.numHosts} - 1 ) ncf;

hydra.CachePrms-names       = creator   getter;
hydra.RegionPrms-names      = creator   getter;
hydra.RegionPrms-dataPolicy = normal    ${dataPolicy};
hydra.RegionPrms-scope      = ${scope};

hydra.Prms-maxResultWaitSec = 300;    // 5 minutes
hydra.Prms-totalTaskTimeSec = 360000; // 100 hours

hydra.ClientPrms-vmThreads    = 1;
hydra.ClientPrms-vmQuantities = 1;

hydra.GemFirePrms-conserveSockets = true;

cacheperf.CachePerfPrms-trimIterations = ${trimIterations};
cacheperf.CachePerfPrms-workIterations = ${workIterations};
cacheperf.CachePerfPrms-batchSize      = ${batchSize};
cacheperf.CachePerfPrms-maxKeys        = fcn ${trimIterations} + ${workIterations} ncf;

cacheperf.CachePerfPrms-objectType = ${objectType};
objects.ArrayOfBytePrms-size = range 10 1024 egnar;
objects.NestedOrderVectorPrms-width = 2;
objects.NestedOrderVectorPrms-depth = 3;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/dataPolicy/miss.spec;
