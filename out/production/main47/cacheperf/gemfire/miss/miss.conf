include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_p2p_2.inc;

hydra.Prms-testDescription = "One peer subgroup does gets that are cache misses causing netsearches to another peer subgroup that hosts the data.";

THREADGROUP data
    totalThreads = fcn
                   ${dataHosts} * ${dataVMsPerHost} * ${dataThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"data\", ${dataHosts}, true)"
                   ncf;
THREADGROUP miss
    totalThreads = fcn
                   ${missHosts} * ${missVMsPerHost} * ${missThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"miss\", ${missHosts}, true)"
                   ncf;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names      = data          miss;
hydra.RegionPrms-dataPolicy = ${dataPolicy} empty;
hydra.RegionPrms-scope      = ${scope};

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = data
          threadGroups = data
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = miss
          threadGroups = miss
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = data
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
          cacheperf.CachePerfPrms-keyAllocation = sameKeysRandomWrap
          threadGroups = miss
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

cacheperf.CachePerfPrms-batchSeconds =  60;
cacheperf.CachePerfPrms-trimSeconds  =  60;
cacheperf.CachePerfPrms-workSeconds  = 120;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;
hydra.Prms-totalTaskTimeSec = 9999999;

cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size = ${dataSize};
cacheperf.CachePerfPrms-maxKeys = fcn (int)Math.ceil(${totalBytes}.0/${dataSize}) ncf;

hydra.GemFirePrms-conserveSockets = false;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/miss/miss.spec;

// large max heap for data VMs, small for miss VMs
hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx1500m\", ${dataHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx128m\", ${missHosts}, true)"
                             ncf
                             ;
