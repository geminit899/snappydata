include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_hct.inc;
include $JTESTS/smoketest/perf/statmon.inc;

hydra.Prms-testDescription = "Empty edges query indexed entries in partitioned datastore.  Runs on two hosts.  Entries are Serializable objects.";

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 600;

hydra.CachePrms-names = datastore query;

hydra.RegionPrms-names         = datastore   query;
hydra.RegionPrms-dataPolicy    = replicated  empty;
hydra.RegionPrms-poolName      = none        pool;
hydra.RegionPrms-scope         = ack        local;
hydra.RegionPrms-valueConstraint = objects.AssetAccount;

hydra.BridgePrms-names = datastore;

hydra.PoolPrms-names = pool;
hydra.PoolPrms-readTimeout = 600000;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicateString
    (\"-Xms30g -Xmx30g -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:CMSInitiatingOccupancyFraction=20\", ${bridgeHosts}, true)"
  ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
    (\"-Xms256m -Xmx256m\", ${edgeHosts}, true)"
  ncf;

hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar;

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = datastore
          hydra.ConfigPrms-regionConfig = datastore
          hydra.ConfigPrms-bridgeConfig = datastore
          threadgroups = datastore
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = query
          hydra.ConfigPrms-regionConfig = query
          threadgroups = query
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = indexDataTask
          threadgroups = datastore, query
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadgroups = datastore
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = queryRegionDataTask
          cacheperf.CachePerfPrms-isMainWorkload = true
          threadGroups = query
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP datastore
    totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost}
                                      * ${bridgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP query
    totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost}
                                    * ${edgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edge\", ${edgeHosts}, true)" ncf;

distcache.gemfire.GemFireCachePrms-regionName = ${regionName};

cacheperf.CachePerfPrms-maxKeys = ${maxKeys};
cacheperf.CachePerfPrms-objectType = objects.AssetAccount;
cacheperf.CachePerfPrms-query =
        "
        SELECT DISTINCT acct.acctId, asset.assetId
        FROM /${regionName} acct, acct.assets.values asset
        WHERE asset.value < 1000.0
        ";

objects.AssetAccountPrms-encodeTimestamp = false;
objects.AssetAccountPrms-size = ${numAssets};
objects.AssetPrms-maxValue = ${maxValue};

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 360;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 60;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/poc/oocl/queries.spec;
include $JTESTS/cacheperf/specs/histogram.inc;
perffmwk.HistogramStatsPrms-statisticsSpecification = $JTESTS/cacheperf/poc/oocl/queryHistogram.spec;

cacheperf.CachePerfPrms-queryIndex =
        "
        acct.acctId
        ";
cacheperf.CachePerfPrms-queryFromClause =
        "
        /${regionName} acct
        ";
/*
cacheperf.CachePerfPrms-queryIndex =
        "
        asset.value
        ";
cacheperf.CachePerfPrms-queryFromClause =
        "
        /${regionName} acct, acct.assets.values asset
        ";
*/
