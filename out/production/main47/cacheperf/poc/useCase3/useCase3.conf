include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

hydra.Prms-testDescription = "Clients query data on servers.";
hydra.Prms-testRequirement = "Meets UseCase3 requirements for number of concurrent queries.";

hydra.Prms-totalTaskTimeSec = 259200;  // workload-based
hydra.Prms-maxResultWaitSec = 600;

//------------------------------------------------------------------------------
// Tasks
//------------------------------------------------------------------------------

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask;
INITTASK  taskClass = cacheperf.poc.useCase3.UseCase3Client taskMethod = openUseCase3CacheTask
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.poc.useCase3.UseCase3Client taskMethod = startBridgeServerTask
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.poc.useCase3.UseCase3Client taskMethod = createUseCase3RegionsTask
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.poc.useCase3.UseCase3Client taskMethod = createUseCase3IndexesTask
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.poc.useCase3.UseCase3Client taskMethod = createUseCase3DataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.poc.useCase3.UseCase3Client taskMethod = openUseCase3CacheTask
          threadGroups = edge
          ;
INITTASK  taskClass = cacheperf.poc.useCase3.UseCase3Client taskMethod = createUseCase3RegionsTask
          threadGroups = edge
          ;
TASK      taskClass = cacheperf.poc.useCase3.UseCase3Client taskMethod = queryUseCase3DataTask
          cacheperf.CachePerfPrms-keyAllocation = sameKeysRandomWrap
          cacheperf.poc.useCase3.UseCase3Prms-numPutsBetweenQueries = ${numPutsBetweenQueries}
          cacheperf.CachePerfPrms-sleepMs = ${sleepMs}
          threadGroups = edge
          ;
CLOSETASK taskClass = cacheperf.poc.useCase3.UseCase3Client taskMethod = closeUseCase3CacheTask
          threadGroups = edge;
CLOSETASK taskClass = cacheperf.poc.useCase3.UseCase3Client taskMethod = closeUseCase3CacheTask
          threadGroups = bridge;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask;

//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 300;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = none;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 60;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

hydra.CachePrms-names  = bridge edge;

hydra.RegionPrms-names =
      bridgeTRADE bridgeCDS bridgeALL bridgeCALYPSO bridgeGLOBAL
      edgeTRADE   edgeCDS   edgeALL   edgeCALYPSO   edgeGLOBAL
      ;
hydra.RegionPrms-dataPolicy =
      default     default   default   default       persistentReplicate
      empty       empty     empty     empty         empty
      ;
hydra.RegionPrms-diskStoreName =
      none        none      none      none          diskGLOBAL
      none        none      none      none          none
      ;
hydra.RegionPrms-poolName =
      none        none      none      none          none
      none        none      none      none          poolGLOBAL
      ;
hydra.RegionPrms-scope =
      noack       noack     noack     noack         noack
      noack       noack     noack     noack         local
      ;

hydra.DiskStorePrms-names = diskGLOBAL;
hydra.DiskStorePrms-diskDirNum = 1;
hydra.DiskStorePrms-maxOplogSize = 100;
hydra.DiskStorePrms-queueSize = 10;
hydra.DiskStorePrms-timeInterval = 30;
hydra.RegionPrms-diskSynchronous = false;

hydra.BridgePrms-names          = bridge;
hydra.BridgePrms-maxConnections = 2500;
hydra.BridgePrms-maxThreads     = 32;

hydra.PoolPrms-names                  = poolGLOBAL;
hydra.PoolPrms-readTimeout            = 1200000;
hydra.PoolPrms-subscriptionEnabled    = true;
//hydra.PoolPrms-threadLocalConnections = true;

//------------------------------------------------------------------------------
// Data
//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-maxKeys = ${maxKeys};
cacheperf.poc.useCase3.UseCase3Prms-logQueryResults = false;

//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------

//hydra.GemFirePrms-conserveSockets = false;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicateString
                                  (\"-Xmx16g -Dgemfire.disk.recoverValues=true\", ${bridgeHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"-Xms256m -Xmx256m\", ${edgeHosts}, true)"
                             ncf
                             ;
hydra.VmPrms-extraVMArgs  += -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
                             -XX:+DisableExplicitGC
                             ;
hydra.VmPrms-extraClassPaths = $JTESTS/rdsmodel.jar $GEMFIRE/lib/antlr.jar;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/poc/useCase3/query.spec;
