include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_hct_locator.inc;

hydra.Prms-testDescription = "Southwest Airlines";

hydra.Prms-totalTaskTimeSec = 259200;  // workload-based
hydra.Prms-maxResultWaitSec = 600000;

THREADGROUP locator
  totalThreads = fcn
                 ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)"
                 ncf;
THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

//------------------------------------------------------------------------------
// Tasks
//------------------------------------------------------------------------------

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask    
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadGroups = bridge, edge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge
          ;
//INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = assignBucketsTask
//          threadGroups = bridge
//          ;
INITTASK  taskClass = cacheperf.comparisons.replicated.execute.ExecuteClient
          taskMethod = registerFunctionTask
          ;

// this task expects operations to be throttled, heap sized, and max keys set
// such that expiration keeps heap under control without resorting to eviction
TASK      taskClass = cacheperf.comparisons.replicated.execute.ExecuteClient
          taskMethod = putAndGetFunctionExecutionDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          threadGroups = edge
          ;

CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          threadGroups = bridge, edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          threadGroups = bridge, edge
          ;

//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 3600; // one hour
cacheperf.CachePerfPrms-warmupTerminatorMethod    = none;
//cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 0;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 60;

//------------------------------------------------------------------------------
// JVM
//------------------------------------------------------------------------------

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicateString(\"-Dnone\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Xms${heapMB}m -Xmx${heapMB}m -XX:-ReduceInitialCardMarks -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:CMSInitiatingOccupancyFraction=50\", ${bridgeHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Xms1024m -Xmx1024m -XX:MaxPermSize=128m\", ${edgeHosts}, true)" ncf
  ;

//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

hydra.GemFirePrms-conserveSockets = false;
hydra.GemFirePrms-enableTimeStatistics = false;

hydra.CachePrms-names = bridge edge;
hydra.CachePrms-resourceManagerName = resmgr default;

hydra.RegionPrms-names         = bridge    edge;
hydra.RegionPrms-dataPolicy    = partition empty;
hydra.RegionPrms-diskStoreName = disk    none;
hydra.RegionPrms-entryIdleTimeout = 1800 destroy, default;
hydra.RegionPrms-evictionAttributes = lruHeapPercentage default overflowToDisk, default;
hydra.RegionPrms-partitionName = bridge    none;
hydra.RegionPrms-poolName      = none      pool;
hydra.RegionPrms-scope         = default   local;
hydra.RegionPrms-statisticsEnabled = true   default;

hydra.BridgePrms-names = bridge;
hydra.BridgePrms-maxConnections = 1200;
hydra.BridgePrms-maxThreads = 64;

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-maxOplogSize = 1024;
hydra.DiskStorePrms-autoCompact = true;
hydra.DiskStorePrms-compactionThreshold = 30;
//hydra.DiskStorePrms-diskDirSizes = 19456;

hydra.PoolPrms-names = pool;
hydra.PoolPrms-contactAlgorithm = hydra.PoolHelper getSameContacts;
hydra.PoolPrms-idleTimeout  = 60000;
//hydra.PoolPrms-maxConnections  = 800;
hydra.PoolPrms-prSingleHopEnabled = true;
hydra.PoolPrms-subscriptionEnabled = false;

hydra.PartitionPrms-names = bridge;
//hydra.PartitionPrms-localMaxMemory = 22528;
hydra.PartitionPrms-redundantCopies = 1;

hydra.ResourceManagerPrms-names = resmgr;
hydra.ResourceManagerPrms-criticalHeapPercentage = 95;
hydra.ResourceManagerPrms-evictionHeapPercentage = 68;

cacheperf.comparisons.replicated.execute.ExecutePrms-function =
          cacheperf.comparisons.replicated.execute.GetEntryFunction;

//------------------------------------------------------------------------------
// Data
//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-maxKeys    = fcn ${maxKeys} * ${bridgeHosts} * ${bridgeVMsPerHost} ncf;
cacheperf.CachePerfPrms-keyType    = objects.PosNegInteger;
cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size       = ${objectSize};

cacheperf.CachePerfPrms-sleepBeforeOp = true;
cacheperf.CachePerfPrms-sleepMs = 250;

//------------------------------------------------------------------------------
// Versioning (allows running current tests against old builds)
//------------------------------------------------------------------------------

hydra.ClientPrms-versionNames = version;

hydra.VersionPrms-names   = version;
hydra.VersionPrms-version = ${version};

//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/specs/gets.spec;
