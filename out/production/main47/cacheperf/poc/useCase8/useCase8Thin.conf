include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_hct_2_locator.inc;

hydra.Prms-testDescription = "Test case with thin clients connecting to subset of data stores.";

hydra.Prms-totalTaskTimeSec = 3600000; // time-based workload
hydra.Prms-maxResultWaitSec = 1800;

hydra.GemFirePrms-conserveSockets = false;
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\", ${locatorHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\", ${connstorebridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\", ${storebridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf
  ;

hydra.VmPrms-extraClassPaths =
  fcn "hydra.TestConfigFcns.duplicate
       (\"none\", ${locatorHosts})"
  ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
       (\"$GEMFIRE/../product-gfxd/lib/gemfirexd.jar\", ${connstorebridgeHosts}, true)"
  ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
       (\"$GEMFIRE/../product-gfxd/lib/gemfirexd.jar\", ${storebridgeHosts}, true)"
  ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
       (\"$GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar\", ${edgeHosts}, true)"
  ncf;

//hydra.VmPrms-extraClassPaths +=
//      /export/gcm/where/java/mysql/mysql-connector-java-5.1.8-bin.jar;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
       (\"-Dnone\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
       (\"-Xms${serverHeapMB}m -Xmx${serverHeapMB}m\",
                                   ${connstorebridgeHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
       (\"-Xms${serverHeapMB}m -Xmx${serverHeapMB}m\",
                                   ${storebridgeHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
       (\"-Xms${clientHeapMB}m -Xmx${clientHeapMB}m\",
                                    ${edgeHosts}, true)" ncf
  ;
//hydra.VmPrms-extraVMArgs += -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
//                            -XX:+DisableExplicitGC
//      ;

THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;

THREADGROUP conn_store
            totalThreads = fcn "(${connstorebridgeHosts} * ${connstorebridgeVMsPerHost} *  ${connstorebridgeThreadsPerVM}) " ncf
            totalVMs     = fcn "(${connstorebridgeHosts} * ${connstorebridgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"connstorebridge\",
                                ${connstorebridgeHosts}, true)" ncf;

THREADGROUP store
            totalThreads = fcn "(${storebridgeHosts} * ${storebridgeVMsPerHost} *  ${storebridgeThreadsPerVM}) " ncf
            totalVMs     = fcn "(${storebridgeHosts} * ${storebridgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"storebridge\",
                                ${storebridgeHosts}, true)" ncf;

THREADGROUP client
            totalThreads = fcn "(${edgeHosts} * ${edgeVMsPerHost} *  ${edgeThreadsPerVM})" ncf
            totalVMs     = fcn "(${edgeHosts} * ${edgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"edge\",
                                ${edgeHosts}, true)" ncf;

INITTASK  taskClass = cacheperf.CachePerfClient
          taskMethod = createAndStartLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = startServerTask
          threadGroups = conn_store, store
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = startNetworkServerTask
          threadGroups = conn_store
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = connectThinClientTask
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = openStatisticsTask
          threadGroups = client, conn_store, store
          ;
INITTASK  taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = cleanupTask
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = createTablesTask
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = createIndexesTask
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = createSqlDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = client
          ;
TASK      taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = querySqlDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysWrap
          threadGroups = client
          ;
CLOSETASK taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = cleanupTask
          threadGroups = client
          ;
CLOSETASK taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = closeStatisticsTask
          threadGroups = client, conn_store, store
          ;
CLOSETASK taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = reportTrimIntervalsTask
          threadGroups = client, conn_store, store
          ;

cacheperf.CachePerfPrms-batchSeconds              = 180;
cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 30 seconds;
cacheperf.CachePerfPrms-workSeconds               = ${workSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 30 seconds;

cacheperf.CachePerfPrms-maxKeys = ${maxKeys};
objects.query.QueryPrms-objectType = objects.query.sector.Sector; // not used

cacheperf.comparisons.gemfirexd.QueryPerfPrms-commitBatchSize = ${commitBatchSize};

objects.query.QueryPrms-api = ${api};
objects.query.QueryPrms-logQueries = ${logQueries};
objects.query.QueryPrms-logUpdates = ${logQueries};
objects.query.QueryPrms-logQueryResultSize = ${logResultSetSize};
objects.query.QueryPrms-validateResults = ${validateResults};

cacheperf.poc.useCase6.UseCase6Prms-tableType = ${tableType};
cacheperf.poc.useCase6.UseCase6Prms-redundantCopies = ${redundantCopies};
cacheperf.poc.useCase6.UseCase6Prms-createIndexes = ${createIndexes};
cacheperf.poc.useCase6.UseCase6Prms-isValue = ${isValue};
cacheperf.poc.useCase6.UseCase6Prms-resultSetSize = ${resultSetSize};
cacheperf.poc.useCase6.UseCase6Prms-usePreparedStatements = ${usePreparedStatements};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/gemfirexd/query.spec;
