include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_3_locator.inc;

hydra.Prms-testDescription = "Bring up a client, two servers, and a locator.  Kill the client and restart.  Verify that it joins the system and is able to fetch data that was put into the system before the client went down.";

hydra.Prms-totalTaskTimeSec = 259200;  // workload-based
hydra.Prms-maxResultWaitSec = 600;

THREADGROUP locator
  totalThreads = fcn
                 ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)"
                 ncf;
THREADGROUP bouncer
  totalThreads = fcn
                 ${bouncerHosts} * ${bouncerVMsPerHost} * ${bouncerThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bouncer\", ${bouncerHosts}, true)"
                 ncf;
THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

//------------------------------------------------------------------------------
// Tasks
//------------------------------------------------------------------------------

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask    
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadGroups = bridge, edge
          runMode = always
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          runMode = always
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge
          runMode = always
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = assignBucketsTask
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeysChunked
          cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimIterations
          cacheperf.CachePerfPrms-warmupTerminatorFrequency = 1 iterations
          cacheperf.CachePerfPrms-trimIterations = 0
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = edge
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          threadGroups = edge
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = bounceTask
          cacheperf.CachePerfPrms-sleepMs = 10000
          cacheperf.CachePerfPrms-waitForRecovery = false
          threadGroups = bouncer
          maxTimesToRun = 1
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge
          runMode = always
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = edge
          runMode = always
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          threadGroups = bridge, edge
          runMode = always
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          threadGroups = bridge, edge
          runMode = once
          ;

cacheperf.CachePerfPrms-clientNameToBounce = edge1;
cacheperf.CachePerfPrms-restartWaitSec = ${restartWaitSec};
cacheperf.CachePerfPrms-useMeanKill = ${useMeanKill};

//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 30;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 10;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 180;

//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

hydra.CachePrms-names = bridge edge;

hydra.RegionPrms-names         = bridge    edge;
hydra.RegionPrms-dataPolicy    = partition empty;
hydra.RegionPrms-partitionName = bridge    none;
hydra.RegionPrms-poolName      = none      pool;
hydra.RegionPrms-scope         = default   local;

hydra.PartitionPrms-names = bridge;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-totalNumBuckets = fcn ${bucketsPerDatahost} * ${bridgeHosts} * ${bridgeVMsPerHost} ncf;

hydra.PoolPrms-names                  = pool;
hydra.PoolPrms-freeConnectionTimeout  = 10000000;
hydra.PoolPrms-maxConnections         = 15;
hydra.PoolPrms-readTimeout            = 10000000;
hydra.PoolPrms-subscriptionEnabled    = false;

hydra.BridgePrms-names                = bridge;

//------------------------------------------------------------------------------
// Data
//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-maxKeys    = fcn ${maxKeys} * ${bridgeHosts} * ${bridgeVMsPerHost} ncf;
cacheperf.CachePerfPrms-keyType    = java.lang.Long;
cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size       = ${objectSize};

cacheperf.CachePerfPrms-keyAllocationChunkSize = fcn ${bucketsPerDatahost} * ${bridgeHosts} * ${bridgeVMsPerHost} ncf;

//------------------------------------------------------------------------------
// Versioning (allows running current tests against old builds)
//------------------------------------------------------------------------------

hydra.ClientPrms-versionNames = version;

hydra.VersionPrms-names   = version;
hydra.VersionPrms-version = ${version};

//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicateString(\"-Dnone\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Dnone\", ${bouncerHosts}, true)" ncf
  fcn "hydra.TestConfigFcns.duplicateString(\"-Xms${heapMB}m -Xmx${heapMB}m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:CMSInitiatingOccupancyFraction=33\", ${bridgeHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Xms250m -Xmx250m\", ${edgeHosts}, true)" ncf
  ;

hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"bridgeds\", ${locatorHosts})" ncf    
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${bouncerHosts})" ncf    
  fcn "hydra.TestConfigFcns.duplicate(\"bridgeds\", ${bridgeHosts})" ncf    
  fcn "hydra.TestConfigFcns.duplicate (\"loner\", ${edgeHosts})" ncf;   
hydra.GemFirePrms-conserveSockets = ${conserveSockets};

// issues with trim still need to be worked out
// trim intervals don't always overlap
perffmwk.PerfReportPrms-generatePerformanceReport = false;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/specs/createputs.spec;
