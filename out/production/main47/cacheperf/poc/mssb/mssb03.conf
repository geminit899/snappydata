include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_3_locator.inc;

hydra.Prms-testDescription = "Shut down one of the servers and wait for redundancy recovery.  Do the same with a second server.  Restart the servers and rebalance.";

hydra.Prms-totalTaskTimeSec = 259200;  // workload-based
hydra.Prms-maxResultWaitSec = 600;

THREADGROUP locator
  totalThreads = fcn
                 ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"locator\", ${locatorHosts}, true)"
                 ncf;
THREADGROUP bouncer
  totalThreads = fcn
                 ${bouncerHosts} * ${bouncerVMsPerHost} * ${bouncerThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bouncer\", ${bouncerHosts}, true)"
                 ncf;
THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} - 1
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP bridgeobserver
  totalThreads = 1
  clientNames  = bridge3
  ;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

//------------------------------------------------------------------------------
// Tasks
//------------------------------------------------------------------------------

// run this task first
INITTASK  taskClass = cacheperf.comparisons.parReg.recovery.PRObserver
          taskMethod = installObserverHook
          threadGroups = bridgeobserver
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createAndStartLocatorTask    
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          threadGroups = bridge, bridgeobserver, edge, bouncer
          runMode = always
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge, bridgeobserver
          runMode = always
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bouncer
          hydra.ConfigPrms-regionConfig = bouncer
          threadGroups = bouncer
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge
          runMode = always
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = assignBucketsTask
          threadGroups = bridge, bridgeobserver
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeysChunked
          cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimIterations
          cacheperf.CachePerfPrms-warmupTerminatorFrequency = 1 iterations
          cacheperf.CachePerfPrms-trimIterations = 0
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = edge
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = putDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysRandomWrap
          threadGroups = edge
          weight = 1
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = bounceTask
          cacheperf.CachePerfPrms-sleepMs = 15000
          cacheperf.CachePerfPrms-useMeanKill = false
          cacheperf.CachePerfPrms-restartWaitSec = -1 // do not restart
          cacheperf.CachePerfPrms-waitForRecovery = true
          cacheperf.CachePerfPrms-clientNameToBounce = bridge1
          threadGroups = bouncer
          maxTimesToRun = 1
          weight = 5
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = bounceTask
          cacheperf.CachePerfPrms-sleepMs = 15000
          cacheperf.CachePerfPrms-useMeanKill = false
          cacheperf.CachePerfPrms-restartWaitSec = -1 // do not restart
          cacheperf.CachePerfPrms-waitForRecovery = true
          cacheperf.CachePerfPrms-clientNameToBounce = bridge2
          threadGroups = bouncer
          maxTimesToRun = 1
          weight = 4
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = restartTask
          cacheperf.CachePerfPrms-sleepMs = 15000
          cacheperf.CachePerfPrms-useMeanKill = false
          cacheperf.CachePerfPrms-restartWaitSec = 15
          cacheperf.CachePerfPrms-waitForRecovery = false
          cacheperf.CachePerfPrms-clientNameToBounce = bridge1
          threadGroups = bouncer
          maxTimesToRun = 1
          weight = 3
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = restartTask
          cacheperf.CachePerfPrms-sleepMs = 15000
          cacheperf.CachePerfPrms-useMeanKill = false
          cacheperf.CachePerfPrms-restartWaitSec = 15
          cacheperf.CachePerfPrms-waitForRecovery = false
          cacheperf.CachePerfPrms-clientNameToBounce = bridge2
          threadGroups = bouncer
          maxTimesToRun = 1
          weight = 2
          ;
TASK      taskClass = cacheperf.CachePerfClient taskMethod = rebalanceTask
          threadGroups = bouncer
          maxTimesToRun = 1
          weight = 1
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge, bridgeobserver
          runMode = always
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge, bouncer
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = edge
          runMode = always
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          threadGroups = bridge, bridgeobserver, edge, bouncer
          runMode = always
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask
          threadGroups = bridge, bridgeobserver, edge, bouncer
          runMode = once
          ;

//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 300;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 60;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = 900;

//------------------------------------------------------------------------------
// Cache and region
//------------------------------------------------------------------------------

hydra.CachePrms-names = bridge edge bouncer;

hydra.RegionPrms-names         = bridge    edge   bouncer;
hydra.RegionPrms-dataPolicy    = partition empty  partition;
hydra.RegionPrms-partitionName = bridge    none   accessor;
hydra.RegionPrms-poolName      = none      pool   none;
hydra.RegionPrms-scope         = default   local  default;

hydra.PartitionPrms-names = bridge accessor;
hydra.PartitionPrms-localMaxMemory  = default 0;
hydra.PartitionPrms-recoveryDelay = 0;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-totalNumBuckets = fcn ${bucketsPerDatahost} * ${bridgeHosts} * ${bridgeVMsPerHost} ncf;

hydra.PoolPrms-names                  = pool;
hydra.PoolPrms-freeConnectionTimeout  = 10000000;
hydra.PoolPrms-maxConnections         = 15;
hydra.PoolPrms-readTimeout            = 10000000;
hydra.PoolPrms-subscriptionEnabled    = false;

hydra.BridgePrms-names                = bridge;

//------------------------------------------------------------------------------
// Data
//------------------------------------------------------------------------------

cacheperf.CachePerfPrms-maxKeys    = fcn ${maxKeys} * ${bridgeHosts} * ${bridgeVMsPerHost} ncf;
cacheperf.CachePerfPrms-keyType    = java.lang.Long;
cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size       = ${objectSize};

cacheperf.CachePerfPrms-keyAllocationChunkSize = fcn ${bucketsPerDatahost} * ${bridgeHosts} * ${bridgeVMsPerHost} ncf;

//------------------------------------------------------------------------------
// Versioning (allows running current tests against old builds)
//------------------------------------------------------------------------------

hydra.ClientPrms-versionNames = version;

hydra.VersionPrms-names   = version;
hydra.VersionPrms-version = ${version};

//------------------------------------------------------------------------------
// Performance
//------------------------------------------------------------------------------

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicateString(\"-Dnone\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Dnone\", ${bouncerHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Xms${heapMB}m -Xmx${heapMB}m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:CMSInitiatingOccupancyFraction=33\", ${bridgeHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString(\"-Xms250m -Xmx250m\", ${edgeHosts}, true)" ncf
  ;

hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"bridgeds\", ${locatorHosts})" ncf    
  fcn "hydra.TestConfigFcns.duplicate(\"bridgeds\", ${bouncerHosts})" ncf    
  fcn "hydra.TestConfigFcns.duplicate(\"bridgeds\", ${bridgeHosts})" ncf    
  fcn "hydra.TestConfigFcns.duplicate (\"loner\", ${edgeHosts})" ncf;   
hydra.GemFirePrms-conserveSockets = ${conserveSockets};

// issues with trim still need to be worked out
// looks like some archives don't have all values due to bouncing
perffmwk.PerfReportPrms-generatePerformanceReport = false;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/specs/puts.spec;
