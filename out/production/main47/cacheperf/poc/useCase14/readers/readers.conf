include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/performance.inc;
include $JTESTS/hydraconfig/topology_3.inc;

hydra.Prms-testDescription = "TBD";

hydra.GemFirePrms-conserveSockets = true;
hydra.GemFirePrms-distributedSystem =
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"ds\",    ${feedHosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"ds\",    ${bridgeHosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"loner\", ${edgeHosts})"
                              ncf;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate(\"-Xms512m -Xmx512m\", ${feedHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate(\"-Xms1500m -Xmx1500m\", ${bridgeHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate(\"-Xms512m -Xmx512m\", ${edgeHosts}, true)" ncf
  ;
hydra.VmPrms-extraVMArgs +=
  -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:-UseGCTimeLimit
  ;

THREADGROUP feed
    totalThreads = fcn
                   ${feedHosts} * ${feedVMsPerHost} * ${feedThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feed\", ${feedHosts}, true)"
                   ncf;
THREADGROUP bridge
    totalThreads = fcn
                   ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)"
                   ncf;
THREADGROUP edge
    totalThreads = fcn
                   ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edge\", ${edgeHosts}, true)"
                   ncf;

hydra.Prms-totalTaskTimeSec = 259200;  // this test is workload based
hydra.Prms-maxResultWaitSec = 300;

cacheperf.CachePerfPrms-keyType            = java.lang.Integer;
cacheperf.CachePerfPrms-maxKeys            = 1;
cacheperf.CachePerfPrms-objectType         = objects.PSTObject;
objects.PSTObjectPrms-size                 = ${dataSize};

cacheperf.CachePerfPrms-batchTerminatorMethod  = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds           = 120;
cacheperf.CachePerfPrms-warmupTerminatorMethod = none;
cacheperf.CachePerfPrms-trimSeconds            = 0;
cacheperf.CachePerfPrms-taskTerminatorMethod   = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-workSeconds            = 120;

hydra.BridgePrms-names                = bridge;

hydra.PoolPrms-names                  = pool;
hydra.PoolPrms-readTimeout            = 10000000;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = true;

hydra.CachePrms-names  = feed bridge edge;

hydra.RegionPrms-names                  = feed      bridge    edge;
hydra.RegionPrms-dataPolicy             = empty     replicate normal;
hydra.RegionPrms-poolName               = none      none      pool;
hydra.RegionPrms-scope                  = ${scope};

INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = feed
          hydra.ConfigPrms-regionConfig = feed
          threadGroups = feed
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = edge
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = createDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = feed
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = sameKeysWrap
          cacheperf.CachePerfPrms-invalidateAfterGet = true
          cacheperf.CachePerfPrms-invalidateLocally = true
          //cacheperf.CachePerfPrms-sleepBeforeOp = true
          //cacheperf.CachePerfPrms-sleepMs = 2
          threadGroups = edge
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = getDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = sameKeysWrap
          cacheperf.CachePerfPrms-invalidateAfterGet = false
          //cacheperf.CachePerfPrms-sleepBeforeOp = true
          //cacheperf.CachePerfPrms-sleepMs = 2
          threadGroups = edge
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = feed, edge;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeCacheTask
          threadGroups = bridge;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = reportTrimIntervalsTask;
ENDTASK   taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          clientNames = feed1;
ENDTASK   taskClass = cacheperf.poc.useCase14.UseCase14Client taskMethod = validateMessagesFailedQueuedTask
          clientNames = feed1;
ENDTASK   taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          clientNames = feed1;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/poc/useCase14/readers/readers.spec;
