hydra.Prms-testRequirement = "Known keys style test that uses resumable transactions and functions using onTransaction() with multiple PRs and replicate regions";
hydra.Prms-testDescription = "Load the regions with data, use functions to execute ops, use CommitFunction to commit, verify";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_initialize
             resumeTx.ResumeTxPrms-regionConfigNames = region1 region2 region3 region4 region5 region6 
             threadGroups = bridge;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_initializeClient
             resumeTx.ResumeTxPrms-regionConfigNames = edgeR1 edgeR2 edgeR3 edgeR4 edgeR5 edgeR6
             threadGroups = edge;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_loadRegions
             batch
             threadGroups = edge;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_waitForSilence
             threadGroups = edge, bridge;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_logRegionSizes
             threadGroups = edge, bridge;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_verifyLoad
             threadGroups = edge, bridge;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_initFunction
             threadGroups = edge;

// task is workload based and will throw StopScheduling... when all ops are completed 
TASK         taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_doOpsWithFunctions
             threadGroups = edge;

CLOSETASK    taskClass   = resumeTx.KnownKeysFcn  taskMethod = HydraTask_writeTxnsToBlackboard
             threadGroups = bridge;

CLOSETASK    taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_commitWithFunction
             threadGroups = edge;

CLOSETASK    taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_waitForSilence
             threadGroups = edge, bridge;

CLOSETASK    taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_verifyRegions
             threadGroups = edge, bridge;

hydra.Prms-totalTaskTimeSec = 7200; // this is a workload based test
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.ValueHolderPrms-useExtraObject = false;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names              = region1   region2   region3   region4   region5   region6 edgeR1 edgeR2 edgeR3 edgeR4 edgeR5 edgeR6;
hydra.RegionPrms-regionName         = region1   region2   region3   region4   region5   region6
                                      region1   region2   region3   region4   region5   region6;
hydra.RegionPrms-dataPolicy         = partition partition partition replicate replicate replicate
                                      default   default   default   default   default   default;
hydra.RegionPrms-scope              = default   default   default   ack       ack       ack
                                      default   default   default   default   default   default;
hydra.RegionPrms-partitionName      = prCentral pr        pr        none      none      none
                                      none      none      none      none      none      none;
hydra.RegionPrms-poolName           = none      none      none      none      none      none
                                      edgePool  edgePool  edgePool  edgePool  edgePool  edgePool;
hydra.RegionPrms-cacheListeners     = util.InvisibleSilenceListener;

hydra.PartitionPrms-names             = prCentral          pr;
hydra.PartitionPrms-redundantCopies   = ${redundantCopies} ${redundantCopies};
hydra.PartitionPrms-colocatedWith     = none               region1;
hydra.PartitionPrms-partitionResolver = resumeTx.ModPartitionResolver;

util.TestHelperPrms-minTaskGranularitySec = 60;

// define the edge clients
hydra.PoolPrms-names                    = edgePool;
hydra.PoolPrms-minConnections           = 2;
hydra.PoolPrms-subscriptionEnabled      = true;
hydra.PoolPrms-threadLocalConnections   = false;
hydra.PoolPrms-readTimeout              = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy   = ${redundantCopies};
hydra.PoolPrms-pingInterval             = 400;
hydra.PoolPrms-loadConditioningInterval = 5000;

// define the bridge servers
hydra.BridgePrms-names                  = bridge;

resumeTx.ResumeTxPrms-numIntervalKeys = 5000;
resumeTx.ResumeTxPrms-numNewKeys = 10000;
