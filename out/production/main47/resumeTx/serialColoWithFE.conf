hydra.Prms-testRequirement = "
Verify resumeable transaction behavior with function execution.  PR accessors use functions to execute: begin/suspend, resume/doOps/suspend and resume/commit(or rollback).";

hydra.Prms-testDescription = "
This test runs with peer dataStores and accessors.  DataStores host colocated PartitionedRegions; a PartitionResolver is also configured.  Only the accessor threads execute functions in serial round robin scheduing. The first thread selects a key as a filter key, then executes a transaction (begin/suspend) on a server as determined by the filterSet (key).  All remaining threads then execute a function to resume the transaction and execute operations before suspending and returning the OpList back to the calling gemfire peer.  (Accessors maintain a list of expected values on the BB based on the opList returned by the function for use in validation).  The first thread then executes a function (rollback/commit) and then executes a function to verify the servers cache contents based on the snapshot map maintained on the BB";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;
INCLUDE $JTESTS/util/randomValues.inc;

THREADGROUP dataStore
  totalThreads = fcn
                 ${dataStoreHosts} * ${dataStoreVMsPerHost} * ${dataStoreThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"dataStore\", ${dataStoreHosts}, true)"
                 ncf;
THREADGROUP accessor
  totalThreads = fcn
                 ${accessorHosts} * ${accessorVMsPerHost} * ${accessorThreadsPerVM} 
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"accessor\", ${accessorHosts}, true)"
                 ncf;

STARTTASK taskClass   = resumeTx.ResumeTxTest taskMethod = StartTask_initialize
          hydra.ConfigPrms-regionConfig   = dataStore
          clientNames = dataStore1
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_createColocatedRegions
          hydra.ConfigPrms-cacheConfig    = dataStore
          hydra.ConfigPrms-regionConfig   = dataStore
          runMode = always
          threadGroups = dataStore
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_primeBuckets
          threadGroups = dataStore
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_createColocatedRegions
          hydra.ConfigPrms-cacheConfig    = accessor
          hydra.ConfigPrms-regionConfig   = accessor
          threadGroups = accessor
          ;

INITTASK  taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_initialize
          threadGroups = accessor
          ;

TASK      taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_serialRRTxWithFE
          threadGroups = accessor
          ;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = ${totalTaskTimeSec};
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

util.ValueHolderPrms-useExtraObject = false;

hydra.CachePrms-names           = dataStore accessor;
hydra.RegionPrms-names          = dataStore accessor;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-cacheListeners = util.SummaryLogListener;
hydra.RegionPrms-cacheWriter    = tx.LogWriter;
hydra.RegionPrms-partitionName  = dataStore accessor;

hydra.PartitionPrms-names           = dataStore accessor;
hydra.PartitionPrms-localMaxMemory  = default   0;
hydra.PartitionPrms-totalNumBuckets = 20;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-partitionResolver = resumeTx.ModPartitionResolver;

tx.TxPrms-operations = entry-create entry-update entry-update entry-update entry-update entry-update entry-destroy entry-inval entry-getWithNewKey entry-getWithExistingKey;

tx.TxPrms-commitPercentage=80;
tx.TxPrms-regionOpPercentage = 0;

// targeting 125 ops per transaction (5 accessors, each with 5 threads, each FE Tx with 5 ops)
tx.TxPrms-numOps = 5;

tx.TxPrms-maxKeys = 100;

tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 
tx.TxPrms-txListener = tx.TxLogListener;
tx.TxPrms-txWriter   = tx.TxLogWriter;

resumeTx.ResumeTxPrms-useColocatedEntries = true;
resumeTx.ResumeTxPrms-numColocatedRegions = 5;


