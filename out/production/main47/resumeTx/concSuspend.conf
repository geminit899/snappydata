hydra.Prms-testRequirement = "Test that many threads all trying to resume a tx will eventually get the tx";
hydra.Prms-testDescription = "Start a tx and many threads who want to resume it. As each thread resumes, let it 
then suspend and in turn each thread should be able to resume the tx.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_1.inc;

THREADGROUP workerThread totalThreads = 1;

INITTASK     taskClass   = resumeTx.ResumableApiTest  taskMethod = HydraTask_initialize
             threadGroups = workerThread;

INITTASK     taskClass   = resumeTx.ResumableApiTest  taskMethod = HydraTask_concSuspend
             threadGroups = workerThread;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names              = region1   region2;
hydra.RegionPrms-regionName         = region1   region2;
hydra.RegionPrms-dataPolicy         = partition replicate;
hydra.RegionPrms-partitionName      = pr        none;
hydra.RegionPrms-cacheListeners     = util.SummaryLogListener;

hydra.PartitionPrms-names           = pr;

