hydra.Prms-testRequirement = "
Verify resumeable transaction behavior with function execution.  PR accessors use functions to execute: begin/suspend, resume/doOps/suspend and resume/commit(or rollback).";

hydra.Prms-testDescription = "
This test runs with peers hosting a hierarchy of replicated regions.  Peers execute concurrent resumeable transactions using function execution.  Active transactions are maintained in a map on the BB.  After a configurable mininum number of suspend+doOps+resume executions have completed, the transactions are committed.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p.inc;
INCLUDE $JTESTS/util/randomValues.inc;

STARTTASK taskClass   = resumeTx.ResumeTxTest taskMethod = StartTask_initialize
          hydra.ConfigPrms-regionConfig   = peer
          clientNames = client1 
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = peer
          hydra.ConfigPrms-regionConfig   = peer
          runMode = always
          ;

INITTASK  taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_initialize
          runMode = always
          ;

TASK      taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_concTxWithFE
          ;

CLOSETASK taskClass   = resumeTx.ResumeTxTest taskMethod = CloseTask_finishAllActiveTx
          ;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = ${totalTaskTimeSec};
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;

util.ValueHolderPrms-useExtraObject = false;

hydra.CachePrms-names           = peer;
hydra.RegionPrms-names          = peer;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-cacheListeners = util.SummaryLogListener;
hydra.RegionPrms-cacheWriter    = tx.LogWriter;
hydra.RegionPrms-dataPolicy     = replicate;

tx.TxPrms-operations = entry-create entry-update entry-update entry-update entry-update entry-destroy entry-inval entry-getWithNewKey entry-getWithExistingKey;

tx.TxPrms-regionOpPercentage = 0;

// number of Ops per ExecuteTx
tx.TxPrms-numOps = 5;

tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=2;

tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 
tx.TxPrms-txListener = tx.TxLogListener;
tx.TxPrms-txWriter   = tx.TxLogWriter;

util.TestHelperPrms-minTaskGranularitySec = 60;

resumeTx.ResumeTxPrms-minExecutions = RANGE 100 200 EGNAR;

