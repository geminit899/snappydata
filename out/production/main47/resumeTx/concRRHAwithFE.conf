hydra.Prms-testDescription = "
This HA test runs with multiple peer vms hosting a hierarchy of replicated regions.  The opClients execute concurrent resumeable transactions using function execution.  Active transactions are maintained in a map on the BB.  After a configurable mininum number of suspend+doOps+resume executions have completed, the transactions are committed.";

// This test differs from the non-HA version in that we need 2 thread groups.
// The first thread group denotes the VMs that are targets for recycling (stop/start).
// The remaining VMs execute ops (which requires a blackboard SharedLock).  We cannot
// kill VMs holding the sharedLocks.

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;
INCLUDE $JTESTS/util/randomValues.inc;
             
THREADGROUP killTargets
  totalThreads = fcn
                 ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"client\", ${clientHosts}, true)"
                 ncf;
THREADGROUP opClients
  totalThreads = fcn
                 ${opClientHosts} * ${opClientVMsPerHost} * ${opClientThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"opClient\", ${opClientHosts}, true)"
                 ncf;

STARTTASK taskClass   = resumeTx.ResumeTxTest taskMethod = StartTask_initialize
          hydra.ConfigPrms-regionConfig   = dataHost
          clientNames = opClient1
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = dataHost
          hydra.ConfigPrms-regionConfig   = dataHost
          threadGroups = killTargets
          runMode = always
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = otherPeers
          hydra.ConfigPrms-regionConfig   = otherPeers
          threadGroups = opClients
          runMode = always
          ;

INITTASK  taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
          threadGroups = opClients, killTargets
          ;

TASK      taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_stopStartDataStores
          threadGroups = opClients
          maxThreads = 1
          ;

INITTASK  taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_initialize
          threadGroups = opClients, killTargets
          runMode = always
          ;

TASK      taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_concTxWithFE
          threadGroups = opClients
          ;

CLOSETASK taskClass   = resumeTx.ResumeTxTest taskMethod = CloseTask_finishAllActiveTx
          threadGroups = opClients, killTargets
          ;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = ${totalTaskTimeSec};
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;

util.ValueHolderPrms-useExtraObject = false;

hydra.CachePrms-names           = dataHost    otherPeers;
hydra.RegionPrms-names          = dataHost    otherPeers;
hydra.RegionPrms-dataPolicy     = replicate   ONEOF replicate normal empty FOENO;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-cacheListeners = util.SummaryLogListener;
hydra.RegionPrms-cacheWriter    = tx.LogWriter;

tx.TxPrms-operations = entry-create entry-update entry-update entry-update entry-update entry-destroy entry-inval entry-getWithNewKey entry-getWithExistingKey;

tx.TxPrms-regionOpPercentage = 0;

// number of Ops per ExecuteTx
tx.TxPrms-numOps = 5;

tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=2;

tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 
tx.TxPrms-txListener = tx.TxLogListener;
tx.TxPrms-txWriter   = tx.TxLogWriter;

util.TestHelperPrms-minTaskGranularitySec = 60;

util.StopStartPrms-numVMsToStop = RANGE 1 ${numVMsToStop} EGNAR;
util.StopStartPrms-stopModes = MEAN_KILL;

resumeTx.ResumeTxPrms-minExecutions = RANGE 100 200 EGNAR;
resumeTx.ResumeTxPrms-highAvailability = true;
