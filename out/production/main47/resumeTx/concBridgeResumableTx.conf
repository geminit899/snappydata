hydra.Prms-testRequirement = "Ensure that no two threads can resume a transaction at the same time; resume
the same transactions multiple times; used multi-regions in the transactions; verify data consistency
at the end of the test";
hydra.Prms-testDescription = "Create multiple regions and populate with data. Make a list of transactions
to start with, then suspend them. Allow concurrent threads to try to resume the transactions, update data
then randomly commit or rollback. Validate data at the end.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

INITTASK     taskClass   = resumeTx.ConcResumableTxTest  taskMethod = HydraTask_initialize
             threadGroups = bridge;

INITTASK     taskClass   = resumeTx.ConcResumableTxTest  taskMethod = HydraTask_initializeClient
             threadGroups = edge;

INITTASK     taskClass   = resumeTx.ConcResumableTxTest  taskMethod = HydraTask_populateRegions
             threadGroups = bridge;

INITTASK     taskClass   = resumeTx.ConcResumableTxTest  taskMethod = HydraTask_beginTxns
             threadGroups = bridge;

TASK         taskClass   = resumeTx.ConcResumableTxTest  taskMethod = HydraTask_concSuspendResumeTx
             threadGroups = bridge;

CLOSETASK    taskClass   = resumeTx.ConcResumableTxTest  taskMethod = HydraTask_completeTxns
             threadGroups = bridge;

CLOSETASK    taskClass   = resumeTx.ConcResumableTxTest  taskMethod = HydraTask_waitForSilence
             threadGroups = bridge, edge;

CLOSETASK    taskClass   = resumeTx.ConcResumableTxTest  taskMethod = HydraTask_checkCounters
             threadGroups = bridge;

CLOSETASK    taskClass   = resumeTx.ConcResumableTxTest  taskMethod = HydraTask_takeSnapshot
             threadGroups = bridge;

CLOSETASK    taskClass   = resumeTx.ConcResumableTxTest  taskMethod = HydraTask_verifyFromSnapshot
             threadGroups = bridge, edge;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names              = region1   region2   region3   region4   region5   region6 edgeR1 edgeR2 edgeR3 edgeR4 edgeR5 edgeR6;
hydra.RegionPrms-regionName         = region1   region2   region3   region4   region5   region6
                                      region1   region2   region3   region4   region5   region6;
hydra.RegionPrms-dataPolicy         = partition partition partition replicate replicate replicate
                                      default   default   default   default   default   default;
hydra.RegionPrms-partitionName      = pr        pr        pr        none      none      none
                                      none      none      none      none      none      none;
hydra.RegionPrms-poolName           = none      none      none      none      none      none
                                      edgeDef   edgeDef   edgeDef   edgeDef   edgeDef   edgeDef;
hydra.RegionPrms-scope              = default   default   default   ack       ack       ack
                                      default   default   default   default   default   default;
hydra.RegionPrms-cacheListeners     = util.SummaryLogListener;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

util.TestHelperPrms-minTaskGranularitySec = 60;

// define the edge clients
hydra.PoolPrms-names                    = edgeDef;
hydra.PoolPrms-minConnections           = 2;
hydra.PoolPrms-subscriptionEnabled      = true;
hydra.PoolPrms-threadLocalConnections   = false;
hydra.PoolPrms-readTimeout              = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy   = ${redundantCopies};
hydra.PoolPrms-pingInterval             = 400;
hydra.PoolPrms-loadConditioningInterval = 5000;

// define the bridge servers
hydra.BridgePrms-names                  = bridge;
