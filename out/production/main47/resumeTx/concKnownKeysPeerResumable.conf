hydra.Prms-testRequirement = "Known keys style test that uses resumable transactions and functions using onTransaction() with multiple PRs and replicate regions";
hydra.Prms-testDescription = "Load the regions with data, use functions to execute ops, use CommitFunction to commit, verify";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_initialize
             resumeTx.ResumeTxPrms-regionConfigNames = region1 region2 region3 region4 region5 region6
             threadGroups = dataStoreThreads;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_initialize
             resumeTx.ResumeTxPrms-regionConfigNames = region1Accessor region2Accessor region3Accessor region4 region5 region6
             threadGroups = accessorThreads;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_loadRegions
             batch
             threadGroups = accessorThreads, dataStoreThreads;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_waitForSilence
             threadGroups = accessorThreads, dataStoreThreads;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_logRegionSizes
             threadGroups = accessorThreads, dataStoreThreads;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_verifyLoad
             threadGroups = accessorThreads, dataStoreThreads;

INITTASK     taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_initFunction
             threadGroups = accessorThreads, dataStoreThreads;

// task is workload based and will throw StopScheduling... when all ops are completed
TASK         taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_doOpsWithFunctions
             threadGroups = accessorThreads, dataStoreThreads;

CLOSETASK    taskClass   = resumeTx.KnownKeysFcn  taskMethod = HydraTask_writeTxnsToBlackboard
             threadGroups = accessorThreads, dataStoreThreads;

CLOSETASK    taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_commitWithFunction
             threadGroups = accessorThreads, dataStoreThreads;

CLOSETASK    taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_waitForSilence
             threadGroups = accessorThreads, dataStoreThreads;

CLOSETASK    taskClass   = resumeTx.ResumableKnownKeysTest  taskMethod = HydraTask_verifyRegions
             threadGroups = accessorThreads, dataStoreThreads;

hydra.Prms-totalTaskTimeSec = 7200; // this is a workload based test
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.ValueHolderPrms-useExtraObject = false;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names              = region1   region2   region3   region4   region5   region6 
                                      region1Accessor region2Accessor region3Accessor;
hydra.RegionPrms-regionName         = region1   region2   region3   region4   region5   region6
                                      region1   region2   region3;
hydra.RegionPrms-dataPolicy         = partition partition partition replicate replicate replicate
                                      partition partition partition;
hydra.RegionPrms-scope              = default   default   default   ack       ack       ack
                                      default   default   default;
hydra.RegionPrms-partitionName      = prCentral pr        pr        none      none      none
                                      accessorCentral  accessor  accessor;
hydra.RegionPrms-cacheListeners     = util.InvisibleSilenceListener;

hydra.PartitionPrms-names             = prCentral          pr                   accessorCentral      accessor;
hydra.PartitionPrms-redundantCopies   = ${redundantCopies} ${redundantCopies}   ${redundantCopies}   ${redundantCopies};
hydra.PartitionPrms-colocatedWith     = none               region1              none                 region1;
hydra.PartitionPrms-localMaxMemory    = default            default              0                    0;
hydra.PartitionPrms-partitionResolver = resumeTx.ModPartitionResolver;

util.TestHelperPrms-minTaskGranularitySec = 60;

resumeTx.ResumeTxPrms-numIntervalKeys = 5000;
resumeTx.ResumeTxPrms-numNewKeys = 1000;
