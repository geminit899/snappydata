hydra.Prms-testRequirement = "
Verify resumeable transaction behavior with function execution.  Edge clients use functions to execute: begin/suspend, resume/doOps/suspend and resume/commit(or rollback).";

hydra.Prms-testDescription = "
This test runs with multiple bridgeServers and edge clients.  The servers host a PartitionedRegion.  Edge clients execute concurrent resumeable transactions using function execution. Active transactions are maintained in a map on the BB.  After a configurable mininum number of suspend+doOps+resume executions have completed, the transactions are committed.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;
INCLUDE $JTESTS/util/randomValues.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} 
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

STARTTASK taskClass   = resumeTx.ResumeTxTest taskMethod = StartTask_initialize
          hydra.ConfigPrms-regionConfig   = bridge
          clientNames = bridge1
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_createPartitionedRegions
          hydra.ConfigPrms-cacheConfig    = bridge
          hydra.ConfigPrms-regionConfig   = bridge
          runMode = always
          threadGroups = bridge
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_startBridgeServer
          hydra.ConfigPrms-bridgeConfig = bridge
          runMode = always
          threadGroups = bridge
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_populateRegions
          threadGroups = bridge
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_dumpLocalKeys
          threadGroups = bridge
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_createPartitionedRegions
          hydra.ConfigPrms-cacheConfig    = edge
          hydra.ConfigPrms-regionConfig   = edge
          threadGroups = edge
          ;

INITTASK  taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_initialize
          threadGroups = edge
          ;

TASK      taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_concTxWithFE
          threadGroups = edge
          ;

CLOSETASK taskClass   = resumeTx.ResumeTxTest taskMethod = CloseTask_finishAllActiveTx
          threadGroups = edge
          ;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = ${totalTaskTimeSec};
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;

util.ValueHolderPrms-useExtraObject = false;

hydra.BridgePrms-names          = bridge;

hydra.CachePrms-names           = bridge      edge;
hydra.RegionPrms-names          = bridge      edge;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-poolName       = none        brloader;
hydra.RegionPrms-dataPolicy     = partitioned default;
hydra.RegionPrms-scope          = default     local;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-cacheListeners = util.SummaryLogListener;
hydra.RegionPrms-cacheWriter    = tx.LogWriter;
hydra.RegionPrms-partitionName  = pr          none;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-totalNumBuckets = 20;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-partitionResolver = resumeTx.ModPartitionResolver;

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections   = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-subscriptionRedundancy = -1;

tx.TxPrms-operations = entry-create entry-update entry-update entry-update entry-update entry-destroy entry-inval entry-getWithNewKey entry-getWithExistingKey;

tx.TxPrms-regionOpPercentage = 0;

// targeting 125 ops per transaction (5 edge clients, each with 5 threads, each FE Tx with 5 ops)
tx.TxPrms-numOps = 5;

tx.TxPrms-numRootRegions=1;
tx.TxPrms-maxKeys = 100;

tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO;
tx.TxPrms-txListener = tx.TxLogListener;
tx.TxPrms-txWriter   = tx.TxLogWriter;

resumeTx.ResumeTxPrms-useColocatedEntries = true;

util.TestHelperPrms-minTaskGranularitySec = 60;

resumeTx.ResumeTxPrms-minExecutions = RANGE 100 200 EGNAR;

