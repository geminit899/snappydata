hydra.Prms-testRequirement = "
Verify resumeable transaction behavior with function execution.  Edge clients use functions to execute: begin/suspend, resume/doOps/suspend and resume/commit(or rollback).";

hydra.Prms-testDescription = "
This test runs with multiple bridgeServers and edge clients.  Servers host a hierarchy of replicated regions.  Only the edgeClient threads execute functions in serial round robin scheduing. The first thread selects a key as a filter key, then executes a transaction (begin/suspend) on a server as determined by the filterSet (key).  All remaining threads then execute a function to resume the transaction and execute operations before suspending and returning the OpList back to the calling edge client.  (EdgeClients maintain a list of expected values on the BB based on the opList returned by the function for use in validation).  The first thread then executes a function (rollback/commit) and then executes a function to verify the servers cache contents based on the snapshot map maintained on the BB";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;
INCLUDE $JTESTS/util/randomValues.inc;

THREADGROUP bridge
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edge
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} 
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

STARTTASK taskClass   = resumeTx.ResumeTxTest taskMethod = StartTask_initialize
          hydra.ConfigPrms-regionConfig   = bridge
          clientNames = bridge1
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = bridge
          hydra.ConfigPrms-regionConfig   = bridge
          runMode = always
          threadGroups = bridge
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_startBridgeServer
          hydra.ConfigPrms-bridgeConfig = bridge
          runMode = always
          threadGroups = bridge
          ;

INITTASK  taskClass   = resumeTx.RtxUtil taskMethod = HydraTask_createRegionForest
          hydra.ConfigPrms-cacheConfig    = edge
          hydra.ConfigPrms-regionConfig   = edge
          threadGroups = edge
          ;

INITTASK  taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_initialize
          threadGroups = edge
          ;

TASK      taskClass   = resumeTx.ResumeTxTest taskMethod = HydraTask_serialRRTxWithFE
          threadGroups = edge
          ;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = ${totalTaskTimeSec};
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

util.ValueHolderPrms-useExtraObject = false;

hydra.BridgePrms-names          = bridge;

hydra.CachePrms-names           = bridge      edge;
hydra.RegionPrms-names          = bridge      edge;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-poolName       = none        brloader;
hydra.RegionPrms-dataPolicy     = replicate   default;
hydra.RegionPrms-scope          = ack         local;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-cacheListeners = util.SummaryLogListener;
hydra.RegionPrms-cacheWriter    = tx.LogWriter;

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections   = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-subscriptionRedundancy = -1;

tx.TxPrms-operations = entry-create entry-update entry-update entry-update entry-update entry-destroy entry-inval entry-getWithNewKey entry-getWithExistingKey;

tx.TxPrms-commitPercentage=80;
tx.TxPrms-regionOpPercentage = 0;

// targeting 125 ops per transaction (5 edge clients, each with 5 threads, each FE Tx with 5 ops)
tx.TxPrms-numOps = 5;

tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=2;

tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 
tx.TxPrms-txListener = tx.TxLogListener;
tx.TxPrms-txWriter   = tx.TxLogWriter;
