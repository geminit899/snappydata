include $JTESTS/event/concEntryEvent.conf;
include $JTESTS/membership/membership.conf;
include $JTESTS/hydraconfig/systemparams3.inc;

hydra.Prms-testDescription = "
    
  Test that concurrently kills, restarts, disconnects, reconnects members of a distributed
  system.  When client's are started - test verifies they become members of the distributed system within
  a configurable amount of time.  Init and Close tasks verify the members expected by the test match
  the members per GemFire.  System members not being disrupted execute test event/concEntryEvent.conf
";

hydra.Prms-testRequirement = "
";


hydra.ClientPrms-vmQuantities = 1 1 3; // 2 2 3;
hydra.ClientPrms-vmThreads    = 2 2 1; // 3 3 1;

THREADGROUP vmKiller
totalThreads = 1
totalVms = 1
clientNames = client3   
; 

THREADGROUP disconnector
totalThreads = 1
totalVms = 1
clientNames = client3
;

THREADGROUP closer
totalThreads = 1
totalVms = 1
clientNames = client3
;

INITTASK  taskClass   = event.EventTest 
          taskMethod  = HydraTask_initialize
          runmode     = DYNAMIC
          ;
INITTASK  taskClass   = membership.MembershipTest 
          taskMethod  = HydraTask_initForRestart
          runmode     = DYNAMIC
          ;

TASK      taskClass = membership.MembershipTest
          taskMethod = HydraTask_closeCache
          threadGroups = closer
          startInterval = 10
          ;

TASK      taskClass = membership.MembershipTest
          taskMethod = HydraTask_disconnect
          threadGroups = disconnector
          startInterval = 10
          ;

TASK      taskClass = membership.MembershipTest taskMethod = HydraTask_stopSelf
          threadGroups = vmKiller
          startInterval = 10 
          ;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 300;
util.TestHelperPrms-minTaskGranularitySec = 30;

hydra.GemFirePrms-enableMcast = ${enableMcast};
hydra.GemFirePrms-useLocator = ${useLocator};
hydra.GemFirePrms-disableTcp = ${disableTcp};

membership.MembershipPrms-reconnectMember = true; 
//membership.MembershipPrms-stopMode = ONEOF MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
membership.MembershipPrms-stopMode = MEAN_KILL;
membership.MembershipPrms-waitInMembershipCheck = 100;
membership.MembershipPrms-membershipWaitThreshold = ${membershipWaitThreshold};
