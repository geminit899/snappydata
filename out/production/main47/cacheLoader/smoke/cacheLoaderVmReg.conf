/* Basic test for distributed updates using a cache loader.
   There are two objects in the cache: 
      MasterData: value is explicitly set via pug
      CachedData: value comes from a cacheLoader, load method
                  simply reads and returns MasterData

   This test uses two GemFire systems with two VMs attached to each.
   The cacheLoader is defined only in client1a's VM.
   One thread in client1a (cacheLoaderAndUpdater) performs the following
   update every 5 seconds:
      increment MasterData
      invalidate CachedData
   The other threads constantly read the value of CachedData.

   This basic version of the test uses scope DISTRIBUTED_ACK
   and defines object entries in the root region.
*/

hydra.Prms-testDescription = "9 threads in 4 VMs across 2 systems continually get cacheLoaded value, scope DISTRIBUTED_ACK, periodic cache miss due to explicit invalidation";
hydra.Prms-testRequirement = "current value always acquired, whether from local cache, netSearch, netLoad, or cacheLoader";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparams2.inc;
include $JTESTS/cacheLoader/smoke/logging.inc;
include $JTESTS/cacheLoader/smoke/tasks.inc;
include $JTESTS/cacheLoader/smoke/2sys.inc;

TASK      taskClass   = cacheLoader.smoke.Client  taskMethod  = updateTask
	  threadGroups = cacheLoaderAndUpdater   startInterval=5
          ;

TASK      taskClass   = cacheLoader.smoke.Client  taskMethod  = readTask
	  threadGroups = default, otherInitializers
          ;


hydra.Prms-totalTaskTimeSec = 60;

util.CachePrms-scopeAttribute = DISTRIBUTED_ACK;
util.CachePrms-mirrorAttribute = NONE;
util.CachePrms-entryTTLSec = 0;
util.CachePrms-entryTTLAction = INVALIDATE;
util.CachePrms-entryIdleTimeoutSec = 0;
util.CachePrms-entryIdleTimeoutAction = INVALIDATE;

hydra.VmPrms-extraVMArgs = 
   "-DDistributionManager.VERBOSE=true"
   ;

cacheLoader.smoke.TestParms-logDetails = true;
