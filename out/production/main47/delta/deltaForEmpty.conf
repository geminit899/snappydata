INCLUDE $JTESTS/delta/delta.inc;
INCLUDE $JTESTS/hydraconfig/topology_5.inc;

hydra.Prms-testRequirement = "feed is done by current version client";
hydra.Prms-totalTaskTimeSec = 30;
hydra.Prms-maxResultWaitSec = 20;

hct.HctPrms-receiveValuesAsInvalidates = false;
hydra.BridgePrms-capacity = 1;

hydra.PoolPrms-subscriptionRedundancy = 0;
hydra.PoolPrms-pingInterval = 100;
hydra.PoolPrms-readTimeout = 60000;

hct.ha.HAClientQueuePrms-delayDispatcherStart=false;
delta.DeltaPropagationPrms-entryOperations=ONEOF put FOENO;

hydra.GemFirePrms-logLevel = info;

hydra.RegionPrms-enableSubscriptionConflation=false default default default default;
hydra.RegionPrms-cacheListeners =
      none, // bridge
      none, // feed
      delta.DeltaClientValidationListener, // edge
      delta.DeltaClientOldValidationListener, // edgeOld
      delta.DeltaClientValidationListener; // edgeEmpty
hydra.RegionPrms-cloningEnabled = true	true	false;
hydra.RegionPrms-names       = bridge     feed       edge	edgeOld	edgeEmpty;
hydra.RegionPrms-poolName = none      brloader  brloader	brloader;
hydra.RegionPrms-dataPolicy  = replicate  default  default	default empty;
hydra.RegionPrms-interestPolicy = default default default default all;

hydra.VersionPrms-names   = version1	version2;
hydra.VersionPrms-version = ${version1} ${version2} ;

hydra.CachePrms-names        = bridge     feed       edge	edgeOld	edgeEmpty;

THREADGROUP edgeOld
    totalThreads = ${edgeOldHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edgeOld\", ${edgeOldHosts}, true)" ncf;

THREADGROUP edgeEmpty
    totalThreads = ${edgeEmptyHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edgeEmpty\", ${edgeEmptyHosts}, true)" ncf;

// make bridges and feeds be peers and make edges be loners
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${feedHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeOldHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeEmptyHosts})" ncf;

INITTASK   taskClass  =  delta.Feeder taskMethod = feederIsClient
            threadGroups = feed;
            
//bc changes end here
// Setup cache and regions for edge caches      
INITTASK   taskClass   = delta.DeltaPropagation taskMethod  = initCacheClientOld
           hydra.ConfigPrms-cacheConfig  = edgeOld
           hydra.ConfigPrms-regionConfig = edgeOld
           threadGroups = edgeOld
           runMode=always;
                 
INITTASK   taskClass   = delta.DeltaPropagation taskMethod  = initCacheClient
           hydra.ConfigPrms-cacheConfig  = edge
           hydra.ConfigPrms-regionConfig = edge
           threadGroups = edge
           runMode=always;
           
INITTASK   taskClass   = delta.DeltaPropagation taskMethod  = initCacheClient
           hydra.ConfigPrms-cacheConfig  = edgeEmpty
           hydra.ConfigPrms-regionConfig = edgeEmpty
           threadGroups = edgeEmpty
           runMode=always;
      
INITTASK   taskClass   = delta.Feeder    taskMethod  = initToFeedMixOfDeltaAndOthers
           hydra.ConfigPrms-cacheConfig  = feed
           hydra.ConfigPrms-regionConfig = feed
           threadGroups = feed;

TASK    	taskClass   = delta.Feeder    taskMethod  = feederTask
            threadGroups = feed;

CLOSETASK   taskClass   = delta.Feeder    taskMethod  = closeTask
            threadGroups = feed;
            
CLOSETASK   taskClass   = delta.DeltaPropagation    taskMethod  = waitForLastKeyReceivedAtClient
            threadGroups = edge, edgeOld, edgeEmpty;
            
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateOpCountsForOld
            threadGroups = edgeOld;
            
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateOpCountsForCurr
            threadGroups = edge;
            
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateDataReceivedCacheLessClient
            threadGroups = edgeEmpty;
            
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateDeltaFeature
            threadGroups = bridge;
            
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateFromDeltaFeature
            threadGroups = edge;
            
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateToDeltaFeature
            threadGroups = feed;
            
CLOSETASK   taskClass   = hydra.CacheHelper  taskMethod  = closeCache
            threadGroups = edge, edgeOld, edgeEmpty;
            
CLOSETASK   taskClass   = hydra.CacheHelper  taskMethod  = closeCache
            threadGroups = bridge;
