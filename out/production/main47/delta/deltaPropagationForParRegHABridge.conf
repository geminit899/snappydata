INCLUDE $JTESTS/delta/delta.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hct.HctPrms-killInterval=300;
hct.HctPrms-restartWaitSec =100;
hct.HctPrms-receiveValuesAsInvalidates = false;
hydra.PoolPrms-pingInterval = 100;
hydra.PoolPrms-readTimeout = 60000;
hydra.PoolPrms-subscriptionRedundancy = 1;
hydra.RegionPrms-cacheListeners =
      none, // bridge
      none, // feed
      delta.DeltaClientValidationListener;  // edge
hydra.RegionPrms-cloningEnabled = true	true	false;
hydra.RegionPrms-enableSubscriptionConflation=false default default;
delta.DeltaPropagationPrms-entryOperations=ONEOF put put destroy put put FOENO;
hct.ha.HAClientQueuePrms-delayDispatcherStart=false;

// make bridges be peers make feed and edges be loners
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\",    ${feedHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf;


hydra.RegionPrms-names          = dataStoreRegion	accessorRegion;
hydra.CachePrms-names        = bridge     feed       edge;

hydra.RegionPrms-names       = bridge     feed       edge;
hydra.RegionPrms-poolName = none       brloader       brloader;
hydra.RegionPrms-dataPolicy  = partition  default  default;
hydra.RegionPrms-scope          = default	local	local;
hydra.RegionPrms-partitionName  = dataStorePR	none	none;

hydra.PartitionPrms-names           = dataStorePR;	
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

// Setup cache and regions for edge caches
INITTASK   taskClass   = delta.DeltaPropagation taskMethod  = initCacheClient
           hydra.ConfigPrms-cacheConfig  = edge
           hydra.ConfigPrms-regionConfig = edge
           threadGroups = edge;

// Setup cache and regions for feeder
INITTASK    taskClass   = delta.Feeder    taskMethod  = initTask
           hydra.ConfigPrms-cacheConfig  = feed
           hydra.ConfigPrms-regionConfig = feed
           threadGroups = feed;

TASK    	taskClass   = delta.Feeder    taskMethod  = feederTask
            threadGroups = feed;
                       
CLOSETASK   taskClass   = delta.Feeder    taskMethod  = closeTask
            threadGroups = feed;
                                   
CLOSETASK   taskClass   = delta.Feeder    taskMethod  = waitForFeederThreadsToComplete
            threadGroups = feed;

CLOSETASK   taskClass   = delta.DeltaPropagation    taskMethod  = waitForLastKeyReceivedAtClient
            threadGroups = edge;
           
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateOpCountsForFailover
            threadGroups = edge;
