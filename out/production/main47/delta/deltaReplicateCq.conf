hydra.Prms-testRequirement = "Verify cqs and replicates with delta";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_5.inc;

hydra.GemFirePrms-distributedSystem =
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"bridgeds\", ${serverGroup1Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"bridgeds\", ${serverGroup2Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"bridgeds\", ${serverGroup3Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"loner\", ${edgeClient1Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"loner\", ${edgeClient2Hosts})"
                              ncf;

THREADGROUP serverGroup1Threads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP serverGroup2Threads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP serverGroup3Threads
    totalThreads = fcn
                   ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;
THREADGROUP edgeClient1Threads
    totalThreads = fcn
                   ${${D}Hosts} * ${${D}VMsPerHost} * ${${D}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${D}\", ${${D}Hosts}, true)"
                   ncf;
THREADGROUP edgeClient2Threads
    totalThreads = fcn
                   ${${E}Hosts} * ${${E}VMsPerHost} * ${${E}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${E}\", ${${E}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = cq.CQTest  taskMethod = HydraTask_initializeServer1
             threadGroups = serverGroup1Threads;

INITTASK     taskClass   = cq.CQTest  taskMethod = HydraTask_initializeServer2
             threadGroups = serverGroup2Threads;

INITTASK     taskClass   = cq.CQTest  taskMethod = HydraTask_initializeDataHostServer
             threadGroups = serverGroup3Threads;

INITTASK     taskClass   = cq.CQTest  taskMethod = HydraTask_initializeClient1
             threadGroups = edgeClient1Threads;

INITTASK     taskClass   = cq.CQTest  taskMethod = HydraTask_initializeClient2
             threadGroups = edgeClient2Threads;

TASK         taskClass   = cq.CQTest  taskMethod = HydraTask_doRROpsAndVerify
             threadGroups = edgeClient2Threads, edgeClient1Threads, serverGroup1Threads, serverGroup2Threads, serverGroup3Threads;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
             
hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-elementSize = 100;
util.ValueHolderPrms-useExtraObject = true;

util.TestHelperPrms-minTaskGranularitySec = 30;

hydra.BridgePrms-names           = bridge1       bridge2        bridge3;
hydra.BridgePrms-groups          = serverGroup1, serverGroup2,  serverGroup3;

hydra.PoolPrms-names                  = edgeDescript1 edgeDescript2;
hydra.PoolPrms-serverGroup            = serverGroup1  serverGroup2;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionEnabled    = true;

hydra.RegionPrms-names           = clientRegion1 clientRegion2 serverDataHost;
hydra.RegionPrms-regionName      = testRegion    testRegion    testRegion;
hydra.RegionPrms-scope           = local         local         ack;
hydra.RegionPrms-dataPolicy      = default       default       replicate;
hydra.RegionPrms-poolName        = edgeDescript1 edgeDescript2 none;
hydra.RegionPrms-cacheListeners  = util.SilenceListener,   
                                   util.SilenceListener,
                                   hct.BridgeEventListener;
hydra.RegionPrms-cloningEnabled  = ${cloningEnabled};

hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${serverGroup1Hosts})" ncf
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${serverGroup2Hosts})" ncf
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${serverGroup3Hosts})" ncf;

cq.CQUtilPrms-numOpsPerTask = 100;
util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;
util.TestHelperPrms-minTaskGranularitySec = 30;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)
cq.CQUtilPrms-serverEntryOperations = ONEOF add add update invalidate get destroy FOENO; 
cq.CQUtilPrms-clientEntryOperations = ONEOF add add update invalidate get destroy FOENO;
cq.CQUtilPrms-upperThreshold = 500;
cq.CQUtilPrms-upperThresholdServerOperations = ONEOF destroy FOENO;
cq.CQUtilPrms-upperThresholdClientOperations = ONEOF destroy FOENO;
cq.CQUtilPrms-lowerThreshold = 0;
cq.CQUtilPrms-lowerThresholdServerOperations = add;
cq.CQUtilPrms-lowerThresholdClientOperations = add;
cq.CQUtilPrms-queryDepth = 1;
cq.CQUtilPrms-numQueriesPerClientVM = 100;
cq.CQUtilPrms-useDeltaObjects = true;
