hydra.Prms-testRequirement = "Test delta propagation with careful validation of memLRU eviction in a peer configuration with PR";
hydra.Prms-testDescription = "
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_initRedundantCopies
             threadGroups = accessorThreads;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_initializeClient
             delta.DeltaPropagationPrms-regionPrmsName=accessorRegion
             threadGroups = accessorThreads
             runMode = always;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_initializeClient
             delta.DeltaPropagationPrms-regionPrmsName=dataStoreRegion
             threadGroups = dataStoreThreads
             runMode = always;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_initializeClient
             delta.DeltaPropagationPrms-regionPrmsName=dataStoreRegion
             threadGroups = dataStoreThreads;

TASK         taskClass   = delta.DeltaTest  taskMethod = HydraTask_doSerialRREvictionTest
             threadGroups = accessorThreads, dataStoreThreads;

// workaround for bug 41952 ENABLED; enabling this also means enabling code in DeltaTest.java
// 7/02/2010: since 41952 will not be fixed for a while, enable a workaround to allow the
// test to run further.
CLOSETASK    taskClass   = delta.DeltaTest  taskMethod = HydraTask_checkOverageHistory
             threadGroups = dataStoreThreads;

INCLUDE $JTESTS/delta/serialDelta.inc;
hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.Prms-totalTaskTimeSec = 900; 
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-cloningEnabled = ${cloningEnabled};

hydra.RegionPrms-names              = accessorRegion          dataStoreRegion;
hydra.RegionPrms-regionName         = testRegion;
hydra.RegionPrms-scope              = default;
hydra.RegionPrms-dataPolicy         = partition;
hydra.RegionPrms-cacheListeners     = event.LogListener;
hydra.RegionPrms-interestPolicy     = cacheContent;
hydra.RegionPrms-cacheLoader        = delta.ValueHolderLoader;
hydra.RegionPrms-partitionName      = accessorPR              dataStorePR;
hydra.RegionPrms-evictionAttributes = lruMemorySize 1 delta.PretendSizer overflowToDisk;
hydra.RegionPrms-diskStoreName = diskStore1;
hydra.RegionPrms-diskSynchronous = true;

hydra.DiskStorePrms-names = diskStore1;

hydra.PartitionPrms-names           = accessorPR          dataStorePR;
hydra.PartitionPrms-localMaxMemory  = 0                   1;   // must match lruMemory limit

delta.DeltaPropagationPrms-entryOperations = ONEOF add getNew update update destroy invalidate FOENO;  
delta.DeltaPropagationPrms-lowerThreshold = 100;
delta.DeltaPropagationPrms-lowerThresholdOperations = ONEOF add getNew FOENO;
delta.DeltaPropagationPrms-upperThreshold = 200;
delta.DeltaPropagationPrms-upperThresholdOperations = destroy;
delta.DeltaPropagationPrms-redundantCopies = ${redundantCopies};
delta.DeltaPropagationPrms-valueClass = delta.DeltaValueHolder;
delta.DeltaPropagationPrms-numOpsPerTask = 20;

delta.DeltaPropagationPrms-payloadSize = ONEOF 5000 200000 FOENO; // size of byte[] payload for delta update
delta.DeltaPropagationPrms-pretendSize = ONEOF 5000 200000 FOENO; // size returned from PretendSizer

hydra.VmPrms-extraVMArgs += "-Dgemfire.DELTAS_RECALCULATE_SIZE=true";

