hydra.Prms-testRequirement = "Test delta propagation with careful validation in a peer configuration with PR";
hydra.Prms-testDescription = "
This test executes operations on entries on a region and carefully
validates for correctness with delta propagation.  The test uses serial 
round robin; the first thread in the round does random operations, then 
all other threads in the round verify the state of the region and write 
that vm's delta information to the blackboard. After the last thread in the 
round verifies, it reads all the delta information from the blackboard 
and verifies delta behavior. It then becomes the first in the next round, 
thus the thread/vm doing the random operation changes for each round. 
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;

THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_initRedundantCopies
             threadGroups = accessorThreads;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_initializeClient
             delta.DeltaPropagationPrms-regionPrmsName=accessorRegion
             threadGroups = accessorThreads
             runMode = always;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_initializeClient
             delta.DeltaPropagationPrms-regionPrmsName=dataStoreRegion
             threadGroups = dataStoreThreads
             runMode = always;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_loadToUpperThreshold
             threadGroups = accessorThreads, dataStoreThreads
             batch;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_recordLoadToBB
             threadGroups = accessorThreads;

TASK         taskClass   = delta.DeltaTest  taskMethod = HydraTask_doRROpsAndVerify
             threadGroups = accessorThreads, dataStoreThreads;

INCLUDE $JTESTS/delta/serialDelta.inc;

hydra.RegionPrms-names          = accessorRegion          dataStoreRegion;
hydra.RegionPrms-regionName     = testRegion;
hydra.RegionPrms-scope          = default;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-cacheListeners = delta.DeltaTestListener;
hydra.RegionPrms-interestPolicy = all;
hydra.RegionPrms-partitionName  = accessorPR              dataStorePR;

hydra.PartitionPrms-names           = accessorPR          dataStorePR;
hydra.PartitionPrms-localMaxMemory  = 0                   default;

delta.DeltaPropagationPrms-redundantCopies = ${redundantCopies};

// workload based test; number of cycles to run is the number of vms in the test
delta.DeltaPropagationPrms-numberOfCycles = fcn (${accessorHosts} * ${accessorVMsPerHost}) +
                                                (${dataStoreHosts} * ${dataStoreVMsPerHost}) ncf;
