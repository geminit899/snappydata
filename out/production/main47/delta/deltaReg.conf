INCLUDE $JTESTS/delta/delta.inc;
INCLUDE $JTESTS/hydraconfig/topology_4.inc;
hct.HctPrms-receiveValuesAsInvalidates = false;
hydra.PoolPrms-subscriptionRedundancy = 0;
hydra.PoolPrms-pingInterval = 100;
hct.ha.HAClientQueuePrms-delayDispatcherStart=false;
hydra.PoolPrms-readTimeout                 = 60000;
hydra.GemFirePrms-logLevel = info;
hydra.BridgePrms-capacity = 1;
hydra.RegionPrms-enableSubscriptionConflation=false default default default;
hydra.RegionPrms-cacheListeners =
      none, // bridge
      none, // feed
      delta.DeltaClientValidationListener, // edge
      delta.DeltaClientOldValidationListener; // edgeOld
hydra.RegionPrms-cloningEnabled = true	true	false;
delta.DeltaPropagationPrms-entryOperations=ONEOF put FOENO;

// make bridges and feeds be peers and make edges be loners
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${feedHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeOldHosts})" ncf;


THREADGROUP edgeOld
    totalThreads = ${edgeOldHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edgeOld\", ${edgeOldHosts}, true)" ncf;

hydra.CachePrms-names        = bridge     feed       edge	edgeOld;

hydra.RegionPrms-names       = bridge     feed       edge	edgeOld;
hydra.RegionPrms-poolName = none       none       brloader	brloader;
hydra.RegionPrms-dataPolicy  = replicate  replicate  default	default;

//bc changes start here
hydra.ClientPrms-versionNames =
  fcn "hydra.TestConfigFcns.duplicate(\"version1\", ${bridgeHosts})"  ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version1\", ${feedHosts})"  ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version1\", ${edgeHosts})"  ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version2\", ${edgeOldHosts})"  ncf
  ;
hydra.VersionPrms-names   = version1	version2;
hydra.VersionPrms-version = ${version1} ${version2} ;

//bc changes end here
// Setup cache and regions for edge caches      
INITTASK   taskClass   = delta.DeltaPropagation taskMethod  = initCacheClientOld
           hydra.ConfigPrms-cacheConfig  = edgeOld
           hydra.ConfigPrms-regionConfig = edgeOld
           threadGroups = edgeOld
           runMode=always;
                 
INITTASK   taskClass   = delta.DeltaPropagation taskMethod  = initCacheClient
           hydra.ConfigPrms-cacheConfig  = edge
           hydra.ConfigPrms-regionConfig = edge
           threadGroups = edge
           runMode=always;
      
INITTASK   taskClass   = delta.Feeder    taskMethod  = initToFeedMixOfDeltaAndOthers
           hydra.ConfigPrms-cacheConfig  = feed
           hydra.ConfigPrms-regionConfig = feed
           threadGroups = feed;

TASK    	taskClass   = delta.Feeder    taskMethod  = feederTask
            threadGroups = feed;

CLOSETASK   taskClass   = delta.Feeder    taskMethod  = closeTask
            threadGroups = feed;
            
CLOSETASK   taskClass   = delta.DeltaPropagation    taskMethod  = waitForLastKeyReceivedAtClient
            threadGroups = edge, edgeOld;
            
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateOpCountsForOld
            threadGroups = edgeOld;
            
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateOpCountsForCurr
            threadGroups = edge;
            
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateDeltaFeature
            threadGroups = bridge;
            
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateFromDeltaFeature
            threadGroups = edge;
            
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateToDeltaFeature
            threadGroups = feed;
            
CLOSETASK   taskClass   = hydra.CacheHelper    taskMethod  = closeCache
            threadGroups = edge, edgeOld, feed;
            
CLOSETASK   taskClass   = hydra.CacheHelper    taskMethod  = closeCache
            threadGroups = bridge;
