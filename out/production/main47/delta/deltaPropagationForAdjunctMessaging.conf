INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hct/hctparams.inc;
INCLUDE $JTESTS/hydraconfig/topology_4.inc;

hydra.Prms-testRequirement = "Test adjunct messaging with delta propagation.";
hydra.Prms-testDescription = "
The purpose of the test is to verify that messages received by an accessor is dispatched properly to various clients. (Normal data policy client should receive deltas. Empty data policy client should receive full values.
";

STARTTASK   taskClass  =  delta.DeltaPropagationBB taskMethod = initialize
            clientNames = defaultedge1;

// Setup cache and regions for bridge server caches                        
INITTASK   taskClass   = delta.DeltaPropagation taskMethod  = initCacheServer
           runMode = always
           hydra.ConfigPrms-cacheConfig  = accessor
           hydra.ConfigPrms-regionConfig = accessor
           hydra.ConfigPrms-bridgeConfig = accessor
           threadGroups = accessor;
           
// Setup cache and regions for feeder
INITTASK    taskClass   = delta.Feeder    taskMethod  = feederCreateRegions
           hydra.ConfigPrms-cacheConfig  = feed
           hydra.ConfigPrms-regionConfig = feed
           threadGroups = feed;

// Setup cache and regions for edge caches
INITTASK   taskClass   = delta.DeltaPropagation taskMethod  = initCacheClient
           hydra.ConfigPrms-cacheConfig  = defaultedge
           hydra.ConfigPrms-regionConfig = defaultedge
           threadGroups = defaultedge;
           
// Setup cache and regions for edge caches           
INITTASK   taskClass   = delta.DeltaPropagation taskMethod  = initCacheClient
           hydra.ConfigPrms-cacheConfig  = emptyedge
           hydra.ConfigPrms-regionConfig = emptyedge
           threadGroups = emptyedge;           

INITTASK    taskClass   = delta.Feeder    taskMethod  = feederSpawnThreads
           hydra.ConfigPrms-cacheConfig  = feed
           threadGroups = feed;

TASK        taskClass   = delta.Feeder    taskMethod  = feederTask
            threadGroups = feed;
            
                       
CLOSETASK   taskClass   = delta.Feeder    taskMethod  = closeTask
            threadGroups = feed;
                                   
CLOSETASK   taskClass   = delta.Feeder    taskMethod  = waitForFeederThreadsToComplete
            threadGroups = feed;

CLOSETASK   taskClass   = delta.DeltaPropagation    taskMethod  = waitForLastKeyReceivedAtClient
            threadGroups = defaultedge;
           
CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateOpCountsForDefaultClient
            threadGroups = defaultedge;

CLOSETASK   taskClass   = delta.Validator    taskMethod  = validateOpCountForEmptyClient
            threadGroups = emptyedge;
            
THREADGROUP accessor
    totalThreads = ${accessorHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"accessor\", ${accessorHosts}, true)" ncf;
THREADGROUP feed
    totalThreads = ${feedHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feed\", ${feedHosts}, true)" ncf;
THREADGROUP defaultedge
    totalThreads = ${defaultedgeHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"defaultedge\", ${defaultedgeHosts}, true)" ncf;
                        
THREADGROUP emptyedge
    totalThreads = ${emptyedgeHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"emptyedge\", ${emptyedgeHosts}, true)" ncf;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 400;

hydra.GemFirePrms-conserveSockets   = true;
hydra.GemFirePrms-logLevel          =  fine;
// make bridges and feed be peers and edges be loners
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${accessorHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${feedHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${defaultedgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${emptyedgeHosts})" ncf;
  
hydra.CachePrms-messageSyncInterval = 25;
hydra.CachePrms-names               = accessor     feed       defaultedge      emptyedge;

hct.HctPrms-receiveValuesAsInvalidates = false;

hydra.BridgePrms-names                = accessor;
hydra.BridgePrms-maxThreads           = ONEOF default 16 FOENO; // selector control

hydra.PoolPrms-pingInterval           = 100;
hydra.PoolPrms-readTimeout            = 60000;
hydra.PoolPrms-subscriptionRedundancy = 1;
hydra.PoolPrms-names                  = brloader;
hydra.PoolPrms-minConnections         = 10;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-subscriptionAckInterval=10000;

hydra.RegionPrms-scope                = dack;
hydra.RegionPrms-cacheListeners       =
      none, // accessor
      none, // feed
      delta.DeltaClientValidationListener,  // defaultedge
      delta.DeltaClientValidationListener;  // emptyedge
hydra.RegionPrms-cloningEnabled               = true	true	false;
hydra.RegionPrms-enableSubscriptionConflation = false default default;
hydra.RegionPrms-names                        = accessor     feed       defaultedge      emptyedge;
hydra.RegionPrms-poolName                     = none         none      brloader  brloader;
hydra.RegionPrms-dataPolicy                   = partition  partition    default   empty;
hydra.RegionPrms-scope                        = default	   default	local    local;
hydra.RegionPrms-interestPolicy               = cacheContent  cacheContent    cacheContent   all;
hydra.RegionPrms-partitionName                = accessorPR      feederPR	none   none;

hydra.PartitionPrms-names           = accessorPR  feederPR;
hydra.PartitionPrms-localMaxMemory  = 0           default;

delta.DeltaPropagationPrms-numPutThreads        = ${nPutThreads};
delta.DeltaPropagationPrms-numKeyRangePerThread = ${nPutKeyRange};


delta.DeltaPropagationPrms-entryOperations = ONEOF put put destroy put put FOENO;
hct.ha.HAClientQueuePrms-delayDispatcherStart = false;

// override generic topology to make just one single-threaded VM of each type
hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 1;










