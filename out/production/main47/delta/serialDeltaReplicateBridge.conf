hydra.Prms-testRequirement = "Test delta propagation with careful validation in a bridge configuration with replicates";
hydra.Prms-testDescription = "
This test executes operations on entries on a region and carefully
validates for correctness with delta propagation.  The test uses serial 
round robin; the first thread in the round does random operations, then 
all other threads in the round verify the state of the region and write 
that vm's delta information to the blackboard. After the last thread in the 
round verifies, it reads all the delta information from the blackboard 
and verifies delta behavior. It then becomes the first in the next round, 
thus the thread/vm doing the random operation changes for each round. 
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_initializeBridgeServer
             delta.DeltaPropagationPrms-regionPrmsName=serverRegion
             threadGroups = bridgeThreads
             runMode = always;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_initializeClient
             delta.DeltaPropagationPrms-regionPrmsName=clientRegion
             threadGroups = edgeThreads
             runMode = always;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_loadToUpperThreshold
             batch
             threadGroups = edgeThreads, bridgeThreads;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_recordLoadToBB
             threadGroups = edgeThreads;

TASK         taskClass   = delta.DeltaTest  taskMethod = HydraTask_doRROpsAndVerify
             threadGroups = bridgeThreads, edgeThreads;

INCLUDE $JTESTS/delta/serialDelta.inc;

hydra.RegionPrms-names          = clientRegion             serverRegion;
hydra.RegionPrms-regionName     = testRegion;
hydra.RegionPrms-scope          = local                    ${scope};
hydra.RegionPrms-poolName       = edgeDescript             none;
hydra.RegionPrms-dataPolicy     = normal                   replicate;
hydra.RegionPrms-cacheListeners = util.SilenceListener
                                  delta.DeltaTestListener, delta.DeltaTestListener;
hydra.RegionPrms-partitionName  = none                     none;

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout            = 800000;
hydra.PoolPrms-subscriptionRedundancy = RANGE 0 fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf EGNAR;

// define the bridge servers
hydra.BridgePrms-names                = bridge;

// workload based test; number of cycles to run is the number of vms in the test
delta.DeltaPropagationPrms-numberOfCycles = fcn (${bridgeHosts} * ${bridgeVMsPerHost}) +
                                                (${edgeHosts} * ${edgeVMsPerHost}) ncf;

