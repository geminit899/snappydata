INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hct/hctparams.inc;
INCLUDE $JTESTS/hydraconfig/topology_4.inc;

hydra.Prms-testRequirement = "register interest compatible with 5.7 version and with current";
hydra.Prms-testDescription = " feed is done by old version client";

hydra.GemFirePrms-conserveSockets = true;
// make bridges and feeds be peers and make edges be loners
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${feedHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeOldHosts})" ncf;
  
hydra.GemFirePrms-logLevel = info;
hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 400;
hydra.BridgePrms-names = bridge;
// HAOverflow variables
hydra.BridgePrms-evictionPolicy = mem;
hydra.BridgePrms-diskStoreName = disk;
hydra.DiskStorePrms-names = disk;
hydra.BridgePrms-capacity = 5;

hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control
hydra.BridgePrms-capacity = 1;
hct.HctPrms-receiveValuesAsInvalidates = false;

hydra.PoolPrms-names                       = brloader;
hydra.PoolPrms-minConnections        = 10;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-subscriptionAckInterval=10000;
hydra.PoolPrms-subscriptionRedundancy = 0;
hydra.PoolPrms-pingInterval = 100;
hydra.PoolPrms-readTimeout = 60000;

hydra.CachePrms-messageSyncInterval = 25;
hydra.CachePrms-names        = bridge     feed       edge	edgeOld;

// override generic topology to make just one single-threaded VM of each type
hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 1;
hydra.ClientPrms-versionNames =
  fcn "hydra.TestConfigFcns.duplicate(\"version1\", ${bridgeHosts})"  ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version2\", ${feedHosts})"  ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version1\", ${edgeHosts})"  ncf
  fcn "hydra.TestConfigFcns.duplicate(\"version2\", ${edgeOldHosts})"  ncf
  ;

hct.ha.HAClientQueuePrms-numPutThreads = ${nPutThreads};
hct.ha.HAClientQueuePrms-numKeyRangePerThread = ${nPutKeyRange};
hct.ha.HAClientQueuePrms-delayDispatcherStart=false;
hct.ha.HAClientQueuePrms-entryOperations=ONEOF put FOENO;
hct.ha.HAClientQueuePrms-putLastKey=true;
hct.ha.HAClientQueuePrms-allowConcurrentMapOps=false;
      
hydra.RegionPrms-names       = bridge     feed       edge	edgeOld;
hydra.RegionPrms-poolName = none      brloader  brloader	brloader;
hydra.RegionPrms-dataPolicy  = replicate  default  default	default;
hydra.RegionPrms-enableSubscriptionConflation=false default default default;
hydra.RegionPrms-scope       = dack;
hydra.RegionPrms-cacheListeners =
      none, // bridge
      none, // feed
      hct.ha.HANoFailoverClientListener, // edge
      hct.ha.HANoFailoverClientListener; // edgeOld

hydra.VersionPrms-names   = version1	version2;
hydra.VersionPrms-version = ${version1} ${version2} ;

THREADGROUP bridge
    totalThreads = ${bridgeHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP feed
    totalThreads = ${feedHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feed\", ${feedHosts}, true)" ncf;

THREADGROUP edge
    totalThreads = ${edgeHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edge\", ${edgeHosts}, true)" ncf;

THREADGROUP edgeOld
    totalThreads = ${edgeOldHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edgeOld\", ${edgeOldHosts}, true)" ncf;
                        

STARTTASK   taskClass  =  hct.ha.HAClientQueueBB taskMethod = initialize
            clientNames = edge1;

// Setup cache and regions for bridge server caches
INITTASK   taskClass   = hct.ha.HAClientQueue taskMethod  = initCacheServer
           runMode = always
           hydra.ConfigPrms-cacheConfig  = bridge
           hydra.ConfigPrms-regionConfig = bridge
           hydra.ConfigPrms-bridgeConfig = bridge
           threadGroups = bridge;

INITTASK   taskClass   = hct.ha.HAClientQueue taskMethod  = initCacheClient
           hydra.ConfigPrms-cacheConfig  = edgeOld
           hydra.ConfigPrms-regionConfig = edgeOld
           threadGroups = edgeOld, edge
           runMode=always;
           
INITTASK   taskClass   = hct.ha.Feeder    taskMethod  = initTask
           hydra.ConfigPrms-cacheConfig  = feed
           hydra.ConfigPrms-regionConfig = feed
           threadGroups = feed;

TASK    	taskClass   = hct.ha.Feeder    taskMethod  = feederTask
            threadGroups = feed;

CLOSETASK   taskClass   = hct.ha.Feeder    taskMethod  = closeTask
            threadGroups = feed;
            
CLOSETASK   taskClass   = hct.ha.HAClientQueue    taskMethod  = waitForLastKeyReceivedAtClient
            threadGroups = edge, edgeOld;
            
CLOSETASK   taskClass   = hct.ha.Validator    taskMethod  = validateOpCountsForNoFailover
            threadGroups = edge, edgeOld;           
