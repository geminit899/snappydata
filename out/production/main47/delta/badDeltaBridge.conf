hydra.Prms-testRequirement = "Test delta implementations that contain errors with non-pr regions in a bridge configuration";
hydra.Prms-testDescription = "
Run various bad delta test cases
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;
hydra.GemFirePrms-distributedSystem =
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"bridgeds\", ${bridgeHosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"edgeds\", ${edgeHosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"edgeds\", ${adminHosts})"
                              ncf;

THREADGROUP bridgeThreads
  totalThreads = fcn
                 ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;         
THREADGROUP adminThreads
  totalThreads = fcn
                 ${adminHosts} * ${adminVMsPerHost} * ${adminThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"admin\", ${adminHosts}, true)"
                 ncf;         

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_initializeBridgeServer
             delta.DeltaPropagationPrms-regionPrmsName=serverRegion
             threadGroups = bridgeThreads
             runMode = always;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_initializeClient
             delta.DeltaPropagationPrms-regionPrmsName=clientRegion
             threadGroups = edgeThreads
             runMode = always;

INITTASK     taskClass   = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = adminThreads
             runMode = always;

INITTASK     taskClass   = delta.DeltaTest  taskMethod = HydraTask_loadBadDeltaToUpperThreshold
             threadGroups = edgeThreads;

TASK         taskClass   = delta.DeltaTest  taskMethod = HydraTask_badDeltaController
             threadGroups = edgeThreads, bridgeThreads;

hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-totalTaskTimeSec = 600; // test is workload based, but won't run longer than 10 minutes
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

hydra.GemFirePrms-conserveSockets = true;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-cloningEnabled = ONEOF true false FOENO;

delta.DeltaPropagationPrms-upperThreshold = 300;
delta.DeltaPropagationPrms-numServers = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names          = clientRegion             serverRegion;
hydra.RegionPrms-regionName     = testRegion;
hydra.RegionPrms-scope          = local                    ack;
hydra.RegionPrms-poolName       = edgeDescript             none;
hydra.RegionPrms-dataPolicy     = normal                   replicate;
hydra.RegionPrms-cacheListeners = util.SilenceListener
                                  delta.BadDeltaTestListener,
                                                           delta.BadDeltaTestListener;

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout            = 800000;
hydra.PoolPrms-subscriptionRedundancy = RANGE 0 fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf EGNAR;
hydra.PoolPrms-contactAlgorithm       = hydra.EdgeHelper getRandomEndpoints; // required to admin vm to be in same ds as client

// define the bridge servers
hydra.BridgePrms-names                = bridge;

util.AdminHelperPrms-alertListener = delta.DeltaTestAlertListener;
