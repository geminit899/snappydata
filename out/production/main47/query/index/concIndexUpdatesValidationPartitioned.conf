// Since 6.6.2 
// This is a hydra test for validation of index updates by different operations like add/destroy/update in concurrent execution.
// The test creates a region with specified properties, then creates various indexes like:
// CompactRangeIndex, RangeIndex, MapRangeIndex (MapRangeIndexes are commented because of Bug 44123)
// After that it verifies the Index sizes against the index statistics and based on the type of data.(HydraTask_verifyIndexSizes)
// Then it starts doing different operations like add/update/delete and querying in parallel.
// Then in the end it gets data from region with and without indexes and compares the two results in the CLOSETASKS.
// QueryObserver technique is used to verify that index was used for query evaluation in case of results with indexes
// This enables to verify that index updates are in sync with region updates
// This file in particular is test for non-Persistent Region with partition data policy 
INCLUDE $JTESTS/query/queryRegionSpecsPartitioned.inc;
INCLUDE $JTESTS/query/queryEntry.inc;

hydra.Prms-serialExecution = false;
hydra.PartitionPrms-redundantCopies = 0;
THREADGROUP indexValidators totalThreads = 3 totalVMs = 3;
THREADGROUP indexSizeValidators totalThreads = 6 totalVMs = 6;
STARTTASK    taskClass   = query.index.IndexBB taskMethod  = HydraTask_initialize
             clientNames = client1;
INITTASK     taskClass   = query.QueryTest taskMethod  = HydraTask_initialize;
INITTASK     taskClass   = query.QueryTest taskMethod  = HydraTask_populateRegions;
INITTASK     taskClass   = query.SerialQueryAndEntryOpsTest taskMethod  = HydraTask_createIndexes;
INITTASK     taskClass   = query.SerialQueryAndEntryOpsTest taskMethod  = HydraTask_calculateIndexSizesForPR
             threadGroups = indexSizeValidators;
INITTASK     taskClass   = query.SerialQueryAndEntryOpsTest taskMethod  = HydraTask_verifyIndexSizes;

CLOSETASK    taskClass   = query.QueryTest taskMethod  = HydraTask_closeTask_writeQueryStats_To_Blackboard;

CLOSETASK    taskClass   = query.SerialQueryAndEntryOpsTest 
             taskMethod  = HydraTask_getQueryResultsWithIndexes
             threadGroups = indexValidators;

CLOSETASK    taskClass   = query.SerialQueryAndEntryOpsTest 
             taskMethod  = HydraTask_verifyQueryResultsWithAndWithoutIndexes
             threadGroups = indexValidators;

ENDTASK      taskClass   = query.QueryTest taskMethod  = HydraTask_endTask_verifyQueryStats_With_Blackboard
             clientNames = client1;
query.QueryPrms-objectType = objects.PRPortfolio;
event.EventPrms-useRandomLocks = false;
query.QueryPrms-entryAndQueryOperations = ONEOF add add add destroy destroy query query FOENO; 

query.QueryPrms-useRandomValues = false;
query.index.IndexPrms-numOfIndexes = 2;
query.index.IndexPrms-indexType = all;
query.QueryPrms-isIndexUsageValidation = true;
hydra.RegionPrms-indexMaintenanceSynchronous  = true;
//hydra.VmPrms-extraVMArgs = "-Dgemfire.index.acquireCompactIndexLocksWithRegionEntryLocks=true";