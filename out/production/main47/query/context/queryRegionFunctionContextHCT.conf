hydra.Prms-testRequirement = "Test querying on region context in partitioned region with Client-server configuration";
hydra.Prms-testDescription = "Test querying on region context in partitioned region with Client-server configuration";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// this test uses tasks from getInitialImage tests to load the region,
// do operations and verify the region contents 

// accessorThreads are all threads in the accessor VMs 
THREADGROUP accessorVMThreads 
            totalThreads = fcn "(${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM})" ncf
            totalVMs     = fcn "(${edgeHosts} * ${edgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"edge\", 
                                ${edgeHosts} * ${edgeVMsPerHost}, true)" ncf;
                                
// one verify thread per datastore (but not accessor) vm to verify each vm's view
THREADGROUP verifyThreads 
            totalThreads = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            totalVMs     = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf;
                                
// dataStoreThreads are all threads in the dataStore VMs minus 
// the one thread per dataStore VM for the verifyThreads
THREADGROUP dataStoreVMThreads 
            totalThreads = fcn (${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM}) 
                               - (${bridgeHosts} * ${bridgeVMsPerHost}) ncf  
            totalVMs     = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"bridge\", 
                                ${bridgeHosts} * ${bridgeVMsPerHost}, true)" ncf;

STARTTASK    taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = StartTask_initialize;
STARTTASK    taskClass   = query.context.QueryFunctionContextBB taskMethod  = HydraTask_initialize
             clientNames = edge1;
INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_HA_dataStoreInitialize
             threadGroups = dataStoreVMThreads
             runMode = always;

INITTASK     taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_HA_accessorInitialize
             threadGroups = accessorVMThreads;
             
INITTASK     taskClass     = query.context.QueryFunctionExecTest
             taskMethod = HydraTask_initRegisterFunction
             threadGroups = dataStoreVMThreads,accessorVMThreads
             runMode = always;

INITTASK     taskClass     = query.context.QueryFunctionExecTest  taskMethod = HydraTask_populateRegions
             //threadGroups = accessorVMThreads;
                        threadGroups = dataStoreVMThreads;

INITTASK         taskClass     = parReg.execute.ExecutionAndColocationTest  taskMethod = HydraTask_waitForEventsReceival
             threadGroups = accessorVMThreads;

INITTASK     taskClass     = query.context.QueryFunctionExecTest  taskMethod = HydraTask_verifyRegionSizeAndValues
             threadGroups = verifyThreads;


TASK         taskClass     = query.context.QueryFunctionExecTest  taskMethod = HydraTask_ExecuteFunction_NoFilter
             threadGroups = accessorVMThreads;

TASK         taskClass     = query.context.QueryFunctionExecTest  taskMethod = HydraTask_ExecuteFunction_Filter_SingleKey
             threadGroups = accessorVMThreads;

TASK         taskClass     = query.context.QueryFunctionExecTest  taskMethod = HydraTask_ExecuteFunction_Filter
             threadGroups = accessorVMThreads;
             

             
hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 600;

//hydra.Prms-clientShutdownHook = parReg.execute.ExecutionAndColocationTest shutdownHook;

util.TestHelperPrms-minTaskGranularitySec = 60;

getInitialImage.InitImagePrms-numKeys = ${numKeys};
// numNewKeys is 10% of the total number of keys
getInitialImage.InitImagePrms-numNewKeys = fcn "${numKeys} * 0.1" ncf;
getInitialImage.InitImagePrms-useCacheLoader=false;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

query.QueryPrms-queryStrings = 
"select distinct * from /QueryRegion1 r1"
"select distinct * from /QueryRegion1 r1 WHERE r1.ID >= 100"
"select distinct * from /QueryRegion1 r1 WHERE r1.status = 'active'"
"select distinct * from /QueryRegion1 r1 WHERE r1.ID >= 100 AND r1.status = 'active'";
event.EventPrms-maxObjects = ${objectsPerRegion};
query.QueryPrms-objectType = objects.PRPortfolio;
query.QueryPrms-expectedQueryResultSizes = ${objectsPerRegion} 
                                 fcn "${objectsPerRegion} - 100" ncf
                                 fcn "${objectsPerRegion}/2" ncf 
                                 fcn "(${objectsPerRegion} - 100)/2" ncf;

hydra.RegionPrms-names              = accessorRegion         dataStoreRegion;
hydra.RegionPrms-regionName         = QueryRegion1            QueryRegion1;
hydra.RegionPrms-scope              = local                  default;
hydra.RegionPrms-partitionName      = none                   dataStorePR;
hydra.RegionPrms-poolName           = edgeDescript           none;
hydra.RegionPrms-dataPolicy         = empty                 partition;
hydra.RegionPrms-partitionName      = none                   pr;
hydra.RegionPrms-cacheListeners  = util.SilenceListener,  none;
hydra.RegionPrms-valueConstraint = objects.PRPortfolio;
event.EventPrms-maxObjects = 1000;
query.QueryPrms-objectType = objects.PRPortfolio;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
//hydra.PartitionPrms-totalNumBuckets =  100;
// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy = ${redundancy};
hydra.PoolPrms-pingInterval           = 400;
hydra.PoolPrms-loadConditioningInterval = 5000;

// define the bridge servers
hydra.BridgePrms-names                = bridge;


parReg.ParRegPrms-numberOfDataStore = fcn "(${bridgeHosts} * ${bridgeVMsPerHost})" ncf;
//hydra.VmPrms-extraClassPaths        =   $GEMFIRE/lib/antlr.jar $GEMFIRE/lib/gemfire.jar;
hydra.VmPrms-extraClassPaths = fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar $GEMFIRE/lib/gemfire.jar\", ${bridgeHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar $GEMFIRE/lib/gemfire.jar\", ${edgeHosts}, true)"
                             ncf;
hydra.GemFirePrms-logLevel = finer;
hydra.log.LogPrms-file_logLevel = finer;
hydra.Prms-serialExecution = true;