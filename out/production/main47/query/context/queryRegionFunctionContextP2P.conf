hydra.Prms-testRequirement = "Test querying on region context in partitioned region with P2P configuration";
hydra.Prms-testDescription = "Test querying on region context in partitioned region with P2P configuration";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams3.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = 1 1 1;
hydra.ClientPrms-vmThreads    = 1 1 1;

hydra.VmPrms-extraClassPaths        =   $GEMFIRE/lib/antlr.jar $GEMFIRE/lib/gemfire.jar,
                                        $GEMFIRE/lib/antlr.jar $GEMFIRE/lib/gemfire.jar,
                                        $GEMFIRE/lib/antlr.jar $GEMFIRE/lib/gemfire.jar;
THREADGROUP functionCaller 
            totalThreads = 1
            totalVMs     = 1
            clientNames  = client1;
STARTTASK    taskClass   = query.context.QueryFunctionContextBB taskMethod  = HydraTask_initialize
             clientNames = client1;
INITTASK  taskClass = query.context.QueryFunctionExecTest taskMethod  = HydraTask_initialize_peers;
INITTASK  taskClass = query.context.QueryFunctionExecTest taskMethod = HydraTask_initRegisterFunction;
//INITTASK      taskClass = query.context.QueryFunctionExecTest taskMethod = HydraTask_ExecuteFunction;
TASK         taskClass     = query.context.QueryFunctionExecTest  taskMethod = HydraTask_ExecuteFunction_NoFilter
                 threadGroups = functionCaller;
                 
TASK         taskClass     = query.context.QueryFunctionExecTest  taskMethod = HydraTask_ExecuteFunction_Filter_SingleKey
             threadGroups = functionCaller;

TASK         taskClass     = query.context.QueryFunctionExecTest  taskMethod = HydraTask_ExecuteFunction_Filter
               threadGroups = functionCaller;

CLOSETASK         taskClass     = query.context.QueryFunctionExecTest  taskMethod = HydraTask_Set_BucketRegion_Destroy_QueryObserver
                      threadGroups = functionCaller, default;

CLOSETASK         taskClass     = query.context.QueryFunctionExecTest  taskMethod = HydraTask_ExecuteFunction_RegionDestroyUsingFilter
                      threadGroups = functionCaller;


query.QueryPrms-queryStrings = 
"select distinct * from /QueryRegion1 r1"
"select distinct * from /QueryRegion1 r1 WHERE r1.ID >= 100"
"select distinct * from /QueryRegion1 r1 WHERE r1.status = 'active'"
"select distinct * from /QueryRegion1 r1 WHERE r1.ID >= 100 AND r1.status = 'active'";
event.EventPrms-maxObjects = ${objectsPerRegion};
query.QueryPrms-objectType = objects.PRPortfolio;
query.QueryPrms-expectedQueryResultSizes = ${objectsPerRegion} 
                                 fcn "${objectsPerRegion} - 100" ncf
                                 fcn "${objectsPerRegion}/2" ncf 
                                 fcn "(${objectsPerRegion} - 100)/2" ncf;

hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.RegionPrms-names           = region1;
hydra.RegionPrms-dataPolicy      = partition;
hydra.RegionPrms-scope           = default;

hydra.RegionPrms-statisticsEnabled = true;
hydra.RegionPrms-valueConstraint  = objects.PRPortfolio;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-partitionName  = pr1;
hydra.PartitionPrms-names = pr1;
hydra.PartitionPrms-redundantCopies = 0;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 500;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-alwaysDoEndTasks = false;
hydra.Prms-maxClientShutdownWaitSec = 240;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 400;

// Logging params
hydra.log.LogPrms-file_logging = true;

util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;
util.ValueHolderPrms-useExtraObject = false;
event.EventPrms-useRandomLocks = false;

query.QueryPrms-entryAndQueryOperations = ONEOF add add add add destroy destroy query query FOENO; // weighted to adds
query.QueryPrms-objectType = objects.PRPortfolio;
util.TestHelperPrms-minTaskGranularitySec = 60;
hydra.Prms-serialExecution = true;
