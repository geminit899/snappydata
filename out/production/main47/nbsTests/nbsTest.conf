INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_6.inc;
INCLUDE $JTESTS/hct/hctparams.inc;

// overrides the topology with respect to the number of threads per VM

hydra.Prms-testTopology = "Hierarchical cache topology divided into three named subgroups, bridge and 2 edges types - clientOn and clientOff.
similarly for the durable clients - durableClientOn and durableClientOff";
  


hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${clientOnHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${clientOffHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${feederHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${durableClientOnHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${durableClientOffHosts})" ncf
;


hydra.GemFirePrms-enableDurableClient  =
  fcn "hydra.TestConfigFcns.duplicate(\"false\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"false\",    ${clientOnHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"false\", ${clientOffHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"false\", ${feederHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"true\", ${durableClientOnHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"true\", ${durableClientOffHosts})" ncf; 
    
 
THREADGROUP bridge
    totalThreads = ${bridgeHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP clientOn
    totalThreads = ${clientOnHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"clientOn\", ${clientOnHosts}, true)" ncf;
                       
THREADGROUP clientOff
    totalThreads = ${clientOffHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"clientOff\", ${clientOffHosts}, true)" ncf;
                        
THREADGROUP durableClientOn
    totalThreads = ${durableClientOnHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"durableClientOn\", ${durableClientOnHosts}, true)" ncf;
                        
THREADGROUP durableClientOff
    totalThreads = ${durableClientOffHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"durableClientOff\", ${durableClientOffHosts}, true)" ncf;                                                
                        
THREADGROUP feeder
    totalThreads = ${feederHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feeder\", ${feederHosts}, true)" ncf;                         
  
  
// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;


hydra.CachePrms-names           = bridge                   edge;
hydra.RegionPrms-names          = bridge                   edge;
hydra.RegionPrms-scope          = ack                      local;
hydra.RegionPrms-dataPolicy     = replicate                default;
hydra.RegionPrms-cacheListeners = nbsTests.EventCounterListener;
hydra.RegionPrms-poolName        = none                     brloader;

hydra.BridgePrms-names          = bridge;
hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout = 60000;
hydra.PoolPrms-subscriptionRedundancy = 3;

STARTTASK    taskClass   = nbsTests.NBSTest taskMethod = StartTask_initialize
             clientNames = clientOn1;

INITTASK     taskClass   = nbsTests.NBSTest  taskMethod = initBridgeServer
             hydra.ConfigPrms-cacheConfig  = bridge
             hydra.ConfigPrms-regionConfig = bridge
             hydra.ConfigPrms-bridgeConfig = bridge
             threadGroups = bridge
             runMode = always ;

INITTASK     taskClass   = nbsTests.NBSTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-cacheConfig  = edge
             hydra.ConfigPrms-regionConfig = edge
             threadGroups = clientOn, clientOff, durableClientOff, durableClientOn, feeder
             runMode = always ;
             
INITTASK     taskClass   = nbsTests.NBSTest taskMethod = HydraTask_loadRegion
             threadGroups = feeder;             
             
INITTASK     taskClass   = nbsTests.NBSTest  taskMethod = HydraTask_registerInterestWithTrue
             threadGroups = clientOn, durableClientOn
             ;
             
INITTASK     taskClass   = nbsTests.NBSTest  taskMethod = HydraTask_registerInterestWithFalse
             threadGroups = clientOff, durableClientOff
             ;
                                                               

TASK     taskClass   = nbsTests.NBSTest  taskMethod = HydraTask_doOps
             threadGroups = feeder;
             
TASK     taskClass   = nbsTests.NBSTest  taskMethod = HydraTask_recycleVm
             threadGroups = bridge
             maxTimesToRun = 3;             
               
             
CLOSETASK    taskClass   = nbsTests.NBSTest taskMethod = HydraTask_validateClientEventsForOnClients
             threadGroups = clientOn,  durableClientOn;   
             
CLOSETASK    taskClass   = nbsTests.NBSTest taskMethod = HydraTask_validateClientEventsForOffClients
             threadGroups = clientOff,  durableClientOff;                             

//CLOSETASK   taskClass   = cq.CQUtil    taskMethod = HydraTask_verifyCQListenerInvoked
//            threadGroups = clientOn, clientOff, durableClientOff, durableClientOn;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 1100;
hydra.Prms-errorOnFailedGFStartup = false;
hydra.GemFirePrms-conserveSockets = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;
util.ValueHolderPrms-useExtraObject = false;

hct.HctPrms-blackboardType = "RMI";
hct.HctPrms-blackboardName = "HctBlackboard";

// this is the number of keys divided among the key intervals
getInitialImage.InitImagePrms-numKeys = 10000;
getInitialImage.InitImagePrms-numNewKeys = 2000;
getInitialImage.InitImagePrms-useCacheLoader = false; // we must use a bridge loader

hct.HctPrms-resultPolicy = keysValues;
