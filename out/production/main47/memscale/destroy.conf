hydra.Prms-testDescription = "Test to repeatedly create data, then destroy some percentage of it (up to 100%).
This is to simulate Hadoop processing of a large amount of data, then destroying it, then creating a large amount again.
";

// Close Task must come before the include
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = waitForOffHeapSilence
          threadGroups = peer;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = verifyOffHeapMemoryConsistencyOnce
          threadGroups = peer;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = closeAllRegions
          threadGroups = peer;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = verifyOffHeapMemoryConsistencyOnce
          threadGroups = peer;

include $JTESTS/cacheperf/comparisons/replicated/peerDataCreate.conf;

INITTASK taskClass = memscale.MemScaleTest taskMethod = HydraTask_initialize
         threadGroups = peer
         ;

INITTASK taskClass = memscale.OffHeapMemoryLifecycleListener taskMethod = install runMode=always;

// Tasks
TASK taskClass = memscale.MemScaleTest taskMethod = HydraTask_destroyTest
     cacheperf.CachePerfPrms-keyAllocation = pseudoRandomUnique
     cacheperf.CachePerfPrms-keyPercentage = ${destroyPercentage}
     threadGroups = peer
     ;

ENDTASK taskClass = memscale.OffHeapMemoryLifecycleListener taskMethod = checkForErrors;


//------------------------------------------------------------------------------
// This is is not a typical perf test that uses terminators.
// This test terminates when all keys have been processed; set the terminator
// frequencies high so they don't run.

cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-batchSeconds              = 300;
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 259200 seconds;
cacheperf.CachePerfPrms-trimSeconds               = 60;
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 120 seconds;
cacheperf.CachePerfPrms-workSeconds               = 259200;  // workload-based determined by pseudo-random unique keys


memscale.MemScalePrms-numberExecutionCycles = ${executionCycles};
memscale.MemScalePrms-useClear = ${useClear};

objects.ArrayOfBytePrms-size = RANGE ${minObjectSize} ${maxObjectSize} EGNAR;
objects.ArrayOfBytePrms-encodeKey = false;

//hydra.VmPrms-extraVMArgs += "-Dgemfire.OFF_HEAP_TOTAL_SIZE=10m -Dgemfire.OFF_HEAP_SLAB_SIZE=1m -D/DefaultRegion:OFF_HEAP=true";
//hydra.VmPrms-extraVMArgs += "-D/DefaultRegion:OFF_HEAP=true";
hydra.GemFirePrms-offHeapMemorySize = 10m;
hydra.RegionPrms-enableOffHeapMemory=true;
