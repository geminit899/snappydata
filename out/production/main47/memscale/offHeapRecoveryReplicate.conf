hydra.Prms-testRequirement = "Verify that recovery with off-heap regions does not first recovery into heap memory";
hydra.Prms-testDescription = "
Configure the test to use a heap too small to accomodate the entries of the regions to verify that the product recovers directly to off-heap memory
rather than recovering to heap, then transferring to off-heap.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_2.inc;

// all topology groups are peers
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP controllerThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP workThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask;

INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_multiRegionInitialize
             threadGroups = workThreads
             runMode = always;
  
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_load
             batch
             threadGroups = workThreads;

INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_resetUniqueKeyIndex
             threadGroups = workThreads;

INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createXmlFile
             threadGroups = workThreads
             runMode = once;
  
INITTASK taskClass = memscale.OffHeapMemoryLifecycleListener taskMethod = install runMode=always;

TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_doRecovery
             maxThreads = 1
             threadGroups = controllerThread; 

TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_doOperationsHA
             threadGroups = workThreads; 

// look for off-heap memory leaks
CLOSETASK    taskClass   = memscale.OffHeapHelper  taskMethod = waitForOffHeapSilence
             threadGroups = workThreads;
CLOSETASK    taskClass   = memscale.OffHeapHelper  taskMethod = verifyOffHeapMemoryConsistencyOnce
             threadGroups = workThreads;
CLOSETASK    taskClass   = memscale.OffHeapHelper  taskMethod = closeAllRegions
             threadGroups = workThreads;
CLOSETASK    taskClass   = memscale.OffHeapHelper  taskMethod = verifyOffHeapMemoryConsistencyOnce
             threadGroups = workThreads;

ENDTASK taskClass = memscale.OffHeapMemoryLifecycleListener taskMethod = checkForErrors;

hydra.Prms-totalTaskTimeSec = 900;  
hydra.Prms-maxResultWaitSec = 1200;

INCLUDE $JTESTS/util/randomValues.inc;
hydra.GemFirePrms-conserveSockets = true;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

util.TestHelperPrms-minTaskGranularitySec = 30;

//hydra.DiskStorePrms-names = ds1 ds2 .... dsN;
// note the notUsed diskStoreName is used to fool hydra; diskStores are specified programmatically in the test code 
hydra.DiskStorePrms-names = notUsed fcn "hydra.TestConfigFcns.generateNames(\"ds\", \"${numDiskStores}\", false)" ncf;
hydra.DiskStorePrms-autoCompact          = true;
hydra.DiskStorePrms-allowForceCompaction = ONEOF true false FOENO;
hydra.DiskStorePrms-compactionThreshold  = RANGE 0 100 EGNAR;
hydra.DiskStorePrms-diskDirNum           = RANGE 1 10 EGNAR;
hydra.DiskStorePrms-diskDirSizes         = RANGE 35 40 EGNAR;
hydra.DiskStorePrms-maxOplogSize         = RANGE 4 10 EGNAR;
hydra.DiskStorePrms-queueSize            = RANGE 1 1000 EGNAR;
hydra.DiskStorePrms-timeInterval         = RANGE 1 3000 EGNAR;
hydra.DiskStorePrms-writeBufferSize      = RANGE 1000 50000 EGNAR;

diskRecovery.RecoveryPrms-operations = ONEOF add add destroy destroy invalidate invalidate update update get get getNew getNew putAll cacheOperations cacheOperations clear FOENO;
diskRecovery.RecoveryPrms-numPutAllNewKeys = RANGE 1 10 EGNAR;
diskRecovery.RecoveryPrms-numPutAllExistingKeys = RANGE 1 10 EGNAR;
diskRecovery.RecoveryPrms-useUniqueKeys = true;
diskRecovery.RecoveryPrms-createRegionsWithXml = ONEOF true false FOENO;
diskRecovery.RecoveryPrms-setIgnorePreallocate = true; //workaround #50184

util.StopStartPrms-stopModes = ONEOF nice_exit nice_kill mean_exit mean_kill FOENO;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = RANGE 20000 80000 EGNAR; //avg is 50000
util.ValueHolderPrms-useExtraObject = true;

hydra.RegionPrms-names              = replicatePersist;
hydra.RegionPrms-dataPolicy         = persistentReplicate;
hydra.RegionPrms-scope              = ONEOF ack noAck FOENO;
hydra.RegionPrms-cacheListeners     = util.SummaryLogListener;
hydra.RegionPrms-partitionName      = none;
// fool hydra; diskStore names will be randomly chosen at runtime from hydra.DiskStorePrms.names, but hydra requires 
// it get defined here anyway
hydra.RegionPrms-diskStoreName      = notUsed;
hydra.RegionPrms-evictionAttributes = none; 
hydra.RegionPrms-diskSynchronous    = ONEOF true false FOENO;

hydra.PartitionPrms-names = pr;
hydra.PartitionPrms-redundantCopies = ONEOF 1 2 3 FOENO;

diskRecovery.RecoveryPrms-lowerThreshold = 7999;
diskRecovery.RecoveryPrms-upperThreshold = 8050;
diskRecovery.RecoveryPrms-lowerThresholdOperations = ONEOF add putAll cacheOperations FOENO;
diskRecovery.RecoveryPrms-upperThresholdOperations = ONEOF destroy cacheOperations FOENO;

// ============================================================
// number of regions, payload size and heap set such that we cannot contain all entries in heap
diskRecovery.RecoveryPrms-numRootRegions = 1;
diskRecovery.RecoveryPrms-numSubregions = 0;
diskRecovery.RecoveryPrms-regionHierarchyDepth = 1;

diskRecovery.RecoveryPrms-maxNumEntriesPerRegion = 8000;

hydra.VmPrms-extraVMArgs += "-Xmx125m";

hydra.GemFirePrms-offHeapMemorySize=500m;
hydra.RegionPrms-enableOffHeapMemory = true;

