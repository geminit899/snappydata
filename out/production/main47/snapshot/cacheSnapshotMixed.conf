INCLUDE $JTESTS/snapshot/cacheSnapshot.inc;

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_waitForMyStartupRecovery
             threadGroups = workThreads;

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyPRs
             threadGroups = workThreads;

diskRecovery.RecoveryPrms-useShutDownAll = ONEOF true false FOENO;

hydra.RegionPrms-names              = 
                                      pr
                                      prOverflow
                                      prPersist
                                      prPersistOverflow

                                      replicate
                                      replicateOverflow
                                      replicatePersist
                                      replicatePersistOverflow;
hydra.RegionPrms-dataPolicy         = 
                                      partitioned partitioned persistentPartition persistentPartition
                                      replicate replicate persistentReplicate persistentReplicate;
hydra.RegionPrms-scope              = 
                                      default default default default
                                      ONEOF ack noAck FOENO
                                      ONEOF ack noAck FOENO
                                      ONEOF ack noAck FOENO
                                      ONEOF ack noAck FOENO;
hydra.RegionPrms-cacheListeners     = util.SummaryLogListener;
hydra.RegionPrms-partitionName      = 
                                      pr pr pr pr
                                      none none none none;
// fool hydra; diskStore names will be randomly chosen at runtime from hydra.DiskStorePrms.names, but hydra requires 
// it get defined here anyway
hydra.RegionPrms-diskStoreName      = 
                                      none notUsed notUsed notUsed
                                      none notUsed notUsed notUsed;
hydra.RegionPrms-evictionAttributes = 
                                      none, lruEntryCount 50 overflowToDisk, none, lruEntryCount 50 overflowToDisk,
                                      none, lruEntryCount 50 overflowToDisk, none, lruEntryCount 50 overflowToDisk;
hydra.RegionPrms-diskSynchronous    = ONEOF true false FOENO;

hydra.PartitionPrms-names = pr;
hydra.PartitionPrms-redundantCopies = ONEOF 1 2 3 FOENO;

diskRecovery.RecoveryPrms-numRootRegions = 10;
diskRecovery.RecoveryPrms-numSubregions = 2;
diskRecovery.RecoveryPrms-regionHierarchyDepth = 2;
diskRecovery.RecoveryPrms-maxNumEntriesPerRegion = 200;



