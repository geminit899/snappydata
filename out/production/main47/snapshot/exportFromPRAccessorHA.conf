hydra.Prms-testRequirement = "snapshot (export/import) (baseline) test";
hydra.Prms-testDescription = "
Create cache and configured regions.  All members contribute to loading the region.  After writing the region snapshot to the blackboard, export the region to disk.  Restart all vms and import the data (verifying snapshot on import).
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_4.inc;

// all topology groups are peers
hydra.GemFirePrms-distributedSystem = ds;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx20m\", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx250m\", ${${B}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx250m\", ${${C}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx250m\", ${${D}Hosts}, true)"
                             ncf;
                             ;

THREADGROUP controllerThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;

THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;

THREADGROUP killTargetThreads
    totalThreads = fcn
                   ${${D}Hosts} * ${${D}VMsPerHost} * ${${D}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${D}\", ${${D}Hosts}, true)"
                   ncf;

// setup for stop/start of gemfire (dataStore) members
INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
             threadGroups = accessorThreads, dataStoreThreads, killTargetThreads;

// on dynamic restart we need to wipe out any disk files before creating the cache/regions
INITTASK     taskClass   = snapshot.SnapshotTest taskMethod = HydraTask_removeDiskFiles
             runMode = dynamic
             threadGroups = dataStoreThreads, killTargetThreads;

// initTasks with runMode always
INITTASK     taskClass   = snapshot.SnapshotTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-regionConfig    = ${regionConfigName}
             threadGroups = dataStoreThreads, killTargetThreads
             runMode = always;

INITTASK     taskClass   = snapshot.SnapshotTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-regionConfig = prAccessor  
             threadGroups = accessorThreads
             runMode = always;

INITTASK     taskClass = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = controllerThread;

// initTask run at startup only
INITTASK     taskClass   = snapshot.SnapshotTest  taskMethod = HydraTask_loadRegion
             threadGroups = accessorThreads, dataStoreThreads, killTargetThreads
             batch;

INITTASK     taskClass   = snapshot.SnapshotTest  taskMethod = HydraTask_resetUniqueKeyIndex
             threadGroups = accessorThreads, dataStoreThreads, killTargetThreads;

INITTASK     taskClass   = snapshot.SnapshotTest  taskMethod = HydraTask_initializeController
             threadGroups = controllerThread;

INITTASK     taskClass   = snapshot.SnapshotTest  taskMethod = HydraTask_initializeResponder
             threadGroups = accessorThreads, dataStoreThreads, killTargetThreads
             runMode = dynamic;

TASK         taskClass   = snapshot.SnapshotTest  taskMethod = HydraTask_snapshotController
             threadGroups = controllerThread;

TASK         taskClass   = snapshot.SnapshotTest  taskMethod = HydraTask_snapshotResponder
             threadGroups = accessorThreads, dataStoreThreads, killTargetThreads;

CLOSETASK    taskClass   = snapshot.SnapshotTest taskMethod = CloseTask_closeCache
             runMode = dynamic
             threadGroups = accessorThreads, dataStoreThreads, killTargetThreads;

hydra.Prms-totalTaskTimeSec = 1200; 
hydra.Prms-totalTaskTimeSec = 31536000;  // test terminated by secondsToRun
snapshot.SnapshotPrms-secondsToRun = 900;
hydra.Prms-maxResultWaitSec = 600;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = RANGE 1 50 EGNAR;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = true;

hydra.ConfigPrms-cacheConfig    = cache1;
hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names           = persistentPartitionRegion partitionRegion prAccessor;
hydra.RegionPrms-regionName      = TestRegion;
hydra.RegionPrms-dataPolicy      = persistentPartition       partition;
hydra.RegionPrms-scope           = default;
hydra.RegionPrms-partitionName   = pr                        pr              accessor;

hydra.PartitionPrms-names           = pr                   accessor;
hydra.PartitionPrms-localMaxMemory  = default              0;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

hydra.RegionPrms-diskStoreName   = diskStore1                none            none;
hydra.RegionPrms-diskSynchronous = true;
hydra.RegionPrms-cacheListeners =  util.SummaryLogListener;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-allowForceCompaction = true;  // this test explicitly calls compaction
hydra.DiskStorePrms-autoCompact = false;  // this test explicitly calls compaction
hydra.DiskStorePrms-maxOplogSize = 1; // frequent new logs

snapshot.SnapshotPrms-useUniqueKeys = true;
snapshot.SnapshotPrms-numToLoad = 5000;  // start small, todo@lhughes - increase once test is running
snapshot.SnapshotPrms-exportStrategy = ${exportStrategy};
snapshot.SnapshotPrms-restrictSnapshotOperationsTo = PRAccessors;
snapshot.SnapshotPrms-executeConcurrentOps = ${executeConcurrentOps};
snapshot.SnapshotPrms-executeConcurrentRebalance = ${executeConcurrentRebalance};
snapshot.SnapshotPrms-useFilterOnExport = ${useFilterOnExport};
snapshot.SnapshotPrms-useFilterOnImport = ${useFilterOnImport};

snapshot.SnapshotPrms-operations = ONEOF add add destroy destroy invalidate invalidate update update get get getNew getNew putAll FOENO;
snapshot.SnapshotPrms-lowerThreshold = 1000;
snapshot.SnapshotPrms-upperThreshold = 10000;
snapshot.SnapshotPrms-lowerThresholdOperations = ONEOF add putAll FOENO;
snapshot.SnapshotPrms-upperThresholdOperations = ONEOF destroy FOENO;
snapshot.SnapshotPrms-numPutAllNewKeys = RANGE 1 10 EGNAR;
snapshot.SnapshotPrms-numPutAllExistingKeys = RANGE 1 10 EGNAR;

util.TestHelperPrms-minTaskGranularitySec = 30;
util.StopStartPrms-stopModes = nice_exit;  // allow closetask to run to remove disk files (nice_exit vs. nice_kill)

