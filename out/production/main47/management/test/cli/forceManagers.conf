hydra.Prms-testRequirement = "Start 0 or more manager(s) and connect CLI clients with either --locator, --jmxManager";
hydra.Prms-testDescription = "
Start locator, accessor, dataStore and admin members, initialize and start 0 or more managers depending
on the hydra parameters. Verify which members are managers before and after the CLI connect. Verify the
connection by executing operations.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_4_locator.inc;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;    
THREADGROUP accessorThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost}
                                    * ${${A}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost}
                                    * ${${B}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP adminThreads
    totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost}
                                    * ${${C}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;
THREADGROUP cliThreads
    totalThreads = fcn ${${D}Hosts} * ${${D}VMsPerHost}
                                    * ${${D}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${D}\", ${${D}Hosts}, true)"
                   ncf;

// init stop/start
INITTASK taskClass    = util.StopStartVMs  taskMethod = StopStart_initTask
         threadGroups = dataStoreThreads, accessorThreads;

// init locators
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_createLocator
         runMode      = always
         threadGroups = locatorThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_startLocatorAndDS
         runMode      = always
         threadGroups = locatorThreads;

// init dataStore members 
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_configurableInit
         runMode      = always
         management.test.cli.CommandPrms-numMembersJoinDSOnly=${numMembersJoinDSOnly}
         management.test.cli.CommandPrms-numMembersCreateCacheOnly=${numMembersCreateCacheOnly}
         management.test.cli.CommandPrms-numMembersToHostRegion=${numDataStoreMembersToHostRegion}
         threadGroups = dataStoreThreads;

// writing region names to blackboard after creating dataStore regions is used to create proxy regions
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_writeRegionNamesToBB
         threadGroups = accessorThreads, dataStoreThreads, locatorThreads;

// init proxy members 
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_configurableInit
         management.test.cli.CommandPrms-createProxyRegions=true 
         runMode      = always
         threadGroups = accessorThreads;

// init admin
INITTASK taskClass = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
         threadGroups = adminThreads;

// write member/region information to blackboard for region MBean validation
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_writeMemberDescriptionToBB
         threadGroups = accessorThreads, dataStoreThreads;

// init managers if designated by CommandPrms-nbrOfManagers
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_startManagerIfRequired
         management.test.cli.CommandPrms-nbrOfManagers=${nbrOfManagers} 
         management.test.cli.CommandPrms-limitManagersToMembers=${limitManagersToMembers} 
         threadGroups = accessorThreads, dataStoreThreads, locatorThreads;

// validation
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_logManagerStatus
         threadGroups = accessorThreads, dataStoreThreads, locatorThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_verifyManagers
         threadGroups = accessorThreads, dataStoreThreads, locatorThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_verifyMemberMBeans
         threadGroups = accessorThreads, dataStoreThreads, locatorThreads;
// verify region MBeans before connecting
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_verifyRegionMBeans
         threadGroups = accessorThreads, dataStoreThreads, locatorThreads;

// initialize the jvms to run the CLI
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_logBBs;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_initAndConnectCLI
         threadGroups = cliThreads;

// check managers
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_logManagerStatus
         threadGroups = accessorThreads, dataStoreThreads, locatorThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_verifyManagers
         threadGroups = accessorThreads, dataStoreThreads, locatorThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_verifyMemberMBeans
         threadGroups = accessorThreads, dataStoreThreads, locatorThreads;
// verify region MBeans when regions are empty
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_verifyRegionMBeans
         threadGroups = accessorThreads, dataStoreThreads, locatorThreads;

// load regions with data
INITTASK taskClass = management.test.cli.CommandTest taskMethod = HydraTask_load
         batch
         management.test.cli.CommandPrms-numToLoadEachRegion=50
         threadGroups = dataStoreThreads, accessorThreads;
INITTASK taskClass = management.test.cli.CommandTest taskMethod = waitForSilence
         threadGroups = dataStoreThreads, accessorThreads;
INITTASK taskClass = management.test.cli.CommandTest taskMethod = HydraTask_logRegions
         threadGroups = dataStoreThreads, accessorThreads;
INITTASK taskClass = management.test.cli.CommandTest taskMethod = verifyBucketCopies
         threadGroups = dataStoreThreads, accessorThreads;

// verify region MBeans when regions have data
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_verifyRegionMBeans
         threadGroups = accessorThreads, dataStoreThreads, locatorThreads;

CLOSETASK  taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_checkForCommandErrors;

ENDTASK  taskClass    = util.LogChecker  taskMethod = HydraTask_checkLogs;

hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/gfsh-dependencies.jar;

hydra.Prms-totalTaskTimeSec = 120;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
hydra.Prms-maxResultWaitSec = 900;

INCLUDE $JTESTS/management/test/cli/regions.inc;
hydra.RegionPrms-poolName           = none; // override pool settings in regions.inc
hydra.RegionPrms-evictionAttributes = none,
                                      lruEntryCount 100 localDestroy,
                                      none,
                                      lruEntryCount 100 localDestroy,
                                      none,
                                      none,
                                      none,
                                      lruEntryCount default localDestroy,

                                      none,
                                      lruEntryCount 100 localDestroy,
                                      none,
                                      lruMemorySize 10 default localDestroy,
                                      none,
                                      lruEntryCount 100 localDestroy,
                                      none,
                                      lruEntryCount 100 localDestroy,
                                      none,
                                      lruEntryCount 100 localDestroy,
                                      none,
                                      lruEntryCount 100 localDestroy,
                                      none,
                                      lruMemorySize 10 default localDestroy,
                                      none,
                                      lruEntryCount 100 localDestroy,
                                      none,
                                      lruEntryCount 100 localDestroy,
                                      none,
                                      lruEntryCount 100 localDestroy,

                                      // client regions
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,

                                      // persistent regions
                                      none,
                                      lruEntryCount 30 overflowToDisk,
                                      none,
                                      lruEntryCount 30 overflowToDisk,
                                      none,
                                      none,
                                      none,
                                      lruEntryCount 30 overflowToDisk,

                                      none,
                                      lruEntryCount 30 overflowToDisk,
                                      none,
                                      lruEntryCount 30 overflowToDisk,
                                      none,
                                      lruEntryCount 30 overflowToDisk,
                                      none,
                                      lruEntryCount 30 overflowToDisk,
                                      none,
                                      lruEntryCount 30 overflowToDisk,
                                      none,
                                      lruEntryCount 30 overflowToDisk,
                                      none,
                                      lruEntryCount 30 overflowToDisk,
                                      none,
                                      lruEntryCount 30 overflowToDisk,
                                      none,
                                      lruEntryCount 30 overflowToDisk,
                                      none,
                                      lruEntryCount 30 overflowToDisk,

                                      // client regions
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy,
                                      lruEntryCount 100 localDestroy
;

management.test.cli.CommandPrms-createPersistentRegions = true;
management.test.cli.CommandPrms-createSubregions = true;

util.ValueHolderPrms-useExtraObject=false;

// gfsh connection/manager settings
hydra.GemFirePrms-jmxManagerPort=true; // required to have hydra autogenerate a port

util.AdminHelperPrms-alertListener = util.AlertLogListener;

util.OperationsClientPrms-entryOperations = ONEOF add add getNew getNew update update update invalidate get destroy replace remove FOENO;
util.OperationsClientPrms-upperThreshold = 100;
util.OperationsClientPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
util.OperationsClientPrms-lowerThreshold = 50;
util.OperationsClientPrms-lowerThresholdOperations = add ;
util.TestHelperPrms-minTaskGranularitySec = 10; // length of ops per region

management.test.cli.CommandPrms-connectToLocator = ONEOF true false FOENO;

hydra.GemFirePrms-jmxManager      = ${locator1-jmxManager} ${locator2-jmxManager} ${remainder-jmxManager};
hydra.GemFirePrms-jmxManagerStart = ${locator1-jmxManagerStart} ${locator2-jmxManagerStart} 
                                    ${accessor1-jmxManagerStart} ${accessor2-jmxManagerStart}
                                    ${dataStore1-jmxManagerStart} ${dataStore2-jmxManagerStart}
                                    ${remainder-jmxManagerStart};
                                 ;
hydra.VmPrms-extraVMArgs += "-Dgemfire.groups=all";
 
hydra.GemFirePrms-offHeapMemorySize = 10m;
hydra.RegionPrms-enableOffHeapMemory = ONEOF true false FOENO;

