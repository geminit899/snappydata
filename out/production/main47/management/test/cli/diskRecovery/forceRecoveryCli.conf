hydra.Prms-testRequirement = "Test gfsh commands revoke disk-store and show missing-disk-store.";
hydra.Prms-testDescription = "
Modify existing forceRecovery test to invoke the gfsh commands revoke disk-stroe and show missing-disk-store.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

// all topology groups are peers
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP controllerThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP peerThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP locatorThreads
    totalThreads = fcn
                   ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;


INITTASK taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
         threadGroups = peerThreads, locatorThreads, controllerThread;

// init locators 
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_createLocator
         runMode      = always
         threadGroups = locatorThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_startLocatorAndDS
         runMode      = always
         threadGroups = locatorThreads;

INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_initialize
             threadGroups = peerThreads
             diskRecovery.RecoveryPrms-regionConfigNames = persistRegion
             runMode = always;
  
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_recordStartupState
             threadGroups = peerThreads
             runMode = dynamic;
  
// the controller thread is also an admin vm
INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = controllerThread;

INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_load
             threadGroups = peerThreads 
             batch;

INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_logRegions
             threadGroups = peerThreads;

// initialize the jvms to run the CLI
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_logBBs;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_initAndConnectCLI
         threadGroups = controllerThread;

TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_latestRecoveryTest
             threadGroups = controllerThread
             maxTimesToRun = 1;

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyRegions
             threadGroups = peerThreads;

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyStartupState
             threadGroups = controllerThread;

ENDTASK  taskClass    = util.LogChecker  taskMethod = HydraTask_checkLogs;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = RANGE 1 50 EGNAR;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
hydra.CachePrms-lockLease       = 3600;

hydra.RegionPrms-names           = persistRegion;
hydra.RegionPrms-scope           = ONEOF ack global FOENO;
hydra.RegionPrms-dataPolicy      = persistentReplicate;
hydra.RegionPrms-diskStoreName   = diskStore1;
hydra.RegionPrms-diskSynchronous = true;
//hydra.RegionPrms-cacheListeners = util.SummaryLogListener;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-autoCompact = true;
hydra.DiskStorePrms-maxOplogSize = 1; // frequent new logs
hydra.Prms-manageLocatorAgents=false;

diskRecovery.RecoveryPrms-numRootRegions = 5;
diskRecovery.RecoveryPrms-maxNumEntriesPerRegion = 15000;
diskRecovery.RecoveryPrms-concurrentRegionCreation = ${concurrentRegionCreation};

util.TestHelperPrms-minTaskGranularitySec = 60;
util.StopStartPrms-stopModes = ${stopMode};

diskRecovery.RecoveryPrms-persistenceObserver = diskRecovery.RecoveryTestObserver;

diskRecovery.RecoveryPrms-testStrategy = forceRecovery;

util.CliHelperPrms-useCli = true; // use gfsh for backup, validate disk store, compaction

hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/gfsh-dependencies.jar;
hydra.GemFirePrms-jmxManagerPort=true; // required to have hydra autogenerate a port
