hydra.Prms-testRequirement = "Test Gfsh help command";
hydra.Prms-testDescription = "Verify the output from help; verify there are no new commands or removed commands";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_3_locator.inc;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;    
THREADGROUP accessorThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost}
                                    * ${${A}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost}
                                    * ${${B}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP cliThreads
    totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost}
                                    * ${${C}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;

// Initialize locator(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_createLocator
         runMode      = always
         threadGroups = locatorThreads;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_startLocatorAndDS
         runMode      = always
         threadGroups = locatorThreads;

// log the BB
INITTASK taskClass  = management.test.cli.CommandBB
         taskMethod = HydraTask_logBB;

// Initialize the cli(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_initCLI
         threadGroups = cliThreads;

// Run the test(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_verifyOfflineHelpCommand
         threadGroups = cliThreads;

// Connect the cli(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_connectCLI
         threadGroups = cliThreads;

// Run the test(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_verifyOnlineHelpCommand
         threadGroups = cliThreads;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_verifyHelpForCommands
         threadGroups = cliThreads;

// Check for errors
CLOSETASK taskClass    = management.test.cli.CommandTest
          taskMethod   = HydraTask_checkForHelpErrors
          threadGroups = cliThreads;

ENDTASK  taskClass    = util.LogChecker  taskMethod = HydraTask_checkLogs;

hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/gfsh-dependencies.jar;

hydra.Prms-totalTaskTimeSec = 180;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
hydra.Prms-maxResultWaitSec = 900;

// gfsh connection/manager settings
hydra.GemFirePrms-jmxManagerPort=true; // required to have hydra autogenerate a port

util.AdminHelperPrms-alertListener = util.AlertLogListener;

