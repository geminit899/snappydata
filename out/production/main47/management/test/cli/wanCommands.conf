INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/management/test/federation/federationTopology_cli_wan.inc;
INCLUDE $JTESTS/management/operations/operations.inc;
INCLUDE $JTESTS/management/test/cli/inc/cliWan.inc;
INCLUDE $JTESTS/management/test/cli/inc/wanCommands.inc;
INCLUDE $JTESTS/management/test/cli/inc/wanRegionDefinitions.inc;

hydra.Prms-testDescription = 
  		"WANCommands : list gateway, start/stop/pause/resume/status gateway sender, start/status gateway receiver		
		";

hydra.GemFirePrms-remoteDistributedSystems =
	 none,
	 none,
     fcn "newWan.WANTest.generateRingRemoteDSName
          (\"ds_\", ${wanSites}, 1)" ncf     
     ;

											
hydra.RegionPrms-gatewaySenderNames = sender1, parallelSender1;													
		
//managed1 and managed2 group is gemfire cacheServer here                          
THREADGROUP bridgeThreads 
			totalThreads = fcn 
								(${managed_1_Hosts} + ${managed_2_Hosts})*${wanSites}
						   ncf 
			totalVms =     fcn 
								(${managed_1_Hosts} + ${managed_2_Hosts})*${wanSites}
						   ncf  
			clientNames =  fcn "management.util.HydraUtil.generateNamedDoubleSuffixedNames
                               (\"managed_1\", ${managed_1_Hosts}, ${wanSites},  \"${wanSiteNames}\", false, true)"
                           ncf
                           ,
                           fcn "management.util.HydraUtil.generateNamedDoubleSuffixedNames
                               (\"managed_2\", ${managed_2_Hosts}, ${wanSites},  \"${wanSiteNames}\", false, true)"
                           ncf
                          ;

    
INITTASK
  taskClass = management.test.cli.CLITest
  taskMethod = HydraInitTask_startWANSendersAndReceivers
  threadGroups = bridgeThreads
  runMode = always; 
  
     
INITTASK
  taskClass = management.test.cli.CLITest
  taskMethod = HydraInitTask_createRegionsOnBridge
  runMode = always
  threadGroups = bridgeThreads;  
    
TASK
  taskClass = management.test.cli.CLITest
  taskMethod = HydraTask_cliOps  
  threadGroups = cliThreads
  weight = 50
  ;
  
CLOSETASK
  taskClass = management.test.cli.CLITest
  taskMethod = HydraCloseTask_printEvents 
  threadGroups = cliThreads 
  ;

management.jmx.JMXPrms-sleepTimeFactor = 5;

management.cli.GfshPrms-commandList = 	"list gateways"  
										"status gateway-sender" 
										"status gateway-receiver"
										"start gateway-sender"
										"stop gateway-sender"
										"pause gateway-sender"
										"resume gateway-sender"
										"start gateway-receiver";										
									  
management.cli.GfshPrms-cliCommands = ONEOF "list gateways"  
											"status gateway-sender" 
											"status gateway-receiver"
											"start gateway-sender"
											"stop gateway-sender"
											"pause gateway-sender"
											"resume gateway-sender"
											"start gateway-receiver"																																	 
									  FOENO;
									  
									  
management.cli.GfshPrms-cliModes = ONEOF execCommandVerify FOENO;

management.cli.GfshPrms-regionListToStartWith = WANReplicatedAckBridge
												WANPartitionBridge
												WANReplicatedAckBridge
												WANPartitionCBridge
												WANReplicatedAckBridge
												WANPartitionCBridge
												WANReplicatedAckBridge
												WANPartitionCBridge;												
												
management.cli.GfshPrms-printEventsList = EVENT_REGION_ADDED EVENT_REGION_DESTROYED;
management.cli.GfshPrms-waitForGemfireTaskToComplete = true;
management.cli.GfshPrms-numCommandsToExecute = ${numCommands};
management.cli.GfshPrms-disconnectAfterEachTask = ONEOF true false FOENO;

management.operations.OperationPrms-entryOperations  = ONEOF add destroy remove FOENO;
management.operations.OperationPrms-upperThreshold = 50000;
management.operations.OperationPrms-lowerThreshold = 1000;


management.test.federation.FederationPrms-rmiConnectorType = custom;

hydra.CachePrms-names = cache1;
hydra.Prms-serialExecution  = true;
hydra.Prms-totalTaskTimeSec = 6000; // Test is stopped using Scheduling order
hydra.log.LogPrms-file_logLevel = fine;
