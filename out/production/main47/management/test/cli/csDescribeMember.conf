hydra.Prms-testRequirement = "Test Gfsh commands - describe member";
hydra.Prms-testDescription = "
Test Gfsh command - dscribe member...
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct_2_locator.inc;
INCLUDE $JTESTS/management/test/cli/regions.inc;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;
THREADGROUP serverBridgeThreads
  totalThreads = fcn
                 ${${A}bridgeHosts} * ${${A}bridgeVMsPerHost} * ${${A}bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"${A}bridge\", ${${A}bridgeHosts}, true)"
                 ncf;
THREADGROUP cliBridgeThreads
  totalThreads = fcn
                 ${${B}bridgeHosts} * ${${B}bridgeVMsPerHost} * ${${B}bridgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"${B}bridge\", ${${B}bridgeHosts}, true)"
                 ncf;
THREADGROUP edgeThreads
  totalThreads = fcn
                 ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)"
                 ncf;

// Initialize stop/start
INITTASK taskClass    = util.StopStartVMs
         taskMethod   = StopStart_initTask
         threadGroups = serverBridgeThreads,edgeThreads;

// Initialize locator(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_createLocator
         threadGroups = locatorThreads;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_startLocatorAndDS
         threadGroups = locatorThreads;

// Initialize bridge(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_initialize
         threadGroups = serverBridgeThreads;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_initializeRegions
         threadGroups = serverBridgeThreads;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_writeRegionNamesToBB
         threadGroups = serverBridgeThreads;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_createXmlFile
         threadGroups = serverBridgeThreads;

// Initialize edge(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_initializeClient
         management.test.cli.CommandPrms-createClientRegions = true
         threadGroups = edgeThreads;

// log the BB
INITTASK taskClass  = management.test.cli.CommandTest
         taskMethod = HydraTask_logBBs;

INITTASK taskClass  = management.test.cli.CommandTest
         taskMethod = HydraTask_sleep;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_initAndConnectCLI
         threadGroups = cliBridgeThreads;

// Run the test(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_regionTests
         threadGroups = cliBridgeThreads;

TASK taskClass     = management.test.cli.CommandTest
     taskMethod    = HydraTask_memberTests
     threadGroups  = cliBridgeThreads;

ENDTASK taskClass  = util.LogChecker
        taskMethod = HydraTask_checkLogs;

hydra.Prms-maxResultWaitSec = 900;
hydra.Prms-totalTaskTimeSec = 180;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names         = cache1;
hydra.CachePrms-searchTimeout = 600;

// define the bridge servers
hydra.BridgePrms-names = bridge;

// define the edge clients
hydra.PoolPrms-names                  = edgeDescript;
hydra.PoolPrms-minConnections         = 2;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = false;
hydra.PoolPrms-readTimeout            = 3600000; // hydra will hang first
hydra.PoolPrms-subscriptionRedundancy = 3;

hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/gfsh-dependencies.jar;

hydra.VmPrms-extraVMArgs     += fcn "hydra.TestConfigFcns.duplicateString(\"-Dgemfire.groups=locatorGroup\", ${locatorHosts}, true)" ncf
                              , fcn "hydra.TestConfigFcns.generateNamesString(\"-Dgemfire.groups=memberGroup,memberGroup\", ${serverbridgeHosts}, true)" ncf;

// gfsh connection/manager settings
hydra.GemFirePrms-jmxManagerPort=true; // required to have hydra autogenerate a port

management.test.cli.CommandPrms-createPersistentRegions = true;
management.test.cli.CommandPrms-haveAdminHosts          = false;
