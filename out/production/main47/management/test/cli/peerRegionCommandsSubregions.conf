hydra.Prms-testRequirement = "Test Gfsh command describe regions with subregions";
hydra.Prms-testDescription = "
Create a system with a variety of subregions and execute commands.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_4_locator.inc;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;    
THREADGROUP accessorThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost}
                                    * ${${A}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost}
                                    * ${${B}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP adminThreads
    totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost}
                                    * ${${C}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;
THREADGROUP cliThreads
    totalThreads = fcn ${${D}Hosts} * ${${D}VMsPerHost}
                                    * ${${D}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${D}\", ${${D}Hosts}, true)"
                   ncf;

// init stop/start
INITTASK taskClass    = util.StopStartVMs  taskMethod = StopStart_initTask
         threadGroups = dataStoreThreads, accessorThreads;

// init locators
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_createLocator
         runMode      = always
         threadGroups = locatorThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_startLocatorAndDS
         runMode      = always
         threadGroups = locatorThreads;

// initialize regions and managers
INITTASK taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_multiRegionInitialize
         threadGroups = dataStoreThreads
         runMode = always;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_writeRegionNamesToBB
         threadGroups = dataStoreThreads, accessorThreads;
INITTASK taskClass   = management.test.cli.CommandTest taskMethod = HydraTask_multiRegionAccessorInit
         threadGroups = accessorThreads
         runMode = always;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_initAndConnectCLI
         threadGroups = cliThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_createXmlFile
         threadGroups = dataStoreThreads, accessorThreads;
INITTASK taskClass = management.test.cli.CommandBB taskMethod = HydraTask_logBB
         runMode   = always;
INITTASK taskClass = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
         threadGroups = adminThreads;

// load data into regions
INITTASK taskClass = management.test.cli.CommandTest taskMethod = HydraTask_load
         batch
         management.test.cli.CommandPrms-numToLoadEachRegion=100
         threadGroups = dataStoreThreads, accessorThreads;


TASK     taskClass     = management.test.cli.CommandTest taskMethod = HydraTask_regionCommands
         threadGroups = cliThreads;
TASK     taskClass     = management.test.cli.Operations taskMethod = HydraTask_doOperations
         threadGroups = dataStoreThreads, accessorThreads;

ENDTASK  taskClass    = util.LogChecker  taskMethod = HydraTask_checkLogs;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;

hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/gfsh-dependencies.jar;

hydra.Prms-totalTaskTimeSec = 300;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
hydra.Prms-maxResultWaitSec = 1200; // for slower solaris machines

hydra.RegionPrms-names              =
                                      pr
                                      prOverflow
                                      prPersist
                                      prPersistOverflow

                                      replicate
                                      replicateOverflow
                                      replicatePersist
                                      replicatePersistOverflow;
hydra.RegionPrms-dataPolicy         =
                                      partitioned partitioned persistentPartition persistentPartition
                                      replicate replicate persistentReplicate persistentReplicate;
hydra.RegionPrms-scope              =
                                      default default default default
                                      ONEOF ack noAck FOENO
                                      ONEOF ack noAck FOENO
                                      ONEOF ack noAck FOENO
                                      ONEOF ack noAck FOENO;
hydra.RegionPrms-cacheListeners     = util.SummaryLogListener
                                      event.LogListener
                                      util.SilenceListener;
hydra.RegionPrms-partitionName      =
                                      pr pr pr pr
                                      none none none none;
// fool hydra; diskStore names will be randomly chosen at runtime from hydra.DiskStorePrms.names, but hydra requires
// it get defined here anyway
hydra.RegionPrms-diskStoreName      =
                                      none notUsed notUsed notUsed
                                      none notUsed notUsed notUsed;
hydra.RegionPrms-evictionAttributes =
                                      none, lruEntryCount 50 overflowToDisk, none, lruEntryCount 50 overflowToDisk,
                                      none, lruEntryCount 50 overflowToDisk, none, lruEntryCount 50 overflowToDisk;
hydra.RegionPrms-diskSynchronous    = ONEOF true false FOENO;

hydra.PartitionPrms-names = pr;
hydra.PartitionPrms-redundantCopies = ONEOF 1 2 3 FOENO;

diskRecovery.RecoveryPrms-numRootRegions = 2;
diskRecovery.RecoveryPrms-numSubregions = 2;
diskRecovery.RecoveryPrms-regionHierarchyDepth = 6;

//hydra.DiskStorePrms-names = ds1 ds2 .... dsN;
// note the notUsed diskStoreName is used to fool hydra; diskStores are specified programmatically in the test code
hydra.DiskStorePrms-names = notUsed fcn "hydra.TestConfigFcns.generateNames(\"ds\", \"${numDiskStores}\", false)" ncf;
hydra.DiskStorePrms-autoCompact          = true;
hydra.DiskStorePrms-allowForceCompaction = ONEOF true false FOENO;
hydra.DiskStorePrms-compactionThreshold  = RANGE 0 100 EGNAR;
hydra.DiskStorePrms-diskDirNum           = RANGE 1 10 EGNAR;
hydra.DiskStorePrms-diskDirSizes         = RANGE 35 50 EGNAR;
hydra.DiskStorePrms-maxOplogSize         = RANGE 4 10 EGNAR;
hydra.DiskStorePrms-queueSize            = RANGE 1 1000 EGNAR;
hydra.DiskStorePrms-timeInterval         = RANGE 1 3000 EGNAR;
hydra.DiskStorePrms-writeBufferSize      = RANGE 1000 50000 EGNAR;

util.ValueHolderPrms-useExtraObject=false;

// gfsh connection/manager settings
hydra.GemFirePrms-jmxManagerPort=true; // required to have hydra autogenerate a port

util.AdminHelperPrms-alertListener = util.AlertLogListener;

util.OperationsClientPrms-entryOperations = ONEOF add add getNew getNew update update update invalidate get destroy replace remove FOENO;
util.OperationsClientPrms-upperThreshold = 100;
util.OperationsClientPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
util.OperationsClientPrms-lowerThreshold = 50;
util.OperationsClientPrms-lowerThresholdOperations = add ;
util.TestHelperPrms-minTaskGranularitySec = 10; // length of ops per region
