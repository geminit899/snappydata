hydra.Prms-testRequirement = "Test Gfsh commands";
hydra.Prms-testDescription = "
Test Gfsh commands...
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_3_locator.inc;
INCLUDE $JTESTS/management/test/cli/regions.inc;

THREADGROUP locatorThreads
            totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\", ${locatorHosts}, true)" ncf;

THREADGROUP peerThreads
            totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\", ${${A}Hosts}, true)" ncf;

THREADGROUP adminThreads
            totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

THREADGROUP cliThreads
            totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${C}\", ${${C}Hosts}, true)" ncf;

// Initialize stop/start
INITTASK taskClass    = util.StopStartVMs
         taskMethod   = StopStart_initTask
         threadGroups = peerThreads;

// Initialize locator(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_createLocator
         threadGroups = locatorThreads;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_startLocatorAndDS
         threadGroups = locatorThreads;

// Initialize peer(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_initialize
         threadGroups = peerThreads;

// Initialize the admin(s)
INITTASK taskClass    = util.AdminHelper
         taskMethod   = HydraTask_initializeAdminDS
         threadGroups = adminThreads;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_writeRegionNamesToBB
         threadGroups = peerThreads;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_createXmlFile
         threadGroups = peerThreads;

// Initialize the admin(s)
INITTASK taskClass    = util.AdminHelper
         taskMethod   = HydraTask_initializeAdminDS
         threadGroups = adminThreads;

// Initialize the cli(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_initCLI
         threadGroups = cliThreads;

// Connect the cli(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_connectCLI
         threadGroups = cliThreads;

// initialize the regions
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_configurableInit
         runMode      = always
         management.test.cli.CommandPrms-numMembersJoinDSOnly=${numMembersJoinDSOnly}
         management.test.cli.CommandPrms-numMembersCreateCacheOnly=${numMembersCreateCacheOnly}
         threadGroups = peerThreads;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_writeRegionNamesToBB
         threadGroups = peerThreads;

INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_createXmlFile
         threadGroups = peerThreads;

// log the BB
INITTASK taskClass  = management.test.cli.CommandBB
         taskMethod = HydraTask_logBB;

// load data into regions
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_load
         batch
         threadGroups = peerThreads
         management.test.cli.CommandPrms-numToLoadEachRegion = 100;

// Run the test(s)
INITTASK taskClass    = management.test.cli.CommandTest
         taskMethod   = HydraTask_createIndexTest
         threadGroups = cliThreads;

// Check for errors
//CLOSETASK taskClass    = management.test.cli.CommandTest
//          taskMethod   = HydraTask_checkForCommandErrors
//          threadGroups = cliThreads;

ENDTASK taskClass  = util.LogChecker
        taskMethod = HydraTask_checkLogs;

hydra.Prms-maxResultWaitSec = 900;
hydra.Prms-totalTaskTimeSec = 3600; // test is workload based
hydra.Prms-serialExecution  = true;
hydra.Prms-roundRobin       = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names         = cache1;
hydra.CachePrms-searchTimeout = 600;

hydra.RegionPrms-poolName = none; // override pool settings in regions.inc

hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/gfsh-dependencies.jar;
hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/antlr.jar;
hydra.VmPrms-extraVMArgs     += fcn "hydra.TestConfigFcns.duplicateString(\"-Dgemfire.groups=locatorGroup\", ${locatorHosts}, true)" ncf
                              , fcn "hydra.TestConfigFcns.generateNamesString(\"-Dgemfire.groups=memberGroup,memberGroup\", ${${A}Hosts}, true)" ncf
                              , "-Dgemfire.groups=adminGroup";

management.test.cli.CommandPrms-createPersistentRegions = true;
management.test.cli.CommandPrms-haveAdminHosts          = true;
util.AdminHelperPrms-alertListener  = util.AlertLogListener;
util.ValueHolderPrms-useExtraObject = false;

// gfsh connection/manager settings
hydra.GemFirePrms-jmxManagerPort=true; // required to have hydra autogenerate a port
