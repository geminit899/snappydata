INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/management/test/federation/federationTopology_cli.inc;
INCLUDE $JTESTS/management/operations/operations.inc;
INCLUDE $JTESTS/management/test/cli/inc/cli.inc;
INCLUDE $JTESTS/management/operations/regionDefinitions.inc;

hydra.Prms-testDescription = "tests function commands : destroy function";
		
//managed1 and managed2 group is gemfire cacheServer here                          
THREADGROUP bridgeThreads 
			totalThreads = fcn 
								${managed_1_Hosts} + ${managed_2_Hosts}  
						   ncf 
			totalVms =     fcn 
								${managed_1_Hosts} + ${managed_2_Hosts}
						   ncf  
			clientNames =  fcn "hydra.TestConfigFcns.generateNames
                               (\"managed_1\", ${managed_1_Hosts}, true)"
                           ncf
                           ,
                           fcn "hydra.TestConfigFcns.generateNames
                               (\"managed_2\", ${managed_2_Hosts}, true)"
                           ncf
                          ;
  
INITTASK
  taskClass = management.test.cli.CLITest
  taskMethod = HydraInitTask_createRegionsOnBridge
  runMode = always
  threadGroups = bridgeThreads
  ;	
  
INITTASK
  taskClass = management.test.cli.CLITest
  taskMethod = HydraInitTask_registerFunctions
  runMode = always
  threadGroups = bridgeThreads, managingThreads
  ; 
    
TASK
  taskClass = management.test.cli.CLITest
  taskMethod = HydraTask_cliOps  
  threadGroups = cliThreads
  weight = 50
  ;
  
CLOSETASK
  taskClass = management.test.cli.CLITest
  taskMethod = HydraCloseTask_printEvents 
  threadGroups = cliThreads 
  ;
  

//Removed following mode because it needs input from Tgfsh which is diffcult to add. Needs support from Executor Framework  
//,
//	    		{
//	    			'name' : 'on-all-members',
//	    			'mandatoryOptions': [],
//	    			'options': []
//	    		}  
management.cli.GfshPrms-commandSpec += "{
    'command': 'destroy function',
    'executor': 'management.operations.ops.cli.executors.DestroyFunctionExecutor',
    'arguments' : [    	
    ],
    'modes' : [
        		{
	    			'name' : 'on-group',
	    			'mandatoryOptions': [ 'group'],
	    			'options': []
	    		},
	    		{
	    			'name' : 'member',
	    			'mandatoryOptions': [ 'member'],
	    			'options': []
	    		}		    
    ],    
    'mandatoryOptions': ['id'],
    'options': []
}";


management.jmx.JMXPrms-sleepTimeFactor = 5;

management.cli.GfshPrms-commandList = "destroy function" ;
management.cli.GfshPrms-cliModes = ONEOF execCommandVerify FOENO;
management.cli.GfshPrms-cliCommands = ONEOF "destroy function" FOENO;
management.cli.GfshPrms-regionListToStartWith = PartitionBridge PartitionBridge PartitionBridge PartitionBridge; //4 regions
management.cli.GfshPrms-printEventsList = EVENT_FUNCT_REGISTER EVENT_FUNCT_EXEC;
management.cli.GfshPrms-waitForGemfireTaskToComplete = true;
management.cli.GfshPrms-numCommandsToExecute = ${numCommands};
management.cli.GfshPrms-disconnectAfterEachTask = ONEOF true false FOENO;

management.operations.OperationPrms-regionList = PartitionBridge;
management.operations.OperationPrms-entryOperations  = ONEOF add destroy remove FOENO;
management.operations.OperationPrms-upperThreshold = 50000;
management.operations.OperationPrms-lowerThreshold = 1000;
management.operations.OperationPrms-functionOps = ONEOF register exec exec exec exec exec FOENO;
management.operations.OperationPrms-functionRegisterList = 	group member region 
															group-with-arguments 
															member-with-arguments 
															region-with-arguments 
															group-with-arguments-with-result-collector 
															member-with-arguments-with-result-collector 
															region-with-arguments-with-result-collector 
															group-with-arguments-with-result-collector-with-filter 
															member-with-arguments-with-result-collector-with-filter 
															region-with-arguments-with-result-collector-with-filter
															group-with-arguments-with-filter 
															member-with-arguments-with-filter 
															region-with-arguments-with-filter
															group-with-filter member-with-filter 
															region-with-filter;

management.test.federation.FederationPrms-rmiConnectorType = custom;

hydra.CachePrms-names = cache1;
hydra.Prms-serialExecution  = true;
hydra.Prms-totalTaskTimeSec = 6000; // Test is stopped using Scheduling order

hydra.log.LogPrms-file_logLevel = fine;
