hydra.Prms-testRequirement = "Test Gfsh commands to create async event queue, create disk store and list async event queue";
hydra.Prms-testDescription = "
This test is test the create async event queue and disk store with the only mandatory options.
It will require all peers to start on different host and will have different dir for each host.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_3_locator.inc;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;    
THREADGROUP peerThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost}
                                    * ${${A}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP adminThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost}
                                    * ${${B}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP cliThreads
    totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost}
                                    * ${${C}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;

INITTASK taskClass    = util.StopStartVMs  taskMethod = StopStart_initTask
         threadGroups = peerThreads;

// init locators
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_createLocator
         runMode      = always
         threadGroups = locatorThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_startLocatorAndDS
         runMode      = always
         threadGroups = locatorThreads;

// init members
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_initialize
         runMode      = always
         threadGroups = peerThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod   = HydraTask_initializeRegions
         runMode      = always
         threadGroups = peerThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_createXmlFile
         threadGroups = peerThreads;
INITTASK taskClass = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
         threadGroups = adminThreads;

INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_logBBs;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_initAndConnectCLI
         threadGroups = cliThreads;

// async event queue test
TASK taskClass        = management.test.cli.CommandTest
         taskMethod   = HydraTask_testAsyncEventQueueCommands
         threadGroups = cliThreads;
         //maxTimesToRun = 1;

// disk store test
TASK taskClass        = management.test.cli.CommandTest
         taskMethod   = HydraTask_testCreateDiskStoreCommands
         threadGroups = cliThreads;
         //maxTimesToRun = 1;

ENDTASK  taskClass    = util.LogChecker  taskMethod = HydraTask_checkLogs;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;

hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/gfsh-dependencies.jar;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-serialExecution = true;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
hydra.Prms-maxResultWaitSec = 900;

INCLUDE $JTESTS/management/test/cli/regions.inc;
hydra.RegionPrms-poolName           = none; // override pool settings in regions.inc

util.ValueHolderPrms-useExtraObject=false;

util.AdminHelperPrms-alertListener = util.AlertLogListener;

// gfsh connection/manager settings
hydra.GemFirePrms-jmxManagerPort=true; // required to have hydra autogenerate a port

// this makes the test create dir into separate directories and requires a multi-host test
hydra.HostPrms-userDirs =
$PWD/hostDir1 $PWD/hostDir2 $PWD/hostDir3 $PWD/hostDir4 $PWD/hostDir5
$PWD/hostDir1 $PWD/hostDir2 $PWD/hostDir3 $PWD/hostDir4 $PWD/hostDir5
$PWD/hostDir1 $PWD/hostDir2 $PWD/hostDir3 $PWD/hostDir4 $PWD/hostDir5; 
