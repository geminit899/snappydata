hydra.Prms-testRequirement = "Run backup, compaction, validate disk store with gfsh";
hydra.Prms-testDescription = "
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2_locator.inc;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;    
THREADGROUP peerThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP cliThread
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

// init locators 
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_createLocator
         runMode      = always
         threadGroups = locatorThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_startLocatorAndDS
         runMode      = always
         threadGroups = locatorThreads;

INITTASK taskClass   = parReg.ParRegTest  taskMethod = HydraTask_initialize
         threadGroups = peerThreads;

// prepare for end task recovery
INITTASK    taskClass   = parReg.ParRegTest  taskMethod = HydraTask_writeDiskDirsToBB
            runMode = once
            threadGroups = peerThreads;

// each thread is also an admin vm so it can potentially call online backup
INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
            threadGroups = peerThreads;

INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_logBBs
         threadGroups = peerThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_initAndConnectCLI
         threadGroups = cliThread;

// this polls the blackboard for commands that were placed there by HydraTask_doConcOpsAndVerify
TASK     taskClass   = util.CliHelper taskMethod = HydraTask_execCommandFromBB
         threadGroups = cliThread;

TASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_doConcOpsAndVerify
         threadGroups = peerThreads;

CLOSETASK taskClass   = parReg.ParRegTest  taskMethod = HydraTask_prepareForValidation
          threadGroups = peerThreads;

CLOSETASK taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
          threadGroups = peerThreads;

CLOSETASK   taskClass   = parReg.ParRegTest  taskMethod = HydraTask_validatePR
         threadGroups = peerThreads;

// reinit the locators in the new end task jvms; the old ones were stopped at the end of the close tasks
ENDTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_createLocator
         clientNames = locator1;
ENDTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_startLocatorAndDS
         clientNames = locator1;

// @todo lynn hydra array index out of bounds on blackboard shared counter access; reenable after fix from lise
INCLUDE $JTESTS/management/test/cli/parReg/peerEndTasks.inc;

ENDTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_disconnect
            clientNames = fcn "hydra.TestConfigFcns.generateNames(\"peer\", (${peerHosts} * ${peerVMsPerHost}), true)" ncf;
ENDTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_restoreBackups
            clientNames = fcn "hydra.TestConfigFcns.generateNames(\"peer\", (${peerHosts} * ${peerVMsPerHost}), true)" ncf
                          parReg.ParRegPrms-recoverFromDisk = true;

ENDTASK     taskClass   = parReg.ParRegTest  taskMethod = HydraTask_disconnect
            clientNames = fcn "hydra.TestConfigFcns.generateNames(\"peer\", (${peerHosts} * ${peerVMsPerHost}), true)" ncf;
ENDTASK  taskClass    = util.LogChecker  taskMethod = HydraTask_checkLogs;

hydra.GemFirePrms-stopSystemsAfterTest = true;

// parReg.ParRegPrms-secondsToRun determines the running length rather than 
// totalTaskTimeSec because of the test's pausing scheme; without this the
// test could hang 
hydra.Prms-totalTaskTimeSec = 31536000;  
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 50 100 500 1000 2500 5000 FOENO;

util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names          = clientRegion;
hydra.RegionPrms-regionName     = partitionedRegion;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = pr;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = ONEOF 15 30 45 60 FOENO;

// lynn - local destroy not supported for partitioned regions for Congo
// lynn - local invalidate not supported for partitioned regions for Congo
// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
parReg.ParRegPrms-entryOperations = ONEOF add getNew putIfAbsent update invalidate get destroy 
                                          add getNew putIfAbsent remove replaceNoInval replaceOldNoInval FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThreshold = 10;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsentAsCreate FOENO;

// recover from disk and validate recovery
parReg.ParRegPrms-secondsToRun = 900;
parReg.ParRegPrms-doOnlineBackup = true;

hydra.RegionPrms-dataPolicy     = persistentPartition;
hydra.RegionPrms-diskStoreName   = diskStore1;
hydra.RegionPrms-diskSynchronous = oneof true false foeno;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-queueSize = ONEOF 1 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 1 10 50 500 1000 2000 foeno;
hydra.DiskStorePrms-autoCompact=false;

util.AdminHelperPrms-adminInDsVm=true;

util.CliHelperPrms-useCli = true; // use gfsh for backup, validate disk store, compaction

management.test.cli.CommandPrms-commandWaitSec = 120;

hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/gfsh-dependencies.jar;
hydra.GemFirePrms-jmxManagerPort=true; // required to have hydra autogenerate a port


