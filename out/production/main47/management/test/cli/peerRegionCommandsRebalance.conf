hydra.Prms-testRequirement = "Test Gfsh command describe region while rebalancing and members stop/start";
hydra.Prms-testDescription = "
Create a system with a variety of regions. While executing region operations, stop/start some members while
rebalacing. Stopping and starting members will cause rebalance to have work to do.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_4_locator.inc;

THREADGROUP locatorThreads
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost}
                                       * ${locatorThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"locator\", ${locatorHosts}, true)"
                   ncf;    
THREADGROUP accessorThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost}
                                    * ${${A}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost}
                                    * ${${B}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP adminThreads
    totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost}
                                    * ${${C}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;
THREADGROUP cliThreads
    totalThreads = fcn ${${D}Hosts} * ${${D}VMsPerHost}
                                    * ${${D}ThreadsPerVM}
                   ncf     
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${D}\", ${${D}Hosts}, true)"
                   ncf;

// init stop/start
INITTASK taskClass    = util.StopStartVMs  taskMethod = StopStart_initTask
         threadGroups = dataStoreThreads, accessorThreads;

// init locators
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_createLocator
         runMode      = always
         threadGroups = locatorThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_startLocatorAndDS
         runMode      = always
         threadGroups = locatorThreads;

// init dataStores, accessors
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_configurableInit
         runMode      = always
         management.test.cli.CommandPrms-numMembersJoinDSOnly=${numMembersJoinDSOnly}
         management.test.cli.CommandPrms-numMembersCreateCacheOnly=${numMembersCreateCacheOnly}
         threadGroups = dataStoreThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_configurableInit
         management.test.cli.CommandPrms-createProxyRegions=true 
         runMode      = always
         threadGroups = accessorThreads;

// init for cli usage
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_initAndConnectCLI
         threadGroups = cliThreads;

// other initialization
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_writeRegionNamesToBB
         threadGroups = dataStoreThreads, accessorThreads;
INITTASK taskClass    = management.test.cli.CommandTest taskMethod = HydraTask_createXmlFile
         threadGroups = dataStoreThreads, accessorThreads;
INITTASK taskClass = management.test.cli.CommandBB taskMethod = HydraTask_logBB
         runMode   = always;
INITTASK taskClass = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
         threadGroups = adminThreads;

// load data into regions
INITTASK taskClass = management.test.cli.CommandTest taskMethod = HydraTask_load
         batch
         management.test.cli.CommandPrms-numToLoadEachRegion=100
         threadGroups = dataStoreThreads, accessorThreads;

TASK     taskClass     = management.test.cli.CommandTest taskMethod = HydraTask_rebalanceController
         threadGroups = cliThreads
         maxThreads = 1;
TASK     taskClass     = management.test.cli.CommandTest taskMethod = HydraTask_regionCommands
         threadGroups = cliThreads;
TASK     taskClass     = management.test.cli.Operations taskMethod = HydraTask_doOperations
         threadGroups = dataStoreThreads, accessorThreads;

ENDTASK  taskClass    = util.LogChecker  taskMethod = HydraTask_checkLogs;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT FOENO;

hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/gfsh-dependencies.jar;

hydra.Prms-totalTaskTimeSec = 900;

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
hydra.Prms-maxResultWaitSec = 1800; // large because the rebalance task does 2 rebalances with stop start

util.ValueHolderPrms-useExtraObject=true;
INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 10 100 500 1000 5000 10000 25000 FOENO;

INCLUDE $JTESTS/management/test/cli/regions.inc;
hydra.RegionPrms-poolName           = none; // override pool settings in regions.inc

management.test.cli.CommandPrms-createPersistentRegions = true;
management.test.cli.CommandPrms-numToStop = ${redundantCopies};
management.test.cli.CommandPrms-commandWaitSec = 900;

// gfsh connection/manager settings
hydra.GemFirePrms-jmxManagerPort=true; // required to have hydra autogenerate a port

util.AdminHelperPrms-alertListener = util.AlertLogListener;

util.OperationsClientPrms-entryOperations = ONEOF add add getNew getNew update update update invalidate get destroy replace remove FOENO;
util.OperationsClientPrms-upperThreshold = 100;
util.OperationsClientPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
util.OperationsClientPrms-lowerThreshold = 50;
util.OperationsClientPrms-lowerThresholdOperations = add ;
util.TestHelperPrms-minTaskGranularitySec = 10; // length of ops per region
