INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/management/test/federation/federationTopology_cli.inc;
INCLUDE $JTESTS/management/operations/operations.inc;
INCLUDE $JTESTS/management/test/cli/inc/cli.inc;
INCLUDE $JTESTS/management/test/cli/inc/dataRegions.inc;

hydra.Prms-testDescription = "tests data commands : locate entry get remove put use region";
		
//managed1 and managed2 group is gemfire cacheServer here                          
THREADGROUP bridgeThreads 
			totalThreads = fcn 
								(${managed_1_ThreadsPerVM} - 1) + (${managed_2_ThreadsPerVM} - 1) 
						   ncf 
			totalVms =     fcn 
								${managed_1_Hosts} + ${managed_2_Hosts}  
						   ncf  
			clientNames =  fcn "hydra.TestConfigFcns.generateNames
                               (\"managed_1\", ${managed_1_Hosts}, true)"
                           ncf
                           ,
                           fcn "hydra.TestConfigFcns.generateNames
                               (\"managed_2\", ${managed_2_Hosts}, true)"
                           ncf                                                 
                          ;
  
INITTASK
  taskClass = management.test.cli.CLITest
  taskMethod = HydraInitTask_createDataRegions
  runMode = always
  threadGroups = bridgeThreads
  ;
 
//TASK
//  taskClass = management.test.cli.CLITest
//  taskMethod = HydraTask_gemfireOps  
//  threadGroups = bridgeThreads 
//  weight = 100
//  ;
    
TASK
  taskClass = management.test.cli.CLITest
  taskMethod = HydraTask_cliOps  
  threadGroups = cliThreads
  weight = 50
  ;
  
CLOSETASK
  taskClass = management.test.cli.CLITest
  taskMethod = HydraCloseTask_printEvents 
  threadGroups = cliThreads 
  ;
  
management.cli.GfshPrms-commandSpec += "{
    'command': 'get',
    'executor': 'management.operations.ops.cli.executors.GetExecutor',
    'arguments' : [    	
    ],
    'modes' : [
        		{
	    			'name' : 'stringkeyValue',
	    			'mandatoryOptions': [ ],
	    			'options': []
	    		},
	    		{
	    			'name' : 'jsonkeyValue',
	    			'mandatoryOptions': [ 'key-class' , 'value-class'],
	    			'options': []
	    		}	    
    ],    
    'mandatoryOptions': ['key' , 'region'],
    'options': []
}";


management.cli.GfshPrms-commandSpec += "{
    'command': 'locate entry',
    'executor': 'management.operations.ops.cli.executors.LocateEntryExecutor',
    'arguments' : [    	
    ],
    'modes' : [
        		{
	    			'name' : 'stringkeyValue',
	    			'mandatoryOptions': [ ],
	    			'options': []
	    		},
	    		{
	    			'name' : 'jsonkeyValue',
	    			'mandatoryOptions': [ 'key-class' , 'value-class'],
	    			'options': []
	    		},
	    		{
	    			'name' : 'stringkeyValue-recursive',
	    			'mandatoryOptions': [ ],
	    			'options': [
		    			{
					    		'name' : 'recursive',
					    		'probability' : 67	     		
					    }
				    ]
	    		}	    
    ],    
    'mandatoryOptions': ['key' , 'region'],
    'options': []
}";

management.cli.GfshPrms-commandSpec += "{
    'command': 'remove',
    'executor': 'management.operations.ops.cli.executors.RemoveExecutor',
    'arguments' : [    	
    ],
    'modes' : [
        		{
	    			'name' : 'one-key',
	    			'mandatoryOptions': ['key'],
	    			'options': []
	    		},
	    		{
	    			'name' : 'all-remove',
	    			'mandatoryOptions': [ ],
	    			'options': [],
	    			'arguments' : ['ALL']
	    		},
	    		{
	    			'name' : 'one-key-json',
	    			'mandatoryOptions': ['key', 'key-class'],
	    			'options': []
	    		}    
    ],    
    'mandatoryOptions': ['region'],
    'options': []
}";


management.cli.GfshPrms-commandSpec += "{
    'command': 'put',
    'executor': 'management.operations.ops.cli.executors.PutExecutor',
    'arguments' : [    	
    ],
    'modes' : [
        		{
	    			'name' : 'stringkeyValue',
	    			'mandatoryOptions': [ ],
	    			'options': []
	    		},
	    		{
	    			'name' : 'jsonkeyValue',
	    			'mandatoryOptions': [ 'key', 'key-class' , 'value-class'],
	    			'options': []
	    		}
    ],    
    'mandatoryOptions': ['key', 'region', 'value'],
    'options': [
    	{
    		'name' : 'skip-if-exists',
    		'probability' : 67	     		
    	}
     ]
}";

management.jmx.JMXPrms-sleepTimeFactor = 5;

management.cli.GfshPrms-commandList = "get" "put" "remove" "locate entry";
management.cli.GfshPrms-cliModes = ONEOF execCommandVerify FOENO;
management.cli.GfshPrms-cliCommands = ONEOF "get" "put" "remove" "locate entry" FOENO;
management.cli.GfshPrms-printEventsList = EVENT_REGION_ADDED EVENT_REGION_DESTROYED;
management.cli.GfshPrms-waitForGemfireTaskToComplete = true;
management.cli.GfshPrms-numCommandsToExecute = ${numCommands};
management.cli.GfshPrms-disconnectAfterEachTask = ONEOF true false FOENO; 
management.cli.GfshPrms-regionHierarchyWidth = 3;
management.cli.GfshPrms-regionHierarchyHeight = 3;

management.operations.OperationPrms-entryOperations  = ONEOF add destroy remove FOENO;
management.operations.OperationPrms-upperThreshold = 50000;
management.operations.OperationPrms-lowerThreshold = 1000;

management.test.federation.FederationPrms-rmiConnectorType = custom;

hydra.CachePrms-names = cache1;
hydra.Prms-serialExecution  = true;
hydra.Prms-totalTaskTimeSec = 6000; // Test is stopped using Scheduling order

hydra.log.LogPrms-file_logLevel = fine;
hydra.GemFirePrms-logLevel = fine;
	