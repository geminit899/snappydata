INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/management/test/federation/federationTopology_wan.inc;
INCLUDE $JTESTS/management/test/jmx/inc/jmxWan.inc;
INCLUDE $JTESTS/management/operations/operations.inc;
INCLUDE $JTESTS/management/test/jmx/inc/wanRegionDefinitions.inc;

hydra.Prms-testDescription = 
  "Builds jmx resources for testing out Pulse WebApplication";


THREADGROUP locatorThreads
			totalThreads = fcn 
								(${locator_VMsPerHost}*${locatorHostsPerSite}*${wanSites}) 
						   ncf 
			totalVms =     fcn 
								(${locator_VMsPerHost}*${locatorHostsPerSite}*${wanSites}) 
						   ncf  
			clientNames =  fcn "management.util.HydraUtil.generateNamedDoubleSuffixedNames
                                     (\"locator_managing_1\", ${locatorHostsPerSite}, ${wanSites}, \"${wanSiteNames}\", false, true)"
                           ncf                        
                          ;


//managed1 group is gemfire cacheServer here                          
THREADGROUP bridgeThreads 
			totalThreads = fcn 
								((${managed_1_Hosts})*${wanSites}) 
						   ncf 
			totalVms =     fcn 
								((${managed_1_Hosts})*${wanSites}) 
						   ncf  
			clientNames =  fcn "management.util.HydraUtil.generateNamedDoubleSuffixedNames
                                     (\"managed_1\", ${managed_1_Hosts}, ${wanSites},  \"${wanSiteNames}\", false, true)"
                           ncf                         
                          ;
                                                    
THREADGROUP peerThreads 
			totalThreads = fcn 
								((${managed_2_Hosts})*${wanSites}) 
						   ncf 
			totalVms =     fcn 
								((${managed_2_Hosts})*${wanSites}) 
						   ncf  
			clientNames =  fcn "management.util.HydraUtil.generateNamedDoubleSuffixedNames
                                     (\"managed_2\", ${managed_2_Hosts}, ${wanSites},  \"${wanSiteNames}\", false, true)"
                           ncf                       
                          ;                          
                          
//THREADGROUP edgeThreads 
//			totalThreads = fcn 
//								(${edge_Hosts}) 
//						   ncf 
//			totalVms = ${edge_Hosts}  
//			clientNames = fcn "hydra.TestConfigFcns.generateNames
//                               (\"edge\", ${edge_Hosts}, true)"
//                          ncf; 
                          
                          
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_startLocator
  runMode = always
  threadGroups = locatorThreads;                            

INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_initialize
  runMode = always
  threadGroups = default, jmxThreads;
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_becomeManager
  threadGroups = managingThreads
  runMode = always;
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_setUpJMXListeners
  runMode = always
  threadGroups = managingThreads, jmxThreads;    
    
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_startWANSendersAndReceivers
  threadGroups = bridgeThreads, peerThreads
  runMode = always;  
                          
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_startWithBridgeServer
  runMode = always
  threadGroups = bridgeThreads;

INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_createRegionsOnBridge
  runMode = always
  threadGroups = bridgeThreads, peerThreads;
  
//INITTASK
//  taskClass = management.test.jmx.JMXTest
//  taskMethod = HydraInitTask_createRegionsOnEdge
//  runMode = always
//  threadGroups = edgeThreads;
  
//INITTASK
//  taskClass = management.test.jmx.JMXTest
//  taskMethod = HydraInitTask_createQueryResources
//  runMode = always
//  threadGroups = bridgeThreads;

//edgeThreads,  
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_createLockServiceInstances
  runMode = always
  threadGroups = bridgeThreads;

TASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraTask_jmxOperations
  maxTimesToRun = ${jmxIterations}
  threadGroups = jmxThreads
  ;  
  
management.jmx.JMXPrms-mbeanSpec += "{
	'class' : 'com.gemstone.gemfire.management.MemberMXBean',
	'templateObjectName' : 'GemFire:type=Member',
	'type' : 'pulse',	
	'tests' : [
		'pulseTest'		
	]
}";   


hydra.GemFirePrms-statisticSamplingEnabled = true;

management.jmx.JMXPrms-sleepTimeFactor = 5;
management.jmx.JMXPrms-regionListToStartWith = WANReplicatedAckBridge WANPartitionBridge;
management.jmx.JMXPrms-printEventsList = EVENT_REGION_ADDED EVENT_REGION_DESTROYED;

management.jmx.JMXPrms-lockServicesToStartWith = 5;

management.operations.OperationPrms-regionList = WANReplicatedAckBridge WANPartitionBridge;
management.operations.OperationPrms-entryOperations  = ONEOF add invalidate destroy putIfAbsent remove FOENO;

hydra.BridgePrms-names = managed_gemfire_bridge;	                      
hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

management.test.federation.FederationPrms-rmiConnectorType = custom;

hydra.log.LogPrms-file_logLevel = fine;
//hydra.GemFirePrms-logLevel = fine;
hydra.CachePrms-names = cache1;
hydra.Prms-serialExecution  = true;
hydra.Prms-totalTaskTimeSec = ${duration};