INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/management/test/federation/federationTopology_wan.inc;
INCLUDE $JTESTS/management/test/jmx/inc/jmxWan.inc;
INCLUDE $JTESTS/management/operations/operations.inc;
INCLUDE $JTESTS/management/test/jmx/inc/wanRegionDefinitions.inc;

management.jmx.JMXPrms-mbeanSpec += "{
	'class' : 'com.gemstone.gemfire.management.GatewaySenderMXBean',
	'templateObjectName' : 'GemFire:service=GatewaySender',
	'type' : 'gatewaySender',	
	'tests' : [
		'checkSenderConfig',
		'checkSenderRuntime',
		'checkSenderStatistics',
	]
}";


management.jmx.JMXPrms-mbeanSpec += "{
	'class' : 'com.gemstone.gemfire.management.GatewayReceiverMXBean',
	'templateObjectName' : 'GemFire:service=GatewayReceiver',
	'type' : 'gatewayReceiver',	
	'tests' : [
		'checkReceiverConfig',
		'checkReceiverStatistics',
	]
}"; 

management.jmx.JMXPrms-mbeanSpec += "{
	'class' : 'com.gemstone.gemfire.management.MemberMXBean',
	'templateObjectName' : 'GemFire:type=Member',
	'type' : 'member',	
	'tests' : [
		'checkWANResources'
	]	
}";


THREADGROUP locatorThreads
			totalThreads = fcn 
								(${locator_VMsPerHost}*${locatorHostsPerSite}*${wanSites}) 
						   ncf 
			totalVms =     fcn 
								(${locator_VMsPerHost}*${locatorHostsPerSite}*${wanSites}) 
						   ncf  
			clientNames =  fcn "management.util.HydraUtil.generateNamedDoubleSuffixedNames
                                     (\"locator_managing_1\", ${locatorHostsPerSite}, ${wanSites}, \"${wanSiteNames}\", false, true)"
                           ncf                        
                          ;


//managed1 and managed2 group is gemfire cacheServer here                          
THREADGROUP bridgeThreads 
			totalThreads = fcn 
								((${managed_1_Hosts} + ${managed_2_Hosts})*${wanSites}) 
						   ncf 
			totalVms =     fcn 
								((${managed_1_Hosts} + ${managed_2_Hosts})*${wanSites}) 
						   ncf  
			clientNames =  fcn "management.util.HydraUtil.generateNamedDoubleSuffixedNames
                                     (\"managed_1\", ${managed_1_Hosts}, ${wanSites},  \"${wanSiteNames}\", false, true)"
                           ncf,
                           fcn "management.util.HydraUtil.generateNamedDoubleSuffixedNames
                                 (\"managed_2\", ${managed_2_Hosts}, ${wanSites}, \"${wanSiteNames}\", false, true)"
                           ncf                         
                          ;
                          
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_startLocator
  runMode = always
  threadGroups = locatorThreads;                            

INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_initialize
  runMode = always
  threadGroups = default, jmxThreads;
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_becomeManager
  threadGroups = managingThreads
  runMode = always;
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_setUpJMXListeners
  runMode = always
  threadGroups = managingThreads, jmxThreads;    
    
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_startWANSendersAndReceivers
  threadGroups = bridgeThreads
  runMode = always;    
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_createRegionsOnBridge
  runMode = always
  threadGroups = bridgeThreads;   
  
TASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraTask_jmxOperations
  maxTimesToRun = 50
  threadGroups = jmxThreads
  ;
  
CLOSETASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraCloseTask_validateNotifications 
  threadGroups = jmxThreads 
  ;  

management.jmx.JMXPrms-sleepTimeFactor = 5;
management.jmx.JMXPrms-regionListToStartWith = WANReplicatedAckBridge WANPartitionBridge;
management.jmx.JMXPrms-printEventsList = EVENT_REGION_ADDED EVENT_REGION_DESTROYED;

management.operations.OperationPrms-regionList = WANReplicatedAckBridge WANPartitionBridge;
management.operations.OperationPrms-regionOperations  = ONEOF add invalidate invalidate invalidate invalidate invalidate FOENO;
  
management.test.federation.FederationPrms-rmiConnectorType = custom;

hydra.log.LogPrms-file_logLevel = fine;
//hydra.GemFirePrms-logLevel = fine;
hydra.CachePrms-names = cache1;
hydra.Prms-serialExecution  = true;
hydra.Prms-totalTaskTimeSec = 300;