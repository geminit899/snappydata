INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;


// A = locators B = managers C = potentialManagers

hydra.GemFirePrms-jmxManager  = fcn "hydra.TestConfigFcns.duplicate
                                   (\"false\", ${${A}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"true\", ${${B}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"true\", ${${C}Hosts})"
                              ncf;                              

hydra.GemFirePrms-jmxManagerPort  = fcn "hydra.TestConfigFcns.duplicate
                                   (\"false\", ${${A}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"true\", ${${B}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"false\", ${${C}Hosts})"
                              ncf;                              

hydra.GemFirePrms-jmxManagerStart  = fcn "hydra.TestConfigFcns.duplicate
                                   (\"false\", ${${A}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"true\", ${${B}Hosts})"
                              ncf
                              fcn "hydra.TestConfigFcns.duplicate
                                   (\"false\", ${${C}Hosts})"
                              ncf;
                              
THREADGROUP locatorThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
    totalVms = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf          
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
                   
THREADGROUP managingThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    totalVms = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;


THREADGROUP jmxThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} 
                                    +
                       ${${A}Hosts} * ${${A}VMsPerHost}
                                    +
                       ${${C}Hosts} * ${${C}VMsPerHost}
                   ncf
	totalVMs = fcn ${${B}Hosts} * ${${B}VMsPerHost}
                                    +
                       ${${A}Hosts} * ${${A}VMsPerHost}
                                    +
                       ${${C}Hosts} * ${${C}VMsPerHost}
                                                              
                   ncf                   
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf
                   ,
                   fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf
                   ,
                   fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${B}Hosts}, true)"
                   ncf
                   ;
                   
STARTTASK
  taskClass = management.operations.ops.JMXOperations 
  taskMethod = HydraStartTask_ReadMbeanDescriptors
  ;                   
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_startLocator
  runMode = always
  threadGroups = locatorThreads;
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_initialize
  runMode = always
  threadGroups = jmxThreads;
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_becomeManager
  threadGroups = managingThreads
  runMode = always;  
  
TASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraTask_jmxOperations
  maxTimesToRun = ${jmxIterations}
  threadGroups = jmxThreads
  ;
  
  
management.jmx.JMXPrms-mbeanSpec += "{
	'class' : 'com.gemstone.gemfire.management.LocatorMXBean',
	'templateObjectName' : 'GemFire:service=Locator',
	'type' : 'locator',	
	'tests' : [		
		'checkLocatorCounters',
		'checkLocatorConfig'
	]
}";
  
hydra.Prms-manageLocatorAgents=false;
hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar $GEMFIRE/lib/gemfire.jar $GEMFIRE/lib/gfsh-dependencies.jar;
hydra.VmPrms-extraVMArgs = "-Dgemfire.enableManagement=true";

  
management.jmx.JMXPrms-sleepTimeFactor = 5;
hydra.log.LogPrms-file_logLevel = fine;
//hydra.GemFirePrms-logLevel = fine;
hydra.CachePrms-names = cache1;
hydra.Prms-serialExecution  = true;
hydra.Prms-totalTaskTimeSec = ${duration};                           