INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;  
INCLUDE $JTESTS/management/test/federation/federationTopology_hct.inc;
INCLUDE $JTESTS/management/test/jmx/inc/jmx.inc;
INCLUDE $JTESTS/management/operations/operations.inc;
INCLUDE $JTESTS/management/test/jmx/inc/pulseRegionDefinitions.inc;

hydra.Prms-testDescription = 
  "Builds jmx resources for testing out Pulse WebApplication
   ";

//managed1 group is gemfire cacheServer here                          
THREADGROUP bridgeThreads 
			totalThreads = fcn 
								(${managed_1_Hosts})  
						   ncf 
			totalVms =     fcn 
								${managed_1_Hosts}  
						   ncf  
			clientNames =  fcn "hydra.TestConfigFcns.generateNames
                               (\"managed_1\", ${managed_1_Hosts}, true)"
                           ncf
                          ;
                          
THREADGROUP peerThreads 
			totalThreads = fcn 
								(${managed_2_Hosts})  
						   ncf 
			totalVms =     fcn 
								${managed_2_Hosts}  
						   ncf  
			clientNames =  fcn "hydra.TestConfigFcns.generateNames
                               (\"managed_2\", ${managed_2_Hosts}, true)"
                           ncf
                          ;                          
                          
THREADGROUP edgeThreads 
			totalThreads = fcn 
								(${edge_Hosts}) 
						   ncf 
			totalVms = ${edge_Hosts}  
			clientNames = fcn "hydra.TestConfigFcns.generateNames
                               (\"edge\", ${edge_Hosts}, true)"
                          ncf;                          

INITTASK 
	taskClass   = util.StopStartVMs  
	taskMethod = StopStart_initTask
	threadGroups = managingThreads, locatorThreads, bridgeThreads, peerThreads;	
	                          
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_startWithBridgeServer
  runMode = always
  threadGroups = bridgeThreads;

INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_createRegionsOnBridge
  runMode = always
  threadGroups = bridgeThreads, peerThreads;
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_createRegionsOnEdge
  runMode = always
  threadGroups = edgeThreads;
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_createQueryResources
  runMode = always
  threadGroups = edgeThreads, bridgeThreads;
  
INITTASK
  taskClass = management.test.jmx.JMXTest
  taskMethod = HydraInitTask_createLockServiceInstances
  runMode = always
  threadGroups = bridgeThreads;
  
  
management.jmx.JMXPrms-mbeanSpec += "{
	'class' : 'com.gemstone.gemfire.management.MemberMXBean',
	'templateObjectName' : 'GemFire:type=Member',
	'type' : 'pulse',	
	'tests' : [
		'pulseTest'		
	]
}";   


hydra.GemFirePrms-statisticSamplingEnabled = true;

management.jmx.JMXPrms-sleepTimeFactor = 5;
management.jmx.JMXPrms-lockServicesToStartWith = 5;
management.jmx.JMXPrms-regionListToStartWith = 	ReplicatedAckBridge ReplicatedAckEdge
												ReplicatedNoAckBridge ReplicatedNoAckEdge
												PersistentReplicatedBridge PersistentReplicatedEdge
												PartitionBridge PartitionEdge
												PersistentPartitionBridge PersistentPartitionEdge;
												
management.jmx.JMXPrms-printEventsList = EVENT_REGION_ADDED EVENT_REGION_DESTROYED;
management.jmx.JMXPrms-pulseManagerHATime = 15;

util.StopStartPrms-stopModes = NICE_EXIT;

management.operations.OperationPrms-entryOperations  = ONEOF add invalidate destroy putIfAbsent remove FOENO;

hydra.BridgePrms-names = managed_gemfire_bridge;	                      
hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

management.test.federation.FederationPrms-rmiConnectorType = custom;

hydra.log.LogPrms-file_logLevel = fine;
//hydra.GemFirePrms-logLevel = fine;
hydra.CachePrms-names = cache1;
hydra.Prms-serialExecution  = true;
hydra.Prms-totalTaskTimeSec = ${duration};

hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar $GEMFIRE/lib/gemfire.jar $GEMFIRE/lib/gfsh-dependencies.jar $GEMFIRE/lib/antlr.jar;