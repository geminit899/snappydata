INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;
INCLUDE $JTESTS/hct/hctparams.inc;
hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-manageLocatorAgents = true;

hydra.GemFirePrms-conserveSockets = true;

hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\",    ${feedHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf;
  
hydra.BridgePrms-names = bridge;
hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

hydra.PoolPrms-names                  = brloader;
hydra.PoolPrms-minConnections         = 10;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-subscriptionAckInterval=10000;	

hydra.CachePrms-messageSyncInterval = 25;

hydra.CachePrms-names        = bridge     feed       edge;
hydra.RegionPrms-names       = bridge     feed       edge;
hydra.RegionPrms-poolName    = none       brloader   brloader;
hydra.RegionPrms-dataPolicy  = partition  default    default;
hydra.RegionPrms-scope       = default    local	     local;
hydra.RegionPrms-partitionName   = bridge   none   none;

hydra.PartitionPrms-names        = bridge;
hydra.PartitionPrms-redundantCopies = 2 ;

hydra.ClientCachePrms-names                 = edge;
hydra.ClientRegionPrms-names                = edge;
hydra.ClientRegionPrms-poolName             = brloader;
hydra.ClientRegionPrms-clientRegionShortcut = CACHING_PROXY;
hydra.ClientRegionPrms-cacheListeners       = durableClients.EventListener;

hydra.GemFirePrms-enableDurableClient = false true true;

// override generic topology to make just one single-threaded VM of each type
hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 1;

durableClients.DurableClientsPrms-numPutThreads = ${hc.nPutThreads};
durableClients.DurableClientsPrms-numKeyRangePerThread = ${hc.nPutKeyRange};
durableClients.DurableClientsPrms-regionName= Region;

hydra.RegionPrms-cacheListeners =
      none, // bridge
      none,                         // feed
      durableClients.EventListener;         // cq edge

THREADGROUP bridge
    totalThreads = ${bridgeHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP feed
    totalThreads = ${feedHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feed\", ${feedHosts}, true)" ncf;

THREADGROUP edge
    totalThreads = fcn "${edgeHosts} - 1" ncf
    totalVms = fcn "${edgeHosts} - 1" ncf;

THREADGROUP reference
    totalThreads = 1
    ;  
                        
      
hydra.Prms-totalTaskTimeSec = 100;

hydra.Prms-maxResultWaitSec = 600;
hydra.PoolPrms-subscriptionRedundancy = 3;
durableClients.DurableClientsPrms-putLastKey = true;

hydra.Prms-manageLocatorAgents = true;
      

//durableClients.DurableClientsPrms-numberOfRegions=1;
//durableClients.DurableClientsPrms-regionRange= 1;

durableClients.DurableClientsPrms-numberOfRegions=5;
durableClients.DurableClientsPrms-regionRange= oneof 1 2 3 4 5 foeno;
durableClients.DurableClientsPrms-useClientCache = oneof true false foeno;

// Setup cache and regions for edge caches

INITTASK   taskClass   = durableClients.DurableClientsTest taskMethod  = initCacheServer
           runMode = always
           hydra.ConfigPrms-cacheConfig  = bridge
           hydra.ConfigPrms-regionConfig = bridge
           hydra.ConfigPrms-bridgeConfig = bridge
           threadGroups = bridge;
           
INITTASK    taskClass   = durableClients.Feeder    taskMethod  = initTask
           hydra.ConfigPrms-cacheConfig  = feed
           hydra.ConfigPrms-regionConfig = feed
           threadGroups = feed;
                  
INITTASK   taskClass   = durableClients.DurableClientsTest taskMethod  = initCQClient
           hydra.ConfigPrms-cacheConfig  = edge
           hydra.ConfigPrms-regionConfig = edge
           hydra.ConfigPrms-clientCacheConfig  = edge
           hydra.ConfigPrms-clientRegionConfig = edge
           threadGroups = edge,reference
           runMode = always;
           
INITTASK   taskClass = durableClients.DurableClientsTest taskMethod = mentionReferenceInBlackboard
           threadGroups = reference;
                                           
TASK        taskClass   = durableClients.Feeder    taskMethod  = feederTask
            threadGroups = feed	   ;
            
TASK       taskClass   = durableClients.DurableClientsTest taskMethod  = killClient
           threadGroups = edge
           maxTimesToRun = 3;
           
CLOSETASK   taskClass   = durableClients.Feeder    taskMethod  = closeTask
            threadGroups = feed;
            
CLOSETASK   taskClass = durableClients.DurableClientsTest taskMethod = waitForLastKeyReceivedAtClient
           threadGroups = reference,edge
           batch;                        
           
CLOSETASK   taskClass = durableClients.DurableClientsTest taskMethod = validateEventsReceived
           threadGroups = edge;            

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;

cq.CQUtilPrms-useCQ = true;
cq.CQUtilPrms-cqListener = durableClients.CQOpListener;
cq.CQUtilPrms-QueryServicePoolName = brloader;

