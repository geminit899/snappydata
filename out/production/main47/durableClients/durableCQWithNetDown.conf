INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_4.inc;
INCLUDE $JTESTS/hct/hctparams.inc;
hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-manageLocatorAgents = true;

hydra.Prms-testDescription = "Tests get operations on the edge(s) of a hierarchical cache. ";

// make bridges and feeds be peers and make edges be loners
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${feedHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${referenceHosts})" ncf;

hydra.GemFirePrms-conserveSockets = true;

hydra.BridgePrms-names = bridge;
hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

hydra.PoolPrms-names                       = brloader;
hydra.PoolPrms-minConnections        = 10;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-subscriptionAckInterval=10000;			

hydra.CachePrms-messageSyncInterval = 25;


hydra.CachePrms-names        = bridge     feed       edge	    reference;
hydra.RegionPrms-names       = bridge     feed       edge       reference;
hydra.RegionPrms-poolName = none       none       brloader	brloader;
hydra.RegionPrms-dataPolicy  = replicate  replicate  default	default;
hydra.RegionPrms-scope       = dack;


hydra.GemFirePrms-enableDurableClient = false false true  true;


// override generic topology to make just one single-threaded VM of each type
//hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 1;

durableClients.DurableClientsPrms-numPutThreads = ${hc.nPutThreads};
durableClients.DurableClientsPrms-numKeyRangePerThread = ${hc.nPutKeyRange};
durableClients.DurableClientsPrms-regionName= Region;



hydra.RegionPrms-cacheListeners =
      none, // bridge
      none,                         // feed
      durableClients.EventListenerExpiration;         // edge

hydra.Prms-totalTaskTimeSec = 100;

hydra.Prms-maxResultWaitSec = 600;
hydra.PoolPrms-subscriptionRedundancy = 3;
hydra.GemFirePrms-durableClientTimeout = 500;
//durableClients.DurableClientsPrms-numberOfRegions=1;
//durableClients.DurableClientsPrms-regionRange= 1;
durableClients.DurableClientsPrms-putLastKey = true;

durableClients.DurableClientsPrms-numberOfRegions=5;
durableClients.DurableClientsPrms-regionRange= oneof 1 2 3 4 5 foeno;

THREADGROUP bridge
    totalThreads = ${bridgeVMsPerHost}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP feed
    totalThreads = ${feedVMsPerHost}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feed\", ${feedHosts}, true)" ncf;

THREADGROUP edge
    totalThreads = ${edgeVMsPerHost}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edge\", ${edgeHosts}, true)" ncf;

THREADGROUP reference
    totalThreads = ${referenceVMsPerHost}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"reference\", ${referenceHosts}, true)" ncf; 
                        
INITTASK   taskClass   = durableClients.DurableClientsTest taskMethod  = initCacheServer
           runMode = always
           hydra.ConfigPrms-cacheConfig  = bridge
           hydra.ConfigPrms-regionConfig = bridge
           hydra.ConfigPrms-bridgeConfig = bridge
           threadGroups = bridge;
           
INITTASK    taskClass   = durableClients.Feeder    taskMethod  = initTask
           hydra.ConfigPrms-cacheConfig  = feed
           hydra.ConfigPrms-regionConfig = feed
           threadGroups = feed;
        
INITTASK   taskClass   = durableClients.DurableClientsTest taskMethod  = initCQClient
           hydra.ConfigPrms-cacheConfig  = edge
           hydra.ConfigPrms-regionConfig = edge
           threadGroups = edge,reference
           runMode = always;
           
INITTASK   taskClass = durableClients.DurableClientsTest taskMethod = mentionReferenceInBlackboard
           threadGroups = reference;
           

TASK        taskClass   = durableClients.Feeder    taskMethod  = feederTask
            threadGroups = feed	   ;
            
TASK       taskClass   = durableClients.DurableClientsTest taskMethod  = clientNetDown
            threadGroups = edge
            maxTimesToRun = 1;
            
TASK       taskClass   = durableClients.DurableClientsTest taskMethod  = killStableServer
           threadGroups = reference
           maxTimesToRun = 3;

CLOSETASK   taskClass   = durableClients.Feeder    taskMethod  = closeTask
            threadGroups = feed;
                                
            
CLOSETASK   taskClass = durableClients.DurableClientsTest taskMethod = waitForLastKeyReceivedAtClient
           threadGroups = reference,edge
           batch;                        
           
CLOSETASK   taskClass = durableClients.DurableClientsTest taskMethod = validateEventsReceived
           threadGroups = edge;

                        
// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;

cq.CQUtilPrms-useCQ = true;
cq.CQUtilPrms-cqListener = durableClients.CQOpListener;
