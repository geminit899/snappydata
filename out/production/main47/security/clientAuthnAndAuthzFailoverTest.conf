INCLUDE $JTESTS/security/securityTopology.inc;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 700;
hydra.Prms-testDescription = "Client Authentication and Authorization test with failover";

cq.CQUtilPrms-useCQ = true;
cq.CQUtilPrms-cqListener = durableClients.CQOpListener;

// select one of scheme for the test
hydra.GemFirePrms-securityName      = oneof dummyScheme ldapScheme pkcsScheme foeno;
//security.SecurityClientsPrms-minServersRequiredAlive = 2;

// select one of entry operation for the test.

//TODO: Register and unregister is not tested because of Bug 38571. This has to be revoked once that is fixed 
//security.SecurityClientsPrms-entryOperations = ONEOF create put get update destroy regNUnregInterest query cq invalidate FOENO;
security.SecurityClientsPrms-entryOperations = ONEOF create put get update destroy query cq invalidate FOENO;

//security.SecurityClientsPrms-operationTaskTimeSec = 600;


INITTASK   taskClass = security.SecurityTest taskMethod = initBlackboard
           threadGroups = writer;
           
//start the cache server
INITTASK  taskClass = security.SecurityTest taskMethod = openCacheTask
          runMode=always
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;

//start the client with valid authentication and authorization ( for write permissions )
INITTASK  taskClass = security.SecurityTest taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = writer
          security.DummyUserPasswordPrms-username = writer1
          security.DummyUserPasswordPrms-password = writer1
          security.LdapUserPasswordPrms-username = gemfire6
          security.LdapUserPasswordPrms-password = gemfire6
          security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire6.keystore\")" ncf
          security.PKCSUserPasswordPrms-alias = gemfire6
          threadGroups = writer
		  ;

//start the client with valid authentication and authorization ( read permissions )
INITTASK  taskClass = security.SecurityTest taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = reader
          security.DummyUserPasswordPrms-username = reader1
          security.DummyUserPasswordPrms-password = reader1
          security.LdapUserPasswordPrms-username = gemfire3
          security.LdapUserPasswordPrms-password = gemfire3
          security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire3.keystore\")" ncf
          security.PKCSUserPasswordPrms-alias = gemfire3
          threadGroups = reader
		  ;

//start the client with valid authentication and authorization ( query permissions )
INITTASK  taskClass = security.SecurityTest taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = query
          security.DummyUserPasswordPrms-username = reader3
          security.DummyUserPasswordPrms-password = reader3
          security.LdapUserPasswordPrms-username = gemfire9
          security.LdapUserPasswordPrms-password = gemfire9
          security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire9.keystore\")" ncf
          security.PKCSUserPasswordPrms-alias = gemfire9
          threadGroups = query
		  ;

//start the client with invalid authentication and authorization ( invalid permissions )
INITTASK  taskClass = security.SecurityTest taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = invalid
          security.SecurityClientsPrms-isExpectedException = true
          security.DummyUserPasswordPrms-username = bogus
          security.LdapUserPasswordPrms-username = bogus
          security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire11.keystore\")" ncf
          security.PKCSUserPasswordPrms-alias = bogus
          threadGroups = invalid
		  ;
//initialize the threads for entry operations
INITTASK   taskClass   = security.EntryOperations    taskMethod  = doPut
           threadGroups = writer;

// start the entry operations         
TASK       taskClass   = security.EntryOperations    taskMethod  = startRandomOperations
           //maxTimesToRun = 1
           threadGroups = writer,reader,query;

//priodically stop and restart the servers
TASK    taskClass   = security.SecurityTest     taskMethod  = killStableServer
        threadGroups = writer
        maxThreads = 1
     	maxTimesToRun = 3;


// validate the number of operation done with number of exception found           
CLOSETASK taskClass = security.SecurityTest taskMethod = validateFailedOrPassed
          security.SecurityClientsPrms-isExpectedPass = true
          security.SecurityClientsPrms-successOrFailureEntryOperations = put create update destroy
          threadGroups = writer
          ;

// validate the number of operation done with number of exception found             
CLOSETASK taskClass = security.SecurityTest taskMethod = validateFailedOrPassed
          security.SecurityClientsPrms-isExpectedPass = false
//          security.SecurityClientsPrms-successOrFailureEntryOperations = get query regNUnregInterest cq
          security.SecurityClientsPrms-successOrFailureEntryOperations = get query cq
          threadGroups = writer
          ;

// validate the number of operation done with number of exception found   
CLOSETASK taskClass = security.SecurityTest taskMethod = validateFailedOrPassed
          security.SecurityClientsPrms-isExpectedPass = true
//          security.SecurityClientsPrms-successOrFailureEntryOperations = get regNUnregInterest
		  security.SecurityClientsPrms-successOrFailureEntryOperations = get 
          threadGroups = reader
          ;

// validate the number of operation done with number of exception found             
CLOSETASK taskClass = security.SecurityTest taskMethod = validateFailedOrPassed
          security.SecurityClientsPrms-isExpectedPass = false
          security.SecurityClientsPrms-successOrFailureEntryOperations = put create update destroy query cq
          threadGroups = reader
          ;

// validate the number of operation done with number of exception found   
CLOSETASK taskClass = security.SecurityTest taskMethod = validateFailedOrPassed
          security.SecurityClientsPrms-isExpectedPass = true
          security.SecurityClientsPrms-successOrFailureEntryOperations = query cq
          threadGroups = query
          ; 

// validate the number of operation done with number of exception found   
CLOSETASK taskClass = security.SecurityTest taskMethod = validateFailedOrPassed
          security.SecurityClientsPrms-isExpectedPass = false
//        security.SecurityClientsPrms-successOrFailureEntryOperations = put create update destroy get regNUnregInterest
		  security.SecurityClientsPrms-successOrFailureEntryOperations = put create update destroy get
          threadGroups = query
          ;

//close the clients cache
CLOSETASK taskClass = security.SecurityTest taskMethod = closeCacheTask
          threadGroups = writer,reader,query
          ;

//close the servers cache
CLOSETASK taskClass = security.SecurityTest taskMethod = closeCacheTask
          threadGroups = bridge
          ;        
          
