INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_5.inc;

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths = fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)"
                               ncf;
                               
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${writerHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${readerHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${queryHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${adminHosts})" ncf ;
  
hydra.GemFirePrms-conserveSockets = false;

hydra.Prms-totalTaskTimeSec = 100;
hydra.Prms-maxResultWaitSec = 800;
hydra.Prms-testDescription = "Client Authentication and Authorization test";

hydra.RegionPrms-cacheListeners =
      none ,
      security.SecurityListener,
      security.SecurityListener,
      security.SecurityListener,
      security.SecurityListener;         // edge

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names          = bridge    writer reader query admin;
hydra.RegionPrms-scope          = dack      local local local local;
hydra.RegionPrms-dataPolicy     = replicate normal normal normal normal;
hydra.RegionPrms-poolName    = none      brloader brloader brloader brloader;

hydra.BridgePrms-names                = bridge;


hydra.PoolPrms-names                       = brloader;
hydra.PoolPrms-threadLocalConnections         = false;
hydra.PoolPrms-minConnections        = 5;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper getRoundRobinEndpoints;
hydra.Prms-useFixedRandomInMaster = true;

security.SecurityClientsPrms-killInterval = 100;
security.SecurityClientsPrms-restartWaitSec = 60;
security.SecurityClientsPrms-putAllMapSize = RANGE 1 200 EGNAR;

hydra.SecurityPrms-names = dummyScheme ldapScheme	pkcsScheme;
hydra.SecurityPrms-clientAuthInit          = templates.security.UserPasswordAuthInit.create templates.security.UserPasswordAuthInit.create templates.security.PKCSAuthInit.create;
hydra.SecurityPrms-clientAuthenticator = templates.security.DummyAuthenticator.create templates.security.LdapUserAuthenticator.create	templates.security.PKCSAuthenticator.create;
hydra.SecurityPrms-clientExtraProperties = security.DummyUserPasswordPrms security.LdapUserPasswordPrms security.PKCSUserPasswordPrms;
hydra.SecurityPrms-clientAccessor =  templates.security.XmlAuthorization.create;

security.DummyUserPasswordPrms-authzXmlUri = $JTESTS/lib/authz-dummy.xml;
security.LdapUserPasswordPrms-authzXmlUri = $JTESTS/lib/authz-ldap.xml;
security.PKCSUserPasswordPrms-authzXmlUri = $JTESTS/lib/authz-ldap.xml;
security.LdapUserPasswordPrms-ldapServer = "ldap";
security.LdapUserPasswordPrms-ldapBasedn = "ou=ldapTesting,dc=pune,dc=gemstone,dc=com";
security.SecurityClientsPrms-numKeyRangePerThread = ${nPutKeyRange};
security.SecurityClientsPrms-regionName = secure_region;
security.PKCSUserPasswordPrms-publickeyFilepath =
  fcn "security.SecurityFcns.getKeystore(\"publickeyfile\")" ncf;
security.PKCSUserPasswordPrms-keystorepass="gemfire";

THREADGROUP bridge
    totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"bridge\", ${bridgeHosts}, true)" ncf;                      
                       
THREADGROUP writer
    totalThreads = fcn ${writerHosts} * ${writerVMsPerHost} * ${writerThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"writer\", ${writerHosts}, true)" ncf;
    
THREADGROUP reader
    totalThreads = fcn ${readerHosts} * ${readerVMsPerHost} * ${readerThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"reader\", ${readerHosts}, true)" ncf;
                            
THREADGROUP query
    totalThreads = fcn ${queryHosts} * ${queryVMsPerHost} * ${queryThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"query\", ${queryHosts}, true)" ncf;
    
THREADGROUP admin
    totalThreads = fcn ${adminHosts} * ${adminVMsPerHost} * ${adminThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"admin\", ${adminHosts}, true)" ncf;                                            


// select one of scheme for the test
hydra.GemFirePrms-securityName      = oneof dummyScheme ldapScheme pkcsScheme foeno;
// select one of entry operation for the test.
security.SecurityClientsPrms-entryOperations = ONEOF put put putAll putAll update put update put put put put update update FOENO;
hydra.SecurityPrms-logLevel = info;

//start the cache server
INITTASK  taskClass = security.SecurityTest taskMethod = openCacheTask
          runMode=always
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;

//start the client with valid authentication and authorization ( for write permissions )
INITTASK  taskClass = security.SecurityTest taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = writer
          security.DummyUserPasswordPrms-username = writer1
          security.DummyUserPasswordPrms-password = writer1
          security.LdapUserPasswordPrms-username = gemfire6
          security.LdapUserPasswordPrms-password = gemfire6
          security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire6.keystore\")" ncf
          security.PKCSUserPasswordPrms-alias = gemfire6
          threadGroups = writer
		  ;

//start the client with valid authentication and authorization ( read permissions )
INITTASK  taskClass = security.SecurityTest taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = reader
          security.DummyUserPasswordPrms-username = reader1
          security.DummyUserPasswordPrms-password = reader1
          security.LdapUserPasswordPrms-username = gemfire3
          security.LdapUserPasswordPrms-password = gemfire3
          security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire3.keystore\")" ncf
          security.PKCSUserPasswordPrms-alias = gemfire3
          threadGroups = reader
		  ;

//start the client with valid authentication and authorization ( query permissions )
INITTASK  taskClass = security.SecurityTest taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = query
          security.DummyUserPasswordPrms-username = reader3
          security.DummyUserPasswordPrms-password = reader3
          security.LdapUserPasswordPrms-username = gemfire9
          security.LdapUserPasswordPrms-password = gemfire9
          security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire9.keystore\")" ncf
          security.PKCSUserPasswordPrms-alias = gemfire9
          threadGroups = query
		  ;

//start the client with invalid authentication and authorization ( invalid permissions )
INITTASK  taskClass = security.SecurityTest taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = admin
          security.DummyUserPasswordPrms-username = admin
          security.DummyUserPasswordPrms-password = admin
          security.LdapUserPasswordPrms-username = gemfire1
          security.LdapUserPasswordPrms-password = gemfire1
          security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire1.keystore\")" ncf
          security.PKCSUserPasswordPrms-alias = gemfire1
          threadGroups = admin
		  ;
		  
INITTASK   taskClass   = security.SecurityTest    taskMethod  = registerInterestAllKeys
		   security.SecurityClientsPrms-isExpectedException = false	
           threadGroups = reader,admin; 

INITTASK   taskClass   = security.SecurityTest    taskMethod  = registerInterestAllKeys
		   security.SecurityClientsPrms-isExpectedException = true	
           threadGroups = writer,query;

INITTASK   taskClass   = security.SecurityTest    taskMethod  = putAllTask
		   security.SecurityClientsPrms-isExpectedException = true	
           threadGroups = reader,query;       

//initialize the threads for entry operations
INITTASK   taskClass   = security.EntryOperations    taskMethod  = doPut
           threadGroups = writer;

// start the entry operations 
TASK       taskClass   = security.EntryOperations    taskMethod  = startRandomOperations
           threadGroups = writer;           

CLOSETASK   taskClass   = security.SecurityTest    taskMethod  = updateBlackoard
            threadGroups = writer;
            
CLOSETASK   taskClass   = security.SecurityTest    taskMethod  = validateEventCounters
			security.SecurityClientsPrms-isExpectedPass = true
            threadGroups = admin,reader;
            
CLOSETASK   taskClass   = security.SecurityTest    taskMethod  = validateEventCounters
			security.SecurityClientsPrms-isExpectedPass = false
            threadGroups = query;

//close the clients cache
CLOSETASK taskClass = security.SecurityTest taskMethod = closeCacheTask
          threadGroups = writer,reader,query
          ;

//close the servers cache
CLOSETASK taskClass = security.SecurityTest taskMethod = closeCacheTask
          threadGroups = bridge
          ;        

    
                                                
                        
    
