INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 700;
hydra.Prms-testDescription = "Client Authorization test for function";

hydra.VmPrms-extraClassPaths = fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)"
                               ncf;
                                                             
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${regionExecuteEdgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${serverExecuteEdgeHosts})" ncf
   ;
  
hydra.GemFirePrms-conserveSockets = false;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names          = bridge    edge ;
hydra.RegionPrms-scope          = default      local ;
hydra.RegionPrms-dataPolicy     = partitioned normal ;
hydra.RegionPrms-poolName       = none      brloader ;
hydra.RegionPrms-partitionName   = bridge   none ;
hydra.PartitionPrms-names        = bridge;
hydra.PartitionPrms-redundantCopies = 0;


hydra.BridgePrms-names                = bridge;


hydra.PoolPrms-names                       = brloader ;
hydra.PoolPrms-threadLocalConnections         = false;
hydra.PoolPrms-minConnections        = 5;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper getRoundRobinEndpoints;
hydra.Prms-useFixedRandomInMaster = true;
hydra.log.LogPrms-mergeLogFiles = onFailure;

hydra.SecurityPrms-names          = plugInScheme;
hydra.SecurityPrms-clientAuthInit          = templates.security.UserPasswordAuthInit.create;
hydra.SecurityPrms-clientAuthenticator = templates.security.DummyAuthenticator.create;
hydra.SecurityPrms-clientExtraProperties = security.DummyUserPasswordPrms;
hydra.SecurityPrms-clientAccessor = templates.security.XmlAuthorization.create;
hydra.SecurityPrms-clientAccessorPP = templates.security.XmlAuthorization.create;

hydra.GemFirePrms-securityName      = plugInScheme;

security.DummyUserPasswordPrms-authzXmlUri = $JTESTS/lib/authz-dummy.xml;

security.SecurityClientsPrms-numKeyRangePerThread = ${nPutKeyRange};
security.SecurityClientsPrms-regionName = secureRegion;
security.SecurityClientsPrms-killInterval = 100;
security.SecurityClientsPrms-restartWaitSec = 60;

hydra.SecurityPrms-logLevel = info;

security.SecurityClientsPrms-entryOperations = ONEOF functionExecute  executeWrongFilter executeWrongRegion executeWrongFunction executeWrongOptimization executeWrongPostAuthz 
                                                     serverFunctionExecute  serverExecuteWrongFunction  serverExecuteWrongPostAuthz FOENO;
                                                                                                         
                                                                                                                                                                                                                   

THREADGROUP bridge
    totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"bridge\", ${bridgeHosts}, true)" ncf;                      
                       
THREADGROUP regionExecuteEdge
    totalThreads = fcn ${regionExecuteEdgeHosts} * ${regionExecuteEdgeVMsPerHost} * ${regionExecuteEdgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"regionExecuteEdge\", ${regionExecuteEdgeHosts}, true)" ncf;
                       
THREADGROUP serverExecuteEdge
    totalThreads = fcn ${serverExecuteEdgeHosts} * ${serverExecuteEdgeVMsPerHost} * ${serverExecuteEdgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"serverExecuteEdge\", ${serverExecuteEdgeHosts}, true)" ncf;                       
    

INITTASK  taskClass = security.SecurityTest taskMethod = initTaskSecureRegions
          runMode=always
          hydra.ConfigPrms-cacheConfig = cache
          hydra.ConfigPrms-regionConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridge
          ;

//start the client with valid authentication and authorization
INITTASK  taskClass = security.SecurityTest taskMethod = initTaskSecureRegions
          hydra.ConfigPrms-regionConfig = edge
          security.DummyUserPasswordPrms-username = reader8
          security.DummyUserPasswordPrms-password = reader8
          threadGroups = regionExecuteEdge
		  ;
		  
//start the client with valid authentication and authorization
INITTASK  taskClass = security.SecurityTest taskMethod = initTaskSecureRegions
          hydra.ConfigPrms-regionConfig = edge
          security.DummyUserPasswordPrms-username = reader9
          security.DummyUserPasswordPrms-password = reader9
          threadGroups = serverExecuteEdge
		  ;		  

//initialize the threads for entry operations
INITTASK   taskClass   = security.EntryOperations    taskMethod  = putAllKeysInRange
           threadGroups = regionExecuteEdge;
           
INITTASK   taskClass   = security.EntryOperations    taskMethod  = populateNonSecureRegion
           threadGroups = serverExecuteEdge;           
           
//Populate the BB with the keys on the servers           
INITTASK   taskClass   = security.EntryOperations    taskMethod  = putKeysInBB
           threadGroups = bridge;            

// start the entry operations 
TASK       taskClass   = security.EntryOperations    taskMethod  = startRandomOperations
           threadGroups = serverExecuteEdge, regionExecuteEdge;

// validate the number of operation done with number of exception found.           
CLOSETASK taskClass = security.SecurityTest taskMethod = validateFailedOrPassed
          security.SecurityClientsPrms-isExpectedPass = true
          security.SecurityClientsPrms-successOrFailureEntryOperations = functionExecute
          threadGroups = regionExecuteEdge
          ;

// validate the number of operation done with number of exception found         
CLOSETASK taskClass = security.SecurityTest taskMethod = validateFailedOrPassed
          security.SecurityClientsPrms-isExpectedPass = false
          security.SecurityClientsPrms-successOrFailureEntryOperations = executeWrongFilter executeWrongRegion executeWrongFunction executeWrongOptimization executeWrongPostAuthz
          threadGroups = regionExecuteEdge
          ;
// validate the number of operation done with number of exception found          
CLOSETASK taskClass = security.SecurityTest taskMethod = validateFailedOrPassed
          security.SecurityClientsPrms-isExpectedPass = true
          security.SecurityClientsPrms-successOrFailureEntryOperations = serverFunctionExecute
          threadGroups = serverExecuteEdge
          ;          

// validate the number of operation done with number of exception found         
CLOSETASK taskClass = security.SecurityTest taskMethod = validateFailedOrPassed
          security.SecurityClientsPrms-isExpectedPass = false
          security.SecurityClientsPrms-successOrFailureEntryOperations = serverExecuteWrongFunction  serverExecuteWrongPostAuthz
          threadGroups = serverExecuteEdge
          ;

//close the clients cache
CLOSETASK taskClass = security.SecurityTest taskMethod = closeCacheTask
          threadGroups = regionExecuteEdge,serverExecuteEdge
          ;

//close the servers cache
CLOSETASK taskClass = security.SecurityTest taskMethod = closeCacheTask
          threadGroups = regionExecuteEdge,serverExecuteEdge
          ;