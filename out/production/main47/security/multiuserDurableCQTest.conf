INCLUDE $JTESTS/security/perUserRequestSecurity.inc;
INCLUDE $JTESTS/hydraconfig/topology_4.inc;

hydra.Prms-testRequirement = "Test durable CQ's with durable clients for multiUser mode.";
hydra.Prms-testDescription = "The purpose of the test is to verify that if the users connecting through durable clients register durable CQ's, 
                              get all the events for it when the client goes down and comes up again.";

hydra.GemFirePrms-enableDurableClient =
  fcn "hydra.TestConfigFcns.duplicate(\"false\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"true\", ${edgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"true\", ${referenceHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"false\", ${feedHosts})" ncf ;

THREADGROUP feed
    totalThreads = ${feedHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feed\", ${feedHosts}, true)" ncf;
                        
THREADGROUP reference
    totalThreads = ${referenceHosts}
    totalVMs = ${referenceVMsPerHost} ; 

//start the cache server                        
INITTASK   taskClass = security.PerUserRequestSecurityTest taskMethod = openServerCacheTask
           runMode=always
           hydra.ConfigPrms-cacheConfig = cache
           hydra.ConfigPrms-regionConfig = bridge
           hydra.ConfigPrms-bridgeConfig = bridge
           threadGroups = bridge ;

//start the feeder
INITTASK   taskClass = security.PerUserRequestSecurityTest taskMethod = openClientCacheTask
           hydra.ConfigPrms-clientCacheConfig = feed
           hydra.ConfigPrms-clientRegionConfig = feed
           threadGroups = feed
		  ;
		  
//start the durable client , reference
INITTASK   taskClass = security.PerUserRequestSecurityTest taskMethod = openDurableClientCacheTask
           hydra.ConfigPrms-clientCacheConfig = edge
           hydra.ConfigPrms-clientRegionConfig = edge
           threadGroups = verifyThreads, reference
           runMode = always ;  
           
INITTASK   taskClass   = security.EntryOperations    taskMethod  = doInitialFeed
           threadGroups = feed;
		           
INITTASK   taskClass = security.PerUserRequestSecurityTest taskMethod = mentionReferenceInBlackboard
           threadGroups = reference;

TASK       taskClass   = security.EntryOperations    taskMethod  = startRandomOperationsForMultiUserMode
          // maxTimesToRun = 10
           threadGroups = feed;

TASK       taskClass   =  security.PerUserRequestSecurityTest taskMethod  = killClient
           threadGroups = edge
           maxTimesToRun = 3;
                       
CLOSETASK   taskClass =  security.PerUserRequestSecurityTest taskMethod = validateDurableCQEvents
			threadGroups = verifyThreads ;

//close the all CQs and proxy cache for all users 
CLOSETASK  taskClass = security.PerUserRequestSecurityTest taskMethod = closeProxyCacheAndCQTask
           threadGroups = verifyThreads
           ;
           
//close the client cache          
CLOSETASK  taskClass = security.SecurityTest taskMethod = closeCacheTask
           threadGroups = edge,feed
           ;

//close the servers cache
CLOSETASK  taskClass = security.SecurityTest taskMethod = closeCacheTask
           threadGroups = bridge
           ;			           
// select one of scheme for the test
hydra.GemFirePrms-securityName      = oneof dummyScheme ldapScheme pkcsScheme foeno;
//hydra.GemFirePrms-logLevel = fine;

// User Credentials (username and password) list for multiple users for dummy Scheme
security.SecurityClientsPrms-userCredentialsForDummyScheme = user1-user1 user2-user2 user3-user3 user5-user5;

// User Credentials (username and password) list for multiple users for ldap Scheme
security.SecurityClientsPrms-userCredentialsForLdapScheme = gemfire1-gemfire1 gemfire2-gemfire2 gemfire9-gemfire9;

security.SecurityClientsPrms-entryOperations = put;

// User Credentials (keyStorePath and Alias) lists for multiple users for pkcs Scheme
security.SecurityClientsPrms-kestorePathForPkcsScheme = fcn "security.SecurityFcns.getKeystoreForMultiuser(\"gemfire1.keystore\")" ncf fcn "security.SecurityFcns.getKeystoreForMultiuser(\"gemfire2.keystore\")" ncf fcn "security.SecurityFcns.getKeystoreForMultiuser(\"gemfire9.keystore\")" ncf;
security.SecurityClientsPrms-kestoreAliasForPkcsScheme = gemfire1 gemfire2 gemfire9;     

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 700;

// define bridge servers
hydra.CachePrms-names        = cache;

hydra.RegionPrms-names       = bridge;
hydra.RegionPrms-dataPolicy  = replicate;
hydra.RegionPrms-scope       = dack;

// define edge clients 
hydra.ClientCachePrms-names       = feed       edge;

hydra.ClientRegionPrms-names                = feed       edge;
hydra.ClientRegionPrms-poolName             = brloader;
hydra.ClientRegionPrms-clientRegionShortcut = PROXY      PROXY;

hydra.PoolPrms-names = brloader;
hydra.PoolPrms-subscriptionRedundancy = 1;
hydra.PoolPrms-subscriptionEnabled = true;

durableClients.DurableClientsPrms-numPutThreads = ${hc.nPutThreads};
durableClients.DurableClientsPrms-numKeyRangePerThread = ${nPutKeyRange};
durableClients.DurableClientsPrms-regionName= Region;
     
cq.CQUtilPrms-useCQ = true;
cq.CQUtilPrms-cqListener = com.gemstone.gemfire.cache.query.cq.dunit.CqQueryTestListener;
