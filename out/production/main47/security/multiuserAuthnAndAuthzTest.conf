INCLUDE $JTESTS/security/perUserRequestSecurity.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.Prms-testRequirement = "Test multiple users Authentication and Authorization for multiUser mode.";
hydra.Prms-testDescription = "The purpose of the test is to verify multiple users Authentication and Authorization.";

THREADGROUP feed
    totalThreads = ${feedHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feed\", ${feedHosts}, true)" ncf;

//start the cache server
INITTASK   taskClass = security.PerUserRequestSecurityTest taskMethod = openServerCacheTask
           runMode=always
           hydra.ConfigPrms-cacheConfig = cache
           hydra.ConfigPrms-regionConfig = bridge
           hydra.ConfigPrms-bridgeConfig = bridge
           threadGroups = bridge
          ;

//start the users with valid authentication and authorization for read, write and query permissions. 
INITTASK   taskClass = security.PerUserRequestSecurityTest taskMethod = openClientCacheTask
           hydra.ConfigPrms-clientCacheConfig = edge
           hydra.ConfigPrms-clientRegionConfig = edge
           threadGroups = verifyThreads
		  ;
		  
INITTASK   taskClass = security.PerUserRequestSecurityTest taskMethod = openClientCacheTask
           hydra.ConfigPrms-clientCacheConfig = feed
           hydra.ConfigPrms-clientRegionConfig = feed
           threadGroups = feed
		  ;                        

INITTASK   taskClass   = security.EntryOperations    taskMethod  = doInitialFeed
           threadGroups = feed;
           		  
// start the entry operations 
TASK       taskClass   = security.EntryOperations    taskMethod  = startRandomOperationsForMultiUserMode
          // maxTimesToRun = 10
           threadGroups = edge;

// start the executeQuery operation 
TASK       taskClass   = security.EntryOperations    taskMethod  = startQueryExecuteOperationForMultiUserMode
           threadGroups = edge;           

//start the function execution operation           
TASK       taskClass   = security.EntryOperations    taskMethod  = startFunctionExecuteOperationForMultiUserMode
           threadGroups = edge;    
                      
// validate the number of operation done with number of exception found in case of MultiUser Mode.           
CLOSETASK  taskClass = security.PerUserRequestSecurityTest taskMethod = validateFailedOrPassedEntryOpsForMultiUserMode
           //maxThreads = 1
           threadGroups = verifyThreads
           ;           

//close the all CQs and proxy cache for all users 
CLOSETASK  taskClass = security.PerUserRequestSecurityTest taskMethod = closeProxyCacheAndCQTask
           threadGroups = verifyThreads
           ;
           
//close the feeder cache          
CLOSETASK  taskClass = security.SecurityTest taskMethod = closeCacheTask
           threadGroups = feed
           ;           
           
//close the client cache          
CLOSETASK  taskClass = security.SecurityTest taskMethod = closeCacheTask
           threadGroups = edge
           ;

//close the servers cache
CLOSETASK  taskClass = security.SecurityTest taskMethod = closeCacheTask
           threadGroups = bridge
           ;
           
hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 700;

// select one of scheme for the test
hydra.GemFirePrms-securityName      = oneof dummyScheme ldapScheme pkcsScheme foeno;
//hydra.GemFirePrms-logLevel = fine;

// define bridge servers
hydra.CachePrms-names           = cache;

hydra.RegionPrms-names          = bridge;
hydra.RegionPrms-dataPolicy     = replicate;

// define edge clients
hydra.ClientCachePrms-names     = feed       edge;

hydra.ClientRegionPrms-names                = feed       edge;
hydra.ClientRegionPrms-poolName             = brloader;
hydra.ClientRegionPrms-clientRegionShortcut = PROXY      PROXY;

hydra.PoolPrms-names               = brloader;
hydra.PoolPrms-subscriptionEnabled = true;

// select one of entry operation for the test.
security.SecurityClientsPrms-entryOperations = ONEOF putAll put get destroy query invalidate FOENO;

// User Credentials (username and password) list for multiple users for dummy Scheme
security.SecurityClientsPrms-userCredentialsForDummyScheme = user1-user1 user2-user2 user3-user3 user4-user4 user5-user5 user6-user6;

// User Credentials (username and password) list for multiple users for ldap Scheme
security.SecurityClientsPrms-userCredentialsForLdapScheme = gemfire1-gemfire1 gemfire2-gemfire2 gemfire3-gemfire3 gemfire4-gemfire4 gemfire5-gemfire5 gemfire6-gemfire6 gemfire7-gemfire7 gemfire8-gemfire8;

// User Credentials (keyStorePath and Alias) lists for multiple users for pkcs Scheme
security.SecurityClientsPrms-kestorePathForPkcsScheme = fcn "security.SecurityFcns.getKeystoreForMultiuser(\"gemfire1.keystore\")" ncf fcn "security.SecurityFcns.getKeystoreForMultiuser(\"gemfire2.keystore\")" ncf fcn "security.SecurityFcns.getKeystoreForMultiuser(\"gemfire3.keystore\")" ncf fcn "security.SecurityFcns.getKeystoreForMultiuser(\"gemfire4.keystore\")" ncf fcn "security.SecurityFcns.getKeystoreForMultiuser(\"gemfire5.keystore\")" ncf fcn "security.SecurityFcns.getKeystoreForMultiuser(\"gemfire6.keystore\")" ncf fcn "security.SecurityFcns.getKeystoreForMultiuser(\"gemfire9.keystore\")" ncf;
security.SecurityClientsPrms-kestoreAliasForPkcsScheme = gemfire1 gemfire2 gemfire3 gemfire4 gemfire5 gemfire6 gemfire9;                   
           
		  

