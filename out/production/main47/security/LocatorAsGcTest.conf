include $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_5.inc;
INCLUDE $JTESTS/security/securityConfig.inc;
hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 400;

hydra.Prms-testDescription = "Test for Locator as GC.";

hydra.Prms-manageLocatorAgents = false;

hydra.BridgePrms-names       = bridge;

hydra.GemFirePrms-securityName      = oneof dummyScheme ldapScheme pkcsScheme  foeno;

security.DummyUserPasswordPrms-username = writer1;
security.DummyUserPasswordPrms-password = writer1;
security.LdapUserPasswordPrms-username = gemfire6;
security.LdapUserPasswordPrms-password = gemfire6;
security.PKCSUserPasswordPrms-keystorepath =
  fcn "security.SecurityFcns.getKeystore(\"gemfire6.keystore\")" ncf;
security.PKCSUserPasswordPrms-alias = gemfire6;
          
hydra.SecurityPrms-logLevel = info;
hydra.Prms-useFixedRandomInMaster = true;

hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${locatorAHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${locatorBHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\", ${validBridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\", ${invalidBridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf;

THREADGROUP locatorA
    totalThreads = fcn ${locatorAHosts} * ${locatorAVMsPerHost} * ${locatorAThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"locatorA\", ${locatorAHosts}, true)" ncf;                      
THREADGROUP locatorB
    totalThreads = fcn ${locatorBHosts} * ${locatorBVMsPerHost} * ${locatorBThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"locatorB\", ${locatorBHosts}, true)" ncf;                      
                                   
THREADGROUP validBridge
    totalThreads = fcn ${validBridgeHosts} * ${validBridgeVMsPerHost} * ${validBridgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"validBridge\", ${validBridgeHosts}, true)" ncf;
    
THREADGROUP invalidBridge
    totalThreads = fcn ${invalidBridgeHosts} * ${invalidBridgeVMsPerHost} * ${invalidBridgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"invalidBridge\", ${invalidBridgeHosts}, true)" ncf;

THREADGROUP edge
    totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                       (\"edge\", ${edgeHosts}, true)" ncf;
                       
security.SecurityClientsPrms-expectedMembers =
  fcn
    ${locatorAHosts} * ${locatorAVMsPerHost} + ${validBridgeHosts} * ${validBridgeVMsPerHost}
  ncf;

INITTASK   taskClass = security.SecurityTest taskMethod = initBlackboard
           threadGroups = edge;
           
INITTASK  taskClass = security.SecurityTest taskMethod = createLocatorTask
          threadGroups = locatorA, locatorB
          ;         
INITTASK  taskClass = security.SecurityTest taskMethod = startLocatorAndDSTask
          security.DummyUserPasswordPrms-username = admin
          security.DummyUserPasswordPrms-password = admin
          security.LdapUserPasswordPrms-username = gemfire1
          security.LdapUserPasswordPrms-password = gemfire1
          security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire1.keystore\")" ncf
          security.PKCSUserPasswordPrms-alias = gemfire1
          threadGroups = locatorA
          ;
INITTASK  taskClass   = security.SecurityTest taskMethod  = openCacheTask
          runMode = always
          hydra.ConfigPrms-bridgeConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          threadGroups = validBridge
          ;
INITTASK  taskClass   = security.SecurityTest taskMethod  = openCacheTask
          runMode = always
          hydra.ConfigPrms-bridgeConfig = bridge
          hydra.ConfigPrms-regionConfig = bridge
          security.SecurityClientsPrms-isExpectedException = true
          security.DummyUserPasswordPrms-username = bogus
          security.LdapUserPasswordPrms-username = bogus
          security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire11.keystore\")" ncf
          security.PKCSUserPasswordPrms-alias = bogus
          threadGroups = invalidBridge
          ;
          
INITTASK  taskClass = security.SecurityTest taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = edge
          threadGroups = edge
		  ;          
INITTASK  taskClass = security.SecurityTest taskMethod = validateExpectedMembersTask
          threadGroups = locatorA, validBridge
          ;
INITTASK  taskClass = security.SecurityTest taskMethod = startLocatorAndDSTask
          security.DummyUserPasswordPrms-username = admin
          security.DummyUserPasswordPrms-password = admin
          security.LdapUserPasswordPrms-username = gemfire1
          security.LdapUserPasswordPrms-password = gemfire1
          security.PKCSUserPasswordPrms-keystorepath =
            fcn "security.SecurityFcns.getKeystore(\"gemfire1.keystore\")" ncf
          security.PKCSUserPasswordPrms-alias = gemfire1
          threadGroups = locatorB
          ;
INITTASK  taskClass = security.SecurityTest taskMethod = validateExpectedMembersTask
          security.SecurityClientsPrms-expectedMembers =
          fcn
             ${locatorAHosts} * ${locatorAVMsPerHost} + ${locatorBHosts} * ${locatorBVMsPerHost} + ${validBridgeHosts} * ${validBridgeVMsPerHost}
          ncf
          threadGroups = locatorA, locatorB, validBridge
          ;  
                    
INITTASK  taskClass = security.SecurityTest taskMethod = stopLocatorAndDSTask
          threadGroups = locatorA
          ; 
          

TASK      taskClass   = security.SecurityTest     taskMethod  = killStableServer 
          threadGroups = edge
          maxThreads = 1 
          startInterval = 30
          maxTimesToRun = 3
          ;    
          
CLOSETASK taskClass = security.SecurityTest taskMethod = validateExpectedMembersTask
          security.SecurityClientsPrms-expectedMembers =
          fcn
             ${locatorBHosts} * ${locatorBVMsPerHost} + ${validBridgeHosts} * ${validBridgeVMsPerHost}
          ncf
          threadGroups = locatorB,validBridge
          ;    
CLOSETASK taskClass = security.SecurityTest taskMethod = closeCacheTask
          threadGroups = validBridge,invalidBridge
          ;   
                         
CLOSETASK taskClass = security.SecurityTest taskMethod = stopLocatorAndDSTask
          threadGroups = locatorB
          ;
          
