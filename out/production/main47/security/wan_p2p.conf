//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/security/security_p2p_topology.inc;
include $JTESTS/wan/wan.inc;
include $JTESTS/security/p2p.inc;


hydra.SecurityPrms-names = dummyScheme ldapScheme pkcsScheme;
hydra.SecurityPrms-peerAuthInit = templates.security.UserPasswordAuthInit.create templates.security.UserPasswordAuthInit.create templates.security.PKCSAuthInit.create;
hydra.SecurityPrms-peerExtraProperties = security.DummyUserPasswordPrms security.LdapUserPasswordPrms security.PKCSUserPasswordPrms;
hydra.SecurityPrms-peerAuthenticator   = templates.security.DummyAuthenticator.create templates.security.LdapUserAuthenticator.create templates.security.PKCSAuthenticator.create;
hydra.SecurityPrms-clientAuthInit          = security.SecurityTestAuthInit.create security.SecurityTestAuthInit.create	security.PKCSTestAuthInit.create;
hydra.SecurityPrms-clientAuthenticator = templates.security.DummyAuthenticator.create templates.security.LdapUserAuthenticator.create templates.security.PKCSAuthenticator.create;
hydra.SecurityPrms-clientExtraProperties = security.DummyUserPasswordPrms security.LdapUserPasswordPrms security.PKCSUserPasswordPrms;
hydra.SecurityPrms-clientAccessor = templates.security.DummyAuthorization.create templates.security.XmlAuthorization.create;

security.DummyUserPasswordPrms-authzXmlUri = $JTESTS/lib/authz-dummy.xml;
security.LdapUserPasswordPrms-authzXmlUri = $JTESTS/lib/authz-ldap.xml;
security.LdapUserPasswordPrms-ldapServer = "ldap";
security.LdapUserPasswordPrms-ldapBasedn = "ou=ldapTesting,dc=pune,dc=gemstone,dc=com";
security.SecurityClientsPrms-regionName = Portfolios;
security.PKCSUserPasswordPrms-publickeyFilepath =
  fcn "security.SecurityFcns.getKeystore(\"publickeyfile\")" ncf;
security.PKCSUserPasswordPrms-keystorepass="gemfire";

hydra.GemFirePrms-securityName      = oneof dummyScheme ldapScheme pkcsScheme foeno;
hydra.SecurityPrms-logLevel = info;
hydra.Prms-useFixedRandomInMaster = true;


//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is peer-to-peer in its own distributed system and each VM is a WAN gateway hub to other sites.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = validlocator,invalidlocator;
         
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         security.DummyUserPasswordPrms-username = admin
         security.DummyUserPasswordPrms-password = admin
         security.LdapUserPasswordPrms-username = gemfire1
         security.LdapUserPasswordPrms-password = gemfire1
         security.PKCSUserPasswordPrms-keystorepath =
           fcn "security.SecurityFcns.getKeystore(\"gemfire1.keystore\")" ncf
         security.PKCSUserPasswordPrms-alias = gemfire1
         threadGroups = validlocator,invalidlocator;
         
INITTASK taskClass = wan.WANClient taskMethod = initSecurityPeerCacheTask
		 security.DummyUserPasswordPrms-username = writer1
         security.DummyUserPasswordPrms-password = writer1
         security.LdapUserPasswordPrms-username = gemfire6
         security.LdapUserPasswordPrms-password = gemfire6
         security.PKCSUserPasswordPrms-keystorepath =
           fcn "security.SecurityFcns.getKeystore(\"gemfire6.keystore\")" ncf
         security.PKCSUserPasswordPrms-alias = gemfire6
         threadGroups = validpeer,invalidpeer;

INITTASK taskClass = wan.WANClient taskMethod = createAndStartGatewayHubTask
         threadGroups = validpeer;

INITTASK taskClass = wan.WANClient taskMethod = createAndStartGatewayHubTask
		 security.SecurityClientsPrms-isExpectedException = true	
		 hydratest.security.SecurityTestPrms-useBogusPassword = true
         threadGroups = invalidpeer; 

                

//------------------------------------------------------------------------------
// PRIMARY WORK (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = wan.WANClient taskMethod = putSequentialKeysTaskForValid
     threadGroups = validpeer;
     
TASK taskClass = wan.WANClient taskMethod = putSequentialKeysTaskForInValid
     threadGroups = invalidpeer;

wan.CacheClientPrms-sleepSec = 0;

//------------------------------------------------------------------------------
// FINAL WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = wan.WANClient taskMethod = printSequentialKeysTask
          threadGroups = validpeer,invalidpeer;
          
CLOSETASK taskClass = wan.WANClient taskMethod = validateValidSequentialKeysTask
          threadGroups = validpeer;
          
CLOSETASK taskClass = wan.WANClient taskMethod = validateInvalidSequentialKeysTask
          threadGroups =invalidpeer;
          
CLOSETASK taskClass = wan.WANClient taskMethod = closePeerCacheTask
          threadGroups = validpeer,invalidpeer;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = validpeer,invalidpeer;
          
