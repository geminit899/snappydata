hydra.Prms-testRequirement = "Test region destroy and invalidate events";
hydra.Prms-testDescription = "
Test in serial execution mode to carefully validate region events.

The test uses a distributed scope and replication of keys
and values. There is a listener, that increments a blackboard counter
for each event, installed in the region for each VM.

The test executes a task that creates/invalidates/destroys
regions, then waits for the listener counters to reach
the required number, indicating the event was received in a VM.

";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams4.inc;

hydra.ClientPrms-vmQuantities = 1 5 5 5;
hydra.ClientPrms-vmThreads    = 1 1 1 1;

STARTTASK    taskClass   = event.EventBB taskMethod  = HydraTask_initialize
             clientNames = client1;

STARTTASK    taskClass   = util.CacheBB taskMethod  = HydraTask_initialize
             clientNames = client1;

INITTASK     taskClass   = util.RegionDefinition taskMethod  = InitTask_initialize;

INITTASK     taskClass   = event.ProxySerialRegionEventTest taskMethod  = HydraTask_initialize;

TASK         taskClass   = event.ProxyEventTest taskMethod  = HydraTask_doRegionOperations
             threadGroups = RRLeader
             ;

TASK         taskClass   = event.ProxyEventTest taskMethod  = HydraTask_executeRegionOp
             threadGroups = default
             ;

THREADGROUP  RRLeader totalThreads = 1 totalVMs = 1 clientNames = client2;
THREADGROUP  dataStore totalThreads = 1 totalVMs = 1 clientNames = client1;

hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;

hydra.Prms-haltIfBadResult = true;
hydra.Prms-alwaysDoEndTasks = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 30;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

// Logging params
hydra.log.LogPrms-file_logging = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;

util.CacheDefPrms-cacheSpecs = "
   specName = cache1:
   ";

util.RegionDefPrms-regionSpecs = "
   specName = region1:
       regionName = EventRegion:
       scope = ack, global: dataPolicy = empty: interestPolicy = all:
       cacheListeners = event.ETListener event.OperationListener:
       cacheWriter = event.ETWriter:
   specName = shadowRegion:
       regionName = ShadowEventRegion:
       scope = ack: 
       dataPolicy = normal: 
       interestPolicy = all:
   ";
util.RegionDefPrms-VMRegionSpecName = region1;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

event.EventPrms-regionListener = event.RegionListener;

event.EventPrms-sleepTimeMs = ONEOF 1000 2000 2500 3000 3500 FOENO;

event.EventPrms-maxRegions = 100;
event.EventPrms-initRegionNumObjects = RANGE 0 5 EGNAR;
event.EventPrms-regionOperations = ONEOF add add add add clear invalidate destroy close FOENO; // weighted to adds

util.ValueHolderPrms-useExtraObject = false;
util.TestHelperPrms-minTaskGranularitySec = 0;
util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;
