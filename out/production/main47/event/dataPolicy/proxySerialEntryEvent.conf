hydra.Prms-testRequirement = "Test entry create/update/destroy/invalidate events";
hydra.Prms-testDescription = "
Test in serial execution mode to carefully validate entry events.

The test uses one region, a distributed scope and 
dataPolicy = replicate.
There is a listener, that increments a blackboard counter
for each event, installed in the region for each VM.

The test executes a task that creates/updates/invalidates/destroys
an object in a region, then waits for the listener counters to reach
the required number, indicating the event was received in a VM.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams4.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = 1 2 2 2;
hydra.ClientPrms-vmThreads    = 1 3 3 3;

STARTTASK    taskClass   = event.EventBB taskMethod  = HydraTask_initialize
             clientNames = client1;

STARTTASK    taskClass   = util.CacheBB taskMethod  = HydraTask_initialize
             clientNames = client1;

INITTASK     taskClass   = util.RegionDefinition taskMethod  = InitTask_initialize;

INITTASK     taskClass   = event.ProxySerialEntryEventTest taskMethod  = HydraTask_initialize;

TASK         taskClass   = event.ProxySerialEntryEventTest taskMethod  = HydraTask_doEntryOperations
             threadGroups = default;
             ;

CLOSETASK    taskClass   = event.ProxySerialEntryEventTest taskMethod  = HydraTask_closeTask
             threadGroups = default
             ;

THREADGROUP dataStore totalThreads=1 totalVMs=1 clientNames=client1;

hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.GemFirePrms-conserveSockets = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-alwaysDoEndTasks = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;

// Logging params
hydra.log.LogPrms-file_logging = true;

util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;

event.EventPrms-sleepTimeMs = ONEOF 1000 2000 2500 3000 3500 FOENO;
//lynn - don't use dLocks until 30616 is fixed
//event.EventPrms-useRandomLocks = ONEOF true false FOENO;
event.EventPrms-useRandomLocks = false;
event.EventPrms-maxObjects = 10;
event.EventPrms-entryOperations = ONEOF add add add add update invalidate destroy read FOENO; // weighted to adds

util.ValueHolderPrms-useExtraObject = false;

util.CacheDefPrms-cacheSpecs = "
   specName = cache1:
   ";

util.RegionDefPrms-regionSpecs = "
   specName = proxy:
       regionName = EventRegion:
       scope = ack, global: dataPolicy = empty:
       cacheListeners = event.ETListener event.OperationListener:
       cacheWriter = event.ETWriter:
   specName = proxyAllEvents:
       regionName = EventRegion:
       scope = ack, global: dataPolicy = empty: interestPolicy = all:
       cacheListeners = event.ETListener event.OperationListener:
       cacheWriter = event.ETWriter:
   specName = shadowRegion:
       regionName = ShadowEventRegion:
       scope = ack: 
       dataPolicy = normal: 
       interestPolicy = all:
   ";
util.RegionDefPrms-VMRegionSpecName = ONEOF proxy proxyAllEvents FOENO;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;
util.TestHelperPrms-minTaskGranularitySec = 0;
util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;
