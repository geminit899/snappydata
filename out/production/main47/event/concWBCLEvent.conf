include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_p2p_2.inc;

hydra.Prms-testDescription = "Threads execute ops in a vm with a wbcl defined.  This test concurrently executes put/invalidate/destroy/get operations as well as concurrentMap operations (putIfAbsent, replace and remove) to generate GatewayListenerEvents.";

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.ConfigPrms-regionConfig  = region;
hydra.RegionPrms-names         = region;
hydra.RegionPrms-regionName    = EventRegion;
hydra.RegionPrms-dataPolicy    = replicate;
hydra.RegionPrms-enableGateway = true;
hydra.RegionPrms-scope         = dack;
// todo@lhughes - if this is enabled, then override read() so we only read existing entries
// otherwise, we could get/load a destroyed entry and get unexpected create events
// hydra.RegionPrms-cacheLoader   = event.WBCLLoader;

hydra.GatewayHubPrms-names = hub;

hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-diskStoreName = disk;
hydra.GatewayPrms-listeners = event.WBCLEventListener;

hydra.DiskStorePrms-names = disk;

STARTTASK    taskClass   = event.EventBB taskMethod  = HydraTask_initialize 
             clientNames = wbcl1
             ;

// create gateway hub & regions
INITTASK  taskClass = event.WBCLEventTest   taskMethod = HydraTask_initialize
          hydra.ConfigPrms-gatewayHubConfig = hub
          threadGroups = wbcl 
          ;

INITTASK  taskClass = event.WBCLEventTest   taskMethod = HydraTask_initialize
          threadGroups = peer
          ;

INITTASK  taskClass = event.WBCLEventTest   taskMethod = startGatewayHubTask
          hydra.ConfigPrms-gatewayConfig = gateway
          threadGroups = wbcl 
          ;

TASK      taskClass   = event.WBCLEventTest taskMethod  = HydraTask_doEntryOperations
          threadGroups = peer, wbcl
          ;

CLOSETASK taskClass   = event.WBCLEventTest taskMethod = HydraTask_checkForEventErrors
          threadGroups = peer, wbcl
          ;

THREADGROUP wbcl
    totalThreads = fcn
                   ${wbclHosts} * ${wbclVMsPerHost} * ${wbclThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"wbcl\", ${wbclHosts}, true)"
                   ncf;
THREADGROUP peer
    totalThreads = fcn
                   ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"peer\", ${peerHosts}, true)"
                   ncf;

hydra.GemFirePrms-conserveSockets = true;
hydra.GemFirePrms-stopSystemsAfterTest = true;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;
hydra.Prms-alwaysDoEndTasks = false;
hydra.Prms-maxClientShutdownWaitSec = 360;
hydra.Prms-finalClientSleepSec = 60;
hydra.Prms-maxEndTaskResultWaitSec = 1800;
util.TestHelperPrms-minTaskGranularitySec = 60;

// Logging params
hydra.log.LogPrms-file_logging = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;

event.EventPrms-useRandomLocks = false;
// allow invalidates in concurrent test to ensure that they cause no problems
// but note that the GatewayEventListener does NOT propagate invalidates 
event.EventPrms-entryOperations = ONEOF add add add add update invalidate read destroy localInvalidate localDestroy FOENO;
      // weighted to adds

event.EventPrms-lowerThreshold=10000;
event.EventPrms-lowerThresholdOperations = ONEOF add putIfAbsent FOENO;
event.EventPrms-upperThreshold=50000;
event.EventPrms-upperThresholdOperations = ONEOF destroy remove FOENO;

util.ValueHolderPrms-useExtraObject = false;

