//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_2_locator.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is peer-to-peer in its own distributed system and each site has a single WAN gateway hub to other sites.  Additional peers in the site are not gateways.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = initPeerCacheTask
         wan.CacheServerPrms-gatewayHubConfig = hub
         wan.CacheServerPrms-gatewayConfig = gateway
         threadGroups = gateway;
INITTASK taskClass = wan.WANClient taskMethod = initPeerCacheTask
         threadGroups = peer;
INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         wan.CacheServerPrms-gatewayConfig = gateway
         threadGroups = gateway;

//------------------------------------------------------------------------------
// PRIMARY WORK (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = wan.WANClient taskMethod = putSequentialKeysTask
     threadGroups = gateway, peer;

wan.CacheClientPrms-sleepSec = 0;

//------------------------------------------------------------------------------
// FINAL WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = wan.WANClient taskMethod = printSequentialKeysTask
          threadGroups = gateway, peer;
CLOSETASK taskClass = wan.WANClient taskMethod = validateSequentialKeysTask
          threadGroups = gateway, peer;
CLOSETASK taskClass = wan.WANClient taskMethod = closePeerCacheTask
          threadGroups = gateway, peer;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = gateway, peer;

hydra.GatewayHubPrms-names = hub;

hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-maximumQueueMemory = 300;
hydra.GatewayPrms-batchTimeInterval = 10;
hydra.GatewayPrms-diskStoreName = disk;
hydra.DiskStorePrms-names = disk;
hydra.CachePrms-names = peer;

hydra.RegionPrms-names         = peer;
hydra.RegionPrms-enableGateway = true;
hydra.RegionPrms-dataPolicy    = replicate;
hydra.RegionPrms-scope         = dack;

wan.CacheClientPrms-cacheConfig = peer;
wan.CacheClientPrms-regionConfig = peer;

wan.CacheClientPrms-secToWaitForQueue = 1200;
wan.CacheClientPrms-numPutAllEntries = 5;   // max per perAll

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;
THREADGROUP gateway
  totalThreads = fcn ${wanSites} * ${${A}HostsPerSite}
                   * ${gatewayVMsPerHost} * ${gatewayThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"gateway\", ${wanSites}, ${gatewayHostsPerSite}, false, true)"
                 ncf;
THREADGROUP peer
  totalThreads = fcn ${wanSites} * ${${B}HostsPerSite}
                   * ${peerVMsPerHost} * ${peerThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"peer\", ${wanSites}, ${peerHostsPerSite}, false, true)"
                 ncf;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${peerMem} -Xmx${peerMem}\",
          ${peerHostsPerSite} * ${wanSites}, true)" ncf
  ;
