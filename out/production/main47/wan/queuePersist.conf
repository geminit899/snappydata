//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/wan/wan.inc;
include $JTESTS/wan/hct.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway hub to other cache servers.  In this test, one side of the WAN is 'up' and a number of puts are done by the client.  Then we recycle the WAN site that's up and start the 2nd WAN site and verify that the updates are received by the second WAN site";

//------------------------------------------------------------------------------
// TEST CONTROL
//------------------------------------------------------------------------------

THREADGROUP nearEnd totalThreads = 1 totalVMs = 1 clientNames = edge_1_1;
THREADGROUP farEnd totalThreads = 1 totalVMs = 1 clientNames = edge_2_1;

hydra.Prms-totalTaskTimeSec = 300;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/**
 * Configures the bridge server cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initServerCacheTask
         runMode = always
         threadGroups = bridge;

INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         runMode = always
         threadGroups = bridge;

hydra.RegionPrms-dataPolicy          = persistentReplicate default;
hydra.RegionPrms-diskStoreName       = disk      none;
hydra.RegionPrms-diskSynchronous     = false;
hydra.RegionPrms-cacheListeners      = none,     wan.EventListener;

hydra.DiskStorePrms-names = disk gatewayDisk;
hydra.DiskStorePrms-queueSize = 2500 default;
hydra.DiskStorePrms-timeInterval = 15 default;

hydra.GatewayPrms-batchConflation = true;
hydra.GatewayPrms-enablePersistence = true;
hydra.GatewayPrms-diskStoreName = gatewayDisk;

/**
 * Configures the client cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initEdgeClientCacheTask
         threadGroups = nearEnd, farEnd;
wan.CacheClientPrms-interestPolicy = keys;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------

// time to wait when re-starting recycled server
hct.HctPrms-restartWaitSec = 5;

/**
 * Kill the farEnd WAN Gateway/BridgeServer (so we'll queue messages in nearEnd)
 * Notify the nearEnd so it can start its work, then wait for it to finish.
 * then get busy with concurrent tasks.  Use weights to impose ordering.
 */
TASK taskClass = wan.WANClient taskMethod = killServer
     wan.CacheClientPrms-bridgeKillTarget = bridge_2_1
     maxTimesToRun = 1 weight = 40
     threadGroups = farEnd
     ;
TASK taskClass = wan.WANClient taskMethod = notifyNearEnd
     maxTimesToRun = 1 weight = 30
     threadGroups = farEnd
     ;
TASK taskClass = wan.WANClient taskMethod = waitForNearEnd
     maxTimesToRun = 1 weight = 20
     threadGroups = farEnd
     ;
/*
 * Wait for entries (sent from nearEnd)
 */
TASK taskClass = wan.WANClient taskMethod = waitForEvents
     wan.CacheClientPrms-sleepSec = 2
     maxTimesToRun = 1 weight = 10
     threadGroups = farEnd
     ;

/**
 * Wait for the farEnd to kill the farEnd server before starting work.
 * Populate the region (across all VMs).  Stop/start the nearEnd.  Restart
 * the farEnd.  Notify the farEnd so it can get back to work and get busy
 * with concurrent tasks.  Use weights to impose ordering.
 */
TASK taskClass = wan.WANClient taskMethod = waitForFarEnd
     maxTimesToRun = 1 weight = 60
     threadGroups = nearEnd
     ;
TASK taskClass = wan.WANClient taskMethod = populateRegionTask
     wan.CacheClientPrms-numEntries = 100
     maxTimesToRun = 1 weight = 50
     threadGroups = nearEnd
     ;
TASK taskClass = wan.WANClient taskMethod = recycleServer
     wan.CacheClientPrms-bridgeKillTarget = bridge_1_1
     maxTimesToRun = 1 weight = 40
     threadGroups = nearEnd
     ;
TASK taskClass = wan.WANClient taskMethod = restartServer
     wan.CacheClientPrms-bridgeKillTarget = bridge_2_1
     maxTimesToRun = 1 weight = 30
     threadGroups = nearEnd
     ;
TASK taskClass = wan.WANClient taskMethod = notifyFarEnd
     maxTimesToRun = 1 weight = 20
     threadGroups = nearEnd
     ;
/*
 * Put more entries (to be sent to farEnd)
 */
TASK taskClass = wan.WANClient taskMethod = populateRegionTask
     wan.CacheClientPrms-numEntries = 20
     maxTimesToRun = 1 weight = 10
     threadGroups = nearEnd
     ;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = wan.WANClient taskMethod = HydraCloseTask_regionSizeToBB
          threadGroups = nearEnd, farEnd;
CLOSETASK taskClass = wan.WANClient taskMethod = closeEdgeClientCacheTask
          threadGroups = nearEnd, farEnd;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = nearEnd, farEnd;

CLOSETASK taskClass = wan.WANClient taskMethod = HydraEndTask_regionSizesEqual
          threadGroups = nearEnd 
          ;
wan.CacheClientPrms-clientsToCompare = edge_1_1 edge_2_1;
