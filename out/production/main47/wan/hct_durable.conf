//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/wan/wan.inc;
include $JTESTS/wan/hct.inc;

//------------------------------------------------------------------------------
// TEST CONFIGURATION
//------------------------------------------------------------------------------


hydra.GemFirePrms-enableDurableClient = false true;
hydra.PoolPrms-subscriptionRedundancy = 2;
hydra.PoolPrms-minConnections = 3;

hydra.RegionPrms-cacheListeners =
      none, // bridge
      durableClients.WanEventListener;         // edge
      
hydra.Prms-maxResultWaitSec = 1800;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway hub to other cache servers.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/**
 * Configures the bridge server cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initServerCacheTask
         threadgroups = bridge;
INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         threadgroups = bridge;

/**
 * Configures the edge client cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initEdgeClientCacheTask
         threadGroups = edge,opThread,reference
         runMode = always;
/**
 * Declaring one client vm as the reference vm. This vm will never be brought down
 */         
INITTASK taskClass = wan.WANClient taskMethod = mentionReferenceInBlackboard
         threadGroups = reference;
         
    

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = wan.WANClient taskMethod = putSequentialKeysTask
     threadGroups = opThread;
     
TASK taskClass = wan.WANClient taskMethod = killClient
     threadGroups = edge
     maxTimesToRun = 3 ;

wan.CacheClientPrms-sleepSec = 0;
wan.CacheClientPrms-interestPolicy = keys;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = wan.WANClient taskMethod = waitForListenerSilence
          threadGroups = edge,opThread,reference
          batch;
CLOSETASK taskClass = wan.WANClient taskMethod = printSequentialKeysTask
          threadGroups = edge,opThread;  
CLOSETASK taskClass = wan.WANClient taskMethod = validateSequentialKeysTask
          threadGroups = edge,opThread,reference;
CLOSETASK taskClass = wan.WANClient taskMethod = validateEventsReceived
          threadGroups = edge;          
CLOSETASK taskClass = wan.WANClient taskMethod = closeEdgeClientCacheTask
          threadGroups = edge,opThread,reference;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge,opThread,reference;
CLOSETASK taskClass = wan.WANClient taskMethod = closeServerCacheTask
          threadgroups = bridge;

THREADGROUP edge
  totalThreads = fcn "${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} - 2*${edgeThreadsPerVM} " ncf
//  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
//                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

    totalVms = fcn "${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} - 2" ncf;
    
THREADGROUP opThread
  totalThreads = fcn "${edgeThreadsPerVM}" ncf
  totalVms = 1;
  
  THREADGROUP reference
  totalThreads = fcn "${edgeThreadsPerVM}" ncf
  totalVms = 1;

