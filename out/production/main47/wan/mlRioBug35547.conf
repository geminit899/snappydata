//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/wan/wan.inc;
include $JTESTS/wan/hct.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway hub to other cache servers.";

//------------------------------------------------------------------------------
// TEST CONTROL
//------------------------------------------------------------------------------

THREADGROUP creator totalThreads = 1 totalVMs = 1 clientNames = edge_1_1;
THREADGROUP targetVM totalThreads = 1 totalVMs = 1 clientNames = edge_2_1;

hydra.Prms-totalTaskTimeSec = 300;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

hydra.RegionPrms-dataPolicy          = persistentReplicate default;
hydra.RegionPrms-diskStoreName       = disk      none;
hydra.RegionPrms-diskSynchronous     = false;
hydra.RegionPrms-cacheListeners      = none,     wan.EventListener;

hydra.DiskStorePrms-names = disk;
hydra.DiskStorePrms-queueSize = 2500;
hydra.DiskStorePrms-timeInterval = 15;

hydra.GatewayPrms-batchConflation = true;

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/**
 * Configures the bridge server cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initServerCacheTask
         runMode = always
         threadGroups = bridge;
INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         runMode = always
         threadGroups = bridge;

/**
 * Configures the client cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initEdgeClientCacheTask
         threadGroups = creator, targetVM;
wan.CacheClientPrms-interestPolicy = keys;

// time to wait when re-starting recycled server
hct.HctPrms-restartWaitSec = 5;

/**
 * Populate the region (across all VMs) 
 */
INITTASK taskClass = wan.WANClient taskMethod = populateRegionTask
         wan.CacheClientPrms-numEntries = 100
         threadGroups = creator
         ;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------

/**
 * creator: bounce far-end server, do destroys, notify targetVM, and populate,
 *          ordering my tasks with weights
 */
// Stop/start the far-end WAN
TASK taskClass = wan.WANClient taskMethod = recycleServer
     wan.CacheClientPrms-bridgeKillTarget = bridge_2_1
     maxTimesToRun = 1 weight = 40
     threadGroups = creator
     ;
TASK taskClass = wan.WANClient taskMethod = destroyRandomEntriesTask
     wan.CacheClientPrms-numEntries = 4
     maxTimesToRun = 1 weight = 30
     threadGroups = creator
     ;
TASK taskClass = wan.WANClient taskMethod = notifyFarEnd
     maxTimesToRun = 1 weight = 20
     threadGroups = creator
     ;
// Attempt to put entries (hopefully in same batch) to see if they get
// processed by the far-end server
TASK taskClass = wan.WANClient taskMethod = populateRegionTask
     wan.CacheClientPrms-numEntries = 20
     maxTimesToRun = 1 weight = 10
     threadGroups = creator
     ;

/**
 * targetVM: wait for signal from creator, then wait more, ordering with weights
 */
TASK taskClass = wan.WANClient taskMethod = waitForNearEnd
     maxTimesToRun = 1 weight = 20
     threadGroups = targetVM
     ;
TASK taskClass = wan.WANClient taskMethod = waitForEvents
     wan.CacheClientPrms-sleepSec = 2
     maxTimesToRun = 1 weight = 10
     threadGroups = targetVM
     ;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------

//CLOSETASK taskClass = wan.WANClient taskMethod = printTask
//          threadGroups = creator, targetVM
//          ;
//CLOSETASK taskClass = wan.WANClient taskMethod = validateTask
//          threadGroups = creator, targetVM
//          ;
CLOSETASK taskClass = wan.WANClient taskMethod = HydraCloseTask_regionSizeToBB
          threadGroups = creator, targetVM
          ;
CLOSETASK taskClass = wan.WANClient taskMethod = closeEdgeClientCacheTask
          threadGroups = creator, targetVM
          ;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = creator, targetVM
          ;
CLOSETASK taskClass = wan.WANClient taskMethod = HydraEndTask_regionSizesEqual
          threadGroups = creator
          ;
wan.CacheClientPrms-clientsToCompare = edge_1_1 edge_2_1;
