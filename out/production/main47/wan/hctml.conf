//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/wan/wan.inc;
include $JTESTS/wan/hct.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="Merrill Lynch WAN test.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;

//------------------------------------------------------------------------------
// ML USE CASE
//------------------------------------------------------------------------------
// Define the thread groups
// The tradeFeeder thread group has 5 edge VMs in site 1
// The quoteFeeder thread group has 1 edge VMs in site 1
// The tradeBurstFeeder thread group has 1 edge VMs in site 1
// The waiter thread group has 1 edge VMs in site 2
THREADGROUP tradeFeeder totalThreads = 5 totalVMs = 5 clientNames = edge_1_1;
THREADGROUP quoteFeeder totalThreads = 1 totalVMs = 1 clientNames = edge_1_1;
THREADGROUP tradeBurstFeeder totalThreads = 1 totalVMs = 1 clientNames = edge_1_1;
THREADGROUP waiter totalThreads = 1 totalVMs = 1 clientNames = edge_2_1;

// Data files
wan.ml.MLPrms-quotesDataFile = $JTESTS/wan/ml/data/gdNyMkt1008.xml;
wan.ml.MLPrms-tradesDataFile = $JTESTS/wan/ml/data/res_ln_2.txt.gz;

hydra.VmPrms-extraClassPaths = $JTESTS/lib/jdom.jar;

// Data rates
wan.ml.MLPrms-tradesPerSecond = 1;
wan.ml.MLPrms-tradesToProcess = 600;
wan.ml.MLPrms-quotesPerSecond = 1;
wan.ml.MLPrms-quotesToProcess = 600;
wan.ml.MLPrms-burstTradesPerSecond = 200;
wan.ml.MLPrms-burstSleepInterval = 30;
wan.ml.MLPrms-burstTime = 3;

hydra.Prms-maxResultWaitSec = 1200;
hydra.Prms-totalTaskTimeSec=1200;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/**
 * Configures the cache server cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initMLServerCacheTask
         threadGroups = bridge;
INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         threadGroups = bridge;

/**
 * Configures the client cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initMLEdgeClientCacheTask
         threadGroups = tradeFeeder, quoteFeeder, tradeBurstFeeder, waiter;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------

TASK taskClass     = wan.WANClient taskMethod = tradeFeederTask
     threadGroups  = tradeFeeder
     maxTimesToRun = 5;

TASK taskClass     = wan.WANClient taskMethod = quoteFeederTask
     threadGroups  = quoteFeeder
     maxTimesToRun = 1;

TASK taskClass     = wan.WANClient taskMethod = tradeBurstFeederTask
     threadGroups  = tradeBurstFeeder
     maxTimesToRun = 1;

wan.CacheClientPrms-sleepSec = 1;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = wan.WANClient taskMethod = printMLTask
          threadGroups = tradeFeeder, quoteFeeder, tradeBurstFeeder, waiter;
CLOSETASK taskClass = wan.WANClient taskMethod = validateMLTask
          threadGroups = tradeFeeder, quoteFeeder, tradeBurstFeeder, waiter;
CLOSETASK taskClass = wan.WANClient taskMethod = closeEdgeClientCacheTask
          threadGroups = tradeFeeder, quoteFeeder, tradeBurstFeeder, waiter;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = tradeFeeder, quoteFeeder, tradeBurstFeeder, waiter;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = closeMLServerCacheTask
          threadGroups = bridge;
