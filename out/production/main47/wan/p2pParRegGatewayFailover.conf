//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_2_locator.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is peer-to-peer in its own distributed system and each site has a single WAN gateway hub to other sites.  Additional peers in the site are not gateways.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask;

INITTASK     taskClass   = util.PRObserver  taskMethod = initialize
             runMode = once
             threadGroups = dataStoreThreads;

INITTASK     taskClass = wan.WANClient taskMethod = createLocatorTask
             threadGroups = locator;

INITTASK     taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
             threadGroups = locator;

// create gateway hub & regions
INITTASK     taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = HydraTask_initialize
             hydra.ConfigPrms-gatewayHubConfig = hub
             hydra.ConfigPrms-regionConfig = clientRegion
             runMode = always
             threadGroups = gatewayThreads
             ;

INITTASK     taskClass = parReg.wbcl.ParRegWBCLTest   taskMethod = startGatewayHubTask
             hydra.ConfigPrms-gatewayConfig = gateway
             runMode = always
             threadGroups = gatewayThreads
             ;

INITTASK     taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_HA_initializeDataStore
             runMode = once
             threadGroups = dataStoreThreads;

INITTASK     taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_HA_reinitializeDataStore
             runMode = dynamic
             threadGroups = dataStoreThreads;

INITTASK     taskClass   =  parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_waitForMyStartupRecovery
             threadGroups = dataStoreThreads;

// maxThreads of 1 means only one thread will be running the HAController at a time
TASK         taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_HAController
             threadGroups = dataStoreThreads, gatewayThreads
             maxThreads = 1;

TASK         taskClass   = parReg.wbcl.ParRegWBCLTest  taskMethod = HydraTask_HADoEntryOps
             threadGroups = gatewayThreads, dataStoreThreads;

CLOSETASK    taskClass   = parReg.ParRegUtil  taskMethod = HydraTask_rebalance
             threadGroups = dataStoreThreads;

hydra.GemFirePrms-stopSystemsAfterTest = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.Prms-useFixedRandomInMaster= true;
hydra.Prms-totalTaskTimeSec = 31536000;  // don't let hydra terminate based on time
hydra.Prms-maxResultWaitSec = 1020;  // 17 minutes to avoid timeouts on slow machines
hydra.Prms-serialExecution = false;
hydra.Prms-clientShutdownHook = parReg.ParRegUtil dumpAllPartitionedRegions;

// this is the granularity for pausing
util.TestHelperPrms-minTaskGranularitySec = 10;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.ValueHolderPrms-useExtraObject = true;

hydra.ConfigPrms-cacheConfig    = cache1;
hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.GatewayHubPrms-names = hub;

hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-maximumQueueMemory = 300;
hydra.GatewayPrms-batchTimeInterval = 10;
hydra.GatewayPrms-diskStoreName = disk;
hydra.DiskStorePrms-names = disk;

hydra.RegionPrms-names          = clientRegion          dataStoreRegion;
hydra.RegionPrms-partitionName  = accessorPR               dataStorePR;
hydra.RegionPrms-regionName     = partitionedRegion;
hydra.RegionPrms-cacheLoader    = parReg.ParRegLoader;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-scope          = default;
hydra.RegionPrms-enableGateway  = true;
hydra.RegionPrms-cacheListeners = util.SummaryLogListener;

hydra.PartitionPrms-names           = accessorPR          dataStorePR;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};
hydra.PartitionPrms-localMaxMemory  = 0                   default;

// don't allow conflict between multiple writers
parReg.ParRegPrms-bridgeOrderingWorkaround = uniqueKeys;

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
// lynn - localDestroy/localInvalidate not supported for partitioned regions (for now)
parReg.ParRegPrms-entryOperations = ONEOF add putAll putIfAbsent remove replaceNoInval replaceOldNoInval getNew getNew update get destroy FOENO; 
parReg.ParRegPrms-upperThreshold = 500;
parReg.ParRegPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
parReg.ParRegPrms-lowerThreshold = 0;
parReg.ParRegPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsentAsCreate FOENO;
parReg.ParRegPrms-numPutAllNewKeys = 1;
parReg.ParRegPrms-numPutAllExistingKeys = RANGE 1 100 EGNAR;

parReg.ParRegPrms-secondsToRun = 1800; // this is the time for the whole run
parReg.ParRegPrms-numVMsToStop = 1;
parReg.ParRegPrms-stopVMsMatchStr = "gateway";  // only stop 1 gateway at a time
parReg.ParRegPrms-localMaxMemory = RANGE 1 10 EGNAR;
util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
parReg.ParRegPrms-highAvailability = true;
util.CachePrms-useDeclarativeXmlFile = false;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;
THREADGROUP gatewayThreads
  totalThreads = fcn ${wanSites} * ${${A}HostsPerSite}
                   * ${gatewayVMsPerHost} * ${gatewayThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"gateway\", ${wanSites}, ${gatewayHostsPerSite}, false, true)"
                 ncf;
THREADGROUP dataStoreThreads
  totalThreads = fcn ${wanSites} * ${${B}HostsPerSite}
                   * ${dataStoreVMsPerHost} * ${dataStoreThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"dataStore\", ${wanSites}, ${dataStoreHostsPerSite}, false, true)"
                 ncf;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${gatewayHostsPerSite} * ${wanSites}, true)" ncf
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${dataStoreMem} -Xmx${dataStoreMem}\",
          ${dataStoreHostsPerSite} * ${wanSites}, true)" ncf
  ;

