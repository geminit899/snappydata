//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/wan/wan.inc;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;

// the first VM in each WAN site will be a PR accessor (all other server VMs will be dataStores/default threads)
THREADGROUP accessor
  totalThreads = fcn ${wanSites} * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"bridge\", ${wanSites}, 1, true, true)" ncf;

THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${serverMem} -Xmx${serverMem}\",
          ${bridgeHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${clientMem} -Xmx${clientMem}\",
          ${edgeHostsPerSite} * ${wanSites}, true)" ncf;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway hub to other cache servers.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/**
 * Configures the  server cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initServerCacheTask
         wan.CacheServerPrms-cacheConfig = bridge
         wan.CacheServerPrms-regionConfig = dataStore
         wan.CacheServerPrms-bridgeConfig = bridge
         threadGroups = default;
INITTASK taskClass = wan.WANClient taskMethod = initServerCacheTask
         wan.CacheServerPrms-cacheConfig = bridge
         wan.CacheServerPrms-regionConfig = accessor
         wan.CacheServerPrms-bridgeConfig = bridge
         threadGroups = accessor;
INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         threadGroups = accessor, default;
/**
 * Configures the edge client cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initEdgeClientCacheTask
         threadGroups = edge;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations) - TX supported in edge clients and servers (since 6.6)
//------------------------------------------------------------------------------

TASK taskClass = wan.WANClient taskMethod = putSequentialKeysTask
     threadGroups = edge;


//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = wan.WANClient taskMethod = printSequentialKeysTask
          threadGroups = edge;
CLOSETASK taskClass = wan.WANClient taskMethod = validateSequentialKeysTask
          threadGroups = edge;
CLOSETASK taskClass = wan.WANClient taskMethod = closeEdgeClientCacheTask
          threadGroups = edge;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge;
CLOSETASK taskClass = wan.WANClient taskMethod = closeServerCacheTask
          threadGroups = accessor, default;

hydra.CachePrms-names            = bridge edge;

hydra.RegionPrms-names           = accessor    dataStore   edge;
hydra.RegionPrms-poolName        = none        none        brloader;
hydra.RegionPrms-enableGateway   = true        true        false;
hydra.RegionPrms-dataPolicy      = partition   partition   default;
hydra.RegionPrms-scope           = default     default     local;
hydra.RegionPrms-partitionName   = accessor    dataStore   none;

hydra.PartitionPrms-names        = accessor    dataStore;
hydra.PartitionPrms-redundantCopies = 1        1;
hydra.PartitionPrms-localMaxMemory =  0        default;

hydra.BridgePrms-names = bridge;
hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

wan.CacheClientPrms-cacheConfig = edge;
wan.CacheClientPrms-regionConfig = edge;

hydra.PoolPrms-readTimeout = 30000;
hydra.PoolPrms-names       = brloader;
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper getRandomEndpointsInWanHctSite;
hydra.PoolPrms-subscriptionEnabled = true;

wan.CacheClientPrms-secToWaitForQueue = 2400;
wan.CacheClientPrms-sleepSec = 0;

// Enable transactions, configure for limited c/s tx in GemFire 6.6
getInitialImage.InitImagePrms-useTransactions = true;
hydra.PoolPrms-prSingleHopEnabled = false;

// One op/entry per tx (while we have restriction on colocated entries)
wan.CacheClientPrms-numPutAllEntries = 1;


