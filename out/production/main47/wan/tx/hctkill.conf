//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;

// the first two VMs in each WAN site will be PR accessors and bridgeServers as well as the primary/secondary gateway
// the remaining members will be dataStores (but not bridgeServers or Gateways)
// and will be in the default threadGroup
// This helps us to avoid BUGS 39061 (dataStores do ops) and TransactionDataNodeHasDepartedExceptions (which is thrown if the data host is recycled)
THREADGROUP firstGatewayVm
  totalThreads = fcn ${wanSites} * ${bridgeThreadsPerVM} ncf
  clientNames  = bridge_1_1, bridge_2_1, bridge_3_1;

THREADGROUP secondGatewayVm
  totalThreads = fcn ${wanSites} * ${bridgeThreadsPerVM} ncf
  clientNames  = bridge_1_2, bridge_2_2, bridge_3_2;

THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${serverMem} -Xmx${serverMem}\",
          ${bridgeHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${clientMem} -Xmx${clientMem}\",
          ${edgeHostsPerSite} * ${wanSites}, true)" ncf;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway hub to other cache servers.";

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/**
 * Configures the accessor-server-gateway and dataStore VMs 
 */
INITTASK taskClass = wan.WANClient taskMethod = initPeerCacheTask
         wan.CacheClientPrms-cacheConfig = dataStore
         wan.CacheClientPrms-regionConfig = dataStore
         threadGroups = default;
INITTASK taskClass = wan.WANClient taskMethod = initServerCacheTask
         wan.CacheServerPrms-cacheConfig = accessor
         wan.CacheServerPrms-regionConfig = accessor
         wan.CacheServerPrms-bridgeConfig = bridge
         wan.CacheServerPrms-gatewayHubConfig = hub
         runMode = always
         threadGroups = firstGatewayVm, secondGatewayVm;
INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         wan.CacheServerPrms-gatewayConfig = gateway
         runMode = always
         threadGroups = firstGatewayVm, secondGatewayVm;
/**
 * Configures the edge client cache.
 */
INITTASK taskClass = wan.WANClient taskMethod = initEdgeClientCacheTask
         threadGroups = edge;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations) - TX supported in edgeClients (since 6.6)
//------------------------------------------------------------------------------

TASK taskClass = wan.WANClient taskMethod = putSequentialKeysTask
     threadGroups = edge;

// only kill the firstGatewayVm (that way we avoid killing both at the same time
// yet we might still catch two gateways (for different sites) at the same time
TASK    taskClass = wan.WANClient taskMethod  = killGatewayHub
        maxTimesToRun = 3
        threadGroups = firstGatewayVm
        ;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = wan.WANClient taskMethod = printSequentialKeysTask
          threadGroups = edge;
CLOSETASK taskClass = wan.WANClient taskMethod = validateSequentialKeysTask
          threadGroups = edge;
CLOSETASK taskClass = wan.WANClient taskMethod = closeEdgeClientCacheTask
          threadGroups = edge;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge;
CLOSETASK taskClass = wan.WANClient taskMethod = closeServerCacheTask
          threadGroups = firstGatewayVm, secondGatewayVm, default;

hydra.GatewayHubPrms-names = hub;

hydra.GatewayPrms-names = gateway;
hydra.GatewayPrms-maximumQueueMemory = 300;
hydra.GatewayPrms-batchTimeInterval = 10;
hydra.GatewayPrms-diskStoreName = disk;
hydra.DiskStorePrms-names = disk;

hydra.CachePrms-names            = accessor    dataStore   edge;

hydra.RegionPrms-names           = accessor    dataStore   edge;
hydra.RegionPrms-poolName        = none        none        brloader;
hydra.RegionPrms-enableGateway   = true        true        false;
hydra.RegionPrms-dataPolicy      = partition   partition   default;
hydra.RegionPrms-scope           = default     default     local;
hydra.RegionPrms-partitionName   = accessor    dataStore   none;

hydra.PartitionPrms-names        = accessor    dataStore;
hydra.PartitionPrms-redundantCopies = 1        1;
hydra.PartitionPrms-localMaxMemory =  0        default;

hydra.BridgePrms-names = bridge;
hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

wan.CacheClientPrms-cacheConfig = edge;
wan.CacheClientPrms-regionConfig = edge;

hydra.PoolPrms-readTimeout = 30000;
hydra.PoolPrms-names       = brloader;
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper getRandomEndpointsInWanHctSite;
hydra.PoolPrms-subscriptionEnabled = true;

wan.CacheClientPrms-secToWaitForQueue = 2400;
wan.CacheClientPrms-sleepSec = 0;

// Enable transactions, configure for limited c/s tx in GemFire 6.6
getInitialImage.InitImagePrms-useTransactions = true;
hydra.PoolPrms-prSingleHopEnabled = false;

// One op/entry per tx (while we have restriction on colocated entries)
wan.CacheClientPrms-numPutAllEntries = 1;

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------
hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 2400;

// Kill Prms
hct.HctPrms-killInterval = 30000;  // in millis
hct.HctPrms-regionName = "GlobalVillage";
hct.HctPrms-blackboardName = "Stuff";
hct.HctPrms-blackboardType = rmi;
hct.HctPrms-restartWaitSec = 5;
