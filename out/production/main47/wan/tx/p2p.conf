//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_2_locator.inc;
include $JTESTS/wan/wan.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site hosts a partitioned region, is ndataStore-to-dataStore in its own distributed system and each VM is a WAN gateway hub to other sites.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;

//------------------------------------------------------------------------------
// THREADGROUPS (primary & secondary PR + 1 accessor)
//------------------------------------------------------------------------------

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
                 * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)"
                 ncf;
THREADGROUP dataStore
  totalThreads = fcn ${wanSites} * ${dataStoreHostsPerSite}
                   * ${dataStoreVMsPerHost} * ${dataStoreThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"dataStore\", ${wanSites}, ${dataStoreHostsPerSite}, false, true)"
                 ncf;
THREADGROUP accessor
  totalThreads = fcn ${wanSites} * ${accessorHostsPerSite}
                   * ${accessorVMsPerHost} * ${accessorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"accessor\", ${wanSites}, ${accessorHostsPerSite}, false, true)"
                 ncf;

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = initPeerCacheTask
         wan.CacheClientPrms-cacheConfig  = peer
         wan.CacheClientPrms-regionConfig = dataStore
         runMode = always
         threadGroups = dataStore;
INITTASK taskClass = wan.WANClient taskMethod = initPeerCacheTask
         wan.CacheClientPrms-cacheConfig  = peer
         wan.CacheClientPrms-regionConfig = accessor
         runMode = always
         threadGroups = accessor;
INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         threadGroups = dataStore, accessor;

//------------------------------------------------------------------------------
// PRIMARY WORK (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = wan.WANClient taskMethod = putSequentialKeysTask
     threadGroups = accessor;

wan.CacheClientPrms-sleepSec = 0;

//------------------------------------------------------------------------------
// FINAL WORK (validate and close)
//------------------------------------------------------------------------------

CLOSETASK taskClass = wan.WANClient taskMethod = printSequentialKeysTask
          threadGroups = dataStore, accessor;
CLOSETASK taskClass = wan.WANClient taskMethod = validateSequentialKeysTask
          threadGroups = dataStore, accessor;
CLOSETASK taskClass = wan.WANClient taskMethod = closePeerCacheTask
          threadGroups = dataStore, accessor;
CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
          threadGroups = dataStore, accessor;


wan.CacheClientPrms-secToWaitForQueue = 1200;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${dataStoreMem} -Xmx${dataStoreMem}\",
          ${dataStoreHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${accessorHostsPerSite} * ${wanSites}, true)" ncf
  ;

hydra.CachePrms-names = peer;

// Configure p2p clients to share the partitionedRegion
hydra.RegionPrms-names         = dataStore    accessor;
hydra.RegionPrms-enableGateway = true;
hydra.RegionPrms-dataPolicy    = partition;
hydra.RegionPrms-scope         = default;
hydra.RegionPrms-partitionName = dataStore    accessor;

// primary + secondary (plus once accessor vm) for dataStore
hydra.PartitionPrms-names      = dataStore    accessor;
hydra.PartitionPrms-localMaxMemory =  default  0;
hydra.PartitionPrms-redundantCopies = 1;

// allow a bit more time for prTx version
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-totalTaskTimeSec = 60;

// Configure to execute ops as transactions
getInitialImage.InitImagePrms-useTransactions = true;

