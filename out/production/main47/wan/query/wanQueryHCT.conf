//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/wan/wan.inc;
include $JTESTS/wan/hct.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway hub to other cache servers.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;

// -----------------------------------------------------------------------------
// Region descriptions 
// -----------------------------------------------------------------------------

hydra.RegionPrms-names         = bridge1 bridge2 bridge3 bridge4 edge1 edge2 edge3 edge4;
hydra.RegionPrms-poolName   = none none none none brloader brloader brloader brloader;
hydra.RegionPrms-enableGateway = true true true true false false false false;
hydra.RegionPrms-dataPolicy    = replicate replicate persistentReplicate persistentReplicate default default default default;
hydra.RegionPrms-scope         = dack dack dack dack local local local local;
hydra.RegionPrms-diskStoreName  = none none disk1 disk2 none;
hydra.RegionPrms-diskSynchronous = true;
hydra.RegionPrms-valueConstraint  = objects.PRPortfolio;
hydra.DiskStorePrms-names       = disk disk1 disk2;
hydra.DiskStorePrms-maxOplogSize = 10240;
hydra.DiskStorePrms-queueSize = ONEOF 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 50 500 1000 2000 foeno;

event.EventPrms-maxObjects = 500;
wan.CacheServerPrms-cacheConfig = bridge;
wan.CacheServerPrms-regionConfig = bridge1 bridge2 bridge3 bridge4;
wan.CacheServerPrms-bridgeConfig = bridge;

wan.CacheClientPrms-cacheConfig = edge;
wan.CacheClientPrms-regionConfig = edge1 edge2 edge3 edge4;

query.QueryPrms-objectType = objects.PRPortfolio;
event.EventPrms-useRandomLocks = false;
query.QueryPrms-entryAndQueryOperations = ONEOF add add add destroy destroy query query FOENO; 

query.QueryPrms-useRandomValues = false;
query.index.IndexPrms-numOfIndexes = 2;
query.index.IndexPrms-indexType = all;
query.QueryPrms-isIndexUsageValidation = true;
hydra.RegionPrms-indexMaintenanceSynchronous  = true;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
STARTTASK    taskClass   = event.EventBB taskMethod  = HydraTask_initialize
             clientNames = bridge_1_1;
STARTTASK    taskClass   = query.QueryBB taskMethod  = HydraTask_initialize
             clientNames = bridge_1_1;
STARTTASK    taskClass   = util.CacheBB taskMethod  = HydraTask_initialize
             clientNames = bridge_1_1;
INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;
hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar $GEMFIRE/lib/gemfire.jar;
          
          
          
TASK         taskClass   = query.QueryTest taskMethod  = HydraTask_doEntryAndQueryOperations
         threadGroups = edge;
/**
 * Configures the bridge server cache.
 */
INITTASK taskClass = wan.query.WANQueryClient taskMethod = HydraTask_initialize
         threadGroups = bridge, edge;
INITTASK taskClass = wan.query.WANQueryClient taskMethod = initServerCacheTask
         threadGroups = bridge;
INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         threadGroups = bridge;

/**
 * Configures the edge client cache.
 */
INITTASK taskClass = wan.query.WANQueryClient taskMethod = initEdgeClientCacheTask
         threadGroups = edge;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------
INITTASK     taskClass     = query.QueryTest  taskMethod = HydraTask_populateRegions
//TASK taskClass = query.queryFunction taskMethod = putSequentialKeysTask
     threadGroups = bridge;

INITTASK taskClass = query.SerialQueryAndEntryOpsTest  taskMethod = HydraTask_createIndexes
         threadGroups = bridge;

wan.CacheClientPrms-sleepSec = 0;
wan.CacheClientPrms-objectType = objects.PRPortfolio;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------


CLOSETASK taskClass = wan.WANClient taskMethod = closeEdgeClientCacheTask
          threadGroups = edge;
//CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
//          threadGroups = edge;
CLOSETASK taskClass = wan.query.WANQueryClient taskMethod = closeServerCacheTask
          threadGroups = bridge;

event.EventPrms-useRandomLocks = false;
query.QueryPrms-entryAndQueryOperations = ONEOF add add add destroy destroy query query FOENO; 
query.QueryPrms-objectType = objects.PRPortfolio;
query.QueryPrms-useRandomValues = false;
query.index.IndexPrms-numOfIndexes = 2;
query.index.IndexPrms-indexType = all;
query.QueryPrms-isIndexUsageValidation = false;

THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;
