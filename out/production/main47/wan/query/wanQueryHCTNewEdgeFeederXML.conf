//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/wan/wan.inc;

hydra.BridgePrms-names = bridge;

hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO; // selector control

THREADGROUP locator
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
               * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;

THREADGROUP bridge
  totalThreads = fcn ${wanSites} * ${bridgeHostsPerSite}
               * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           (\"bridge\", ${wanSites}, ${bridgeHostsPerSite}, false, true)" ncf;


THREADGROUP edge1
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} / 2 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                 (\"edge_1_\", ${edgeHostsPerSite}, true)" ncf;
                 
THREADGROUP edge2
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} / 2 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                 (\"edge_2_\", ${edgeHostsPerSite}, true)" ncf;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Dnone\",
          ${locatorHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${serverMem} -Xmx${serverMem} -XX:+UseConcMarkSweepGC -XX:+UseParNewGC\",
          ${bridgeHostsPerSite} * ${wanSites}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
      (\"-Xms${clientMem} -Xmx${clientMem} -XX:+UseConcMarkSweepGC -XX:+UseParNewGC\",
          ${edgeHostsPerSite} * ${wanSites}, true)" ncf;


//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway hub to other cache servers.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec = 30;

// -----------------------------------------------------------------------------
// Region descriptions 
// -----------------------------------------------------------------------------

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;
hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names           = clientRegion;
hydra.RegionPrms-dataPolicy      = normal;
hydra.RegionPrms-scope           = local;
hydra.RegionPrms-poolName        = clientPool;
hydra.PoolPrms-names                  = clientPool;
hydra.PoolPrms-subscriptionEnabled    = true;
hydra.PoolPrms-readTimeout            = 600000; 
hydra.PoolPrms-retryAttempts          = 1; 
hydra.PoolPrms-idleTimeout            = 600000; 
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper
                                   getRandomEndpointsInWanHctSite;

// For the gateway diskstore
hydra.DiskStorePrms-names       = disk;
hydra.DiskStorePrms-maxOplogSize = 10240;
hydra.DiskStorePrms-queueSize = ONEOF 5 10 20 FOENO;
hydra.DiskStorePrms-timeInterval = oneof 50 500 1000 2000 foeno;
INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1024;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = false ;
wan.query.WANQueryPrms-populateDataSingleSite = true;
//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */

INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;
hydra.VmPrms-extraClassPaths = $GEMFIRE/lib/antlr.jar $GEMFIRE/lib/gemfire.jar;
          
          
INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_initWithXml
         runMode = always
         threadGroups = bridge;
   
INITTASK taskClass = wan.query.WANQueryClient taskMethod = HydraTask_createGatewayHub
         runMode = always
         threadGroups = bridge;
         
INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         threadGroups = bridge;
         
INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_initClientWithXml
         threadGroups = edge1, edge2;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_loadXmlRegions
         batch
         threadGroups = edge1;
         
//INITTASK taskClass = wan.query.WANQueryClient taskMethod = HydraTask_sleepForSometime
//         threadGroups = edge, bridge;

INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_waitLongerForSilence
            runMode = once
         threadGroups = bridge;
         
INITTASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_verifyXmlRegionSizesForWAN
         runMode = once
         threadGroups = bridge;
         
TASK taskClass = wan.query.WANQueryClient taskMethod = HydraTask_doEntryAndQueryOperations
         threadGroups = edge1, edge2;
//CLOSETASK taskClass = diskRecovery.StartupShutdownTest taskMethod = HydraTask_verifyXmlRegionSizes
//         runMode = once
//         threadGroups = bridge;
         
//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------


CLOSETASK taskClass = wan.WANClient taskMethod = closeEdgeClientCacheTask
          threadGroups = edge1, edge2;
//CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
//          threadGroups = edge;
CLOSETASK taskClass = wan.query.WANQueryClient taskMethod = closeServerCacheTask
          threadGroups = bridge;
query.QueryPrms-entryAndQueryOperations = ONEOF update update update update update query query query FOENO;

util.TestHelperPrms-minTaskGranularitySec = 60;
hydra.Prms-totalTaskTimeSec = 1800;
hydra.Prms-maxResultWaitSec = 500;
event.EventPrms-useRandomLocks = false;
diskRecovery.RecoveryPrms-numToLoad = 1000; // number of entries to load into each region by a SINGLE thread
hydra.HostPrms-javaHomes = "/gcm/where/jdk/1.6.0_26/x86_64.linux";