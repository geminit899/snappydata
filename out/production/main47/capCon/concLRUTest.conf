hydra.Prms-testDescription =
"This test concurrently adds to a region with an entry evictor, and
monitors the region for the correct capacity.

This test should be run many times since it is very random; it can choose from many 
combinations of region attributes, etc. It expects these hydra variables:
   hydra.numHosts
   numVMs
   numThreads
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparamsN.inc;

// Need one thread per VM to monitor the capacity; 
// totalThreads (in threadGroup below) should equal vmQuantities * number of gemfire systems.
// totalVMs (in threadGroup below) should equal vmQuantities * number of gemfire systems.
hydra.ClientPrms-vmQuantities = ${vmQuantities}; // VMs per gemfire system
hydra.ClientPrms-vmThreads    = ${vmThreads};
THREADGROUP monitorThreads totalThreads = fcn "${hydra.numHosts} * ${vmQuantities}" ncf
                           totalVMs = fcn "${hydra.numHosts} * ${vmQuantities}" ncf;

INCLUDE $JTESTS/util/randomValues.inc;

STARTTASK    taskClass   = capCon.CapConBB taskMethod  = HydraTask_initialize;

STARTTASK    taskClass   = util.RegionDefinition taskMethod = HydraTask_initialize;

INITTASK     taskClass   = capCon.LRUTest taskMethod  = HydraTask_initialize;

TASK         taskClass   = capCon.LRUTest taskMethod  = HydraTask_addEntries
             threadGroups = default;

TASK         taskClass   = capCon.LRUTest taskMethod  = HydraTask_monitorCapacity
             threadGroups = monitorThreads;

ENDTASK      taskClass   = capCon.CapConTest taskMethod  = HydraTask_endTask;

ENDTASK      taskClass   = capCon.LRUTest taskMethod  = HydraTask_endTask;

RANDOMINCLUDE $JTESTS/memscale/offHeap_all.inc;

hydra.Prms-totalTaskTimeSec = 900;  
hydra.Prms-maxResultWaitSec = 600;

// Allow the test to continue, as we've seen earlyEviction and we'd like to
// see if the problem resolves or continually degrades after the first report.
hydra.Prms-haltIfBadResult=false;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;
util.TestHelperPrms-minTaskGranularitySec = 60;

hydra.GemFirePrms-conserveSockets = true;

// Random region configurations; a region with either have expiration actions or not
// Two specs have local regions, two have distributed regions, so there is an equal
// probability of either.
util.RegionDefPrms-regionSpecs = "
   specName = region1:
       scope = local: dataPolicy = normal: 
       entryTTLSec = 0 20: 
       entryTTLAction = invalidate localInvalidate:
       entryIdleTimeoutSec = 0 20: 
       entryIdleTimeoutAction = invalidate localInvalidate:
       statisticsEnabled = true:
       eviction = lru:
       evictionLimit = 1000:
       enableOffHeapMemory = ifOffHeapMemoryConfigured:
   specName = region2:
       scope = ack, noAck, global: dataPolicy = normal: 
       entryTTLSec = 0 20: 
       entryTTLAction = invalidate localInvalidate:
       entryIdleTimeoutSec = 0 20: 
       entryIdleTimeoutAction = invalidate localInvalidate:
       statisticsEnabled = true:
       eviction = lru:
       evictionLimit = 1000:
       enableOffHeapMemory = ifOffHeapMemoryConfigured:
   specName = region3:
       scope = ack, noAck, global: dataPolicy = normal: 
       concurrencyChecksEnabled = true:
       entryTTLSec = 0 20: 
       entryTTLAction = invalidate localInvalidate:
       entryIdleTimeoutSec = 0 20: 
       entryIdleTimeoutAction = invalidate localInvalidate:
       statisticsEnabled = true:
       eviction = lru:
       evictionLimit = 1000:
       enableOffHeapMemory = ifOffHeapMemoryConfigured:
   specName = region4:
       scope = local: dataPolicy = normal: 
       concurrencyChecksEnabled = true:
       entryTTLSec = 0 20: 
       entryTTLAction = invalidate localInvalidate:
       entryIdleTimeoutSec = 0 20: 
       entryIdleTimeoutAction = invalidate localInvalidate:
       statisticsEnabled = true:
       eviction = lru:
       evictionLimit = 1000:
       enableOffHeapMemory = ifOffHeapMemoryConfigured:
   ";
util.RegionDefPrms-VMRegionSpecName = ONEOF region1 region2 region3 region4 FOENO;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

capCon.CapConPrms-useCacheLoader = ONEOF true false FOENO;
hydra.Prms-haltIfBadResult = false; // for occasional failures that are hard to reproduce
