hydra.Prms-testDescription =
"This test runs in serial execution mode and dynamically changes the
size of an LRU capacity controller.  A task puts new keys/values into 
a region with an entry evictor and verifies the region size for 
each put and LRU evictions. The maximumEntries for the capacity controller
can change throughout the test.  

This test expects these hydra variables:
   numVMs
   numThreads
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams1.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = ${vmQuantities}; // VMs per gemfire system
hydra.ClientPrms-vmThreads    = ${vmThreads};

STARTTASK    taskClass   = capCon.CapConBB taskMethod  = HydraTask_initialize;

STARTTASK    taskClass   = util.RegionDefinition taskMethod = HydraTask_initialize;

INITTASK     taskClass   = capCon.LRUDynamicTest taskMethod  = HydraTask_initialize;

TASK         taskClass   = capCon.LRUDynamicTest taskMethod  = HydraTask_serialTest;

ENDTASK      taskClass   = capCon.LRUTest taskMethod  = HydraTask_endTask;

ENDTASK      taskClass   = capCon.LRUDynamicTest taskMethod  = HydraTask_endTask;

hydra.Prms-totalTaskTimeSec = 900;  
hydra.Prms-serialExecution = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;
util.TestHelperPrms-minTaskGranularitySec = 30;

RANDOMINCLUDE $JTESTS/memscale/offHeap_all.inc;

util.RegionDefPrms-regionSpecs = "
   specName = region1:
       scope = local ack noack global: dataPolicy = normal: 
       eviction = LRU:
       evictionLimit = 1:
       enableOffHeapMemory = ifOffHeapMemoryConfigured:
   specName = region2:
       scope = local ack noack global: dataPolicy = normal: 
       concurrencyChecksEnabled = true:
       eviction = LRU:
       evictionLimit = 1:
       enableOffHeapMemory = ifOffHeapMemoryConfigured:
   ";
util.RegionDefPrms-VMRegionSpecName = ONEOF region1 region2 FOENO;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

capCon.CapConPrms-useCacheLoader = ONEOF true false FOENO;

capCon.CapConPrms-randomCapacityChanges = ONEOF true false FOENO;
capCon.CapConPrms-boundsMultiplier = 100;
util.BoundsPrms-targetLowPoint = 1;
util.BoundsPrms-targetHighPoint = 10;
