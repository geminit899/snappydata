hydra.Prms-testDescription =
"This test concurrently adds to a region with a memory evictor.
Most objects are from 2K to 18K with spikes to 100K. Since the objects put
into the region are variable size, the capacity cannot be monitored.

This test expects these hydra variables:
   vmQuantities
   vmThreads
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams1.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = ${vmQuantities}; // VMs per gemfire system
hydra.ClientPrms-vmThreads    = ${vmThreads};

STARTTASK    taskClass   = capCon.CapConBB taskMethod  = HydraTask_initialize;

STARTTASK    taskClass   = util.RegionDefinition taskMethod = HydraTask_initialize;

INITTASK     taskClass   = capCon.MemLRUSpikes taskMethod  = HydraTask_initialize;

TASK         taskClass   = capCon.MemLRUTest taskMethod  = HydraTask_addEntries;

ENDTASK      taskClass   = capCon.CapConTest taskMethod  = HydraTask_endTask;

hydra.VmPrms-extraVMArgs = "-Xms350m -Xmx350m";

hydra.Prms-totalTaskTimeSec = 900;  
hydra.Prms-maxResultWaitSec = 300;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;
util.TestHelperPrms-minTaskGranularitySec = 60;

util.RegionDefPrms-regionSpecs = "
   specName = region1:
       scope = local ack noack global: dataPolicy = normal: 
       eviction = memLRU:
       evictionLimit = 40:
       enableOffHeapMemory = ifOffHeapMemoryConfigured:
   specName = region2:
       scope = local ack noack global: dataPolicy = normal: 
       concurrencyChecksEnabled = true:
       eviction = memLRU:
       evictionLimit = 40:
       enableOffHeapMemory = ifOffHeapMemoryConfigured:
   ";
util.RegionDefPrms-VMRegionSpecName = ONEOF region1 region2 FOENO;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

capCon.CapConPrms-useCacheLoader = ONEOF true false FOENO;
capCon.CapConPrms-byteArraySize = ONEOF RANGE 2000 18000 EGNAR
                                        RANGE 2000 10000 EGNAR
                                        RANGE 2000 8000 EGNAR
                                        RANGE 2000 6000 EGNAR
                                        RANGE 18000 100000 EGNAR
                                  FOENO;      
capCon.CapConPrms-fillByteArray = true;
capCon.CapConPrms-upperLimitDelta = 1000000;
capCon.CapConPrms-lowerLimitDelta = 1000000;
hydra.VmPrms-extraVMArgs = "-Xms350m -Xmx350m";
