hydra.Prms-testDescription = "
This test concurrently exercises async receivers and slow consumers with
periodic validation of the region entries. Consumers gradually slow down,
then speed up.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;
include $JTESTS/util/randomValues.inc;

THREADGROUP adminThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"admin\", ${adminHosts}, true)"
                   ncf;

THREADGROUP producerThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"producer\", ${producerHosts}, true)"
                   ncf;

THREADGROUP consumerThreads
    totalThreads = fcn
                   ${consumerHosts} * ${consumerVMsPerHost} * ${consumerThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"consumer\", ${consumerHosts}, true)"
                   ncf;

INITTASK  taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_initProducer
          threadGroups = producerThread;

INITTASK  taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_initConsumer
          threadGroups = consumerThreads;

INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = adminThread;

TASK      taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_doProducer
          threadGroups = producerThread;

TASK      taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_doConsumer
          threadGroups = consumerThreads;

CLOSETASK taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_verifyQueuedMessages
          threadGroups = producerThread;

hydra.Prms-totalTaskTimeSec = 31536000;  // this is workload based
hydra.Prms-maxResultWaitSec = 900;  

hydra.GemFirePrms-conserveSockets=true;

util.ValueHolderPrms-useExtraObject = false;

util.RegionDefPrms-regionSpecs = "
   specName = producer:
       scope = noack: 
       mirroring = none: 
       asyncConflation = true false:
   specName = consumer:
       scope = noack: 
       mirroring = keysValues: 
   ";

asyncMsg.AsyncMsgPrms-operations =
          entry-update 
          entry-update 
          entry-update 
          entry-create 
          entry-destroy 
          entry-inval 
          entry-getWithNewKey entry-getWithExistingKey entry-getWithPreviousKey
          ;
asyncMsg.AsyncMsgPrms-upperThreshold = 500;
asyncMsg.AsyncMsgPrms-upperThresholdOperations = entry-destroy;
asyncMsg.AsyncMsgPrms-lowerThreshold = 0;
asyncMsg.AsyncMsgPrms-lowerThresholdOperations = entry-create;

asyncMsg.AsyncMsgPrms-numExecutionsToTerminate = 5;
util.TestHelperPrms-minTaskGranularitySec = 180;

asyncMsg.BurstListenerPrms-sleepTimeMillis = 0 10 100 250 500 1000 3000 1000 500 250 200 10 0;
asyncMsg.BurstListenerPrms-durationSec = 10;

util.AdminHelperPrms-alertListener = asyncMsg.AdminListener;

// async messaging properties
// how long to wait (in millis) before switching to async
   hydra.GemFirePrms-asyncDistributionTimeout = 5 50 150 375 650;
// how long to wait (in millis) for a successful distribution before sending msg to disconnect
   hydra.GemFirePrms-asyncQueueTimeout = 3600000;
// max size (in MB) that the async queue can be
   hydra.GemFirePrms-asyncMaxQueueSize = 70;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx250m \", ${adminHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx1000m \", ${producerHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx250m \", ${consumerHosts}, true)"
                             ncf;

hydra.log.LogPrms-file_logging = true;
hydra.log.LogPrms-file_maxKBPerVM = 25000;


