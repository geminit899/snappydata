hydra.Prms-testDescription = "
This test concurrently exercises async receivers and slow consumers with
multiple threads. Consumers gradually slow down, then speed up.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_2.inc;
INCLUDE $JTESTS/util/randomValues.inc;

THREADGROUP adminThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"admin\", ${adminHosts}, true)"
                   ncf;

THREADGROUP peerThreads
    totalThreads = fcn
                   ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"peer\", ${peerHosts}, true)"
                   ncf;

INITTASK  taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_initProducerConsumer
          threadGroups = peerThreads;

INITTASK  taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_initialize
          threadGroups = peerThreads;

INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = adminThread;

TASK      taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_doControlledOperations
          threadGroups = peerThreads;

CLOSETASK taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_verifyQueuedMessages
          threadGroups = peerThreads;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 600;

hydra.GemFirePrms-conserveSockets=true;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;

util.RegionDefPrms-regionSpecs = "
   specName = producerConsumer:
       scope = noack: 
       mirroring = keysValues: 
       asyncConflation = true false:
   ";

asyncMsg.AsyncMsgPrms-operations =
          entry-update 
          entry-update 
          entry-update 
          entry-create 
          entry-destroy 
          entry-inval 
          entry-getWithNewKey entry-getWithExistingKey entry-getWithPreviousKey
          ;
asyncMsg.AsyncMsgPrms-upperThreshold = 5000;
asyncMsg.AsyncMsgPrms-upperThresholdOperations = entry-destroy;
asyncMsg.AsyncMsgPrms-lowerThreshold = 0;
asyncMsg.AsyncMsgPrms-lowerThresholdOperations = entry-create;

util.AdminHelperPrms-alertListener = asyncMsg.AdminListener;

// each client will run for a different length of time
util.TestHelperPrms-minTaskGranularitySec = ONEOF 15 30 45 60 FOENO;

asyncMsg.BurstListenerPrms-sleepTimeMillis = 0 10 100 250 500 1000 3000 1000 500 250 200 10 0;
asyncMsg.BurstListenerPrms-durationSec = 10;

// async messaging properties
// how long to wait (in millis) before switching to async
   hydra.GemFirePrms-asyncDistributionTimeout = 5 50 150 375 650;
// how long to wait (in millis) for a successful distribution before sending msg to disconnect
   hydra.GemFirePrms-asyncQueueTimeout = 60000;
// max size (in MB) that the async queue can be
   hydra.GemFirePrms-asyncMaxQueueSize = 100;
