INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_2.inc;
include $JTESTS/util/randomValues.inc;

hydra.Prms-testDescription = "Concurrent async messaging test which forces async message queuing and then performs a number of random operations on a forest of regions.  No validation is performed, the test looks for deadlocks and the like";
hydra.Prms-testRequirement = "No deadlocks, etc.  Queuing must occur";

THREADGROUP adminThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"admin\", ${adminHosts}, true)"
                   ncf;

THREADGROUP peerThreads
    totalThreads = fcn
                   ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"peer\", ${peerHosts}, true)"
                   ncf;

INITTASK  taskClass   = util.RegionDefinition taskMethod  = InitTask_initialize
          threadGroups = peerThreads;

INITTASK  taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_createRegionForest
          // set the SleepListener sleepMs higher to encourage queuing
          asyncMsg.AsyncMsgPrms-cacheListener = asyncMsg.SleepListener
          asyncMsg.SleepListenerPrms-sleepMs = 2
          threadGroups = peerThreads;
          ;

INITTASK  taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_initialize
          threadGroups = peerThreads;
          ;

INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = adminThread;

TASK      taskClass   = asyncMsg.AsyncMsgTest taskMethod = HydraTask_doOperations
          threadGroups = peerThreads;
          ;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-serialExecution=false;

hydra.VmPrms-extraVMArgs = "-Xmx300m";

// We need this to be true (otherwise our distAckRegion put can 
// return without all previous messages being processed 
hydra.GemFirePrms-conserveSockets=true;
hydra.log.LogPrms-mergeLogFiles = true;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;

// objectType & sizes for priming the queue
asyncMsg.AsyncMsgPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size = 1024;

// async messaging properties
hydra.GemFirePrms-asyncDistributionTimeout = 5;
hydra.GemFirePrms-asyncQueueTimeout = 60000;
hydra.GemFirePrms-asyncMaxQueueSize = 10;

asyncMsg.AsyncMsgPrms-primeQueueSleepMs=2000;

// initial region hierarchy + numKeys per region
asyncMsg.AsyncMsgPrms-maxKeys=10;
asyncMsg.AsyncMsgPrms-numRootRegions=2;
asyncMsg.AsyncMsgPrms-numSubRegions=3;
asyncMsg.AsyncMsgPrms-regionDepth=2;

util.RegionDefPrms-regionSpecs = "
   specName = region1:
       scope = noack: mirroring = keysValues: 
       asyncConflation = true;
   specName = region2:
       scope = noack: mirroring = keysValues: 
       concurrencyChecksEnabled = true:
       asyncConflation = true;
   ";

util.RegionDefPrms-VMRegionSpecName = ONEOF region1 region2 FOENO;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

asyncMsg.AsyncMsgPrms-operations =
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          ;

asyncMsg.AsyncMsgPrms-numOps = RANGE 10 20 EGNAR;

util.AdminHelperPrms-alertListener = asyncMsg.AdminListener;

