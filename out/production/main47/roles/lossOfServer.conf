include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparams4.inc;

hydra.Prms-testDescription = "RequiredRoles.doc: clients detect and re-act to loss of server while executing random entry operations";
hydra.Prms-testRequirement = "TBD";

hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads =    1;

THREADGROUP server totalThreads=1 totalVms=1 clientNames=client1;
THREADGROUP clients totalThreads=3 totalVms=3 clientNames=client2, client3, client4;

STARTTASK taskClass   = event.EventBB taskMethod  = HydraTask_initialize 
          clientNames = client1
          ;

STARTTASK taskClass   = util.CacheBB taskMethod  = HydraTask_initialize 
          clientNames = client1
          ;
                                                                                   
STARTTASK taskClass   = util.RegionDefinition  taskMethod = HydraTask_initialize
          ;

INITTASK  taskClass = roles.RolesBB   taskMethod = HydraTask_initialize
          threadGroups = server 
          ;

INITTASK  taskClass   = event.ReliabilityEventTest taskMethod  = HydraTask_initialize
          util.RegionDefPrms-reliabilitySpecName = client
          threadGroups = clients
          ;
                                                                                   
INITTASK  taskClass   = event.ReliabilityEventTest taskMethod  = HydraTask_initialize
          threadGroups = server
          runMode = always
          ;
                                                                                   
TASK      taskClass   = event.ReliabilityEventTest taskMethod  = HydraTask_doEntryOperations
          threadGroups = clients
          ;
                                                                                   
TASK      taskClass = roles.RolesTest taskMethod = stopAndStartClient
          threadGroups = clients
          startInterval = 60
          maxThreads = 1
          ;

ENDTASK   taskClass = roles.RolesTest taskMethod = EndTask_validateRoleChangeEvents
          clientNames = client1
          ;

ENDTASK   taskClass = roles.RolesTest taskMethod = EndTask_validateRegionRoleExceptionsProcessed
          clientNames = client1
          ;

// EventTest related prms
event.EventPrms-useRandomLocks = false; event.EventPrms-entryOperations = ONEOF add add add add update invalidate read destroy localInvalidate localDestroy FOENO;
      // weighted to adds
                                                                                   
util.ValueHolderPrms-useExtraObject = false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;
                                                                                   
util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;
util.TestHelperPrms-minTaskGranularitySec = 60;

// dynamic control of VMs
roles.RolesPrms-stopMode = ONEOF MEAN_KILL NICE_KILL MEAN_EXIT NICE_EXIT FOENO;
roles.RolesPrms-startMode = ON_DEMAND;
roles.RolesPrms-clientsToStop = client1;  // this is the server

hydra.Prms-maxResultWaitSec = 600; // 10 minutes
hydra.Prms-totalTaskTimeSec = 600; // 10 minutes
hydra.Prms-alwaysDoEndTasks=true;

hydra.GemFirePrms-conserveSockets = true;
hydra.GemFirePrms-roles = server client2 client3 client4;
hydra.GemFirePrms-memberTimeout = 15000;

util.ReliabilityPrms-reliabilitySpecs = "
   specName = client:
      requiredRoles = server:
      lossAction = noAccess:
      resumptionAction = reinitialize:
   ";

util.CacheDefPrms-cacheSpecs = "
   specName = cache1:
   ";

// @todo darrel: need allevents on following...
util.RegionDefPrms-regionSpecs = "
   specName = VMRegion:
       regionName = EventRegion:
       scope = ack noack global: dataPolicy = normal replicate:
       statisticsEnabled = true:
       cacheListeners = roles.RegionListener:
   ";

util.RegionDefPrms-VMRegionSpecName = VMRegion;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;
util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;
