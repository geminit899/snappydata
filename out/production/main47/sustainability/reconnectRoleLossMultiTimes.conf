// The test verifies the client doesnt reconnect when multiple clients playing
// the same role are stopped. The test verifies that the client won't start 
// reconnecting until there are no required role playing vms left in the 
// system and since the client itself is playing that role it should not reconnect.

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;


hydra.ClientPrms-vmThreads =   4 2 2 2 2 2;

hydra.ClientPrms-names   =  selfRolePlayerClient rolePlayerAClient rolePlayerA2Client rolePlayerBClient rolePlayerCClient rolePlayerDClient ;

THREADGROUP selfRolePlayerThread  totalThreads=1 totalVms=1 clientNames=selfRolePlayerClient;
THREADGROUP selfRolePlayerProducerThread  totalThreads=1 totalVms=1 clientNames=selfRolePlayerClient;
THREADGROUP rolePlayerAThread  totalThreads=1 totalVms=1 clientNames=rolePlayerAClient;
THREADGROUP rolePlayerA2Thread totalThreads=1 totalVms=1 clientNames=rolePlayerA2Client;
THREADGROUP rolePlayerBThread totalThreads=1 totalVms=1 clientNames=rolePlayerBClient;
THREADGROUP rolePlayerCThread totalThreads=1 totalVms=1 clientNames=rolePlayerCClient;
THREADGROUP rolePlayerDThread totalThreads=1 totalVms=1 clientNames=rolePlayerDClient;
THREADGROUP rolePlayerDoSomeThingThread totalThreads=5 totalVms=5 clientNames=rolePlayerAClient, rolePlayerA2Client, rolePlayerBClient ,rolePlayerCClient, rolePlayerDClient;
THREADGROUP selfRolePlayerIntigrityCheck totalThreads=1 totalVms=1 clientNames=selfRolePlayerClient;
THREADGROUP rolePlayerKillerThread totalThreads=1 totalVms=1 clientNames=selfRolePlayerClient;

hydra.GemFirePrms-maxWaitTimeForReconnect = 20000 300;
hydra.GemFirePrms-maxNumReconnectTries = 5 3 ;

hydra.VmPrms-extraVMArgs += "-Dgemfire.groups=rolePlayerA", "-Dgemfire.groups=rolePlayerA", "-Dgemfire.groups=rolePlayerA", "-Dgemfire.groups=rolePlayerD", "-Dgemfire.groups=rolePlayerE", "-Dgemfire.groups=rolePlayerF" ;


// creats a vm playing the rolePlayerA.
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createSelfRolePlayingVm
	util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = selfRolePlayerThread
	;
	
// creats a vm playing the rolePlayerA will be stopped later.
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerAVm
	util.RegionDefPrms-reliabilitySpecName = rolePlayerB
	util.RegionDefPrms-VMRegionSpecName = rolePlayerB
	threadGroups = rolePlayerAThread
	;	
	
// creats a another vm playing rolePlayerA will be stopped later.
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerAVm
	util.RegionDefPrms-reliabilitySpecName = rolePlayerC
	util.RegionDefPrms-VMRegionSpecName = rolePlayerC
	threadGroups = rolePlayerA2Thread
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerBVm
	util.RegionDefPrms-reliabilitySpecName = rolePlayerD
	util.RegionDefPrms-VMRegionSpecName = rolePlayerD
	threadGroups = rolePlayerBThread
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerCVm
	util.RegionDefPrms-reliabilitySpecName = rolePlayerE
	util.RegionDefPrms-VMRegionSpecName = rolePlayerE
	threadGroups = rolePlayerCThread
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerDVm
	util.RegionDefPrms-reliabilitySpecName = rolePlayerF
	util.RegionDefPrms-VMRegionSpecName = rolePlayerF
	threadGroups = rolePlayerDThread
	;

// assinging the vm some task so that hydra think the client is required and alive.	
TASK taskClass = sustainability.SustainabilityTest taskMethod = doSomeThing
	threadGroups = rolePlayerDoSomeThingThread
	startInterval = 10
	//maxThreads=5
	maxTimesToRun=1
	;

// do some puts.
TASK taskClass=sustainability.SustainabilityTest taskMethod = putRegionA
	threadGroups = selfRolePlayerProducerThread
	//startInterval = 60
	maxThreads=1
	//maxTimesToRun=1
	;
// stop all the other clients other then selfRolePlayerClient.	
TASK taskClass=sustainability.SustainabilityTest taskMethod=stopOtherClients
	threadGroups = rolePlayerKillerThread
	maxThreads =1
	maxTimesToRun=1
	;
	
CLOSETASK taskClass = sustainability.SustainabilityTest taskMethod = validateSelfRolePlayerClient
      //  clientNames = selfRolePlayerClient 
        threadGroups =selfRolePlayerIntigrityCheck
        ;
	
roles.RolesPrms-stopMode = ONEOF MEAN_KILL NICE_KILL MEAN_EXIT NICE_EXIT FOENO;
roles.RolesPrms-startMode = ON_DEMAND; 
roles.RolesPrms-clientsToStop =  rolePlayerAClient rolePlayerA2Client rolePlayerBClient rolePlayerCClient rolePlayerDClient ;

