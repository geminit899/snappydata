// The test creates a cache.xml and use it to create a cache and region with
// reliability policy of Reconnect. The test verifies that the cache doesnt get
// CacheClosedException when one of the rolePlaying Vm is stopped but since there 
// is a backup for that role it should not throw a CacheClosedException.

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;


//hydra.HostPrms-hostNames= localhost;

hydra.HostPrms-names   = host1      host2;
hydra.VmPrms-names     = vm1        vm2        vm3   vm4;
hydra.GemFirePrms-names       = gemfire1   gemfire2   gemfire3  gemfire4;
hydra.GemFirePrms-hostNames   = host1      host1 	host2   host2;

//hydra.ClientPrms-vmQuantities = 2 1;

hydra.ClientPrms-vmThreads =   2 1 1 1;
hydra.ClientPrms-names   =  rolePlayerClient rolePlayerBackUp roleRequiresClient roleRequiresClientForReconnect ;
hydra.ClientPrms-vmNames      = vm1        vm2        vm3     vm4;
hydra.ClientPrms-gemfireNames = gemfire1   gemfire2   gemfire3   gemfire4;

THREADGROUP rolePlayerThread  totalThreads=1 totalVms=1 clientNames=rolePlayerClient;
THREADGROUP rolePlayerBackUpThread  totalThreads=1 totalVms=1 clientNames=rolePlayerBackUp;
THREADGROUP roleRequiresThread totalThreads=1 totalVms=1 clientNames=roleRequiresClient;
THREADGROUP roleRequiresForReconnectTask totalThreads=1 totalVms=1 clientNames=roleRequiresClientForReconnect;
THREADGROUP rolePlayerStopAndRestart totalThreads=1 totalVms=1 clientNames=rolePlayerClient;

hydra.GemFirePrms-maxWaitTimeForReconnect = 300 20000;  
hydra.GemFirePrms-maxNumReconnectTries = 3 5;
hydra.GemFirePrms-roles = rolePlayer rolePlayer requiresRole requiresRole;


// creats the first role playing vm.
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayer
	//util.RegionDefPrms-VMRegionSpecName = rolePlayer
	threadGroups = rolePlayerThread
	;
// creats the back role playing vm.
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayer
	//util.RegionDefPrms-VMRegionSpecName = rolePlayer
	threadGroups = rolePlayerBackUpThread
	;

// will genrate the xml used in TASK to create a cache, a region which is
// configured with reliability policy of Reconnect.
	
INITTASK taskClass = sustainability.SustainabilityTest taskMethod = generateXml
	//util.RegionDefPrms-reliabilitySpecName = requiresRole
	//util.RegionDefPrms-VMRegionSpecName = requiresRole
	threadGroups = roleRequiresThread
	;
// create the cache from the xm.	
TASK taskClass = sustainability.SustainabilityTest taskMethod = createCacheAndRegionsWithBackUp
	threadGroups = roleRequiresForReconnectTask
	maxThreads = 1
	maxTimesToRun =1
	;
//stop the first role palying client.
TASK taskClass = sustainability.SustainabilityTest taskMethod = stopClient
	threadGroups = rolePlayerStopAndRestart
	startInterval = 30
	maxThreads=1
	maxTimesToRun=1
	;

/*	
util.ReliabilityPrms-reliabilitySpecs = "
   specName = requiresRole:
      requiredRoles = rolePlayer:
      reliabilityPolicy = reconnect:
      resumptionAction = none:
   specName = rolePlayer:
      requiredRoles = none:
      //reliabilityPolicy = noAccess:
      //resumptionAction = none:
   ";
   */
roles.RolesPrms-clientsToStop = rolePlayerClient;
