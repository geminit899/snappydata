// The test creates a cache.xml and use it to create a cache and region with
// reliability policy of Reconnect. The test varifies that the cache gets
// CacheClosedException when the rolePlayer Vm is not there in the membership
// and cache is used for some operation.


include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;


hydra.ClientPrms-vmThreads =   2 1 1;
hydra.ClientPrms-names   =  rolePlayerClient roleRequiresClient roleRequiresClientForReconnect ;

THREADGROUP rolePlayerThread  totalThreads=1 totalVms=1 clientNames=rolePlayerClient;
THREADGROUP roleRequiresThread totalThreads=1 totalVms=1 clientNames=roleRequiresClient;
THREADGROUP roleRequiresForReconnectTask totalThreads=1 totalVms=1 clientNames=roleRequiresClientForReconnect;
THREADGROUP rolePlayerStopAndRestart totalThreads=1 totalVms=1 clientNames=rolePlayerClient;

hydra.GemFirePrms-maxWaitTimeForReconnect = 300 20000;  
hydra.GemFirePrms-maxNumReconnectTries = 3 5;
hydra.VmPrms-extraVMArgs += "-Dgemfire.groups=rolePlayer", "-Dgemfire.groups=requiresRole", "-Dgemfire.groups=requiresRole";


// subscriber is playing the role and publisher requires a role.

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayer
	//util.RegionDefPrms-VMRegionSpecName = rolePlayer
	threadGroups = rolePlayerThread
	;

// will genrate the xml used in TASK to create a cache a region which is
// configured with reliability policy of Reconnect.
	
INITTASK taskClass = sustainability.SustainabilityTest taskMethod = generateXml
	//util.RegionDefPrms-reliabilitySpecName = requiresRole
	//util.RegionDefPrms-VMRegionSpecName = requiresRole
	threadGroups = roleRequiresThread
	;
	
// creates the cache from the xml file generated by previous task and expected to
// lose a role and sould start reconnecting but should never be able to reconnect properly.

TASK taskClass = sustainability.SustainabilityTest taskMethod = createCacheAndRegionsWithRoleLoss
	threadGroups = roleRequiresForReconnectTask
	startInterval = 10
	maxThreads = 1
	maxTimesToRun =1
	;
// stops the role playing client required by the above vm.
TASK taskClass = sustainability.SustainabilityTest taskMethod = stopClient
	threadGroups = rolePlayerStopAndRestart
	startInterval = 50
	maxThreads=1
	maxTimesToRun=1
	;

roles.RolesPrms-clientsToStop = rolePlayerClient;
