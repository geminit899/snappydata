// Similar to reconnectRoleLossMultiTimes.conf except that there is only
// one vm playing the required role of rolePlayerA.

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;


hydra.ClientPrms-vmThreads =   4 2 2 2 2 2;

hydra.ClientPrms-names   =  selfRolePlayerClient rolePlayerBClient rolePlayerCClient rolePlayerDClient rolePlayerEClient rolePlayerFClient ;

THREADGROUP selfRolePlayerThread  totalThreads=1 totalVms=1 clientNames=selfRolePlayerClient;
THREADGROUP selfRolePlayerProducerThread  totalThreads=1 totalVms=1 clientNames=selfRolePlayerClient;
THREADGROUP rolePlayerBThread  totalThreads=1 totalVms=1 clientNames=rolePlayerBClient;
THREADGROUP rolePlayerCThread totalThreads=1 totalVms=1 clientNames=rolePlayerCClient;
THREADGROUP rolePlayerDThread totalThreads=1 totalVms=1 clientNames=rolePlayerDClient;
THREADGROUP rolePlayerEThread totalThreads=1 totalVms=1 clientNames=rolePlayerEClient;
THREADGROUP rolePlayerFThread totalThreads=1 totalVms=1 clientNames=rolePlayerFClient;
THREADGROUP rolePlayerDoSomeThingThread totalThreads=5 totalVms=5 clientNames=rolePlayerBClient, rolePlayerCClient, rolePlayerDClient, rolePlayerEClient, rolePlayerFClient;
THREADGROUP selfRolePlayerIntigrityCheck totalThreads=1 totalVms=1 clientNames=selfRolePlayerClient;
THREADGROUP rolePlayerKillerThread totalThreads=1 totalVms=1 clientNames=selfRolePlayerClient;

hydra.GemFirePrms-maxWaitTimeForReconnect = 20000 300;
hydra.GemFirePrms-maxNumReconnectTries = 3 5;

hydra.VmPrms-extraVMArgs += "-Dgemfire.groups=rolePlayerA", "-Dgemfire.groups=rolePlayerB", "-Dgemfire.groups=rolePlayerC", "-Dgemfire.groups=rolePlayerD", "-Dgemfire.groups=rolePlayerE", "-Dgemfire.groups=rolePlayerF" ;


// create role rolePlayerA cm
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createSelfRolePlayingVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = selfRolePlayerThread
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerBVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerB
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerB
	threadGroups = rolePlayerBThread
	;	

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerCVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerC
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerC
	threadGroups = rolePlayerCThread
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerDVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerD
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerD
	threadGroups = rolePlayerDThread
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerEVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerE
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerE
	threadGroups = rolePlayerEThread
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerFVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerF
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerF
	threadGroups = rolePlayerFThread
	;
// keep assigning task so that hydra thinks the client is required and alive.	
TASK taskClass = sustainability.SustainabilityTest taskMethod = doSomeThing
	threadGroups = rolePlayerDoSomeThingThread
	startInterval = 10
	//maxThreads=5
	maxTimesToRun=1
	;
// do some puts.
TASK taskClass=sustainability.SustainabilityTest taskMethod = putRegionA
	threadGroups = selfRolePlayerProducerThread
	//startInterval = 60
	maxThreads=1
	//maxTimesToRun=1
	;
// stop all other clients.	
TASK taskClass=sustainability.SustainabilityTest taskMethod=stopOtherClients
	threadGroups = rolePlayerKillerThread
	maxThreads =1
	maxTimesToRun=1
	;

// validate integrity of the selfRolePlayerClient
CLOSETASK taskClass = sustainability.SustainabilityTest taskMethod = validateSelfRolePlayerClient
      //  clientNames = selfRolePlayerClient 
        threadGroups =selfRolePlayerIntigrityCheck
        ;

roles.RolesPrms-stopMode = ONEOF MEAN_KILL NICE_KILL MEAN_EXIT NICE_EXIT FOENO;
roles.RolesPrms-startMode = ON_DEMAND; 
roles.RolesPrms-clientsToStop =  rolePlayerBClient rolePlayerCClient rolePlayerDClient rolePlayerEClient rolePlayerFClient ;

