//The test make sure that there are multiple vms playing the same role "rolePlayerA" 
//and there is a region which has a reliablity policy of reconnect and 
//required role of "rolePlayerA" but the vm in which the region is 
//defined plays the role of "rolePlayerA". After a while we start stoping 
//the vms and make sure the region does not reconnect or the cache doesnt throw a CacheClosedException.

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;


//hydra.log.LogPrms-mergeLogFiles  = true; // for debugging

hydra.ClientPrms-vmThreads =   4 2 2 2 2 2;

hydra.ClientPrms-names   =  selfRolePlayingClients rolePlayerAClient rolePlayerA2Client rolePlayerBClient rolePlayerCClient rolePlayerDClient ;

THREADGROUP selfRolePlayingThread  totalThreads=1 totalVms=1 clientNames=selfRolePlayingClients;
THREADGROUP rolePlayerAThread  totalThreads=1 totalVms=1 clientNames=rolePlayerAClient;
THREADGROUP rolePlayerA2Thread  totalThreads=1 totalVms=1 clientNames=rolePlayerA2Client;
THREADGROUP rolePlayerBThread totalThreads=1 totalVms=1 clientNames=rolePlayerBClient;
THREADGROUP rolePlayerCThread totalThreads=1 totalVms=1 clientNames=rolePlayerCClient;
THREADGROUP rolePlayerDThread totalThreads=1 totalVms=1 clientNames=rolePlayerDClient;
THREADGROUP rolePlayerKillerThread totalThreads=1 totalVms=1 clientNames=selfRolePlayingClients;
THREADGROUP rolePlayerDoSomeThingThread totalThreads=5 totalVms=5 clientNames=rolePlayerAClient, rolePlayerA2Client, rolePlayerBClient, rolePlayerCClient, rolePlayerDClient;
THREADGROUP selfRolePlayerProducerThread totalThreads=1 totalVms=1 clientNames=selfRolePlayingClients;
THREADGROUP selfRolePlayerIntigrityCheck totalThreads=1 totalVms=1 clientNames=selfRolePlayingClients;

hydra.GemFirePrms-maxWaitTimeForReconnect = 20000 300;
hydra.GemFirePrms-maxNumReconnectTries = 5 3;

hydra.VmPrms-extraVMArgs += "-Dgemfire.groups=rolePlayerA", "-Dgemfire.groups=rolePlayerA", "-Dgemfire.groups=rolePlayerA", "-Dgemfire.groups=rolePlayerB", "-Dgemfire.groups=rolePlayerC", "-Dgemfire.groups=rolePlayerD" ;

// creates a vm which plays a role required by one of its regions.
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createSelfRolePlayingVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = selfRolePlayingThread 
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerAVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = rolePlayerAThread
	;	

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerAVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = rolePlayerA2Thread
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerBVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerB
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerB
	threadGroups = rolePlayerBThread
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerCVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerC
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerC
	threadGroups = rolePlayerCThread
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerDVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerD
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerD
	threadGroups = rolePlayerDThread
	;
	
// keep assinging the vms some task so that hydra thinks they are still there.
TASK taskClass = sustainability.SustainabilityTest taskMethod = doSomeThing
	threadGroups = rolePlayerDoSomeThingThread
	startInterval = 10
	maxThreads=5
	maxTimesToRun=1
	;

TASK taskClass=sustainability.SustainabilityTest taskMethod = putRegionA
	threadGroups = selfRolePlayerProducerThread
	//startInterval = 60
	maxThreads=1
	//maxTimesToRun=1
	;

// stops all the clients playing roles except for the one defined with 
// a region which needs a role played by the cache, its defined in.
TASK taskClass=sustainability.SustainabilityTest taskMethod=stopOtherClients
	threadGroups = rolePlayerKillerThread
	maxThreads =1
	maxTimesToRun=1
	;
	
CLOSETASK taskClass = sustainability.SustainabilityTest taskMethod = validateSelfRolePlayerClient
       // clientNames = selfRolePlayingClients 
        threadGroups =selfRolePlayerIntigrityCheck
        ;
	
roles.RolesPrms-stopMode = ONEOF MEAN_KILL NICE_KILL MEAN_EXIT NICE_EXIT FOENO;
roles.RolesPrms-startMode = ON_DEMAND; 
roles.RolesPrms-clientsToStop =  rolePlayerAClient rolePlayerA2Client rolePlayerBClient rolePlayerCClient rolePlayerDClient ;

