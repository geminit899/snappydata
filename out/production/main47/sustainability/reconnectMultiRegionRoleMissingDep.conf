// The test creates a cache.xml and use it to create a cache and region with
// reliability policy of Reconnect. The test stops a client playing the role A and then it starts a Vm which plays the role of A
// and then all the required roles for the regions are meet again after reconnecting.

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;


hydra.ClientPrms-vmThreads =   1 1 1 2 2 2;
hydra.ClientPrms-names   =  rolePlayerAClient rolePlayerBClient xmlGeneratorClient requiresRoleABClient replaceRolePlayerAClient replaceRolePlayerBClient;

THREADGROUP rolePlayerAThread  totalThreads=1 totalVms=1 clientNames=rolePlayerAClient;
THREADGROUP rolePlayerBThread  totalThreads=1 totalVms=1 clientNames=rolePlayerBClient;
THREADGROUP requiresRoleABXMlGenrator totalThreads=1 totalVms=1 clientNames=xmlGeneratorClient;
THREADGROUP requiredRoleABThread totalThreads=1 totalVms=1 clientNames=requiresRoleABClient;
THREADGROUP stopRolePlayerAThread totalThreads=1 totalVms=1 clientNames=requiresRoleABClient; //rolePlayerAClient;
THREADGROUP replaceRolePlayerAThread totalThreads=1 totalVms=1 clientNames=replaceRolePlayerAClient;
THREADGROUP replaceRolePlayerBThread totalThreads=1 totalVms=1 clientNames=replaceRolePlayerBClient;
THREADGROUP producerRegionA totalThreads=1 totalVms=1 clientNames = replaceRolePlayerAClient;
THREADGROUP producerRegionB totalThreads=1 totalVms=1 clientNames = replaceRolePlayerBClient;

hydra.GemFirePrms-maxWaitTimeForReconnect = 300 20000;  
hydra.GemFirePrms-maxNumReconnectTries = 3 5;
hydra.GemFirePrms-roles = rolePlayerA rolePlayerB requiresRoleForXML requiresRoleAB rolePlayerA  rolePlayerB;


// subscriber is playing the role and publisher requires a role.

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerAVm
	util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = rolePlayerAThread
	;

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerBVm
	util.RegionDefPrms-reliabilitySpecName = rolePlayerB
	util.RegionDefPrms-VMRegionSpecName = rolePlayerB
	threadGroups = rolePlayerBThread
	;

// will genrate the xml used in TASK to create a cache a region which is
// configured with reliability policy of Reconnect.
	
INITTASK taskClass = sustainability.SustainabilityTest taskMethod = generateABRegionRequiredXml
	util.RegionDefPrms-reliabilitySpecName = requiresRoleForXML
	util.RegionDefPrms-VMRegionSpecName = requiresRoleForXML
	threadGroups = requiresRoleABXMlGenrator
	;
	
// create the cache from the cache xml file generated in the prevoius task.
	
INITTASK taskClass = sustainability.SustainabilityTest taskMethod = createCacheRequiresABFromXML
	threadGroups = requiredRoleABThread
//	maxThreads = 1
//	maxTimesToRun =1
	;

// stops the first role playing client and should trigger reconnect.

TASK taskClass = sustainability.SustainabilityTest taskMethod = stopClient
	threadGroups = stopRolePlayerAThread
	startInterval = 10
	maxThreads=1
	maxTimesToRun=1
	;
	
// starts a replacement roleplayerB vm.

TASK taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerAVm
	threadGroups = replaceRolePlayerAThread
	util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	startInterval = 20
	maxThreads=1
	maxTimesToRun=1
	;
// starts a replacement rolePlayerB vm.	

TASK taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerBVm
	threadGroups = replaceRolePlayerBThread
	util.RegionDefPrms-reliabilitySpecName = rolePlayerB
	util.RegionDefPrms-VMRegionSpecName = rolePlayerB
	startInterval = 20
	maxThreads=1
	maxTimesToRun=1
	;
	
// some puts for regionA.
TASK taskClass=sustainability.SustainabilityTest taskMethod = putRegionA
	threadGroups = producerRegionA
	startInterval = 60
	maxThreads=1
	maxTimesToRun=1;

// some puts for regionB.
TASK taskClass=sustainability.SustainabilityTest taskMethod = putRegionB
	threadGroups = producerRegionB
	startInterval = 60
	maxThreads=1
	maxTimesToRun=1;
	
CLOSETASK taskClass=sustainability.SustainabilityTest taskMethod = validateCacheCreation
    threadGroups = requiredRoleABThread ;
	
roles.RolesPrms-stopMode = ONEOF MEAN_KILL NICE_KILL MEAN_EXIT NICE_EXIT FOENO;
roles.RolesPrms-startMode = ON_DEMAND;  
roles.RolesPrms-clientsToStop = ONEOF rolePlayerAClient  rolePlayerBClient FOENO;
