//The test creates regions form regionA to G and they have required 
//roles of A to G. The rolePlayers will go up and down in random order
//and there will be other replicated regions that will keep puting
//simultaneously while the first vm tries to reconnect in case of required
//role loss.


include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

//hydra.log.LogPrms-mergeLogFiles   = true;

hydra.ClientPrms-vmThreads =   1 3 2 2 2 2 2 2 2 1; // 15
hydra.ClientPrms-names   =  xmlGeneratorClient requiredABCDEFGPlayerClient rolePlayerAClient rolePlayerBClient rolePlayerCClient rolePlayerDClient rolePlayerEClient rolePlayerFClient rolePlayerGClient regionAProducerClient regionBProducerClient regionCProducerClient regionDProducerClient regionEProducerClient regionFProducerClient regionGProducerClient;

THREADGROUP rolePlayerAThread  totalThreads=1 totalVms=1 clientNames=rolePlayerAClient;
THREADGROUP rolePlayerBThread  totalThreads=1 totalVms=1 clientNames=rolePlayerBClient;
THREADGROUP rolePlayerCThread  totalThreads=1 totalVms=1 clientNames=rolePlayerCClient;
THREADGROUP rolePlayerDThread  totalThreads=1 totalVms=1 clientNames=rolePlayerDClient;
THREADGROUP rolePlayerEThread  totalThreads=1 totalVms=1 clientNames=rolePlayerEClient;
THREADGROUP rolePlayerFThread  totalThreads=1 totalVms=1 clientNames=rolePlayerFClient;
THREADGROUP rolePlayerGThread  totalThreads=1 totalVms=1 clientNames=rolePlayerGClient;
THREADGROUP xmlGeneratorThread  totalThreads=1 totalVms=1 clientNames=xmlGeneratorClient;
THREADGROUP requiredRolesThread  totalThreads=1 totalVms=1 clientNames=requiredABCDEFGPlayerClient;
THREADGROUP rolePlayerStopAndRestartThread totalThreads=1 totalVms=1 clientNames=requiredABCDEFGPlayerClient;
THREADGROUP regionAProducerThread totalThreads=1 totalVms=1 clientNames= regionAProducerClient;
THREADGROUP regionBProducerThread totalThreads=1 totalVms=1 clientNames= regionBProducerClient;
THREADGROUP regionCProducerThread totalThreads=1 totalVms=1 clientNames= regionCProducerClient;
THREADGROUP regionDProducerThread totalThreads=1 totalVms=1 clientNames= regionDProducerClient;
THREADGROUP regionEProducerThread totalThreads=1 totalVms=1 clientNames= regionEProducerClient;
THREADGROUP regionFProducerThread totalThreads=1 totalVms=1 clientNames= regionFProducerClient;
THREADGROUP regionGProducerThread totalThreads=1 totalVms=1 clientNames= regionGProducerClient;
THREADGROUP validateInitialImageThread totalThreads=1 totalVms=1 clientNames = requiredABCDEFGPlayerClient;
THREADGROUP printRegionsThreads totalThreads= 7 totalVms=7 clientNames= rolePlayerAClient, rolePlayerBClient, rolePlayerCClient, rolePlayerDClient, rolePlayerEClient, rolePlayerFClient, rolePlayerGClient;

hydra.GemFirePrms-maxWaitTimeForReconnect =  20000 20000 300;  
hydra.GemFirePrms-maxNumReconnectTries = 8 8 3 ;

hydra.Prms-totalTaskTimeSec = 1500;

hydra.VmPrms-extraVMArgs += "-Dgemfire.groups=xmlGenerator", "-Dgemfire.groups=requiesRoleABCDEFG", "-Dgemfire.groups=rolePlayerA", "-Dgemfire.groups=rolePlayerB", "-Dgemfire.groups=rolePlayerC", "-Dgemfire.groups=rolePlayerD", "-Dgemfire.groups=rolePlayerE", "-Dgemfire.groups=rolePlayerF", "-Dgemfire.groups=rolePlayerG";

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerAVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = rolePlayerAThread
	runMode = always
	;
	
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerBVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = rolePlayerBThread
	runMode = always
	;
	
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerCVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = rolePlayerCThread
	runMode = always
	;
	
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerDVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = rolePlayerDThread
	runMode = always
	;
	
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerEVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = rolePlayerEThread
	runMode = always
	;				

INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerFVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = rolePlayerFThread
	runMode = always
	;
	
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerGVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = rolePlayerGThread
	runMode = always
	;

// generates the xml with multiple regions with different required roles.
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = generateXmlWithMultiRequiredRoles
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = xmlGeneratorThread
	;

// create the cache with required roles and multiple regions from the xml file generated in
// the previous task.
INITTASK  taskClass = sustainability.SustainabilityTest taskMethod = createMultiRegionRequireRoles
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	threadGroups = requiredRolesThread
	;


// randomly picks a role playing client and stops and restarts it again in 1000MS.
// this should trigger reconnect in the vm which created the cache from the xml file above.
TASK taskClass = sustainability.SustainabilityTest taskMethod = stopAndRestartRandomRolePlayingClients
	threadGroups = rolePlayerStopAndRestartThread
	maxThreads=1
	maxTimesToRun=10
	startInterval =40
	;

TASK taskClass = sustainability.SustainabilityTest taskMethod = putKeysValuesRegionA
	threadGroups = regionAProducerThread
	maxThreads=1
	maxTimesToRun =1
	;

TASK taskClass = sustainability.SustainabilityTest taskMethod = putKeysValuesRegionB
	threadGroups = regionBProducerThread
	maxThreads=1
	maxTimesToRun =1
	;

TASK taskClass = sustainability.SustainabilityTest taskMethod = putKeysValuesRegionC
	threadGroups = regionCProducerThread
	maxThreads=1
	maxTimesToRun =1
	;

TASK taskClass = sustainability.SustainabilityTest taskMethod = putKeysValuesRegionD
	threadGroups = regionDProducerThread
	maxThreads=1
	maxTimesToRun =1
	;
	
TASK taskClass = sustainability.SustainabilityTest taskMethod = putKeysValuesRegionE
	threadGroups = regionEProducerThread
	maxThreads=1
	maxTimesToRun =1
	;
	
TASK taskClass = sustainability.SustainabilityTest taskMethod = putKeysValuesRegionF
	threadGroups = regionFProducerThread
	maxThreads=1
	maxTimesToRun =1
	;
	
TASK taskClass = sustainability.SustainabilityTest taskMethod = putKeysValuesRegionG
	threadGroups = regionGProducerThread
	maxThreads=1
	maxTimesToRun =1
	;

/*
TASK  taskClass = sustainability.SustainabilityTest taskMethod = createRolePlayerDVm
	//util.RegionDefPrms-reliabilitySpecName = rolePlayerA
	//util.RegionDefPrms-VMRegionSpecName = rolePlayerA
	maxTimesToRun=1
	startInterval=60
	threadGroups = rolePlayerDThread
	;
*/

// prints all the region defiened in the cache created from xml file.
CLOSETASK taskClass = sustainability.SustainabilityTest taskMethod = printRegions
	threadGroups = printRegionsThreads 
	;

// checks the integrity of the cache.
CLOSETASK taskClass = sustainability.SustainabilityTest taskMethod = checkGetInitialImageStats
	threadGroups = validateInitialImageThread
	;

roles.RolesPrms-stopMode = ONEOF MEAN_KILL NICE_KILL MEAN_EXIT NICE_EXIT FOENO;

roles.RolesPrms-startMode = ON_DEMAND; 
roles.RolesPrms-clientsToStop =  rolePlayerAClient rolePlayerBClient rolePlayerCClient rolePlayerDClient rolePlayerEClient rolePlayerFClient rolePlayerGClient ;


