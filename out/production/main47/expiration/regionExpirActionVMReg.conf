hydra.Prms-testRequirement = "
Test to verify the expiration actions and listener events of TTL and idleTimeout 
expirations on VM regions.
";

hydra.Prms-testDescription = "
This test verifies that destroy and invalidate expiration actions are distributed
and cause listener events, and that localDestroy and localInvalidate expiration
actions are not distributed and to not cause listener events. This test does NOT 
verify that expiration actions occur at the appropriate expiration time, or verify 
which operations prevent an entry from expiring. Validation occurs through listener
counters installed in each VM.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparamsN.inc;

hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 8;

// controller threads, all in 1 VM so the regions can be created without mirroring
// (the verify threads will have mirroring so none of the verify threads can be
// in the same VM as the control threads). These threads puts keys/values into a 
// region and wait for expiration to occur, then they verify listener counters
// from all VMs
THREADGROUP controlTTLDestroyThread            totalThreads = 1 clientNames = client1; 
THREADGROUP controlTTLLocalDestroyThread       totalThreads = 1 clientNames = client1; 
THREADGROUP controlTTLInvalThread              totalThreads = 1 clientNames = client1; 
THREADGROUP controlTTLLocalInvalThread         totalThreads = 1 clientNames = client1; 
THREADGROUP controlIdleTODestroyThread         totalThreads = 1 clientNames = client1; 
THREADGROUP controlIdleTOLocalDestroyThread    totalThreads = 1 clientNames = client1; 
THREADGROUP controlIdleTOInvalThread           totalThreads = 1 clientNames = client1; 
THREADGROUP controlIdleTOLocalInvalThread      totalThreads = 1 clientNames = client1; 

// each VM (other than the VM used for the controller threads) has 1 thread that
// will verify the expiration actions it receives (if it is verifing a region whose
// expiration action is distributed) or doesn't receive (if it is verifying a region
// whose expiration action is not distributed). These threads don't have tasks assigned;
// they have listeners installed that bump listener counters, and these are verified
// in the controller thread, but these might come in handy for future test expansion.
THREADGROUP verifyTTLDestroyThreads            totalThreads = 5  totalVMs = 5; 
THREADGROUP verifyTTLLocalDestroyThreads       totalThreads = 5  totalVMs = 5; 
THREADGROUP verifyTTLInvalThreads              totalThreads = 5  totalVMs = 5; 
THREADGROUP verifyTTLLocalInvalThreads         totalThreads = 5  totalVMs = 5; 
THREADGROUP verifyIdleTODestroyThreads         totalThreads = 5  totalVMs = 5; 
THREADGROUP verifyIdleTOLocalDestroyThreads    totalThreads = 5  totalVMs = 5; 
THREADGROUP verifyIdleTOInvalThreads           totalThreads = 5  totalVMs = 5; 
THREADGROUP verifyIdleTOLocalInvalThreads      totalThreads = 5  totalVMs = 5; 

STARTTASK    taskClass   = expiration.ExpirationTest taskMethod  = StartTask_initialize;

INITTASK     taskClass   = expiration.ExpirationTest taskMethod  = HydraTask_initializeControlThread
             threadGroups = controlTTLDestroyThread, controlTTLLocalDestroyThread,
                            controlTTLInvalThread, controlTTLLocalInvalThread,
                            controlIdleTODestroyThread, controlIdleTOLocalDestroyThread,
                            controlIdleTOInvalThread, controlIdleTOLocalInvalThread;

INITTASK     taskClass   = expiration.ExpirationTest taskMethod  = HydraTask_initializeVerifyThread
             threadGroups = verifyTTLDestroyThreads, verifyTTLLocalDestroyThreads,
                            verifyTTLInvalThreads, verifyTTLLocalInvalThreads,
                            verifyIdleTODestroyThreads, verifyIdleTOLocalDestroyThreads,
                            verifyIdleTOInvalThreads, verifyIdleTOLocalInvalThreads;

TASK         taskClass   = expiration.ExpirationTest 
                taskMethod  = HydraTask_controlRegionTTLDestroy
                threadGroups = controlTTLDestroyThread;
TASK         taskClass   = expiration.ExpirationTest 
                taskMethod  = HydraTask_controlRegionTTLLocalDestroy
                threadGroups = controlTTLLocalDestroyThread;
TASK         taskClass   = expiration.ExpirationTest 
                taskMethod  = HydraTask_controlRegionTTLInval
                threadGroups = controlTTLInvalThread;
TASK         taskClass   = expiration.ExpirationTest 
                taskMethod  = HydraTask_controlRegionTTLLocalInval
                threadGroups = controlTTLLocalInvalThread;
TASK         taskClass   = expiration.ExpirationTest 
                taskMethod  = HydraTask_controlRegionIdleTODestroy
                threadGroups = controlIdleTODestroyThread;
TASK         taskClass   = expiration.ExpirationTest 
                taskMethod  = HydraTask_controlRegionIdleTOLocalDestroy
                threadGroups = controlIdleTOLocalDestroyThread;
TASK         taskClass   = expiration.ExpirationTest 
                taskMethod  = HydraTask_controlRegionIdleTOInval
                threadGroups = controlIdleTOInvalThread;
TASK         taskClass   = expiration.ExpirationTest 
                taskMethod  = HydraTask_controlRegionIdleTOLocalInval
                threadGroups = controlIdleTOLocalInvalThread;

// task used for debugging
//TASK          taskClass   = expiration.ExpirationTest 
//                taskMethod  = HydraTask_syncAndLog
//                threadGroups = verifyTTLDestroyThreads, verifyTTLLocalDestroyThreads,
//                            verifyTTLInvalThreads, verifyTTLLocalInvalThreads,
//                            verifyIdleTODestroyThreads, verifyIdleTOLocalDestroyThreads,
//                            verifyIdleTOInvalThreads, verifyIdleTOLocalInvalThreads;

hydra.Prms-serialExecution = false;

// This specifies the regions for the control threads only
util.RegionDefPrms-regionSpecs = "
   specName = TTLDestroy:
       scope = ack, noack: mirroring = none: 
       regionTTLSec = 90: 
       regionTTLAction = destroy:
       statisticsEnabled = true:
   specName = TTLLocalDestroy:
       scope = ack, noack: mirroring = none: 
       regionTTLSec = 90: 
       regionTTLAction = localDestroy:
       statisticsEnabled = true:
   specName = TTLInval:
       scope = ack, noack: mirroring = none: 
       regionTTLSec = 90: 
       regionTTLAction = invalidate:
       statisticsEnabled = true:
   specName = TTLLocalInval:
       scope = ack, noack: mirroring = none: 
       regionTTLSec = 90: 
       regionTTLAction = localInvalidate:
       statisticsEnabled = true:
   specName = IdleTODestroy:
       scope = ack, noack: mirroring = none: 
       regionIdleTimeoutSec = 90: 
       regionIdleTimeoutAction = destroy:
       statisticsEnabled = true:
   specName = IdleTOLocalDestroy:
       scope = ack, noack: mirroring = none: 
       regionIdleTimeoutSec = 90: 
       regionIdleTimeoutAction = localDestroy:
       statisticsEnabled = true:
   specName = IdleTOInval:
       scope = ack, noack: mirroring = none: 
       regionIdleTimeoutSec = 90: 
       regionIdleTimeoutAction = invalidate:
       statisticsEnabled = true:
   specName = IdleTOLocalInval:
       scope = ack, noack: mirroring = none: 
       regionIdleTimeoutSec = 90: 
       regionIdleTimeoutAction = localInvalidate:
       statisticsEnabled = true:
   ";

hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;
util.TestHelperPrms-minTaskGranularitySec = 120;
hydra.Prms-totalTaskTimeSec = 30;
hydra.Prms-maxResultWaitSec = 900;

