hydra.Prms-testRequirement = "Verify that vms do not run out of memory with a replicated region and critical heap limits";
hydra.Prms-testDescription = " Bombard a replicated region with new entries until it hits the critical heap limit, then keep going to ensure we don't run out of memory";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_2.inc;
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP adminThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;

THREADGROUP replicateThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = resman.MemManTest  taskMethod = HydraTask_initDistributedRegion
             threadGroups = replicateThreads;

INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = adminThreads;

TASK         taskClass   = resman.MemManTest  taskMethod = HydraTask_doOpsBeyondCritical
             threadGroups = replicateThreads;

hydra.Prms-totalTaskTimeSec = 7200; // test is workload based
hydra.Prms-maxResultWaitSec = 600;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 100 1000 5000 10000 FOENO;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = 30;

hydra.CachePrms-names               = cache1;
hydra.CachePrms-searchTimeout       = 600;
hydra.CachePrms-resourceManagerName = resourceMan;

hydra.ResourceManagerPrms-names                  = resourceMan;
hydra.ResourceManagerPrms-criticalHeapPercentage = 75;

hydra.RegionPrms-names          = distributedRegion;
hydra.RegionPrms-regionName     = distributedRegion;
hydra.RegionPrms-cacheLoader    = resman.ResourceManLoader;
hydra.RegionPrms-dataPolicy     = replicate;

resman.ResourceManPrms-numRegions = 10;
resman.ResourceManPrms-putAllSize = RANGE 10 200 EGNAR;

util.AdminHelperPrms-alertListener = rebalance.CapacityAdminListener;

hydra.VmPrms-extraVMArgsSUN += "-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:CMSInitiatingOccupancyFraction=30";
hydra.VmPrms-extraVMArgsJRockit = "-Xgc:gencon -XXgcTrigger:30";
hydra.VmPrms-extraVMArgsIBM = "-Xgcpolicy:gencon -verbose:sizes";
hydra.VmPrms-extraVMArgs += "-Xmx${heapMB}m -Xms${heapMB}m";

