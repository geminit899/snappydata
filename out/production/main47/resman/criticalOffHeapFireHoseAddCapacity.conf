hydra.Prms-testRequirement = "Verify that adding capacity takes the system out of critical state";
hydra.Prms-testDescription = "
Bombard a PR with new entries until it hits the critical heap limit, add new capacity vms, rebalance,
become normal again, keep bombaring until we reach critical again.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_4.inc;
hydra.GemFirePrms-distributedSystem = ds;
hydra.GemFirePrms-offHeapMemorySize=${offHeapMB};

THREADGROUP adminThreads
    totalThreads = fcn
                   ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP accessorThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP dataStoreThreads
    totalThreads = fcn
                   ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;
THREADGROUP extraDataStoreThreads
    totalThreads = fcn
                   ${${D}Hosts} * ${${D}VMsPerHost} * ${${D}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${D}\", ${${D}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = resman.MemManTest  taskMethod = HydraTask_initAccessor
             threadGroups = accessorThreads;

INITTASK     taskClass   = resman.MemManTest  taskMethod = HydraTask_initDataStore
             threadGroups = dataStoreThreads;

INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = adminThreads;

INITTASK     taskClass   = resman.MemManTest  taskMethod = HydraTask_doOpsUntilCritical
             batch
             threadGroups = accessorThreads, dataStoreThreads;

// add capacity
INITTASK     taskClass   = resman.MemManTest  taskMethod = HydraTask_initDataStore
             threadGroups = extraDataStoreThreads;

INITTASK     taskClass   = resman.MemManTest  taskMethod = HydraTask_rebalanceOnce
             threadGroups = accessorThreads, dataStoreThreads, extraDataStoreThreads;

// experiment to see if doing a gc helps the test to pass
INITTASK     taskClass   = resman.MemManTest  taskMethod = HydraTask_doGC
             threadGroups = accessorThreads, dataStoreThreads, extraDataStoreThreads;

INITTASK     taskClass   = resman.MemManTest  taskMethod = HydraTask_doOpsNotCritical
             threadGroups = accessorThreads, dataStoreThreads;

TASK         taskClass   = resman.MemManTest  taskMethod = HydraTask_doOpsBeyondCritical
             threadGroups = accessorThreads, dataStoreThreads, extraDataStoreThreads;

CLOSETASK    taskClass   = resman.MemManTest  taskMethod = HydraTask_verifyPRMetaData
             threadGroups = accessorThreads, dataStoreThreads;

CLOSETASK    taskClass   = resman.MemManTest  taskMethod = HydraTask_verifyPrimaries
             threadGroups = accessorThreads, dataStoreThreads;

CLOSETASK    taskClass   = resman.MemManTest  taskMethod = HydraTask_verifyBucketCopies
             threadGroups = accessorThreads, dataStoreThreads;

CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = verifyOffHeapMemoryConsistencyOnce;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = closeAllRegions;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = verifyOffHeapMemoryConsistencyOnce;

ENDTASK taskClass = util.LogChecker taskMethod = HydraTask_checkLogs;

hydra.Prms-totalTaskTimeSec = 7200; // test is workload based
hydra.Prms-maxResultWaitSec = 600;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ONEOF 100 1000 5000 10000 FOENO;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

util.TestHelperPrms-minTaskGranularitySec = 30;

hydra.CachePrms-names               = cache1;
hydra.CachePrms-searchTimeout       = 600;
hydra.CachePrms-resourceManagerName = resourceMan;

hydra.ResourceManagerPrms-names                  = resourceMan;
hydra.ResourceManagerPrms-criticalOffHeapPercentage = 70;

hydra.RegionPrms-names          = accessorRegion     dataStoreRegion;
hydra.RegionPrms-regionName     = partitionedRegion  partitionedRegion;
hydra.RegionPrms-cacheLoader    = resman.ResourceManLoader;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-partitionName  = pr;
hydra.RegionPrms-enableOffHeapMemory = true;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-redundantCopies = ONEOF 0 1 2 3 FOENO;

resman.ResourceManPrms-numRegions = 10;
resman.ResourceManPrms-putAllSize = RANGE 10 200 EGNAR;

util.AdminHelperPrms-alertListener = rebalance.CapacityAdminListener;

hydra.VmPrms-extraVMArgsSUN += "-XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:CMSInitiatingOccupancyFraction=30";
hydra.VmPrms-extraVMArgsJRockit = "-Xgc:gencon -XXgcTrigger:30";
hydra.VmPrms-extraVMArgsIBM = "-Xgcpolicy:gencon -verbose:sizes";
hydra.VmPrms-extraVMArgs += "-Xmx${heapMB}m -Xms${heapMB}m";
