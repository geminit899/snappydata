hydra.Prms-testRequirement = "Test to verify that a vm that has persistent regions and inits from gii updates its disk files correctly and they can be used for recovery with no data loss";
hydra.Prms-testDescription = "
There are 2 vms in this test, and they step back and forth. Only one vm has initialized
with a region, the other has not created a cache or region.
   1) VM A does ops while starting VM B. VM B creates the cache and disk regions, but 
      it will not do ops; it will get its values from a gii of VM A. After VM B completes 
      its initialization, VM A finishes ops, writes the regions' state to the blackboard 
      and stops itself. Now VM B has the latest disk files.
   2) VM B, which initialized from gii had to update its disk files while
      ops occurred in VM A. To verify that VM B's disk files are good, VM B stops, restarts
      and verifies against the blackboard.
   Now VM B does step 1 (becoming VM A in the description above) and VM A becomes VM B.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams1.inc;

hydra.ClientPrms-vmQuantities = 2;
hydra.ClientPrms-vmThreads    = 1;

// initTasks with runMode always
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_initialize
             diskRecovery.RecoveryPrms-regionConfigNames = persistRegion
             runMode = always;

// initTasks with runMode dynamic
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyFromSnapshot
             diskRecovery.RecoveryPrms-regionConfigNames = persistRegion
             runMode = dynamic;
  
TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_recoverAfterGiiTest;
             
RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-serialExecution = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = RANGE 1 50 EGNAR;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names           = persistRegion;
hydra.RegionPrms-dataPolicy      = persistentReplicate;
hydra.RegionPrms-scope           = ONEOF ack noack global FOENO;
hydra.RegionPrms-diskStoreName   = diskStore1;
hydra.RegionPrms-diskSynchronous = true;
hydra.RegionPrms-cacheListeners  = util.SummaryLogListener;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-autoCompact = true;  
hydra.DiskStorePrms-compactionThreshold = 100;  
hydra.DiskStorePrms-maxOplogSize = 1; // frequent new logs

diskRecovery.RecoveryPrms-numRootRegions = 100;
diskRecovery.RecoveryPrms-numSubregions = 1;
diskRecovery.RecoveryPrms-regionHierarchyDepth = 2;
diskRecovery.RecoveryPrms-useUniqueKeys = true;
diskRecovery.RecoveryPrms-concurrentRegionCreation = ONEOF true false FOENO;

diskRecovery.RecoveryPrms-operations = ONEOF add destroy invalidate update get getNew putAll cacheOperations FOENO;
diskRecovery.RecoveryPrms-lowerThreshold = 10;
diskRecovery.RecoveryPrms-upperThreshold = 500;
diskRecovery.RecoveryPrms-lowerThresholdOperations = ONEOF add putAll cacheOperations FOENO;
diskRecovery.RecoveryPrms-upperThresholdOperations = ONEOF destroy cacheOperations FOENO;
diskRecovery.RecoveryPrms-numPutAllNewKeys = RANGE 1 10 EGNAR;
diskRecovery.RecoveryPrms-numPutAllExistingKeys = RANGE 1 10 EGNAR;

diskRecovery.RecoveryPrms-persistenceObserver = diskRecovery.PersistenceCountObserver;

util.TestHelperPrms-minTaskGranularitySec = 60;
