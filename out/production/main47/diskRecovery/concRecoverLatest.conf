hydra.Prms-testRequirement = "Concurrent test to verify the latest disk files are recovered";
hydra.Prms-testDescription = "
While concurrent ops occur (including things like disk compaction, Cache.rootRegions and Cache.getRegions),
stop vms, restart to recover from disk, ensure no hangs, and verify the most recent data was recovered.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_2.inc;

// all topology groups are peers
hydra.GemFirePrms-distributedSystem = ds;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx20m\", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx100m\", ${${B}Hosts}, true)"
                             ncf;

// reduce the tombstone expiration timeout (default is 10 minutes), limit the number of tombstones queued up for garbage collection
// reduce timeout to 1 minute (see BUG 48103)
hydra.VmPrms-extraVMArgs  += "-Dgemfire.tombstone-gc-threshold=5000 -Dgemfire.tombstone-timeout=60000";

THREADGROUP controllerThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP persistentReplicateThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

// initTasks with runMode always
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_initialize
             threadGroups = persistentReplicateThreads
             diskRecovery.RecoveryPrms-regionConfigNames = persistRegion
             runMode = always;
  
// initTasks with runMode dynamic
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyFromSnapshotAndSync
             threadGroups = persistentReplicateThreads
             diskRecovery.RecoveryPrms-regionConfigNames = persistRegion
             runMode = dynamic;
  
TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_concRecoverLatestController
             threadGroups = controllerThread;
             
TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_concRecoverLatestResponder
             threadGroups = persistentReplicateThreads;

RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

hydra.Prms-totalTaskTimeSec = 31536000;  // test terminated by secondsToRun
diskRecovery.RecoveryPrms-secondsToRun = 900;
hydra.Prms-maxResultWaitSec = 600;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = RANGE 1 50 EGNAR;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names           = persistRegion;
hydra.RegionPrms-dataPolicy      = persistentReplicate;
hydra.RegionPrms-diskStoreName   = diskStore1;
hydra.RegionPrms-diskSynchronous = true;
hydra.RegionPrms-cacheListeners  = util.SummaryLogListener;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-autoCompact = true;
hydra.DiskStorePrms-maxOplogSize = 1; // frequent new logs

diskRecovery.RecoveryPrms-numRootRegions = 100;
diskRecovery.RecoveryPrms-numSubregions = 1;
diskRecovery.RecoveryPrms-regionHierarchyDepth = 2;
diskRecovery.RecoveryPrms-useUniqueKeys = true;
diskRecovery.RecoveryPrms-concurrentRegionCreation = ONEOF true false FOENO;

diskRecovery.RecoveryPrms-operations = ONEOF add add destroy destroy invalidate invalidate update update get get getNew getNew putAll cacheOperations cacheOperations FOENO;
diskRecovery.RecoveryPrms-lowerThreshold = 10;
diskRecovery.RecoveryPrms-upperThreshold = 100;
diskRecovery.RecoveryPrms-lowerThresholdOperations = ONEOF add putAll cacheOperations FOENO;
diskRecovery.RecoveryPrms-upperThresholdOperations = ONEOF destroy cacheOperations FOENO;
diskRecovery.RecoveryPrms-numPutAllNewKeys = RANGE 1 10 EGNAR;
diskRecovery.RecoveryPrms-numPutAllExistingKeys = RANGE 1 10 EGNAR;

util.TestHelperPrms-minTaskGranularitySec = 30;
util.StopStartPrms-stopModes = ONEOF nice_exit nice_kill mean_exit mean_kill FOENO;
