hydra.Prms-testRequirement = "Test to convert a persistent pre-7.0 WAN queue to 7.0";
hydra.Prms-testDescription = "
There are 2 WANs in this test, one for the pre-7.0 version (651, 664) and one for the 7.0 version members. So there are 3 oldVersionWanSites and 3 newVersionWANSites.  Each WAN site has 1 member/gateway.

The newer version WAN is initialized, cache and regions created, then xml is generated.  The WAN is stopped, the DS is disconnected and the disk files are removed. This step is only to get a new version xml file.

The old version WAN is initialized, cache and regions created, then xml is generated.  The vm in the first wan site (oldVersionPublisher) executes ops. The other 2 sites just receive and do not do ops (subscribers).  The test stops the subscribers first and allows the publisher to queue up events for the other two wan sites.  Then the publisher is also stopped.

For each of the older version wan sites, the test converts disk files (including the wan queue) to the newer version.

The test then starts the new version wan sites.  Once the publisher Site comes online, the wan queue should drain, bringing all WAN sites in line with identical data.
";
INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/diskRecovery/2wans.inc;

hydra.GemFirePrms-distributedSystem  =
  fcn "hydra.TestConfigFcns.generateNamesRepeatedly
      (\"DS_\", ${${A}WanSites}, ${${A}LocatorHostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateNamesRepeatedly
      (\"DS_\", ${${B}WanSites}, ${${B}LocatorHostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateNamesRepeatedly
      (\"DS_\", ${${A}WanSites}, ${${A}HostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateNamesRepeatedly
      (\"DS_\", ${${B}WanSites}, ${${B}HostsPerSite}, false)"
  ncf;

THREADGROUP oldVersionLocatorThreads
  totalThreads = fcn ${oldVersionWanSites} * ${oldVersionLocatorHostsPerSite}
                 * ${oldVersionLocatorVMsPerHost} * ${oldVersionLocatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"oldVersionLocator\", ${oldVersionWanSites}, ${oldVersionLocatorHostsPerSite}, false, true)"
                 ncf;
THREADGROUP newVersionLocatorThreads
  totalThreads = fcn ${newVersionWanSites} * ${newVersionLocatorHostsPerSite}
                 * ${newVersionLocatorVMsPerHost} * ${newVersionLocatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"newVersionLocator\", ${newVersionWanSites}, ${newVersionLocatorHostsPerSite}, false, true)"
                 ncf;
THREADGROUP oldVersionPublisherThreads
  totalThreads = 10
  clientNames  = oldVersion_1_1;
THREADGROUP oldVersionThreads
  totalThreads = 20
  clientNames  = oldVersion_2_1, oldVersion_3_1;
THREADGROUP newVersionThreads
  totalThreads = fcn ${newVersionWanSites} * ${newVersionHostsPerSite}
                 * ${newVersionVMsPerHost} * ${newVersionThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"newVersion\", ${newVersionWanSites}, ${newVersionHostsPerSite}, false, true)"
                 ncf;

// make the old version locator and old version peers use "oldVersion" in VersionPrms-names
// make the new version locator and new version peers use "newVersion" in VersionPrms-names
hydra.ClientPrms-versionNames = fcn "hydra.TestConfigFcns.duplicate
                                     (\"oldVersion\",    ${oldVersionWanSites} * ${oldVersionLocatorVMsPerHost} )"
                                ncf
                                fcn "hydra.TestConfigFcns.duplicate
                                     (\"newVersion\",    ${newVersionWanSites} * ${newVersionLocatorVMsPerHost} )"
                                ncf
                                fcn "hydra.TestConfigFcns.duplicate
                                     (\"oldVersion\",    ${oldVersionHostsPerSite} * ${oldVersionWanSites} )"
                                ncf
                                fcn "hydra.TestConfigFcns.duplicate
                                     (\"newVersion\",    ${newVersionHostsPerSite} * ${newVersionWanSites} )"
                                ncf;
hydra.VersionPrms-names   = oldVersion     newVersion;
hydra.VersionPrms-version = ${oldVersion}  ${newVersion};
hydra.VersionPrms-gemfireHome =
  fcn "hydra.VersionDescription.getGemFireHome(\"${oldVersion}\")" ncf
  fcn "hydra.VersionDescription.getGemFireHome(\"${newVersionHome}\")" ncf
  ;

// initialize for stop/start
INITTASK     taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask
             threadGroups = oldVersionThreads, newVersionThreads, oldVersionLocatorThreads, newVersionLocatorThreads, oldVersionPublisherThreads;

// start the locators for the new version
INITTASK     taskClass   = diskRecovery.RecoveryTest    taskMethod = HydraTask_createLocator
             threadGroups = newVersionLocatorThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest    taskMethod = HydraTask_startLocatorAndDS
             threadGroups = newVersionLocatorThreads;

// prepare for disk file conversion in the newVersion jvms 
// this creates new version xml files to be used by the conversion tool
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createRegions
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createGatewayHub
             diskRecovery.RecoveryPrms-hubConfigName = newVersionHub
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_addGatewayHub
             diskRecovery.RecoveryPrms-gatewayConfigName = newVersionGateway
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_startGatewayHub
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createXmlFile
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_stopGatewayHub
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_disconnect
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTestVersionHelper  taskMethod = removeDiskFiles
             threadGroups = newVersionThreads;

// start the locators for the old version
INITTASK     taskClass   = diskRecovery.RecoveryTest    taskMethod = HydraTask_createLocator
             threadGroups = oldVersionLocatorThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest    taskMethod = HydraTask_startLocatorAndDS
             threadGroups = oldVersionLocatorThreads;

// initialize the oldVersion jvms 
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createRegions
             threadGroups = oldVersionThreads, oldVersionPublisherThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createGatewayHub
             diskRecovery.RecoveryPrms-hubConfigName = oldVersionHub
             threadGroups = oldVersionThreads, oldVersionPublisherThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_addGatewayHub
             diskRecovery.RecoveryPrms-gatewayConfigName = oldVersionGateway
             threadGroups = oldVersionThreads, oldVersionPublisherThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_startGatewayHub
             threadGroups = oldVersionThreads, oldVersionPublisherThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createXmlFile
             threadGroups = oldVersionThreads, oldVersionPublisherThreads;

// ************************************************************************************
// tasks and dynamic tasks

INITTASK     taskClass   = diskRecovery.RecoveryTest    taskMethod = HydraTask_createLocator
             threadGroups = newVersionLocatorThreads
             runMode = dynamic;
INITTASK     taskClass   = diskRecovery.RecoveryTest    taskMethod = HydraTask_startLocatorAndDS
             threadGroups = newVersionLocatorThreads
             runMode = dynamic;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createRegions
             threadGroups = newVersionThreads
             runMode = dynamic;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_startGatewayHub
             threadGroups = newVersionThreads
             runMode = dynamic;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_rvvConvertVerifyFromSnapshot
             threadGroups = newVersionThreads
             runMode = dynamic;

TASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_rvvConvertWANTestResponder
         threadGroups = oldVersionPublisherThreads;

TASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_rvvConvertWANTestController
         threadGroups = newVersionLocatorThreads
         maxTimesToRun = 1;

// ************************************************************************************
// newVersion close tasks

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_disconnect
             threadGroups = newVersionThreads;

CLOSETASK    taskClass   = util.PersistenceUtil  taskMethod = HydraTask_initialize
             threadGroups = newVersionLocatorThreads;

CLOSETASK    taskClass   = util.PersistenceUtil  taskMethod = HydraTask_doOfflineValAndCompactionOnce
             threadGroups = newVersionLocatorThreads;

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createRegions
             threadGroups = newVersionThreads;

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyFromSnapshot
             threadGroups = newVersionThreads;
  
CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_waitForMyStartupRecovery
             threadGroups = newVersionThreads;
  
CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyPRs
             threadGroups = newVersionThreads;
  
hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 600;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

// The 7.0 DiskStore configuration is used to 
//   1) create a 7.0 xml file for conversion (see diskRecovery.RecoveryPrms-convertWithNewVersionXml 
//   2) create the regions in the vm after the conversion.
hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names              = // regions with their own DiskStore
                                      persistRegion
                                      persistWithOverflow

                                      // regions that share a DiskStore
                                      persistRegionShared
                                      persistWithOverflowShared;

hydra.RegionPrms-dataPolicy         = persistentReplicate
                                      persistentReplicate

                                      persistentReplicate
                                      persistentReplicate;

hydra.RegionPrms-diskStoreName      = diskStore1         
                                      diskStore2

                                      sharedDiskStore
                                      sharedDiskStore;

hydra.RegionPrms-scope              = ONEOF ack global noack FOENO
                                      ONEOF ack global noack FOENO

                                      ONEOF ack global noack FOENO
                                      ONEOF ack global noack FOENO;

hydra.RegionPrms-diskSynchronous    = true;
hydra.RegionPrms-cacheListeners     = util.SummaryLogListener;
hydra.RegionPrms-evictionAttributes = none,
                                      lruEntryCount 30 overflowToDisk,

                                      none,
                                      lruEntryCount 30 overflowToDisk;
                                   
hydra.RegionPrms-partitionName      = none none 
                                      none none;
hydra.RegionPrms-enableGateway = true;

util.TestHelperPrms-minTaskGranularitySec = 15;

hydra.DiskStorePrms-names = sharedDiskStore diskStore1 diskStore2;
hydra.DiskStorePrms-diskDirNum = ONEOF 1 2 3 4 5 FOENO
                                 ONEOF 1 2 3 4 5 FOENO
                                 ONEOF 1 2 3 4 5 FOENO;

hydra.DiskStorePrms-autoCompact = true;
hydra.DiskStorePrms-maxOplogSize = 1; // frequent new logs

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = RANGE 5000 10000 EGNAR;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

diskRecovery.RecoveryPrms-operations = ONEOF add add destroy destroy update update get get getNew getNew 
                                             putAll putAll cacheOperations cacheOperations FOENO;
diskRecovery.RecoveryPrms-lowerThreshold = 10;
diskRecovery.RecoveryPrms-upperThreshold = 100;
diskRecovery.RecoveryPrms-lowerThresholdOperations = ONEOF add putAll add putAll cacheOperations FOENO;
diskRecovery.RecoveryPrms-upperThresholdOperations = ONEOF destroy cacheOperations FOENO;
diskRecovery.RecoveryPrms-numPutAllNewKeys = RANGE 1 10 EGNAR;
diskRecovery.RecoveryPrms-numPutAllExistingKeys = RANGE 1 10 EGNAR;
diskRecovery.RecoveryPrms-useUniqueKeys = true;
diskRecovery.RecoveryPrms-convertWithNewVersionXml = ${convertWithNewVersionXml};

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

hydra.GatewayHubPrms-names = oldVersionHub newVersionHub;
hydra.GatewayHubPrms-haEnabled = true;
hydra.GatewayPrms-names = oldVersionGateway newVersionGateway;
hydra.GatewayPrms-enablePersistence = true;
hydra.GatewayPrms-maximumQueueMemory = 1;
hydra.GatewayPrms-diskStoreName = ONEOF sharedDiskStore diskStore1 diskStore2 FOENO;

util.StopStartPrms-stopModes = ONEOF nice_exit mean_exit mean_kill FOENO;
