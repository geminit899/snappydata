hydra.Prms-testRequirement = "Test that we can recover a vm when it was never alive at the same time as existing vms";
hydra.Prms-testDescription = "
Start up group1 and group2 vms, load, stop group1 vms, start new group3 vms 
stop group2 vms, start group1 vms and see that they can recover (group1 will gii)
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_4.inc;

// all topology groups are peers
hydra.GemFirePrms-distributedSystem = ds;

THREADGROUP controllerThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP group1Threads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;
THREADGROUP group2Threads
    totalThreads = fcn
                   ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${C}\", ${${C}Hosts}, true)"
                   ncf;
THREADGROUP group3Threads
    totalThreads = fcn
                   ${${D}Hosts} * ${${D}VMsPerHost} * ${${D}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${D}\", ${${D}Hosts}, true)"
                   ncf;

// group1Threads and group2Threads init tasks
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_initialize
             threadGroups = group1Threads, group2Threads
             diskRecovery.RecoveryPrms-regionConfigNames = persistRegion
             runMode = always;
  
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_load
             threadGroups = group1Threads, group2Threads 
             runMode = once
             batch;

INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_markVmInBlackboard
             threadGroups = group1Threads
             diskRecovery.RecoveryPrms-vmMarker = group1
             runMode = once;

INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_markVmInBlackboard
             threadGroups = group2Threads
             diskRecovery.RecoveryPrms-vmMarker = group2
             runMode = once;

// group3Threads init tasks
// runMode is dynamic, so we do not create cache or regions or load when starting up, only when restarted
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_initialize
             threadGroups = group3Threads
             diskRecovery.RecoveryPrms-regionConfigNames = persistRegion
             runMode = dynamic;
  
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_markVmInBlackboard
             threadGroups = group3Threads
             diskRecovery.RecoveryPrms-vmMarker = group3
             runMode = once;

// group1, group2 and group3 threads
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_recordStartupState
             threadGroups = group1Threads, group2Threads, group3Threads
             runMode = dynamic;
  
TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_latestRecoveryTest
             threadGroups = controllerThread
             maxTimesToRun = 1;

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyStartupState
             threadGroups = controllerThread;

RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = RANGE 1 50 EGNAR;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.RegionPrms-names           = persistRegion;
hydra.RegionPrms-dataPolicy      = persistentReplicate;
hydra.RegionPrms-diskStoreName   = diskStore1;
hydra.RegionPrms-diskSynchronous = true;
//hydra.RegionPrms-cacheListeners = util.SummaryLogListener;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-autoCompact = true;
hydra.DiskStorePrms-maxOplogSize = 1; // frequent new logs

diskRecovery.RecoveryPrms-numRootRegions = 5;
diskRecovery.RecoveryPrms-maxNumEntriesPerRegion = 15000;

util.TestHelperPrms-minTaskGranularitySec = 60;
util.StopStartPrms-stopModes = ${stopMode};

diskRecovery.RecoveryPrms-testStrategy = membersNotSimultaneous;
