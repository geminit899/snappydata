hydra.Prms-testRequirement = "Test to convert a persistent pre-6.5 WAN queue to 6.5 or later";
hydra.Prms-testDescription = "
There are 2 WANs in this test, one for the pre-6.5 version and one for the 6.5 (or later)
version. Each WAN has 3 sites, and each site has 2 jvms. 

The newer version WAN is initialized, cache and regions created, then xml is generated.
The WAN is stopped, the DS is disconnected and the disk files are removed. This step
is only to get a new version xml file.

The old version WAN is initialized, cache and regions created, then xml is generated.
The 2 vms in one site do ops. The other 2 sites just receive and do not do ops.
The test first stops one vm in each site. Now each site has only 1 vm. The test then
stops another vm in the 2 sites that are not doing ops. Now only 1 vm remains doing
ops and adding to the wan queue for the other 2 sites. That last vm pauses, writes
its regions' state to the blackboard, then stops.

For each of the older version wan sites, the test converts disk files (including the
wan queue) to the newer version.

The test then starts one jvm per new version wan site. The jvm started is the last one
stopped in each wan site as it has the most recent disk files for that site (and we
used its xml file as the new version xml during conversion). After those jvms start up
and validate, the remaining jvm in each wan site starts up and validates; they will
gii from the other vm in the wan site. As the wan becomes available, the wan queue
should drain, bringing all jvms in line with identical data. 
";
INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/diskRecovery/2wans.inc;

hydra.GemFirePrms-distributedSystem  =
  fcn "hydra.TestConfigFcns.generateNamesRepeatedly
      (\"DS_\", ${${A}WanSites}, ${${A}LocatorHostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateNamesRepeatedly
      (\"DS_\", ${${B}WanSites}, ${${B}LocatorHostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateNamesRepeatedly
      (\"DS_\", ${${A}WanSites}, ${${A}HostsPerSite}, false)"
  ncf
  fcn "hydra.TestConfigFcns.generateNamesRepeatedly
      (\"DS_\", ${${B}WanSites}, ${${B}HostsPerSite}, false)"
  ncf;

THREADGROUP oldVersionLocatorThreads
  totalThreads = fcn ${oldVersionWanSites} * ${oldVersionLocatorHostsPerSite}
                 * ${oldVersionLocatorVMsPerHost} * ${oldVersionLocatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"oldVersionLocator\", ${oldVersionWanSites}, ${oldVersionLocatorHostsPerSite}, false, true)"
                 ncf;
THREADGROUP newVersionLocatorThreads
  totalThreads = fcn ${newVersionWanSites} * ${newVersionLocatorHostsPerSite}
                 * ${newVersionLocatorVMsPerHost} * ${newVersionLocatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"newVersionLocator\", ${newVersionWanSites}, ${newVersionLocatorHostsPerSite}, false, true)"
                 ncf;
THREADGROUP oldVersionPublisherThreads
  totalThreads = 20
  clientNames  = oldVersion_1_1;
THREADGROUP oldVersionThreads
  totalThreads = 40
  clientNames  = oldVersion_2_1, oldVersion_3_1;
THREADGROUP newVersionThreads
  totalThreads = fcn ${newVersionWanSites} * ${newVersionHostsPerSite}
                 * ${newVersionVMsPerHost} * ${newVersionThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
              (\"newVersion\", ${newVersionWanSites}, ${newVersionHostsPerSite}, false, true)"
                 ncf;

// make the old version locator and old version peers use "oldVersion" in VersionPrms-names
// make the new version locator and new version peers use "newVersion" in VersionPrms-names
hydra.ClientPrms-versionNames = fcn "hydra.TestConfigFcns.duplicate
                                     (\"oldVersion\",    ${oldVersionWanSites} * ${oldVersionLocatorVMsPerHost} )"
                                ncf
                                fcn "hydra.TestConfigFcns.duplicate
                                     (\"newVersion\",    ${newVersionWanSites} * ${newVersionLocatorVMsPerHost} )"
                                ncf
                                fcn "hydra.TestConfigFcns.duplicate
                                     (\"oldVersion\",    ${oldVersionHostsPerSite} * ${oldVersionWanSites} )"
                                ncf
                                fcn "hydra.TestConfigFcns.duplicate
                                     (\"newVersion\",    ${newVersionHostsPerSite} * ${newVersionWanSites} )"
                                ncf;
hydra.VersionPrms-names   = oldVersion     newVersion;
hydra.VersionPrms-version = ${oldVersion}  ${newVersion};
hydra.VersionPrms-gemfireHome =
  fcn "hydra.VersionDescription.getGemFireHome(\"${oldVersion}\")" ncf
  fcn "hydra.VersionDescription.getGemFireHome(\"${newVersionHome}\")" ncf
  ;

// initialize for stop/start
INITTASK     taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask
             threadGroups = oldVersionThreads, newVersionThreads, oldVersionLocatorThreads, newVersionLocatorThreads, oldVersionPublisherThreads;

// start the locators for the new version
INITTASK     taskClass   = hydra.DistributedSystemHelper    taskMethod = createLocator
             threadGroups = newVersionLocatorThreads;
INITTASK     taskClass   = hydra.DistributedSystemHelper    taskMethod = startLocatorAndDS
             threadGroups = newVersionLocatorThreads;

// prepare for disk file conversion in the newVersion jvms 
// this creates new version xml files to be used by the conversion tool
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createRegions
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createGatewayHub
             diskRecovery.RecoveryPrms-hubConfigName = newVersionHub
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_addGatewayHub
             diskRecovery.RecoveryPrms-gatewayConfigName = newVersionGateway
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_startGatewayHub
             threadGroups = newVersionThreads;
// Do not use extra regions because of bug 42882/42966
//INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createExtraRegions
//             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createXmlFile
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_stopGatewayHub
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_disconnect
             threadGroups = newVersionThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTestVersionHelper  taskMethod = removeDiskFiles
             threadGroups = newVersionThreads;

// start the locators for the old version
INITTASK     taskClass   = hydra.DistributedSystemHelper    taskMethod = createLocator
             threadGroups = oldVersionLocatorThreads;
INITTASK     taskClass   = hydra.DistributedSystemHelper    taskMethod = startLocatorAndDS
             threadGroups = oldVersionLocatorThreads;

// initialize the oldVersion jvms 
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createRegions
             threadGroups = oldVersionThreads, oldVersionPublisherThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createGatewayHub
             diskRecovery.RecoveryPrms-hubConfigName = oldVersionHub
             threadGroups = oldVersionThreads, oldVersionPublisherThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_addGatewayHub
             diskRecovery.RecoveryPrms-gatewayConfigName = oldVersionGateway
             threadGroups = oldVersionThreads, oldVersionPublisherThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_startGatewayHub
             threadGroups = oldVersionThreads, oldVersionPublisherThreads;
// Do not use extra regions because of bug 42882/42966
//INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createExtraRegions
//             threadGroups = oldVersionThreads, oldVersionPublisherThreads;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createXmlFile
             threadGroups = oldVersionThreads, oldVersionPublisherThreads;

// ************************************************************************************
// tasks and dynamic tasks

INITTASK     taskClass   = hydra.DistributedSystemHelper    taskMethod = createLocator
             threadGroups = newVersionLocatorThreads
             runMode = dynamic;
INITTASK     taskClass   = hydra.DistributedSystemHelper    taskMethod = startLocatorAndDS
             threadGroups = newVersionLocatorThreads
             runMode = dynamic;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createRegions
             threadGroups = newVersionThreads
             runMode = dynamic;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_startGatewayHub
             threadGroups = newVersionThreads
             runMode = dynamic;
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_convertVerifyFromSnapshot
             threadGroups = newVersionThreads
             runMode = dynamic;

TASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_convertWANTestResponder
         threadGroups = oldVersionPublisherThreads;

TASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_convertWANTestController
         threadGroups = newVersionLocatorThreads
         maxTimesToRun = 1;

// ************************************************************************************
// newVersion close tasks

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_disconnect
             threadGroups = newVersionThreads;

CLOSETASK    taskClass   = util.PersistenceUtil  taskMethod = HydraTask_initialize
             threadGroups = newVersionLocatorThreads;

CLOSETASK    taskClass   = util.PersistenceUtil  taskMethod = HydraTask_doOfflineValAndCompactionOnce
             threadGroups = newVersionLocatorThreads;

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_createRegions
             threadGroups = newVersionThreads;

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyFromSnapshot
             threadGroups = newVersionThreads;
  
CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_waitForMyStartupRecovery
             threadGroups = newVersionThreads;
  
CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyPRs
             threadGroups = newVersionThreads;
  
hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 600;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

// 1) The following regions are defined using 6.5 attributes (DiskStores); hydra will automatically
//    convert these regions to pre-6.5 DiskWriteAttributes for the pre-6.5 system. 
// 2) Note that in pre-6.5 GemFire, persistent PRs did not exist; disk for PRs only existed as
//    overflow-to-disk, so any regions defined as PRs have overflow-to-disk (remember that even
//    though the regions are defined in 6.5 notation, the point of the test is to convert pre-6.5
//    disk files to 6.5, and overflow-to-disk for PRs is what is available pre-6.5 for conversion).
// 3) The 6.5 DiskStore configuration is used to 1) create a 6.5 xml file for conversion (see
//    diskRecovery.RecoveryPrms-convertWithNewVersionXml and 2) create the regions in the vm
//    after the conversion.
hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names              = // regions with their own DiskStore
                                      persistRegion
                                      persistWithOverflow

                                      // regions that share a DiskStore
                                      persistRegionShared
                                      persistWithOverflowShared;

hydra.RegionPrms-dataPolicy         = persistentReplicate
                                      persistentReplicate

                                      persistentReplicate
                                      persistentReplicate;

hydra.RegionPrms-diskStoreName      = diskStore1         
                                      diskStore2

                                      sharedDiskStore
                                      sharedDiskStore;

hydra.RegionPrms-scope              = ONEOF ack global noack FOENO
                                      ONEOF ack global noack FOENO

                                      ONEOF ack global noack FOENO
                                      ONEOF ack global noack FOENO;

hydra.RegionPrms-diskSynchronous    = ONEOF true false FOENO
                                      ONEOF true false FOENO

                                      ONEOF true false FOENO
                                      ONEOF true false FOENO;
hydra.RegionPrms-cacheListeners     = util.SummaryLogListener;
hydra.RegionPrms-evictionAttributes = none,
                                      lruEntryCount 30 overflowToDisk,

                                      none,
                                      lruEntryCount 30 overflowToDisk;
                                   
hydra.RegionPrms-partitionName      = none none 
                                      none none;
hydra.RegionPrms-enableGateway = true;

util.TestHelperPrms-minTaskGranularitySec = 15;

hydra.DiskStorePrms-names = sharedDiskStore diskStore1 diskStore2;
hydra.DiskStorePrms-diskDirNum = ONEOF 1 2 3 4 5 FOENO
                                 ONEOF 1 2 3 4 5 FOENO
                                 ONEOF 1 2 3 4 5 FOENO;

hydra.DiskStorePrms-autoCompact = true;
hydra.DiskStorePrms-maxOplogSize = 1; // frequent new logs

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = RANGE 5000 10000 EGNAR;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

diskRecovery.RecoveryPrms-operations = ONEOF add add destroy destroy invalidate invalidate update update get get getNew getNew 
                                             putAll putAll cacheOperations cacheOperations FOENO;
diskRecovery.RecoveryPrms-lowerThreshold = 10;
diskRecovery.RecoveryPrms-upperThreshold = 100;
diskRecovery.RecoveryPrms-lowerThresholdOperations = ONEOF add putAll add putAll cacheOperations FOENO;
diskRecovery.RecoveryPrms-upperThresholdOperations = ONEOF destroy cacheOperations FOENO;
diskRecovery.RecoveryPrms-numPutAllNewKeys = RANGE 1 10 EGNAR;
diskRecovery.RecoveryPrms-numPutAllExistingKeys = RANGE 1 10 EGNAR;
diskRecovery.RecoveryPrms-useUniqueKeys = true;
diskRecovery.RecoveryPrms-convertWithNewVersionXml = ${convertWithNewVersionXml};

util.CachePrms-useDeclarativeXmlFile = ONEOF true false FOENO;

hydra.GatewayHubPrms-names = oldVersionHub newVersionHub;
hydra.GatewayHubPrms-haEnabled = true;
hydra.GatewayPrms-names = oldVersionGateway newVersionGateway;
hydra.GatewayPrms-enablePersistence = true;
hydra.GatewayPrms-maximumQueueMemory = 1;
hydra.GatewayPrms-diskStoreName = ONEOF sharedDiskStore diskStore1 diskStore2 FOENO;

util.StopStartPrms-stopModes = ONEOF nice_exit mean_exit mean_kill FOENO;
