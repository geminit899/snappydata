hydra.Prms-testRequirement = "Test incremental backup on mixed partitioned persistent and replicated persistent region data using multiple disk stores and multiple disk directories.";
hydra.Prms-testDescription = " ";

INCLUDE $JTESTS/diskRecovery/backupMultiDiskStore.inc;

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_waitForMyStartupRecovery
             threadGroups = workThreads;

CLOSETASK    taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyPRs
             threadGroups = workThreads;

RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

CLOSETASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_disconnect
             threadGroups = controllerThread;
             
CLOSETASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_disconnect
             threadGroups = workThreads;      

CLOSETASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_restoreBackups
                          threadGroups = workThreads;
                          
// add more off-heap verification; if off-heap was not randomly chosen, this is a no-op
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = waitForOffHeapSilence;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = verifyOffHeapMemoryConsistencyOnce;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = closeAllOffHeapRegions;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = verifyOffHeapMemoryConsistencyOnce;

hydra.RegionPrms-names              = 
                                      pr
                                      prOverflow
                                      prPersist
                                      prPersistOverflow

                                      replicate
                                      replicateOverflow
                                      replicatePersist
                                      replicatePersistOverflow;
hydra.RegionPrms-dataPolicy         = 
                                      persistentPartition persistentPartition persistentPartition persistentPartition
                                      persistentReplicate persistentReplicate persistentReplicate persistentReplicate;
hydra.RegionPrms-scope              = 
                                      default default default default
                                      ONEOF ack noAck FOENO
                                      ONEOF ack noAck FOENO
                                      ONEOF ack noAck FOENO
                                      ONEOF ack noAck FOENO;
hydra.RegionPrms-cacheListeners     = util.SummaryLogListener;
hydra.RegionPrms-partitionName      = 
                                      pr pr pr pr
                                      none none none none;
hydra.RegionPrms-diskStoreName = diskStore1 diskStore2 diskStore3; 
hydra.RegionPrms-evictionAttributes = 
                                      none, lruEntryCount 50 overflowToDisk, none, lruEntryCount 50 overflowToDisk,
                                      none, lruEntryCount 50 overflowToDisk, none, lruEntryCount 50 overflowToDisk;
hydra.RegionPrms-diskSynchronous    = ONEOF true false FOENO;

hydra.PartitionPrms-names = pr;
hydra.PartitionPrms-redundantCopies = ONEOF 1 2 3 FOENO;

diskRecovery.RecoveryPrms-numRootRegions = 10;
diskRecovery.RecoveryPrms-numSubregions = 2;
diskRecovery.RecoveryPrms-regionHierarchyDepth = 2;
diskRecovery.RecoveryPrms-maxNumEntriesPerRegion = 200;


