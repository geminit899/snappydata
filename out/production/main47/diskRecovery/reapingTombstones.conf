hydra.Prms-testRequirement = "verify that heap does not fill up with tombstones when VMs recycled";
hydra.Prms-testDescription = "
Load regions, destroy all entries (either through expiration or explicit destroys.
Recycle VMs (dynamic init tasks will verify empty regions and re-load).
Verify that heapSize does not continue to grow (due to tombstones).
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_2.inc;

// all topology groups are peers
hydra.GemFirePrms-distributedSystem = ds;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx20m\", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx150m\", ${${B}Hosts}, true)"
                             ncf;

//hydra.VmPrms-extraVMArgs  += "-Dgemfire.tombstone-gc-threshold=5000 -Dgemfire.tombstone-timeout=180000";
hydra.VmPrms-extraVMArgs  += "-Dgemfire.tombstone-gc-threshold=5000 -Dgemfire.tombstone-timeout=60000";

THREADGROUP controllerThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP persistVMThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_initialize
             threadGroups = persistVMThreads
             runMode = always;

INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = controllerThread;
  
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_initializeController
             threadGroups = controllerThread;

TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_tombstoneTestController
             threadGroups = controllerThread;
             
TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_tombstoneTestResponder
             threadGroups = persistVMThreads;

diskRecovery.RecoveryPrms-destroyMethod = ${destroyMethod};
             
hydra.Prms-totalTaskTimeSec = 31536000;  // test terminated by secondsToRun
diskRecovery.RecoveryPrms-secondsToRun = 900;

hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-removeDiskFilesAfterTest = false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = RANGE 100 200 EGNAR;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;

diskRecovery.RecoveryPrms-regionConfigNames = ${regionConfig};
hydra.RegionPrms-names           = persistRegion          idleTORegion          ttlRegion;
hydra.RegionPrms-entryTimeToLive = default,               default,              10 destroy;
hydra.RegionPrms-entryIdleTimeout= default,               10 destroy,           default;
hydra.RegionPrms-dataPolicy      = persistentReplicate;
hydra.RegionPrms-diskStoreName   = diskStore1;
hydra.RegionPrms-diskSynchronous = true;

hydra.DiskStorePrms-names = diskStore1;

diskRecovery.RecoveryPrms-numRootRegions = 4;
diskRecovery.RecoveryPrms-numSubregions = 2;
diskRecovery.RecoveryPrms-regionHierarchyDepth = 2;
diskRecovery.RecoveryPrms-maxNumEntriesPerRegion = ${numEntriesPerRegion};
diskRecovery.RecoveryPrms-chunkSize = 7000;

util.TestHelperPrms-minTaskGranularitySec = 60;
util.StopStartPrms-stopModes = NICE_EXIT;
