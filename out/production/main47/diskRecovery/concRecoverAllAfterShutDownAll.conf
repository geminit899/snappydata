hydra.Prms-testRequirement = "Concurrent test to verify the latest disk files are recovered after using 
AdminDistributedSystem.shutDownAllMembers()";
hydra.Prms-testDescription = "
This differs from concRecoveryAll.conf in that we use AdminDistributedSystem.shutDownAllMembers()
to stop the vms
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_2.inc;

// all topology groups are peers
hydra.GemFirePrms-distributedSystem = ds;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx20m\", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx100m\", ${${B}Hosts}, true)"
                             ncf
;

// expire tombstones sooner (default is 10 minutse) and limit the number of tombstones in the expired queue (prior to gc)
hydra.VmPrms-extraVMArgs  += "-Dgemfire.tombstone-gc-threshold=5000 -Dgemfire.tombstone-timeout=300000";

THREADGROUP controllerThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP persistentReplicateThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

// initTasks with runMode always
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_initialize
             threadGroups = persistentReplicateThreads
             diskRecovery.RecoveryPrms-regionConfigNames = persistRegion
             runMode = always;
  
// initTasks with runMode dynamic
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_verifyFromLeaderSnapshot
             threadGroups = persistentReplicateThreads
             diskRecovery.RecoveryPrms-regionConfigNames = persistRegion
             runMode = dynamic;
  
// the controller thread is also an admin vm
INITTASK     taskClass     = util.AdminHelper  taskMethod = HydraTask_initializeAdminDS
             threadGroups = controllerThread;

TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_concRecoverAllController
             threadGroups = controllerThread;
             
TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_doOperationsShutDownAll
             threadGroups = persistentReplicateThreads;

RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

hydra.Prms-totalTaskTimeSec = 31536000;  // test terminated by secondsToRun
diskRecovery.RecoveryPrms-secondsToRun = 900;
hydra.Prms-maxResultWaitSec = 900;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = RANGE 1 50 EGNAR;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = true;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names           = persistRegion;
hydra.RegionPrms-dataPolicy      = persistentReplicate;
hydra.RegionPrms-diskStoreName   = diskStore1;
hydra.RegionPrms-diskSynchronous = true;
hydra.RegionPrms-cacheListeners = util.SummaryLogListener;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-allowForceCompaction = true;  // this test explicitly calls compaction
hydra.DiskStorePrms-autoCompact = false;  // this test explicitly calls compaction
hydra.DiskStorePrms-maxOplogSize = 1; // frequent new logs

diskRecovery.RecoveryPrms-numRootRegions = 100;
diskRecovery.RecoveryPrms-numSubregions = 1;
diskRecovery.RecoveryPrms-regionHierarchyDepth = 2;
diskRecovery.RecoveryPrms-useUniqueKeys = true;
diskRecovery.RecoveryPrms-concurrentRegionCreation = ONEOF true false FOENO;

diskRecovery.RecoveryPrms-operations = ONEOF add add destroy destroy invalidate invalidate update update get get getNew getNew putAll cacheOperations cacheOperations FOENO;
diskRecovery.RecoveryPrms-lowerThreshold = 10;
diskRecovery.RecoveryPrms-upperThreshold = 100;
diskRecovery.RecoveryPrms-lowerThresholdOperations = ONEOF add putAll cacheOperations FOENO;
diskRecovery.RecoveryPrms-upperThresholdOperations = ONEOF destroy cacheOperations FOENO;
diskRecovery.RecoveryPrms-numPutAllNewKeys = RANGE 1 10 EGNAR;
diskRecovery.RecoveryPrms-numPutAllExistingKeys = RANGE 1 10 EGNAR;

diskRecovery.RecoveryPrms-useShutDownAll = true;

util.TestHelperPrms-minTaskGranularitySec = 30;
util.StopStartPrms-stopModes = ONEOF nice_exit nice_kill mean_exit mean_kill FOENO;

