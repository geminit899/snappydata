hydra.Prms-testRequirement = "Test disk file compaction with persistent regions";
hydra.Prms-testDescription = "
Create new keys, then destroy a chunk of the oldest keys, invoke disk compaction, 
test that the compaction is correct, then add new keys again.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_2.inc;

// all topology groups are peers
hydra.GemFirePrms-distributedSystem = ds;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx20m\", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx300m\", ${${B}Hosts}, true)"
                             ncf;
// Fix for BUG 47153
hydra.VmPrms-extraVMArgs  += "-Dgemfire.tombstone-gc-threshold=20000 -Dgemfire.tombstone-timeout=300000";

THREADGROUP controllerThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${A}\", ${${A}Hosts}, true)"
                   ncf;
THREADGROUP persistVMThreads
    totalThreads = fcn
                   ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                   ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"${B}\", ${${B}Hosts}, true)"
                   ncf;

INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_initialize
             threadGroups = persistVMThreads
             diskRecovery.RecoveryPrms-regionConfigNames = persistRegion
             runMode = always;
  
INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_load
             threadGroups = persistVMThreads 
             batch;

INITTASK     taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_initializeController
             threadGroups = controllerThread;

TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_compactionController
             threadGroups = controllerThread;
             
TASK         taskClass   = diskRecovery.RecoveryTest  taskMethod = HydraTask_compactionResponder
             threadGroups = persistVMThreads;

RANDOMINCLUDE $JTESTS/memscale/configs/enableOffHeap.conf;
INCLUDE $JTESTS/memscale/configs/verifyOffHeap.conf;

hydra.Prms-totalTaskTimeSec = 1200;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-removeDiskFilesAfterTest = false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = RANGE 100 200 EGNAR;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = ONEOF true false FOENO;

hydra.CachePrms-names           = cache1;
hydra.CachePrms-searchTimeout   = 600;

hydra.Prms-useFixedRandomInMaster= true;
hydra.RegionPrms-names           = persistRegion;
hydra.RegionPrms-dataPolicy      = persistentReplicate;
hydra.RegionPrms-diskStoreName   = diskStore1;
hydra.RegionPrms-diskSynchronous = true;
//hydra.RegionPrms-cacheListeners = util.SummaryLogListener;

hydra.DiskStorePrms-names = diskStore1;
hydra.DiskStorePrms-allowForceCompaction = true; // this test explicitly calls compaction
hydra.DiskStorePrms-autoCompact = false;  // this test explicitly calls compaction
hydra.DiskStorePrms-maxOplogSize = 1; // frequent new logs
hydra.DiskStorePrms-compactionThreshold = 100; 

diskRecovery.RecoveryPrms-numRootRegions = 4;
diskRecovery.RecoveryPrms-numSubregions = 2;
diskRecovery.RecoveryPrms-regionHierarchyDepth = 2;
diskRecovery.RecoveryPrms-maxNumEntriesPerRegion = 20000;
diskRecovery.RecoveryPrms-chunkSize = 7000;

util.TestHelperPrms-minTaskGranularitySec = 60;
util.StopStartPrms-stopModes = NICE_EXIT;
