include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-testDescription = " Determine number of lock acquisitions/sec, mean lock acquisition time";

hydra.Prms-testRequirement = " TBD ";

cacheperf.CachePerfPrms-batchSeconds              = 60;
cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 30 seconds;
cacheperf.CachePerfPrms-workSeconds               = ${workSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 30 seconds;

hydra.Prms-totalTaskTimeSec = 999999; // see terminators

INITTASK  taskClass = dlock.DLSPerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = cacheperf.CachePerfClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = dlock.DLSPerfClient taskMethod = openCacheTask
          ;
INITTASK  taskClass = dlock.DLSPerfClient taskMethod = createDataTask
          threadGroups = creator
          batch
	  cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = none
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          ;
TASK      taskClass = dlock.DLSPerfClient taskMethod = lockTask
	  cacheperf.CachePerfPrms-keyAllocation = ownKey
          threadGroups = creator, default
          ;
CLOSETASK taskClass = dlock.DLSPerfClient taskMethod = closeCacheTask
          ;
CLOSETASK taskClass = dlock.DLSPerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = dlock.DLSPerfClient taskMethod = reportTrimIntervalsTask
          ;

THREADGROUP creator totalThreads = 1 totalVMs = 1 clientNames = client1;

hydra.Prms-maxResultWaitSec = 600;  // 10 minutes

hydra.GemFirePrms-conserveSockets = true;

hydra.ClientPrms-vmQuantities = ${vmQuantities};
hydra.ClientPrms-vmThreads    = ${vmThreads};

cacheperf.CachePerfPrms-maxKeys        = 10000;

dlock.DLSPerfPrms-unlockAfterLock = true;

cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size = range 10 1024 egnar;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;
hydra.ConfigPrms-regionConfig = region;
hydra.RegionPrms-names = region;
hydra.RegionPrms-scope = global;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/dlock/lock.spec;
