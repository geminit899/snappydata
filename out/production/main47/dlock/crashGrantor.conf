include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparams2.inc;

hydra.Prms-testDescription = "
While threads randomly lock/unlock, test LockGrantor recovery
when the LockGrantor stops granting locks (disconnects, vm crashes).
Verify threads doing randomLockTask continue to successfully get
and release locks.  
";

INITTASK taskClass = dlock.BasicDLockClient taskMethod = createCacheTask
          ;

INITTASK taskClass = dlock.BasicDLockClient taskMethod = createDataTask
          ;

INITTASK  taskClass = dlock.BasicDLockClient taskMethod = initTask
          ;

TASK      taskClass = dlock.BasicDLockClient taskMethod = randomLockTask
          threadGroups = default
          ;

TASK      taskClass = dlock.GrantorTest taskMethod = crashGrantorTask
          threadGroups = grantor
          ;

CLOSETASK taskclass = dlock.GrantorTest taskMethod = countGrantorsTask
          threadGroups = default, grantor
          ;

CLOSETASK taskClass = dlock.BasicDLockClient taskMethod = closeTask
          threadGroups = default
          ;


// This fails - is looking for dir that is gemfireN
//ENDTASK   taskClass = util.DistributionStats taskMethod = reportDistributionStats
//          clientNames = client1
//          ;

CLOSETASK   taskClass = dlock.BasicDLockClient taskMethod = validateTask
            ;

CLOSETASK   taskClass = dlock.BasicDLockClient taskMethod = closeCacheTask
            threadGroups = default
            ;

ENDTASK     taskClass = dlock.DLockBlackboard  taskMethod = printBlackboard
            clientNames = client1
            ;

ENDTASK     taskclass = dlock.GrantorTest taskMethod = validateTask
            ;



THREADGROUP grantor totalThreads = 12 totalVMs = 12 clientNames = client1, client2;

dlock.DLockPrms-datatypes  =
                                     dlock.lockable.StringWrapper;
//                                     dlock.lockable.ArrayOfPrimLongWrapper
//                                     dlock.lockable.HashMapWrapper
//                                     dlock.lockable.VectorWrapper
//                                     dlock.lockable.HashtableWrapper
//                                     dlock.lockable.ArrayListWrapper
//                                     dlock.lockable.ArrayOfObjectWrapper
//                                     dlock.lockable.SyncArrayListWrapper
//                                     dlock.lockable.IntegerWrapper
//                                     dlock.lockable.HashSetWrapper
//                                     dlock.lockable.SyncHashMapWrapper
//                                     dlock.lockable.LinkedListWrapper
//                                     ;
dlock.DLockPrms-datasizes  =  100;

hydra.ClientPrms-vmQuantities = 8;
hydra.ClientPrms-vmThreads    = 1; 

hydra.Prms-totalTaskTimeSec = 120;
hydra.Prms-maxResultWaitSec = 600;

dlock.DLockPrms-useEntryLock = true;
dlock.DLockPrms-getLockFirst = true;
dlock.DLockPrms-iterations = 5;
dlock.DLockPrms-numToLock   = oneof 1 2 3 4 5 10 foeno;
// set lease time and lock timeout high so Hydra will timeout hung client
dlock.DLockPrms-cacheLeaseTime = 300000;
dlock.DLockPrms-cacheLockTimeout = 300000;

//dlock.DLockPrms-numTimesToCrash = 1;

dlock.DLockPrms-blackboardName = "Global";
dlock.DLockPrms-blackboardType = "rmi";

dlock.DLockPrms-scope = global;
dlock.DLockPrms-numTimesToEnterLock = RANGE 1 10 EGNAR;

dlock.DLockPrms-crashGrantorPercent = 5;
dlock.DLockPrms-crashViaKillPercent= 100;
  
