include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;
hydra.Prms-testDescription = "
While many threads randomly lock/unlock, test elder recovery
when the elder disconnects.
Verify oldest member become new elder and verify threads doing randomLockTask 
continue to successfully get and release locks.  
";


STARTTASK taskClass = dlock.ElderTest taskMethod = initTask
          clientNames = client1
          ;

          // initElderTask keeps track of order in which members are started
INITTASK  taskClass = dlock.ElderTest taskMethod = initElderTask
          threadGroups = default 
          ;

INITTASK  taskClass = dlock.ElderTest taskMethod = identifyElderTask
          ;

INITTASK  taskClass = dlock.ElderTest taskMethod = verifyElderTask
          ;

INITTASK  taskClass = dlock.BasicDLockClient taskMethod = createCacheTask
          ;
INITTASK  taskClass = dlock.BasicDLockClient taskMethod = createDataTask
          ;
INITTASK  taskClass = dlock.BasicDLockClient taskMethod = initTask
          ;


TASK      taskClass = dlock.ElderTest taskMethod = disruptElderTask
          ;

TASK      taskClass = dlock.BasicDLockClient taskMethod = randomLockTask
          threadGroups = lockingOnly
          ;

CLOSETASK taskClass = dlock.BasicDLockClient taskMethod = closeTask
          ;

CLOSETASK taskClass = dlock.DLockBlackboard  taskMethod = printBlackboard
          ;
CLOSETASK taskClass = dlock.BasicDLockClient taskMethod = validateTask
          threadGroups = lockingOnly 
          ;
CLOSETASK taskClass = dlock.BasicDLockClient taskMethod = closeCacheTask
          ;

THREADGROUP lockingOnly totalThreads = 8 totalVMs = 2 clientNames = client1, client2;

dlock.DLockPrms-datatypes  =
                                     dlock.lockable.StringWrapper;

dlock.DLockPrms-datasizes  =  100;
dlock.DLockPrms-useEntryLock = true;
dlock.DLockPrms-getLockFirst = true;
dlock.DLockPrms-iterations = 20;
dlock.DLockPrms-numToLock   = oneof 1 2 3 4 5 10 foeno;
dlock.DLockPrms-blackboardName = "Global";
dlock.DLockPrms-blackboardType = "rmi";
dlock.DLockPrms-scope = global;
dlock.DLockPrms-numTimesToEnterLock = RANGE 1 10 EGNAR;
// all VMs except those doing lockingOnly may be disrupted if they are the elder
dlock.DLockPrms-numEldersToDisrupt = FCN ${hydra.numHosts} - 2 NCF;

// set lease time and lock timeout high so Hydra will timeout hung client
dlock.DLockPrms-cacheLeaseTime = 300000;
dlock.DLockPrms-cacheLockTimeout = 300000;

hydra.ClientPrms-vmQuantities = 1  1  1 ;
hydra.ClientPrms-vmThreads    = 4  4  1 ; 

hydra.Prms-totalTaskTimeSec = 120;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-doInitTasksSequentially = true;

