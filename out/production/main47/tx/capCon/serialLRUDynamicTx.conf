hydra.Prms-testDescription =
"This test runs in serial execution mode and dynamically changes the
size of an LRU capacity controller.  A task puts new keys/values into 
a region with an LRUCapacityController and verifies the region size 
after committing or rolling back transactions.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams1.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = ${vmQuantities}; // VMs per gemfire system
hydra.ClientPrms-vmThreads    = ${vmThreads};

STARTTASK    taskClass   = capCon.CapConBB taskMethod  = HydraTask_initialize;

STARTTASK     taskClass   = util.RegionDefinition taskMethod  = HydraTask_initialize;

INITTASK     taskClass   = capCon.LRUDynamicTest taskMethod  = HydraTask_initialize;

TASK         taskClass   = capCon.LRUDynamicTest taskMethod  = HydraTask_serialTxTest;

ENDTASK      taskClass   = capCon.LRUTest taskMethod  = HydraTask_endTask;

ENDTASK      taskClass   = capCon.LRUDynamicTest taskMethod  = HydraTask_endTask;

hydra.Prms-totalTaskTimeSec = 1200;  
hydra.Prms-serialExecution = true;

util.TestHelperPrms-printElementsLimit = 0;
util.TestHelperPrms-printStringLimit = 100;
util.TestHelperPrms-printObjectDepth = 0;
util.TestHelperPrms-minTaskGranularitySec = 5;

util.RegionDefPrms-regionSpecs = "
   specName = VMRegion:
       scope = local ack noack: mirroring = none: 
       eviction = lru:
       evictionLimit = 10:
   ";
util.RegionDefPrms-VMRegionSpecName = VMRegion;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

capCon.CapConPrms-useCacheLoader = ONEOF true false FOENO;

capCon.CapConPrms-randomCapacityChanges = ONEOF true false FOENO;
capCon.CapConPrms-boundsMultiplier = 100;
util.BoundsPrms-targetLowPoint = 1;
util.BoundsPrms-targetHighPoint = 10;
