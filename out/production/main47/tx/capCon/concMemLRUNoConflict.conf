hydra.Prms-testRequirement = "
Test that MemLRU capacity controllers do not cause conflicts when they evict";

hydra.Prms-testDescription =
"One thread continually does operations on the region in a transaction
and commits, while another thread adds to the region, causing evictions.
Verify that that the thread with the transaction never fails.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams1.inc;

hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 10;

THREADGROUP txThread totalThreads = 1;

STARTTASK     taskClass   = util.RegionDefinition taskMethod  = HydraTask_initialize;

INITTASK     taskClass = tx.capCon.MemLRUNoConflictTest taskMethod = HydraTask_initialize;
INITTASK     taskClass = tx.capCon.MemLRUNoConflictTest taskMethod = HydraTask_fill
             threadGroups = txThread;

TASK         taskClass = tx.capCon.MemLRUNoConflictTest taskMethod  = HydraTask_doOpsInTx
             threadGroups = txThread;
TASK         taskClass = tx.capCon.MemLRUNoConflictTest taskMethod  = HydraTask_addNewEntries
             threadGroups = default;

hydra.Prms-totalTaskTimeSec = 1200;  

hydra.log.LogPrms-file_maxKBPerVM = 100000;

util.RegionDefPrms-regionSpecs = "
   specName = VMRegion:
       scope = local ack noack: 
       eviction = memLRU:
       evictionLimit = 1:
       objectSizerClass = diskReg.DiskRegSizer:
   ";
util.RegionDefPrms-VMRegionSpecName = VMRegion;
util.RegionDefPrms-regionDefUsage = useOneRegionSpec;

util.TestHelperPrms-minTaskGranularitySec = RANGE 1 20 EGNAR;


tx.TxPrms-operations =
          entry-update entry-destroy entry-inval 
          entry-update entry-destroy entry-inval 
          entry-getWithNewKey entry-getWithExistingKey 
          entry-create;
tx.TxPrms-numOps = RANGE 5 20 EGNAR; 

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 100000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;
