hydra.Prms-testRequirement = "
Test that conflicts occur/don't occur with entry and region operations, 
and with a mixture of threads running in and outside transactions";

hydra.Prms-testDescription = "
This test runs with 2 threads only in serial round robin scheduing. The first 
thread does random operations (always in a transaction), and the 2nd thread 
then randomly chooses to run in or outside a transaction and does operations 
that will/will not conflict with the first thread. The first thread tries to 
commits first; it may or may not fail depending on what the 2nd thread did. 
Then the second thread tries to commit; it may or may not fail, if in a 
transaction, depending on what the 1st thread did.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparamsN.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = ${numVMs};
hydra.ClientPrms-vmThreads    = ${numThreads};

INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_createPartitionedRegions;

INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_populateRegions;

// this task must come after region creation (RegionAttributes must be known)
INITTASK  taskClass   = tx.PRConflictTest taskMethod = HydraTask_initializeSerialTest;

TASK      taskClass   = tx.PRConflictTest taskMethod = HydraTask_serialConflictTest;

ENDTASK   taskClass   = tx.PRConflictTest taskMethod = HydraTask_endTask
          clientNames = client1;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

util.ValueHolderPrms-useExtraObject = false;

hydra.Prms-useFixedRandomInMaster = true;

hydra.ConfigPrms-cacheConfig    = myCache;
hydra.ConfigPrms-regionConfig   = myPR;
hydra.CachePrms-names           = myCache;
hydra.RegionPrms-names          = myPR;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-dataPolicy     = partition;
hydra.RegionPrms-scope          = default;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-partitionName  = pr;

hydra.PartitionPrms-names           = pr;
hydra.PartitionPrms-localMaxMemory  = default;
hydra.PartitionPrms-totalNumBuckets = 20;
hydra.PartitionPrms-redundantCopies = ${redundantCopies};

// todo@lhughes - for now, avoid loads (I need to work out getValueInVM, etc)
tx.TxPrms-operations =
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-create entry-update entry-destroy entry-inval
          entry-getWithNewKey entry-getWithExistingKey entry-getWithPreviousKey
          entry-getWithExistingKey
          ;

tx.TxPrms-regionOpPercentage = 0;
tx.TxPrms-numOps = 1;

tx.TxPrms-numRootRegions=12;
tx.TxPrms-maxKeys = 20;

tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 





