hydra.Prms-testDescription = "
This test runs with multi-transactions and does lots of random operations,
both in and outside a transaction, does commits and rollbacks, and allows
some commits to succeed and some to fail.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams1.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = 2;
hydra.ClientPrms-vmThreads    = 2;

INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_createRegionForest;

// Must come after createRegionForest (region info written to BB)
INITTASK  taskClass   = tx.ConflictTest taskMethod = HydraTask_initializeConcTest;

TASK      taskClass   = tx.ConflictTest taskMethod = HydraTask_concConflictTest;

ENDTASK   taskClass   = tx.ConflictTest taskMethod = HydraTask_endTask;

hydra.GemFirePrms-conserveSockets = true;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = 1800;
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;

util.ValueHolderPrms-useExtraObject = false;

hydra.Prms-useFixedRandomInMaster = true;

hydra.ConfigPrms-cacheConfig        = myCache;
hydra.ConfigPrms-regionConfig       = ONEOF proxyRegion LRURegion-Cached LRURegion-Replicated FOENO;
hydra.CachePrms-names               = myCache;

hydra.RegionPrms-names              = proxyRegion   LRURegion-Cached   LRURegion-Replicated;
hydra.RegionPrms-dataPolicy         = empty         normal             replicate;
hydra.RegionPrms-cacheListeners     = tx.LogListener;
hydra.RegionPrms-cacheLoader        = tx.TxLoader;
hydra.RegionPrms-diskStoreName      = none          disk               disk;
hydra.RegionPrms-evictionAttributes = none, //empty
                                      lruEntryCount 20 overflowToDisk,  //cached
                                      lruEntryCount 20 overflowToDisk;  // replicate
hydra.RegionPrms-entryIdleTimeout   = none,
                                      ONEOF 0 30 FOENO ONEOF invalidate localInvalidate destroy localDestroy FOENO,
                                      ONEOF 0 30 FOENO ONEOF invalidate destroy FOENO;
hydra.RegionPrms-entryTimeToLive    = none, 
                                      ONEOF 0 30 FOENO ONEOF invalidate localInvalidate destroy localDestroy FOENO,
                                      ONEOF 0 30 FOENO ONEOF invalidate destroy FOENO;
hydra.RegionPrms-regionIdleTimeout  = none,
                                      ONEOF 0 60 FOENO invalidate,
                                      ONEOF 0 60 FOENO invalidate;
hydra.RegionPrms-regionTimeToLive   = none, 
                                      ONEOF 0 60 FOENO ONEOF invalidate localInvalidate destroy localDestroy FOENO,
                                      ONEOF 0 60 FOENO ONEOF invalidate destroy localDestroy FOENO;
                                
hydra.RegionPrms-scope              = ack;
hydra.RegionPrms-regionName         = TestRegion;
hydra.RegionPrms-statisticsEnabled  = true;

hydra.DiskStorePrms-names           = none disk;
hydra.DiskStorePrms-queueSize       = RANGE 1 20 EGNAR;
hydra.RegionPrms-diskSynchronous = ONEOF true false FOENO;

// weight this with many region-creates; since one region destroy will
// destroy all children as well, a single region destroy can potentially
// destroy many regions
tx.TxPrms-operations =  
          entry-create entry-update entry-destroy entry-inval 
          entry-create entry-update entry-destroy entry-inval 
          entry-create entry-update entry-destroy entry-inval 
          entry-create entry-update entry-destroy entry-inval 
          entry-getWithNewKey entry-getWithExistingKey entry-getWithPreviousKey 
          //region-destroy region-inval region-localDestroy region-localInval
          //region-create region-create region-create region-create 
          //region-create region-create region-create region-create
          ; 
tx.TxPrms-regionOpPercentage = 0;
tx.TxPrms-numOps = 30;
tx.TxPrms-maxKeys = 20;   // number of keys in region when created
tx.TxPrms-numRootRegions = 2;
tx.TxPrms-numSubRegions = 3;
tx.TxPrms-regionDepth = 3;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 
tx.TxPrms-commitPercentage = 80;
tx.TxPrms-tasksInTxPercentage = 70;

util.ValueHolderPrms-useExtraObject = false;
