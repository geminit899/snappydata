hydra.Prms-testRequirement = "
Test that conflicts occur/don't occur using only transactional operations
and always running inside a transaction.";

hydra.Prms-testDescription = "
This test runs with any number of threads in any number of VMs. The 1st
thread does random transactional operations (in a transaction), then each
of the subsequent threads in the round begin a transaction and do operations
that either intentionally conflict or not conflict with any thread that did
operations before it. On the second round, each thread tries to commit; the
1st thread aways succeeds (because it commits first), and all other threads
then either succeed or fail depending on what operations they did.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparamsN.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = ${numVMs};
hydra.ClientPrms-vmThreads    = ${numThreads};

INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_createRegionForest;

// this task must come after createRegionForest (RegionAttributes must be known)
INITTASK  taskClass   = tx.ConflictTest taskMethod = HydraTask_initializeSerialTest;

TASK      taskClass   = tx.ConflictTest taskMethod = HydraTask_serialTxOnlyConflictTest;

ENDTASK   taskClass   = tx.ConflictTest taskMethod = HydraTask_endTask
          clientNames = client1;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = ${totalTaskTimeSec};
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

util.ValueHolderPrms-useExtraObject = false;

hydra.Prms-useFixedRandomInMaster = true;

hydra.ConfigPrms-cacheConfig    = myCache;
hydra.ConfigPrms-regionConfig   = ${regionType};
hydra.CachePrms-names           = myCache;
hydra.RegionPrms-names          = distRegion   localRegion;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-dataPolicy     = replicate    normal;
hydra.RegionPrms-scope          = ONEOF ack noack FOENO local;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;

tx.TxPrms-operations =  
          entry-create entry-update entry-destroy 
          entry-create entry-update entry-destroy 
                       entry-inval entry-getWithNewKey entry-getWithExistingKey
                       entry-getWithPreviousKey;
tx.TxPrms-regionOpPercentage = 0;
tx.TxPrms-numOps = RANGE 1 5 EGNAR;
tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=3;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 
