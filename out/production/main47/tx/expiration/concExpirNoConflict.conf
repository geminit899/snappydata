hydra.Prms-testDescription = "
This test configures 8 root regions, each with a different entry
eviction action. Each thread will only do operations on a unique
set of keys, and should expect no commit conflicts because of this
and the fact the expiration actions do not cause conflicts. 
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams1.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = 2;
hydra.ClientPrms-vmThreads    = 2;

STARTTASK  taskClass   = expiration.ExpirationTest taskMethod  = StartTask_initialize;

INITTASK  taskClass   = tx.expiration.ExpirationTxTest taskMethod = HydraTask_initialize;

TASK      taskClass   = tx.expiration.ExpirationTxTest taskMethod = HydraTask_concNoConflictTest;

hydra.GemFirePrms-conserveSockets = true;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = 1800;
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = false;

util.ValueHolderPrms-useExtraObject = false;

// This specifies a region for each of the entry eviction actions.
util.RegionDefPrms-regionSpecs = "
   specName = TTLDestroy:
       scope = ack: mirroring = none: 
       entryTTLSec = 30: 
       entryTTLAction = destroy:
       statisticsEnabled = true:
   specName = TTLLocalDestroy:
       scope = ack: mirroring = none: 
       entryTTLSec = 30: 
       entryTTLAction = localDestroy:
       statisticsEnabled = true:
   specName = TTLInval:
       scope = ack: mirroring = none: 
       entryTTLSec = 30: 
       entryTTLAction = invalidate:
       statisticsEnabled = true:
   specName = TTLLocalInval:
       scope = ack: mirroring = none: 
       entryTTLSec = 30: 
       entryTTLAction = localInvalidate:
       statisticsEnabled = true:
   specName = IdleTODestroy:
       scope = ack: mirroring = none: 
       entryIdleTimeoutSec = 30: 
       entryIdleTimeoutAction = destroy:
       statisticsEnabled = true:
   specName = IdleTOLocalDestroy:
       scope = ack: mirroring = none: 
       entryIdleTimeoutSec = 30: 
       entryIdleTimeoutAction = localDestroy:
       statisticsEnabled = true:
   specName = IdleTOInval:
       scope = ack: mirroring = none: 
       entryIdleTimeoutSec = 30: 
       entryIdleTimeoutAction = invalidate:
       statisticsEnabled = true:
   specName = IdleTOLocalInval:
       scope = ack: mirroring = none: 
       entryIdleTimeoutSec = 30: 
       entryIdleTimeoutAction = localInvalidate:
       statisticsEnabled = true:
   ";
util.RegionDefPrms-regionDefUsage = none;

// In 7.0, we no longer support local operations in transactions
// (not valid for replicated or partition regions and with 7.0, 
// regions with dataPolicy normal will throw UnsupportedOperationException
tx.TxPrms-operations =  
          entry-update entry-update entry-destroy entry-inval 
          entry-create entry-create; 
tx.TxPrms-numOps = RANGE 1 30 EGNAR;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 
tx.TxPrms-commitPercentage = 80;
tx.TxPrms-tasksInTxPercentage = 70;
util.ValueHolderPrms-useExtraObject = false;
