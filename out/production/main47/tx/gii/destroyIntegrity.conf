include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparams3.inc;

hydra.Prms-testDescription = "Verify that transactional destroys processed during getInitialImage cause future netSearches on that entry to return null or DoesNotExist.  Because the actual destroy is done after the completion of the getInitialImage, we want to verify that any netSearches for that same value do not return the destroyed entry.  Starting GemFire with dataPolicy ${dataPolicy}, and scope ${scope}, for objects of type objects.ArrayOfByte and size ranging from 10 to 1024 bytes, using 3 hosts, 1 VM per host, and 1 thread per VM.  First, the thread on one host creates N total entries, then each remaining thread does a destroy followed by a get using random keys, then does the same while another thread on another host opens a replicated cache to get the initial image.";

hydra.Prms-testRequirement = "Unspecified, but need an \"acceptable\" impact.";

INITTASK  taskClass = getInitialImage.InitImageClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = getInitialImage.InitImageClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = other
          threadGroups = creator, destroyer
          ;
INITTASK  taskClass = getInitialImage.InitImageClient taskMethod = createDataTask
          threadGroups = creator
	  batch
	  cacheperf.CachePerfPrms-keyAllocation = sameKeys
	  cacheperf.CachePerfPrms-warmupTerminatorMethod = none
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;
TASK      taskClass = getInitialImage.InitImageClient taskMethod = waitForGetInitialImageInProgress
          threadGroups = destroyer
	  maxTimesToRun = 1 weight = 2
          ;
TASK      taskClass = getInitialImage.InitImageClient taskMethod = destroyDataTask
          threadGroups = destroyer
	  cacheperf.CachePerfPrms-useTransactions = true
	  cacheperf.CachePerfPrms-txSize = 1
	  cacheperf.CachePerfPrms-keyAllocation = sameKeys
	  cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnGetInitialImageInProgress
	  cacheperf.CachePerfPrms-taskTerminatorMethod =  terminateOnGetInitialImageComplete
	  //cacheperf.CachePerfPrms-taskTerminatorFrequency = 60 seconds
          getInitialImage.InitImagePrms-validateDestroyed = true
          weight = 1;
          //maxTimesToRun = 1
          ;
TASK      taskClass = getInitialImage.InitImageClient taskMethod = timedOpenCacheTask
          hydra.ConfigPrms-regionConfig = opener
          threadGroups = opener
	  maxTimesToRun = 1 weight = 2
          ;
TASK      taskClass = getInitialImage.InitImageClient taskMethod = signalTask
          threadGroups = opener
	  maxTimesToRun = 1 weight = 1
          ;
TASK      taskClass = getInitialImage.InitImageClient taskMethod = monitorGetInitialImage
          threadGroups = monitor
	  maxTimesToRun = 1 
          ;
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = closeCacheTask
          threadGroups = creator, opener, destroyer
          ;
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = reportTrimIntervalsTask
          ;
ENDTASK   taskClass = getInitialImage.InitImageClient taskMethod = verifyOpsNotBlocked
          getInitialImage.InitImagePrms-opStatName = destroys
          getInitialImage.InitImagePrms-minOps = 50
          clientNames = client3
          ;

THREADGROUP creator   totalThreads = 1 totalVMs = 1 clientNames = client1;
THREADGROUP opener    totalThreads = 1 totalVMs = 1 clientNames = client2;
THREADGROUP monitor   totalThreads = 1 totalVMs = 1 clientNames = client2;
THREADGROUP destroyer totalThreads = 1 totalVMs = 1 clientNames = client3;

hydra.Prms-maxResultWaitSec = 600;  // 10 minutes
hydra.Prms-totalTaskTimeSec = 360000; // 100 hours

hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 1 2 1;

hydra.VmPrms-extraVMArgs = -Xmx1000m -Xms1000m;

cacheperf.CachePerfPrms-trimIterations = ${trimIterations};
cacheperf.CachePerfPrms-workIterations = ${workIterations};
cacheperf.CachePerfPrms-batchSize      = ${batchSize};
cacheperf.CachePerfPrms-maxKeys        = 500000;

cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size = range 10 1024 egnar;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names      = opener         other;
hydra.RegionPrms-dataPolicy = ${dataPolicy}  replicate;
hydra.RegionPrms-scope      = ${scope};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/getInitialImage/destroys.spec;
