include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparamsN.inc;

hydra.Prms-testDescription = "Verify getInitialImage handles distributed updates (puts) without blocking.  Executing GemFire with dataPolicy ${dataPolicy}, and scope ${scope}, for objects of type objects.ArrayOfByte and size ranging from 10 to 1024 bytes, using ${hydra.numHosts} hosts, 1 VM per host, and 1 thread per VM.  First, the thread on one host creates a cache containing N total entries, then each remaining thread does puts using its own subset of the N keys, then does so again while another thread on another host opens a replicated cache to get the initial image.  Note that the original cache is closed when the getInitialImage begins so we are only measure updates to the cache under construction";

hydra.Prms-testRequirement = "Must process a (TBD) number of operations while getInitialImage is in progress (to show that getInitialImage handles the updates without blocking)";

INITTASK  taskClass = getInitialImage.InitImageClient taskMethod = openStatisticsTask
          ;
INITTASK  taskClass = getInitialImage.InitImageClient taskMethod = openCacheTask
          hydra.ConfigPrms-regionConfig = other
          threadGroups = creator, putter
          ;
INITTASK  taskClass = getInitialImage.InitImageClient taskMethod = createDataTask
          threadGroups = creator
	  batch
	  cacheperf.CachePerfPrms-keyAllocation = ownKeys
	  cacheperf.CachePerfPrms-warmupTerminatorMethod = none
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          ;
INITTASK  taskClass = getInitialImage.InitImageClient taskMethod = putDataTask
          threadGroups = putter
	  batch
	  cacheperf.CachePerfPrms-keyAllocation = sameKeysRandomWrap
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnTotalIterations
          ;

TASK      taskClass = getInitialImage.InitImageClient taskMethod = waitForGetInitialImageInProgress
          threadGroups = putter
	  maxTimesToRun = 1 weight = 2
          ;
TASK      taskClass = getInitialImage.InitImageClient taskMethod = putDataComparisonTask
          threadGroups = putter
	  cacheperf.CachePerfPrms-useTransactions = true
	  cacheperf.CachePerfPrms-txSize = 1
	  cacheperf.CachePerfPrms-keyAllocation = sameKeysRandomWrap
          cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnGetInitialImageInProgress
	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnGetInitialImageComplete
	  //cacheperf.CachePerfPrms-taskTerminatorFrequency = 60 seconds
          weight = 1
          ;
TASK      taskClass = getInitialImage.InitImageClient taskMethod = timedOpenCacheTask
          hydra.ConfigPrms-regionConfig = opener
          threadGroups = opener
	  maxTimesToRun = 1 weight = 2
          ;
TASK      taskClass = getInitialImage.InitImageClient taskMethod = signalTask
          threadGroups = opener
	  maxTimesToRun = 1 weight = 1
          ;
TASK      taskClass = getInitialImage.InitImageClient taskMethod = monitorGetInitialImage
          threadGroups = monitor
	  maxTimesToRun = 1
          ;
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = validateMaxKeysRegionEntriesTask
          threadGroups = opener
          ;
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = closeCacheTask
          threadGroups = creator, opener, putter;
          ;
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = closeStatisticsTask
          ;
CLOSETASK taskClass = getInitialImage.InitImageClient taskMethod = reportTrimIntervalsTask
          ;
ENDTASK   taskClass = getInitialImage.InitImageClient taskMethod = verifyOpsNotBlocked
          getInitialImage.InitImagePrms-opStatName = puts
          getInitialImage.InitImagePrms-minOps = 200
          clientNames = client1;
          ;

THREADGROUP creator totalThreads = 1 totalVMs = 1 clientNames = client1;
THREADGROUP opener  totalThreads = 1 totalVMs = 1 clientNames = client2;
THREADGROUP monitor totalThreads = 1 totalVMs = 1 clientNames = client2;
THREADGROUP putter  totalThreads = fcn ( ${hydra.numHosts} - 2 ) ncf;

hydra.Prms-maxResultWaitSec = 600;  // 10 minutes
hydra.Prms-totalTaskTimeSec = 360000; // 100 hours

hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 1 2 1;

hydra.VmPrms-extraVMArgs = -Xmx1000m;

cacheperf.CachePerfPrms-trimIterations = ${trimIterations};
cacheperf.CachePerfPrms-workIterations = ${workIterations};
cacheperf.CachePerfPrms-batchSize      = ${batchSize};
cacheperf.CachePerfPrms-maxKeys        = 500000;

cacheperf.CachePerfPrms-objectType = objects.ArrayOfByte;
objects.ArrayOfBytePrms-size = range 10 1024 egnar;

hydra.ConfigPrms-cacheConfig = cache;
hydra.CachePrms-names = cache;

hydra.RegionPrms-names      = opener         other;
hydra.RegionPrms-dataPolicy = ${dataPolicy}  replicate;
hydra.RegionPrms-scope      = ${scope};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/gemfire/getInitialImage/getInitialImagePutsImpact.spec;
