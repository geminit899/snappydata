hydra.Prms-testRequirement = "
Test conflicts that occur because of reads noting the committed
state (see bug 36688), and checks that repeatable reads return 
the correct value";

hydra.Prms-testDescription = "
This test runs with any two threads in any one or two VMs. 
   First round:
      The first thread in the round does a begin
      The other thread in the round does a begin and either a repeatable read
          or a nonrepeatable read.
   Second round:
      The first thread does ops and commites (expects a successful commit).
      The other thread does ops that either conflict or not and will
          attempt a commit, expecting either success or failure 
          depending on whether the ops created a conflict or not.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparamsN.inc;
INCLUDE $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = ${numVMs};
hydra.ClientPrms-vmThreads    = ${numThreads};

INITTASK  taskClass   = tx.TxUtil taskMethod = HydraTask_createRegionForest;

// this task must come after createRegionForest (RegionAttributes must be known)
INITTASK  taskClass   = tx.ConflictTest taskMethod = HydraTask_initializeSerialTest;

TASK      taskClass   = tx.ConflictTest taskMethod = HydraTask_serialTxOnlyRepeatableRead;

ENDTASK   taskClass   = tx.ConflictTest taskMethod = HydraTask_endTask
          clientNames = client1;

hydra.Prms-alwaysDoEndTasks = true;
hydra.Prms-totalTaskTimeSec = ${totalTaskTimeSec};
hydra.Prms-maxResultWaitSec = 300;
hydra.Prms-haltIfBadResult = true;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

util.ValueHolderPrms-useExtraObject = false;

hydra.Prms-useFixedRandomInMaster = true;

hydra.ConfigPrms-cacheConfig    = myCache;
hydra.ConfigPrms-regionConfig   = ${regionType};
hydra.CachePrms-names           = myCache;
hydra.RegionPrms-names          = distRegion   localRegion;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-dataPolicy     = normal;
hydra.RegionPrms-scope          = ONEOF ack noack FOENO local;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;

tx.TxPrms-operations =  
          entry-create entry-update entry-destroy 
          entry-create entry-update entry-destroy 
                       entry-inval entry-getWithNewKey entry-getWithExistingKey
                       entry-getWithPreviousKey;
tx.TxPrms-regionOpPercentage = 0;
tx.TxPrms-numOps = RANGE 1 5 EGNAR;
tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=3;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO; 
