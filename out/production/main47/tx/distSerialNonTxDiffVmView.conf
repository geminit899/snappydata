hydra.Prms-testDescription = "3 hosts, each with 1 VM.  The first host/vm has two threads, one for a transactional thread and another to validate the tx state.  The 2nd client has a thread which will execute non-tx operations (after the tx.begin().   All three hosts validate the tx state vs. committed state for each set of operations performed.";
hydra.Prms-testRequirement = "Validation tasks should be successful (view should be appropriate for current conditions";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/systemparams3.inc;
include $JTESTS/util/randomValues.inc;

hydra.ClientPrms-vmQuantities = 1   1   1;
hydra.ClientPrms-vmThreads    = 2   1   1;

THREADGROUP txThread totalThreads = 1  totalVMs = 1 clientNames=client1;
THREADGROUP nonTxThread totalThreads = 1 totalVMs = 1 clientNames=client2;
THREADGROUP validators totalThreads = 2;

STARTTASK taskClass   = tx.TxViewUtil taskMethod=StartTask_initialize
          clientNames = client1
          ;

INITTASK  taskClass   = tx.TxViewUtil taskMethod = HydraTask_createRegionForest
          ;
                                                                                
INITTASK  taskClass   = tx.SerialViewTest taskMethod = HydraTask_initialize
          ;

TASK      taskClass   = tx.SerialViewTest taskMethod = HydraTask_executeTx
          threadGroups = txThread
          ;

TASK      taskClass   = tx.SerialViewTest taskMethod = HydraTask_checkCommittedState
          tx.TxPrms-executeNonTxOperations = true
          threadGroups = nonTxThread
          ;

TASK      taskClass   = tx.SerialViewTest taskMethod = HydraTask_checkCommittedState
          threadGroups = validators
          ;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-serialExecution=true;
hydra.Prms-roundRobin=true;

hydra.log.LogPrms-mergeLogFiles = true;

util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 10000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;

tx.TxPrms-commitPercentage=100;
tx.TxPrms-maxKeys=10;
tx.TxPrms-numRootRegions=2;
tx.TxPrms-numSubRegions=3;
tx.TxPrms-regionDepth=2;

hydra.ConfigPrms-cacheConfig    = myCache;
hydra.ConfigPrms-regionConfig   = myRegion;
hydra.CachePrms-names           = myCache;
hydra.RegionPrms-names          = myRegion;
hydra.RegionPrms-regionName     = TestRegion;
hydra.RegionPrms-cacheListeners = tx.LogListener;
hydra.RegionPrms-cacheWriter    = tx.TestWriter;
hydra.RegionPrms-cacheLoader    = tx.TxLoader;
hydra.RegionPrms-dataPolicy     = replicate;  // may be overridden by viewDataPolicies
hydra.RegionPrms-scope          = ONEOF ack noack FOENO;

tx.TxPrms-viewDataPolicies = ONEOF
                             empty-replicate-replicate
                             replicate-replicate-replicate
                             FOENO;

tx.TxPrms-txListener = tx.TxLogListener;

tx.TxPrms-operations = entry-create entry-create entry-create 
                       entry-update entry-update entry-update 
                       entry-getWithNewKey
                       entry-getWithExistingKey
                       entry-getWithPreviousKey;
tx.TxPrms-numOps = RANGE 1 5 EGNAR;
tx.TxPrms-updateStrategy = ONEOF useCopyOnRead useCopyHelper FOENO;


