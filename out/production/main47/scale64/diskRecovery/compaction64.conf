// This must be before the include to be the first close task
// This ensures that if off-heap is randomly chosen in this run, the off-heap regions
// will be closed prior to running off-heap validation; this is the strategy for checking
// for memory leaks in scaled up tests and is still an effective way to look for leaks
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = closeAllOffHeapRegions;

INCLUDE $JTESTS/diskRecovery/compaction.conf;

hydra.VmPrms-type = d64;

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xmx20m\", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms4500m -Xmx4500m\", ${${B}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms4500m -Xmx4500m\", ${${C}Hosts}, true)"
                             ncf;

hydra.VmPrms-extraVMArgs += -XX:+UseParNewGC
                            -XX:+UseConcMarkSweepGC
                            -XX:+DisableExplicitGC;

hydra.VmPrms-extraVMArgs += "-XX:CMSInitiatingOccupancyFraction=33";

diskRecovery.RecoveryPrms-maxNumEntriesPerRegion = 200000;
diskRecovery.RecoveryPrms-chunkSize = 100000;
util.RandomValuesPrms-elementSize = 1000;
hydra.GemFirePrms-conserveSockets = false;

hydra.Prms-totalTaskTimeSec = 7200;
hydra.Prms-maxResultWaitSec = 1800;

// The above include for compaction.conf will randomly choose off-heap or not.
// If it does, the off-heap set by that conf is not sufficient for this scaled up test
// so override these settings here to remove off-heap if it randomly chosen by the
// include, then randomly choose to run it here scaled up
hydra.GemFirePrms-offHeapMemorySize=0m;
hydra.RegionPrms-enableOffHeapMemory=false;
RANDOMINCLUDE $JTESTS/scale64/diskRecovery/enableOffHeap.conf;


