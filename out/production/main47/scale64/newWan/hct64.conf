//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_hct_locator.inc;
include $JTESTS/newWan/wan.inc;
include $JTESTS/newWan/hct.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each cache server is a bridge for the edge clients at its site and is a WAN gateway sender and receiver to other cache servers.
Each locator from a site connects to all locators from next site to form a ring topology between sites. 
 Each sender from a site connects to all other remote sites to form all-to-all topology.";

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-totalTaskTimeSec       = 3600;  //test is load base
hydra.Prms-maxResultWaitSec       = ${resultWaitSec};
newWan.WANTestPrms-maxOperations  = ${maxOps};

//------------------------------------------------------------------------------
// TEST Configuration
//------------------------------------------------------------------------------

hydra.log.LogPrms-file_maxKBPerVM = 25000;

hydra.RegionPrms-cacheListeners	 = newWan.WANSilenceListener;

newWan.WANTestPrms-sleepSec = 0;
newWan.WANTestPrms-iterations = 1000;

hydra.GatewaySenderPrms-batchSize			= 2000;
hydra.GatewaySenderPrms-batchTimeInterval	= 2000;
hydra.GatewaySenderPrms-maximumQueueMemory	= 100;

hydra.VmPrms-extraVMArgsSUN += -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC;
hydra.VmPrms-extraVMArgs += "-XX:CMSInitiatingOccupancyFraction=33";

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = ${entrySize};
util.ValueHolderPrms-useExtraObject = true;

//------------------------------------------------------------------------------
// INITIALIZATION WORK (configure locators, caches, sender, receiver)
//------------------------------------------------------------------------------

/**
 * Starts the locators and connects them to admin-only distributed systems.
 */
INITTASK taskClass = newWan.WANTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = newWan.WANTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;

/** Configures the server cache. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerCacheTask
         threadGroups = bridge;

/** Configure gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewaySenderTask
         threadGroups = bridge;         
      
/** Configures the server region. */
INITTASK taskClass = newWan.WANTest taskMethod = initServerRegionTask
         threadGroups = bridge;

/** Configure gateway receiver */
INITTASK taskClass = newWan.WANTest taskMethod = initGatewayReceiverTask
         threadGroups = bridge;

/** Start gateway sender */
INITTASK taskClass = newWan.WANTest taskMethod = startGatewaySenderTask
         threadGroups = bridge;      
   
/**
 * Configures the edge client cache.
 */
INITTASK taskClass = newWan.WANTest taskMethod = initEdgeClientCacheTask
         threadGroups = edge;

//------------------------------------------------------------------------------
// PRIMARY WORKLOAD (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = newWan.WANTest taskMethod = putSequentialKeysTask  
     newWan.WANTestPrms-batchSize = ONEOF 1 100 FOENO
     endInterval=10
     threadGroups = edge
     ;

//------------------------------------------------------------------------------
// SHUTDOWN WORK (validate and close)
//------------------------------------------------------------------------------
CLOSETASK taskClass = newWan.WANTest taskMethod = printQueueContentsTask
          threadGroups = bridge;

CLOSETASK taskClass = newWan.WANTest taskMethod = waitForQueuesToDrainTask
          threadGroups = bridge;
          
CLOSETASK taskClass = newWan.WANTest taskMethod = validateSequentialKeysTask
          threadGroups = edge, bridge;

CLOSETASK taskClass = newWan.WANBlackboard taskMethod = printBlackboard
          threadGroups = edge;

CLOSETASK taskClass = newWan.WANTest taskMethod = closeEdgeClientCacheTask
          threadGroups = edge;
                    
CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewaySenderTask
         threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopGatewayReceiverTask
         threadGroups = bridge;           

CLOSETASK taskClass = newWan.WANTest taskMethod = stopLocatorTask
         threadGroups = locator;   

THREADGROUP edge
  totalThreads = fcn ${wanSites} * ${edgeHostsPerSite}
                   * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                 (\"edge\", ${wanSites}, ${edgeHostsPerSite}, false, true)" ncf;

