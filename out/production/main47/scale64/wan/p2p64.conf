//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_wan_p2p_locator.inc;
include $JTESTS/wan/wan.inc;
include $JTESTS/wan/p2p.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="WAN test where each site is peer-to-peer in its own distributed system and each VM is a WAN gateway hub to other sites.";

//------------------------------------------------------------------------------
// INITIAL WORK (configure locators, caches, hubs, gateways)
//------------------------------------------------------------------------------

INITTASK taskClass = wan.WANClient taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = startAndConnectLocatorTask
         threadGroups = locator;
INITTASK taskClass = wan.WANClient taskMethod = initPeerCacheTask
         threadGroups = peer;
INITTASK taskClass = wan.WANClient taskMethod = createSequentialKeysUsingPutAllTask
         batch
         wan.CacheClientPrms-batchSize = 10000
         threadGroups = peer;
INITTASK taskClass = wan.WANClient taskMethod = startGatewayHubTask
         threadGroups = peer;

//------------------------------------------------------------------------------
// PRIMARY WORK (cache operations)
//------------------------------------------------------------------------------

TASK taskClass = wan.WANClient taskMethod = putSequentialKeysWithDrainTask
     wan.CacheClientPrms-batchSize = 25
     threadGroups = peer;

hydra.GatewayPrms-maximumQueueMemory = 100;

// this puts 25 * ${entrySize} * 1000 bytes before draining, and allows 100MB
// in the queues, goal is to overflow some but not too much (remember that each
// entry is put 1000 times)

wan.CacheClientPrms-numEntries = ${numEntries};
wan.CacheClientPrms-numPutAllEntries = range 80 120 egnar;
wan.CacheClientPrms-sleepSec = 0;
wan.CacheClientPrms-objectType = objects.PSTObject;
objects.PSTObjectPrms-size = ${entrySize};

//------------------------------------------------------------------------------
// FINAL WORK (validate and close)
//------------------------------------------------------------------------------

//CLOSETASK taskClass = wan.WANClient taskMethod = printSequentialKeysTask
//          threadGroups = peer;
CLOSETASK taskClass = wan.WANClient taskMethod = validateSequentialKeysTask
          threadGroups = peer;
CLOSETASK taskClass = wan.WANClient taskMethod = closePeerCacheTask
          threadGroups = peer;
//CLOSETASK taskClass = wan.WANBlackboard taskMethod = printBlackboard
//          threadGroups = peer;

//------------------------------------------------------------------------------
// TEST TERMINATION
//------------------------------------------------------------------------------

hydra.Prms-maxResultWaitSec = 1200;
hydra.Prms-totalTaskTimeSec = 900;

hydra.log.LogPrms-file_maxKBPerVM = 25000;
