hydra.Prms-testRequirement = "Test interest policy with serial execution and careful validation";
hydra.Prms-testDescription = "
This test executes operations on entries on a client and carefully
validates remote clients for correctness when registerInterest is
called. The test uses serial round robin; the first thread
in the round does a random operation, then all other threads in the round
call registerInterest and verify their view of the region. After the last 
thread in the round verifies, it then becomes the first in the next round, 
thus the thread doing the random operation changes for each round.
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;    

THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost}
                                    * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP edge
  totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost}
                                  * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)" ncf;

hydra.CachePrms-names           = bridge                   edge;
hydra.RegionPrms-names          = bridge                   edge;
hydra.RegionPrms-scope          = ack                      local;
hydra.RegionPrms-dataPolicy     = replicate                default;
hydra.RegionPrms-cacheListeners = hct.BridgeEventListener, util.SilenceListener;
hydra.RegionPrms-poolName    = none                     brloader;

hydra.BridgePrms-names          = bridge;

hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO;      // selector control

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout = 60000;
hydra.PoolPrms-subscriptionRedundancy = -1;

INITTASK     taskClass   = hct.InterestPolicyTest  taskMethod = initBridgeServer
             hydra.ConfigPrms-cacheConfig  = bridge
             hydra.ConfigPrms-regionConfig = bridge
             hydra.ConfigPrms-bridgeConfig = bridge
             threadGroups = bridge;

INITTASK     taskClass   = hct.RandInterestPolicyTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-cacheConfig  = edge
             hydra.ConfigPrms-regionConfig = edge
             threadGroups = edge;

TASK         taskClass   = hct.RandInterestPolicyTest  taskMethod = HydraTask_doRROpsAndVerify
             hydra.ConfigPrms-cacheConfig  = edge
             hydra.ConfigPrms-regionConfig = edge
             threadGroups = edge;

CLOSETASK   taskClass   = cq.CQUtil    taskMethod = HydraTask_verifyCQListenerInvoked
            threadGroups = edge;

hydra.Prms-totalTaskTimeSec = 900;
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = true;
hydra.Prms-roundRobin = true;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 1000;
util.RandomValuesPrms-objectDepth = 0;
util.ValueHolderPrms-useExtraObject = true;
hydra.GemFirePrms-conserveSockets = true;

hct.HctPrms-numOpsPerTask = 100;
hct.HctPrms-blackboardType = "RMI";
hct.HctPrms-blackboardName = "HctBlackboard";

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
hct.HctPrms-entryOperations = ONEOF add add add add update invalidate get destroy putIfAbsent replace remove FOENO; 
hct.HctPrms-upperThreshold = 500;
hct.HctPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
hct.HctPrms-lowerThreshold = 0;
hct.HctPrms-lowerThresholdOperations = ONEOF add putIfAbsent FOENO;
hct.HctPrms-useOwnKeys = false;
