INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;
INCLUDE $JTESTS/hct/hctparams.inc;
INCLUDE $JTESTS/hct/hctconfig.inc;

// hierarchy.conf
hydra.Prms-testDescription = "Extension of hierarchy.conf - periodically disconnects/reconnects clients and also kills all clients (CLOSETASK) to cause memberLeft/memberJoined and memberCrashed events.  Membership events are detected via the UniversalMembershipAdapter.  Bridge loaders use the sticky load-balancing policy"; 

// force bridgeClients into a separate DS from Servers
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"bridge\", ${bridgeHosts} )" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\",  ${edgeHosts} )" ncf
  ;

hydra.VmPrms-extraVMArgs  = fcn "hct.HctPrms.serverVmArgs(${bridgeHosts}, \"${hc.serverMemSize}\", true)" ncf
                             ,
                            fcn "hydra.TestConfigFcns.duplicate(\"-Xmx250m -Xms250m\", ${edgeHosts}*${edgeVMsPerHost}, true)" ncf;

hydra.ClientPrms-vmThreads = 1;

// override threadgroups from hierarchy.conf
// original edgeInit = killTargets + validator
// one per edge VM

THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;

THREADGROUP killTargets 
  totalThreads = fcn "${edgeHosts} * ${edgeVMsPerHost} - 1" ncf
  totalVms= fcn "${edgeHosts}* ${edgeVMsPerHost} - 1" ncf;

THREADGROUP validator totalThreads = 1;

hydra.PoolPrms-subscriptionRedundancy = -1;
// Protect test against SocketTimeoutExceptions
hydra.PoolPrms-readTimeout = 60000;                // default = 10000 ms
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-idleTimeout = -1; 
hydra.PoolPrms-loadConditioningInterval = -1;
hydra.PoolPrms-minConnections = 0;

STARTTASK  taskClass   = hct.HierCache    taskMethod  = initBlackboard
           clientNames = edge1;

INITTASK    taskClass   = hct.HierCache    taskMethod  = initServerRegion
            hydra.ConfigPrms-cacheConfig  = bridge
            hydra.ConfigPrms-regionConfig = bridge
            hydra.ConfigPrms-bridgeConfig = bridge
            runMode = always
            threadGroups = bridge;

INITTASK    taskClass   = hct.HierCache    taskMethod  = initEdgeRegion
            hydra.ConfigPrms-cacheConfig  = edge
            hydra.ConfigPrms-regionConfig = edge
            runMode = always
            threadGroups = killTargets, validator;

INITTASK    taskClass   = hct.HierCache    taskMethod  = acquireThreadLocalConnection
            hydra.ConfigPrms-cacheConfig  = edge
            hydra.ConfigPrms-regionConfig = edge
            runMode = always
            threadGroups = killTargets, validator;

INITTASK   taskClass   = hct.HierCache    taskMethod  = clearMembershipCounters
            threadGroups = killTargets, validator;

// Have clients accessing edge cache which uses cachebridge loader
TASK    taskClass   = hct.HierCache     taskMethod  = doGetBatch
        threadGroups = killTargets, validator, default;

TASK    taskClass   = hct.HierCache   taskMethod = recycleClientConnection
        hydra.ConfigPrms-cacheConfig  = edge
        hydra.ConfigPrms-regionConfig = edge
        maxThreads = 1
        startInterval = 120
        threadGroups = killTargets, validator 
        ;

TASK    taskClass = hct.HierCache   taskMethod = killClientVm
        maxThreads = 1
        threadGroups = killTargets
        ;

CLOSETASK taskClass   = hct.HierCache   taskMethod = validateMembershipEvents
          threadGroups = validator
          ;

// Clients & Servers will register their adminDS w/this Listener
hct.HctPrms-universalMembershipListener = hct.UniversalMembershipListener;

hct.HctPrms-allowDisconnect = true;

hct.HctPrms-restartWaitSec = 3;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 180;
