INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// overrides the topology with respect to the number of threads per VM

hydra.Prms-testTopology = "Hierarchical cache topology divided into two named subgroups, bridge and edge.  Subgroup bridge has ${bridgeHosts} hosts, ${bridgeVMsPerHost} VMs per host, and 1 thread per VM.  Subgroup edge has ${edgeHosts} hosts, ${edgeVMsPerHost} VMs per host, and 1 thread per VM, one of which is the single opThread.";

hydra.ClientPrms-vmThreads = 1;


THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP opThread
  totalThreads = 1  totalVMs = 1  clientNames = edge1;

hydra.Prms-totalTaskTimeSec = 300;
hydra.Prms-maxResultWaitSec = 120;
hydra.Prms-serialExecution = true;

hydra.Prms-testDescription = "Test various operations for serial execution.";

hydra.VmPrms-extraVMArgs  = fcn "hct.HctPrms.serverVmArgs(${bridgeHosts}, \"${hc.serverMemSize}\", true)" ncf
                             ,
                             "-Dnone";

hydra.VmPrms-extraClassPaths = fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"$GEMFIRE/lib/antlr.jar\", ${edgeHosts}, true)"
                             ncf;

hydra.ConfigPrms-cacheConfig  = edge;
hydra.ConfigPrms-regionConfig = edge;

hydra.CachePrms-names           = bridge                   edge;
hydra.RegionPrms-names          = bridge                   edge;
hydra.RegionPrms-cacheListeners = hct.BridgeEventListener, none /* coded */;
hydra.RegionPrms-poolName    = none                     brloader;
hydra.RegionPrms-dataPolicy     = replicated               default;
hydra.RegionPrms-scope          = ack                      local;

hydra.BridgePrms-names          = bridge;


hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections = 10;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;

STARTTASK    taskClass   = hct.BridgeNotifyBB   taskMethod = HydraTask_initialize
             clientNames = edge1
             ;

INITTASK     taskClass   = hct.BridgeNotify taskMethod  = initBridgeServer
             hydra.ConfigPrms-cacheConfig  = bridge
             hydra.ConfigPrms-regionConfig = bridge
             hydra.ConfigPrms-bridgeConfig = bridge
             threadGroups = bridge
             ;

INITTASK     taskClass   = hct.SerialClientQueue taskMethod  = HydraTask_initialize
             threadGroups = opThread, default
             ;

INITTASK     taskClass   = hct.SerialClientQueue taskMethod = HydraTask_populateRegion
             threadGroups = opThread
             ;

INITTASK     taskClass   = hct.SerialClientQueue taskMethod = clearEventCounters 
             threadGroups = opThread
             ;

TASK         taskClass   = hct.SerialClientQueue taskMethod  = HydraTask_doEntryOperations
             threadGroups = opThread, default
             ;

util.TestHelperPrms-minTaskGranularitySec = 0;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;

util.ValueHolderPrms-useExtraObject = false;
                                                                                
hct.BridgeNotifyPrms-entryOperations = ONEOF add add update read destroy close cacheClose FOENO;
//localInvalidate localDestroy FOENO;

hct.BridgeNotifyPrms-clientInterest = allkeys;
hct.BridgeNotifyPrms-clientListener = hct.EventListener;
hct.BridgeNotifyPrms-numKeys = 100;
