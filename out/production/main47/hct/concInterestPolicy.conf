hydra.Prms-testRequirement = "Test interest policy with concurrent execution and careful validation";
hydra.Prms-testDescription = "
This test executes operations on a client VMs, pauses and carefully validates for correctness. 
";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;    

THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost}
                                    * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP edge
  totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost}
                                  * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)" ncf;

hydra.CachePrms-names           = bridge                   edge;
hydra.RegionPrms-names          = bridge                   edge;
hydra.RegionPrms-scope          = ack                      local;
hydra.RegionPrms-dataPolicy     = replicate                default;
hydra.RegionPrms-cacheListeners = hct.BridgeEventListener, util.SilenceListener;
hydra.RegionPrms-poolName       = none                     brloader;

hydra.BridgePrms-names          = bridge;

hydra.BridgePrms-maxThreads = ONEOF default 16 FOENO;      // selector control

hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout = 60000;
hydra.PoolPrms-subscriptionRedundancy = -1;

INITTASK     taskClass   = hct.RandInterestPolicyTest  taskMethod = HydraTask_initBridgeServer
             hydra.ConfigPrms-cacheConfig  = bridge
             hydra.ConfigPrms-regionConfig = bridge
             hydra.ConfigPrms-bridgeConfig = bridge
             threadGroups = bridge;

INITTASK     taskClass   = hct.RandInterestPolicyTest  taskMethod = HydraTask_initialize
             hydra.ConfigPrms-cacheConfig  = edge
             hydra.ConfigPrms-regionConfig = edge
             threadGroups = edge;

TASK         taskClass   = hct.RandInterestPolicyTest  taskMethod = HydraTask_doConcOpsAndVerify
             hydra.ConfigPrms-cacheConfig  = edge
             hydra.ConfigPrms-regionConfig = edge
             threadGroups = edge;

CLOSETASK   taskClass   = cq.CQUtil    taskMethod = HydraTask_verifyCQListenerInvoked
            threadGroups = edge;

hydra.Prms-totalTaskTimeSec = 31536000;  // this is workload based
hydra.Prms-maxResultWaitSec = 600;
hydra.Prms-serialExecution = false;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-objectType = byte[];
util.RandomValuesPrms-elementSize = 500;
util.ValueHolderPrms-useExtraObject = true;
util.RandomValuesPrms-objectDepth = 0;
hydra.GemFirePrms-conserveSockets = true;

util.TestHelperPrms-minTaskGranularitySec = ONEOF 10 20 30 40 FOENO; // helps stagger the calls to registerInterest
hct.HctPrms-blackboardType = "RMI";
hct.HctPrms-blackboardName = "HctBlackboard";

// The following 3 parameters specify random operations.
// The test will try to hold the size of the region to regionSizeThreshold.
// If the region grows larger in size than regionSizeThreshold, then the
// operations will be chosen from thresholdOperations, otherwise the operations
// will be chosen from entryOperations
hct.HctPrms-entryOperations = ONEOF add add getNew update invalidate get destroy putIfAbsent replace remove FOENO; 
hct.HctPrms-upperThreshold = 250;
hct.HctPrms-upperThresholdOperations = ONEOF destroy remove FOENO; 
hct.HctPrms-lowerThreshold = 10;
hct.HctPrms-lowerThresholdOperations = ONEOF add putIfAbsent FOENO;

hct.HctPrms-secondsToRun = 600;
hct.HctPrms-registerWithEmptyRegion = false;
hct.HctPrms-useOwnKeys = ${useOwnKeys};
