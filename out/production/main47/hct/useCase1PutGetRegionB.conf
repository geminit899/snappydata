INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_2.inc;

hydra.Prms-totalTaskTimeSec = 1800;
hydra.Prms-maxResultWaitSec = 1800;

hydra.Prms-testDescription = "Tests get operations on the edge(s) of a hierarchical cache - periodically stopping servers and checking number of connections ";

hydra.VmPrms-extraVMArgs  = fcn "hct.HctPrms.serverVmArgs(${useCase1LoadMoveServerHosts}, \"${hc.serverMemSize}\", true)" ncf
                             ,
                             "-Dnone";

hydra.GemFirePrms-distributedSystem = 
  fcn "hydra.TestConfigFcns.duplicate(\"bridge\", ${useCase1LoadMoveServerHosts} )" ncf
  loner;
  ;
hydra.GemFirePrms-conserveSockets = true;

hydra.PoolPrms-names = brclient;
hydra.PoolPrms-minConnections = ${connectionsPerServer};
hydra.PoolPrms-subscriptionEnabled = false;
hydra.PoolPrms-threadLocalConnections = ${LBPolicy};
hydra.PoolPrms-readTimeout = 60000;

// Test specifics
hct.HctPrms-objectType = bytearray;
hct.HctPrms-averageSize = ${dataSize};

// override generic topology to force one VM per host for servers and feeds,
// one thread per VM for servers, feeds, and edges, except for the first edge
hydra.ClientPrms-vmQuantities =
  // bridges
  fcn "hydra.TestConfigFcns.duplicate(\"1\", ${useCase1LoadMoveServerHosts})" ncf
  // edges
  ${edgeVMsPerHost}
  ;
hydra.ClientPrms-vmThreads =
  // bridges
  fcn "hydra.TestConfigFcns.duplicate(\"1\", ${useCase1LoadMoveServerHosts})" ncf
  // edges
  ${edgeThreadsPerVM}
  ;

THREADGROUP useCase1LoadMoveServer // bridges
  totalThreads = ${useCase1LoadMoveServerHosts}
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"useCase1LoadMoveServer\", ${useCase1LoadMoveServerHosts}, true)" ncf;

THREADGROUP edgeLoaders // one third of edge clients
  totalThreads =
    fcn "(int)((${edgeThreadsPerVM} * ${edgeVMsPerHost} * ${edgeHosts})/3)" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)" ncf;

INITTASK    taskClass   = hct.UseCase1LoadMoveClient  taskMethod  = initServerCache
            threadGroups = useCase1LoadMoveServer
            ;
// Setup cache and regions for edge caches
INITTASK    taskClass   = hct.UseCase1LoadMoveClient  taskMethod  = initEdgeCache
            threadGroups = edgeLoaders, default
            ;
// Move data from all edge clients from Region A to Region B
INITTASK    taskClass   = hct.UseCase1LoadMoveClient  taskMethod  = invokePutGetRegionB
            threadGroups = edgeLoaders, default
            ;
