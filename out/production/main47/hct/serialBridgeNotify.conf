hydra.Prms-testRequirement = "TBD";
hydra.Prms-testDescription = "TBD";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;

// overrides the topology with respect to the number of threads per VM

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths = 
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts},true)" ncf;

hydra.Prms-testTopology = "Hierarchical cache topology divided into two named subgroups, bridge and edge.  Subgroup bridge has ${bridgeHosts} hosts, ${bridgeVMsPerHost} VMs per host, and 1 thread per VM.  Subgroup edge has ${edgeHosts} hosts, ${edgeVMsPerHost} VMs per host, and 1 thread per VM, one of which is the single opThread.";

hydra.ClientPrms-vmThreads = 1;

THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP opThread
  totalThreads = 1  totalVMs = 1  clientNames = edge1;

hydra.GemFirePrms-conserveSockets = true;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 120;
hydra.Prms-errorOnFailedGFStartup = false;
hydra.Prms-serialExecution = true;

hydra.log.LogPrms-mergeLogFiles = true;

hydra.PoolPrms-names            = brclient;
hydra.PoolPrms-minConnections = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout = 60000;
hydra.PoolPrms-subscriptionRedundancy = -1;

hydra.CachePrms-names           = bridge                   edge;
hydra.RegionPrms-names          = bridge                   edge;
hydra.RegionPrms-cacheListeners = hct.BridgeEventListener, none /* coded */;
hydra.RegionPrms-dataPolicy     = replicate                default;
hydra.RegionPrms-scope          = ack                      local;
hydra.RegionPrms-poolName    = none                     brclient;


hydra.BridgePrms-names          = bridge;

STARTTASK    taskClass   = hct.BridgeNotifyBB   taskMethod = HydraTask_initialize
             clientNames = edge1
             ;

INITTASK     taskClass   = hct.BridgeNotify taskMethod  = initBridgeServer
             hydra.ConfigPrms-cacheConfig  = bridge
             hydra.ConfigPrms-regionConfig = bridge
             hydra.ConfigPrms-bridgeConfig = bridge
             threadGroups = bridge
             ;

INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod  = HydraTask_initialize
             hydra.ConfigPrms-cacheConfig  = edge
             hydra.ConfigPrms-regionConfig = edge
             threadGroups = opThread, default
             ;

INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod = HydraTask_populateRegion
             threadGroups = opThread
             ;

INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod = HydraTask_getEntriesFromServer
             threadGroups = default
             ;

INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod = clearEventCounters 
             threadGroups = opThread
             ;

// Note that creates from one client will result in invalidates being sent to the 
// other bridgeClients (if the entry doesn't exist or is invalidated in those remote
// clients, the cacheListener in the remote bridgeClients are NOT invoked.
// We don't want to include any local_destroys in our counts
INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod = HydraTask_createAllKeys
             threadGroups = opThread
             ;
INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod = HydraTask_getEntriesFromServer
             threadGroups = default
             ;
INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod = HydraTask_createAllKeysViaPutAll
             threadGroups = opThread
             ;

// sync everyone back up (remote clients had entries invalidated by the creates
// we don't want to includes these local updates into our event counts
INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod = HydraTask_getEntriesFromServer
             threadGroups = default
             ;

INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod = HydraTask_updateAllKeys
             threadGroups = opThread
             ;
INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod = HydraTask_getEntriesFromServer
             threadGroups = default
             ;
INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod = HydraTask_updateAllKeysViaPutAll
             threadGroups = opThread
             ;

INITTASK     taskClass   = hct.SerialBridgeNotify taskMethod = HydraTask_destroyAllKeys
             threadGroups = opThread
             ;

//TASK         taskClass   = hct.SerialBridgeNotify taskMethod  = HydraTask_validateEventsReceived
             //maxTimesToRun = 1
             //threadGroups = opThread, default
             //;

util.TestHelperPrms-minTaskGranularitySec = 0;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;

util.ValueHolderPrms-useExtraObject = false;
                                                                                
hct.BridgeNotifyPrms-clientInterest = receiveValuesAsInvalidates;
hct.BridgeNotifyPrms-clientListener = hct.EventListener;
hct.BridgeNotifyPrms-numKeys = 100;

