hydra.Prms-testRequirement = "TBD";
hydra.Prms-testDescription = "TBD";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths =
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;

// overrides the topology with respect to the number of threads per VM

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths = 
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;

hydra.Prms-testTopology = "Hierarchical cache topology divided into two named subgroups, bridge and edge.  Subgroup bridge has ${bridgeHosts} hosts, ${bridgeVMsPerHost} VMs per host, and 1 thread per VM.  Subgroup edge has ${edgeHosts} hosts, ${edgeVMsPerHost} VMs per host, and 1 thread per VM, one of which is the single opThread.";

hydra.ClientPrms-vmThreads = 1;

THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;

THREADGROUP allKeys    totalThreads = 1  totalVMs = 1  clientNames = edge1;
THREADGROUP oddKeys    totalThreads = 1  totalVMs = 1  clientNames = edge2;
THREADGROUP evenKeys   totalThreads = 1  totalVMs = 1  clientNames = edge3;
THREADGROUP noInterest totalThreads = 1  totalVMs = 1  clientNames = edge4;
THREADGROUP singleKey  totalThreads = 1  totalVMs = 1  clientNames = edge5;

hydra.GemFirePrms-conserveSockets = true;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 120;
hydra.Prms-errorOnFailedGFStartup = false;
hydra.Prms-serialExecution = true;

hydra.log.LogPrms-mergeLogFiles = true;

hydra.CachePrms-names           = bridge                   edge;
hydra.RegionPrms-names          = bridge                   edge;
hydra.RegionPrms-cacheListeners = hct.BridgeEventListener, none /* coded */;
hydra.RegionPrms-poolName    = none                     brloader;
hydra.RegionPrms-dataPolicy     = replicate                default;
hydra.RegionPrms-scope          = ack                      local;

hydra.BridgePrms-names          = bridge;


hydra.PoolPrms-names            = brloader;
hydra.PoolPrms-minConnections = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-readTimeout = 60000;
hydra.PoolPrms-subscriptionRedundancy = -1;

hydra.ConfigPrms-cacheConfig  = edge;
hydra.ConfigPrms-regionConfig = edge;

STARTTASK    taskClass   = hct.BridgeNotifyBB   taskMethod = HydraTask_initialize
             clientNames = edge1
             ;

INITTASK     taskClass   = hct.BridgeNotify taskMethod  = initBridgeServer
             hydra.ConfigPrms-cacheConfig  = bridge
             hydra.ConfigPrms-regionConfig = bridge
             hydra.ConfigPrms-bridgeConfig = bridge
             threadGroups = bridge
             ;

INITTASK     taskClass   = hct.SerialMixedBridgeNotify taskMethod  = HydraTask_initialize
             hct.BridgeNotifyPrms-clientInterest = allKeys
             hct.BridgeNotifyPrms-clientListener = hct.EventListener
             threadGroups = allKeys
             ;

INITTASK     taskClass   = hct.SerialMixedBridgeNotify taskMethod = HydraTask_populateRegion
             threadGroups = allKeys
             ;

// Note that registering will also give us the keys/values from the servers cache
INITTASK     taskClass   = hct.SerialMixedBridgeNotify taskMethod  = HydraTask_initialize
             hct.BridgeNotifyPrms-clientInterest = oddKeys
             hct.BridgeNotifyPrms-clientListener = hct.KeyListListener
             threadGroups = oddKeys
             ;

INITTASK     taskClass   = hct.SerialMixedBridgeNotify taskMethod  = HydraTask_initialize
             hct.BridgeNotifyPrms-clientInterest = evenKeys
             hct.BridgeNotifyPrms-clientListener = hct.KeyListListener
             threadGroups = evenKeys
             ;

INITTASK     taskClass   = hct.SerialMixedBridgeNotify taskMethod  = HydraTask_initialize
             hct.BridgeNotifyPrms-clientInterest = noInterest
             hct.BridgeNotifyPrms-clientListener = hct.NoInterestListener
             threadGroups = noInterest
             ;

INITTASK     taskClass   = hct.SerialMixedBridgeNotify taskMethod  = HydraTask_initialize
             hct.BridgeNotifyPrms-clientInterest = singleKey
             hct.BridgeNotifyPrms-clientListener = hct.SingleKeyListener
             threadGroups =singleKey 
             ;

INITTASK     taskClass   = hct.SerialMixedBridgeNotify taskMethod = clearEventCounters 
             threadGroups = allKeys, oddKeys, evenKeys, singleKey, noInterest
             ;

TASK         taskClass   = hct.SerialMixedBridgeNotify taskMethod  = HydraTask_doEntryOperations
             threadGroups = allKeys, oddKeys, evenKeys, singleKey, noInterest
             ;

CLOSETASK   taskClass   = cq.CQUtil    taskMethod = HydraTask_verifyCQListenerInvoked
            threadGroups = allKeys, oddKeys, evenKeys, singleKey, noInterest
            ;

util.TestHelperPrms-minTaskGranularitySec = 0;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;

util.ValueHolderPrms-useExtraObject = false;
                                                                                
hct.BridgeNotifyPrms-entryOperations = ONEOF update update update replace replace replace putallupdate putallupdate putallupdate destroyCreate destroyCreate FOENO;
//localInvalidate localDestroy FOENO;

// allKeys, rangeOfKeys, singleKey
hct.BridgeNotifyPrms-clientInterest = allKeys;
hct.BridgeNotifyPrms-numKeys = 100;

