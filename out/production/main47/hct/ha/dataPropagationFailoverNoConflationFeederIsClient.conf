INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;
INCLUDE $JTESTS/hct/hctparams.inc;

hydra.Prms-testDescription = "Tests get operations on the edge(s) of a hierarchical cache. ";

hydra.Prms-totalTaskTimeSec =600;
hydra.Prms-maxResultWaitSec = 800;
hct.ha.HAClientQueuePrms-entryOperations=put;
hct.ha.HAClientQueuePrms-putLastKey=true;
hct.HctPrms-killInterval=300;
hct.HctPrms-restartWaitSec =300;            
hct.HctPrms-receiveValuesAsInvalidates = false;

hydra.BridgePrms-names = bridge;


hydra.PoolPrms-names                       = brloader;
hydra.PoolPrms-minConnections        = 10;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-subscriptionRedundancy             = 3;
hydra.PoolPrms-pingInterval = 100;
hydra.PoolPrms-readTimeout                 = 60000;
// HAOverflow variables
hydra.BridgePrms-evictionPolicy = mem;
hydra.BridgePrms-diskStoreName = disk;
hydra.DiskStorePrms-names = disk;

hydra.BridgePrms-capacity = 5;

hydra.CachePrms-names        = bridge     feed      edge;

hydra.RegionPrms-names       = bridge     feed      edge;
hydra.RegionPrms-cacheListeners =
      none,                            // bridge
      none,                            // feed
      hct.ha.HAFailoverClientListener; // edge
hydra.RegionPrms-poolName = none       brloader  brloader;
hydra.RegionPrms-dataPolicy  = replicate  default   default;
hydra.RegionPrms-scope       = dack;

// make bridges be peers and make feeds and edges be loners
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${feedHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf;

// override generic topology to make just one single-threaded VM of each type
hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 1;

THREADGROUP bridge
    totalThreads = ${bridgeHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP feed
    totalThreads = ${feedHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feed\", ${feedHosts}, true)" ncf;
THREADGROUP edge
    totalThreads = ${edgeHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edge\", ${edgeHosts}, true)" ncf;

hct.ha.HAClientQueuePrms-numPutThreads = ${hc.nPutThreads};
hct.ha.HAClientQueuePrms-numKeyRangePerThread = ${hc.nPutKeyRange};

STARTTASK  taskClass  =  hct.ha.HAClientQueueBB taskMethod = initialize
           clientNames = edge1;

STARTTASK  taskClass   = hct.HierCache    taskMethod  = initBlackboard
           clientNames = edge1;
            
// Setup cache and regions for bridge server caches
INITTASK   taskClass   = hct.ha.HAClientQueue taskMethod  = initCacheServer
           runMode = always
           hydra.ConfigPrms-cacheConfig  = bridge
           hydra.ConfigPrms-regionConfig = bridge
           hydra.ConfigPrms-bridgeConfig = bridge
           threadGroups = bridge;

// Setup cache and regions for edge caches            
INITTASK   taskClass   = hct.ha.HAClientQueue taskMethod  = initCacheClient
           hydra.ConfigPrms-cacheConfig  = edge
           hydra.ConfigPrms-regionConfig = edge
           threadGroups = edge;

// Setup cache and regions for feeder			
INITTASK    taskClass   = hct.ha.Feeder    taskMethod  = initTask2
           hydra.ConfigPrms-cacheConfig  = feed
           hydra.ConfigPrms-regionConfig = feed
           threadGroups = feed;                      

TASK    	taskClass   = hct.ha.Feeder    taskMethod  = feederTask
            threadGroups = feed;
            
TASK    taskClass   = hct.ha.HACache     taskMethod  = killServer
     maxThreads = 1 
     startInterval = 60
     threadGroups = edge
     maxTimesToRun = 5;
TASK    taskClass   = hct.ha.HAClientQueue     taskMethod  = registerInterestOnArbitraryKey
     threadGroups = edge;

TASK    taskClass   = hct.ha.HAClientQueue     taskMethod  = unregisterInterestOnArbitraryKey
     threadGroups = edge;
     
CLOSETASK    	taskClass   = hct.ha.Feeder    taskMethod  = closeTask
            threadGroups = feed;
           
CLOSETASK    	taskClass   = hct.ha.Feeder    taskMethod  = populateSharedMapWithRegionData
            threadGroups = feed;


CLOSETASK   taskClass   = hct.ha.HAClientQueue    taskMethod  = verifyDataInRegion
            threadGroups = edge;           
