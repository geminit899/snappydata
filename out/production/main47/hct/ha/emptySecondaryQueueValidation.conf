INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;
INCLUDE $JTESTS/hct/hctparams.inc;
hydra.Prms-totalTaskTimeSec = 999999;
hydra.Prms-maxResultWaitSec = 3600;

hydra.Prms-testDescription = "Tests get operations on the edge(s) of a hierarchical cache. ";

hct.ha.HAClientQueuePrms-entryOperations=ONEOF put invalidate destroy FOENO;

// make bridges and feeds be peers and make edges be loners
hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${bridgeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"ds\",    ${feedHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf;

hydra.GemFirePrms-conserveSockets = true;

hydra.BridgePrms-names = bridge;

// HAOverflow variables
hydra.BridgePrms-evictionPolicy = mem;
hydra.BridgePrms-diskStoreName = disk;
hydra.DiskStorePrms-names = disk;

hydra.BridgePrms-capacity = 5;

hydra.PoolPrms-names                       = brloader;
hydra.PoolPrms-minConnections        = 10;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections         = true;
hydra.PoolPrms-subscriptionRedundancy             = 8;
hydra.PoolPrms-pingInterval = 100;
hydra.PoolPrms-readTimeout                 = 60000;

hydra.CachePrms-names        = bridge     feed       edge;

hydra.RegionPrms-names       = bridge     feed       edge;
hydra.RegionPrms-poolName = none       none       brloader;
hydra.RegionPrms-dataPolicy  = replicate  replicate  default;
hydra.RegionPrms-scope       = dack;
hydra.RegionPrms-cacheListeners =
      none, // bridge
      none, // feed
      hct.ha.HAFailoverClientListener; // edge

// override generic topology to make just one single-threaded VM of each type
hydra.ClientPrms-vmQuantities = 1;
hydra.ClientPrms-vmThreads    = 1;

hct.ha.HAClientQueuePrms-numPutThreads = ${hc.nPutThreads};
hct.ha.HAClientQueuePrms-numKeyRangePerThread = ${hc.nPutKeyRange};
hct.ha.HAClientQueuePrms-putLastKey=true;
THREADGROUP bridge
    totalThreads = ${bridgeHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP feed
    totalThreads = ${feedHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feed\", ${feedHosts}, true)" ncf;

THREADGROUP clientClose1 totalThreads = 1 clientNames = edge1;
THREADGROUP clientClose2 totalThreads = 1 clientNames = edge2;
THREADGROUP clientClose3 totalThreads = 1 clientNames = edge3;
THREADGROUP clientClose4 totalThreads = 1 clientNames = edge4;
THREADGROUP clientClose5 totalThreads = 1 clientNames = edge5;

STARTTASK   taskClass  =  hct.ha.HAClientQueueBB taskMethod = initialize
           clientNames = edge1;

STARTTASK  taskClass   = hct.HierCache    taskMethod  = initBlackboard
           clientNames = edge1;

// defaults used by all clientClose threads, overridden by bridge/feed threads
hydra.ConfigPrms-cacheConfig  = edge;
hydra.ConfigPrms-regionConfig = edge;

// Setup cache and regions for bridge server caches
INITTASK   taskClass   = hct.ha.HAClientQueue taskMethod  = initCacheServer
           runMode = always
           hydra.ConfigPrms-cacheConfig  = bridge
           hydra.ConfigPrms-regionConfig = bridge
           hydra.ConfigPrms-bridgeConfig = bridge
           threadGroups = bridge;

INITTASK   taskClass   = hct.ha.HAClientQueue taskMethod  = initCacheClient
           threadGroups = clientClose1;

INITTASK   taskClass   = hct.ha.HAClientQueue taskMethod  = initCacheClient
           threadGroups = clientClose2;

INITTASK   taskClass   = hct.ha.HAClientQueue taskMethod  = initCacheClient
           threadGroups = clientClose3;

INITTASK   taskClass   = hct.ha.HAClientQueue taskMethod  = initCacheClient
           threadGroups = clientClose4;

INITTASK   taskClass   = hct.ha.HAClientQueue taskMethod  = initCacheClient
           threadGroups = clientClose5;


// Setup cache and regions for feeder
INITTASK    taskClass   = hct.ha.Feeder    taskMethod  = initTask
           hydra.ConfigPrms-cacheConfig  = feed
           hydra.ConfigPrms-regionConfig = feed
           threadGroups = feed;

hct.ha.HAClientQueuePrms-feederTaskTimeSec = 300;
TASK     taskClass = hct.ha.Feeder   taskMethod = feederTimedTask
         maxTimesToRun = 1 weight = 9999999
         threadGroups = feed;

TASK     taskClass = hct.ha.Feeder   taskMethod = closeTask
         maxTimesToRun = 1 weight = 1
         threadGroups = feed;

TASK     taskClass = hct.ha.EmptyQueueListener   taskMethod = setStableStateAchievedAndSleep
         maxTimesToRun = 1 weight = 99
         threadGroups = clientClose1;
 
TASK     taskClass   = hct.ha.HACache     taskMethod  = killStableServer
         maxTimesToRun = 1 weight = 1
   	 threadGroups = clientClose1;
TASK     taskClass   = hct.ha.HACache     taskMethod  = killStableServer
         maxTimesToRun = 1 weight = 1
   	 threadGroups = clientClose2;
TASK     taskClass   = hct.ha.HACache     taskMethod  = killStableServer
         maxTimesToRun = 1 weight = 1
   	 threadGroups = clientClose3;
TASK     taskClass   = hct.ha.HACache     taskMethod  = killStableServer
         maxTimesToRun = 1 weight = 1
   	 threadGroups = clientClose4;
TASK     taskClass   = hct.ha.HACache     taskMethod  = killStableServer
         maxTimesToRun = 1 weight = 1
   	 threadGroups = clientClose5;

hct.HctPrms-killInterval=100;
hct.HctPrms-restartWaitSec =50;            
