INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_3.inc;

hydra.Prms-totalTaskTimeSec = 900;
hydra.Prms-maxResultWaitSec = 900;
hydra.Prms-alwaysDoEndTasks = true;

hydra.Prms-testDescription = "Tests get operations on the edge(s) of a hierarchical cache - periodically stopping servers and checking number of connections ";

hydra.VmPrms-extraVMArgs  = fcn "hct.HctPrms.serverVmArgs(${useCase1ServerHosts}, \"${hc.serverMemSize}\", true)" ncf
                             ,
                             "-Dnone";

// override generic topology to force one VM per host for servers and feeds,
// one thread per VM for servers, feeds, and edges, except for the first edge
hydra.ClientPrms-vmQuantities =
  fcn "hydra.TestConfigFcns.duplicate(\"1\", ${useCase1ServerHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"1\", ${feedHosts})" ncf
  ${edgeVMsPerHost} // edges
  ;
hydra.ClientPrms-vmThreads =
  fcn "hydra.TestConfigFcns.duplicate(\"1\", ${useCase1ServerHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"1\", ${feedHosts})" ncf
  2 // first edge
  1 // remaining edges
  ;

hydra.GemFirePrms-distributedSystem = 
  fcn "hydra.TestConfigFcns.duplicate(\"bridge\", ${useCase1ServerHosts} )" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"bridge\", ${feedHosts} )" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\",  ${edgeHosts} )" ncf
  ;

hydra.GemFirePrms-conserveSockets = true;

hydra.PoolPrms-names = brloader;
hydra.PoolPrms-minConnections = ${connectionsPerServer};
hydra.PoolPrms-threadLocalConnections = ${threadLocalConnections};
hydra.PoolPrms-readTimeout = 60000;

hydra.CachePrms-names = cache;

hydra.RegionPrms-names       = feedRoot  edgeRoot  feed  edge;
hydra.RegionPrms-poolName = none      none      none  brloader;
hydra.RegionPrms-scope       = dack      noack     dack  local;
hydra.RegionPrms-initialCapacity    = 16;
hydra.RegionPrms-concurrencyLevel   = 16;
hydra.RegionPrms-statisticsEnabled  = true;
hydra.RegionPrms-evictionAttributes = none,             // feedRoot
                                      none,             // edgeRoot
                                      lruEntryCount 1,  // feed
                                      lruEntryCount 1;  // edge
// default eviction action = local_destroy

// Test specifics
hct.HctPrms-getIntervalMs = 10;
hct.HctPrms-hitsPerMiss = 0;
hct.HctPrms-getBatchSize = 100;
hct.HctPrms-objectType = bytearray;
hct.HctPrms-averageSize = ${dataSize};

hct.HctPrms-blackboardType = "RMI";
hct.HctPrms-blackboardName = "Lookup";

THREADGROUP useCase1Server // bridges
    totalThreads = ${useCase1ServerHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"useCase1Server\", ${useCase1ServerHosts}, true)" ncf;
THREADGROUP feed
    totalThreads = ${feedHosts}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"feed\", ${feedHosts}, true)" ncf;
THREADGROUP edgeInit
    totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edge\", ${edgeHosts}, true)"
                   ncf;
THREADGROUP killer
    totalThreads = 1 totalVms = 1 clientNames = edge1;

INITTASK    taskClass   = hct.UseCase1Client    taskMethod = initServerCache
            runMode = always
            threadGroups = useCase1Server
            ;

INITTASK    taskClass   = hct.UseCase1Client    taskMethod = initFeederCache
            runMode = always
            threadGroups = feed
            ;

INITTASK    taskClass   = hct.UseCase1Client    taskMethod = runFeeder
            threadGroups = feed
            ;

// Setup cache and regions for edge caches
INITTASK    taskClass   = hct.UseCase1Client    taskMethod  = initEdgeCache
            runMode = always
            threadGroups = edgeInit;

// Have clients accessing edge cache which uses cachebridge loader
TASK    taskClass   = hct.UseCase1Client     taskMethod  = invoke
        threadGroups = edgeInit, default
        ;

// Shutdown servers 1 at a time ... check netstat
TASK    taskClass   = hct.UseCase1Client     taskMethod  = stopServers
        maxTimesToRun = 1
        threadGroups = killer
        ;
