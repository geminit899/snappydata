include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/topology_3.inc;

hydra.Prms-testDescription = "Edge clients put data into multiple regions, where each region lives on a server in a different distributed system.";

hydra.GemFirePrms-distributedSystem =
  fcn "hydra.TestConfigFcns.duplicate(\"dsA\", ${bridgeAHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"dsB\", ${bridgeBHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"loner\", ${edgeHosts})" ncf;

THREADGROUP bridgeA
    totalThreads = fcn ${bridgeAHosts} * ${bridgeAVMsPerHost}
                                       * ${bridgeAThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridgeA\", ${bridgeAHosts}, true)" ncf;
THREADGROUP bridgeB
    totalThreads = fcn ${bridgeBHosts} * ${bridgeBVMsPerHost}
                                       * ${bridgeBThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"bridgeB\", ${bridgeBHosts}, true)" ncf;
THREADGROUP edge
    totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost}
                                    * ${edgeThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames
                        (\"edge\", ${edgeHosts}, true)" ncf;

hydra.Prms-totalTaskTimeSec = 60;
hydra.Prms-maxResultWaitSec = 600;

hydra.CachePrms-names = bridge edge;

// allow regions for different distributed systems to be configured differently
// and to have a singleton edge instance per system created by hydra
hydra.RegionPrms-names         = bridgeA    bridgeB    edgeA      edgeB;
hydra.RegionPrms-poolName      = none       none       edgeToDsA  edgeToDsB;
hydra.RegionPrms-dataPolicy    = replicate  partition  empty      empty;
hydra.RegionPrms-partitionName = none       partition  none       none;
hydra.RegionPrms-scope         = dack       default    local      local;

hydra.PartitionPrms-names = partition;

hydra.BridgePrms-names = bridge;


// allow edges to different distributed systems to be configured differently
// and to have a fail-safe singleton edge instance per system created by hydra
hydra.PoolPrms-names = edgeToDsA edgeToDsB;
hydra.PoolPrms-contactAlgorithm = hydra.EdgeHelper getRandomEndpoints;
hydra.PoolPrms-distributedSystem = dsA dsB;

INITTASK  taskClass = hct.multiDS.MultiDSClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = bridge
          hydra.ConfigPrms-bridgeConfig = bridge
          threadGroups = bridgeA, bridgeB
          ;
INITTASK  taskClass = hct.multiDS.MultiDSClient taskMethod = createRegionTask
          hydra.ConfigPrms-regionConfig = bridgeA
          hct.multiDS.MultiDSPrms-regionName = regionA
          threadGroups = bridgeA
          ;
INITTASK  taskClass = hct.multiDS.MultiDSClient taskMethod = createRegionTask
          hydra.ConfigPrms-regionConfig = bridgeB
          hct.multiDS.MultiDSPrms-regionName = regionB
          threadGroups = bridgeB
          ;
INITTASK  taskClass = hct.multiDS.MultiDSClient taskMethod = openCacheTask
          hydra.ConfigPrms-cacheConfig = edge
          threadGroups = edge
          ;
INITTASK  taskClass = hct.multiDS.MultiDSClient taskMethod = createRegionTask
          hydra.ConfigPrms-regionConfig = edgeA
          hct.multiDS.MultiDSPrms-regionName = regionA
          hct.multiDS.MultiDSPrms-ds = dsA
          threadGroups = edge
          ;
INITTASK  taskClass = hct.multiDS.MultiDSClient taskMethod = createRegionTask
          hydra.ConfigPrms-regionConfig = edgeB
          hct.multiDS.MultiDSPrms-regionName = regionB
          hct.multiDS.MultiDSPrms-ds = dsB
          threadGroups = edge
          ;
TASK      taskClass = hct.multiDS.MultiDSClient taskMethod = putDataTask
          hct.multiDS.MultiDSPrms-regionName = regionA
          threadGroups = edge
          maxThreads = fcn Math.max(1, ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} - 1) ncf
          ;
TASK      taskClass = hct.multiDS.MultiDSClient taskMethod = putDataTask
          hct.multiDS.MultiDSPrms-regionName = regionB
          threadGroups = edge
          maxThreads = fcn Math.max(1, ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} - 1) ncf
          ;
CLOSETASK taskClass = hct.multiDS.MultiDSClient taskMethod = validateDataTask
          hct.multiDS.MultiDSPrms-regionName = regionA
          threadGroups = bridgeA
          ;
CLOSETASK taskClass = hct.multiDS.MultiDSClient taskMethod = validateDataTask
          hct.multiDS.MultiDSPrms-regionName = regionB
          threadGroups = bridgeB
          ;
CLOSETASK taskClass = hct.multiDS.MultiDSClient taskMethod = closeCacheTask
          threadGroups = edge
          ;
CLOSETASK taskClass = hct.multiDS.MultiDSClient taskMethod = closeCacheTask
          threadGroups = bridgeA, bridgeB
          ;
