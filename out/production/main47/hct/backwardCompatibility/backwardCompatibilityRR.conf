hydra.Prms-testRequirement = "client/server commands are backward compatible (servers with minor revision differences and clients with any revision > 6.5.1";
hydra.Prms-testDescription = "Test framework for dev to use to validate client/server commands";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_hct.inc;

// define the edge clients
hydra.ClientPrms-versionNames =
      fcn "hydra.TestConfigFcns.duplicate(\"none\", ${bridgeHosts})"  ncf
      fcn "hydra.TestConfigFcns.pool(\"version1 version2 version3 version4\", ${edgeHosts})" ncf ;
hydra.VersionPrms-names   = version1 version2 version3 version4;
hydra.VersionPrms-version = ${version1} ${version2} ${version3} ${version4};

// Servers need antlr jar for query support
hydra.VmPrms-extraClassPaths = 
   fcn "hydra.TestConfigFcns.duplicate(\"$GEMFIRE/lib/antlr.jar\", ${bridgeHosts}, true)" ncf;

hydra.Prms-testTopology = "Hierarchical cache topology divided into two named subgroups, bridge and edge.  Subgroup bridge has ${bridgeHosts} hosts, ${bridgeVMsPerHost} VMs per host, and 1 thread per VM.  Subgroup edge has ${edgeHosts} hosts, ${edgeVMsPerHost} VMs per host, and 1 thread per VM, one of which is the single opThread.";

THREADGROUP bridge
  totalThreads = fcn ${bridgeHosts} * ${bridgeVMsPerHost} * ${bridgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"bridge\", ${bridgeHosts}, true)" ncf;
THREADGROUP edge 
  totalThreads = fcn ${edgeHosts} * ${edgeVMsPerHost} * ${edgeThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames
                      (\"edge\", ${edgeHosts}, true)" ncf;

hydra.GemFirePrms-conserveSockets = true;

hydra.Prms-totalTaskTimeSec = 600;
hydra.Prms-maxResultWaitSec = 120;
hydra.Prms-errorOnFailedGFStartup = false;
hydra.Prms-serialExecution = false;

hydra.log.LogPrms-mergeLogFiles = true;

hydra.CachePrms-names           = bridge                   edge;

hydra.RegionPrms-names          = bridge                   edge;
hydra.RegionPrms-regionName     = testRegion               testRegion;
hydra.RegionPrms-cacheListeners = hct.BridgeEventListener, none;
hydra.RegionPrms-poolName       = none                     brloader;
hydra.RegionPrms-dataPolicy     = replicate                normal;
hydra.RegionPrms-scope          = ack                      local;

hydra.BridgePrms-names          = bridge;

hydra.PoolPrms-names            = brloader                 brwriter;
hydra.PoolPrms-minConnections = 2;
hydra.PoolPrms-subscriptionEnabled = true;
hydra.PoolPrms-threadLocalConnections = true;
hydra.PoolPrms-subscriptionRedundancy = -1;

INITTASK     taskClass   = hct.backwardCompatibility.BackwardCompatibilityTest 
             taskMethod  = HydraTask_initializeBridgeServer
             runMode = always
             hydra.ConfigPrms-cacheConfig  = bridge
             hydra.ConfigPrms-regionConfig = bridge
             hydra.ConfigPrms-bridgeConfig = bridge
             threadGroups = bridge
             ;

INITTASK     taskClass   = hct.backwardCompatibility.BackwardCompatibilityTest 
             taskMethod  = HydraTask_initializeBridgeClient
             hydra.ConfigPrms-cacheConfig  = edge
             hydra.ConfigPrms-regionConfig = edge
             threadGroups = edge
             ;

//INITTASK     taskClass   = hct.backwardCompatibility.BackwardCompatibilityTest 
             //taskMethod = HydraTask_populateRegion
             //threadGroups = opThread
             //;

TASK         taskClass   = hct.backwardCompatibility.BackwardCompatibilityTest 
             taskMethod  = HydraTask_doEntryOperations
             threadGroups = edge
             ;

TASK         taskClass   = hct.backwardCompatibility.BackwardCompatibilityTest 
             taskMethod  = HydraTask_testClientServerMessaging
             threadGroups = edge
             ;

hct.backwardCompatibility.BackwardCompatibilityPrms-registerInterest = true;

util.TestHelperPrms-minTaskGranularitySec = 60;
hct.backwardCompatibility.BackwardCompatibilityPrms-entryOperations = ONEOF add add getNew getNew update invalidate get destroy putIfAbsent putIfAbsent replace remove FOENO;
hct.backwardCompatibility.BackwardCompatibilityPrms-upperThreshold = 500;
hct.backwardCompatibility.BackwardCompatibilityPrms-upperThresholdOperations = ONEOF destroy remove FOENO;
hct.backwardCompatibility.BackwardCompatibilityPrms-lowerThreshold = 10;
hct.backwardCompatibility.BackwardCompatibilityPrms-lowerThresholdOperations = ONEOF add getNew putIfAbsent FOENO;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage = 0;
util.RandomValuesPrms-objectType = java.lang.Integer;
util.RandomValuesPrms-valueType = java.lang.Integer;

util.ValueHolderPrms-useExtraObject = false;
                                                                                

