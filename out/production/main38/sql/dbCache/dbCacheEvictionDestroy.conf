hydra.Prms-testDescription = " this tests write through to back_end database with eviction destroy";

INCLUDE $JTESTS/sql/dbCache/dbCacheCommon.conf;

INITTASK     taskClass   = sql.sqlCallback.SQLWriterTest taskMethod  = HydraTask_createWriter
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.sqlCallback.SQLWriterTest taskMethod  = HydraTask_populateTables
	threadGroups = accessorThreads;	

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyNonEvictDestroyTablesResultSets
	 threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.dbCache.DBCacheTest taskMethod  = HydraTask_verifyLRUCount
	 threadGroups = ddlThread;
	 
TASK     taskClass   = sql.sqlCallback.SQLWriterTest taskMethod  = HydraTask_doDMLOp
	 threadGroups = accessorThreads, ddlThread;
	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyNonEvictDestroyTablesResultSets
	 threadGroups = ddlThread;	 
				
hydra.Prms-totalTaskTimeSec  = 60;

hydra.CachePrms-names = defaultCache; 	

CLOSETASK     taskClass   = sql.sqlCallback.SQLWriterTest taskMethod  = HydraTask_clearTables
	threadGroups = ddlThread, accessorThreads;	
	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownDB
	 threadGroups = ddlThread; 		

sql.dbCache.DBCachePrms-lruCount = 100;

sql.SQLPrms-gfeDDLExtension =
	"eviction by lrucount 100 evictaction destroy "
	" "
	" "
	" "
	"eviction by lrucount 100 evictaction destroy "
	"eviction by lrucount 100 evictaction destroy "
	"eviction by lrucount 100 evictaction destroy "
	" "
	"eviction by lrucount 100 evictaction destroy ";
	
sql.SQLPrms-dmlOperations = ONEOF insert update delete FOENO;

  	
RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen
  	
