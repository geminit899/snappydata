hydra.Prms-testDescription = " ";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/gemfirexd/topology_accessor_locator.inc;

THREADGROUP locator
    totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${C}\", ${${C}Hosts}, true)"  ncf;

THREADGROUP datastore
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM} ncf
    totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf;

THREADGROUP ddl
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

THREADGROUP validator
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

THREADGROUP accessor
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                       - (${${B}Hosts} * ${${B}VMsPerHost} + 1) ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

INITTASK taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_createGfxdLocatorTask
         threadGroups = locator
         ;
INITTASK taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_startGfxdLocatorTask
         threadGroups = locator
         ;
INITTASK taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_initializeFabricServer
         runMode      = always
	 threadGroups = locator, datastore, accessor, ddl, validator
	 ;
INITTASK taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_startFabricServer_Once
         runMode      = always
         threadGroups = datastore, validator
         ;
INITTASK taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_createGFESchemas
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_createDiskStores
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_createHDFSStore
         sql.hadoopHA.HadoopHAPrms-expectExceptions = true
         threadGroups = ddl
         ;
INITTASK taskClass    = hdfs.HDFSUtil taskMethod   = configureAndStartHadoop
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_createHDFSStore
         sql.hadoopHA.HadoopHAPrms-expectExceptions = false
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_createGFETables
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_populateTables
	 threadGroups = ddl
	 ;
TASK     taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_doDMLOp
         threadGroups = accessor, ddl, validator
         ;

CLOSETASK taskClass    = sql.hadoopHA.HadoopHATest
          taskMethod   = HydraTask_shutDownDB
	  threadGroups = validator
	  ;
CLOSETASK taskClass    = sql.hadoopHA.HadoopHATest taskMethod   = HydraTask_shutDownDB
	  threadGroups = datastore
	  ;
ENDTASK   taskClass   = hdfs.HDFSUtil taskMethod  = stopCluster
          clientNames = accessor1
          ;

hydra.VmPrms-extraClassPaths +=
  fcn "hydra.TestConfigFcns.duplicate(\"none\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${A}Hosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${B}Hosts})" ncf
  ;

hydra.VmPrms-extraClassPaths += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraVMArgs = fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xmx256m \", ${locatorHosts}, true)"
                           ncf
                           , 
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms512m -Xmx512m \", ${${A}Hosts}, true)"
                           ncf
                           , 
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xmx128m \", ${${B}Hosts}, true)"
                           ncf;

hydra.Prms-checkTaskMethodsExist = false;
hydra.Prms-manageDerbyServer         = false;
hydra.Prms-totalTaskTimeSec          = 300;
hydra.Prms-maxResultWaitSec          = 600;
hydra.Prms-maxCloseTaskResultWaitSec = 600;
hydra.Prms-serialExecution           = false;
hydra.Prms-alwaysDoEndTasks          = true;
hydra.Prms-checkTaskMethodsExist     = false;

// Hadoop Configuration
hydra.ConfigPrms-hadoopConfig  = hdfs;
hydra.HadoopPrms-names         = hdfs;
hydra.gemfirexd.HDFSStorePrms-hadoopName = hdfs;

// HDFS Configuration
hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig  = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-names         = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-homeDir       = gemfirexd_data;
hydra.gemfirexd.HDFSStorePrms-diskStoreName = hdfsDiskStore;
hydra.gemfirexd.HDFSStorePrms-queuePersistent    = true;

hydra.gemfirexd.DiskStorePrms-names         = hdfsDiskStore;

// SQL Parms
sql.SQLPrms-dmlTables            = "trade.securities" ;
sql.SQLPrms-dmlOperations        = ONEOF insert update query query query delete delete delete FOENO;
//sql.SQLPrms-dmlOperations        = ONEOF insert update update update query query query delete FOENO;
//Failed Statement is: update trade.securities set price = ? where sec_id = ? with 2 parameters ;value=17.990000000000002,type=0;value=7,type=0
//ERROR 0A000: Feature not implemented: Update of partitioning column not supported.
sql.SQLPrms-testPartitionBy      = true;
sql.SQLPrms-withReplicatedTables = false;
sql.SQLPrms-testMultiTableJoin   = ${testMultiTableJoin};
sql.SQLPrms-testUniqueKeys       = ${testUniqueKeys};
sql.SQLPrms-hasNetworth          = true;		//will create networth table - legacy flag
sql.SQLPrms-useGfxdConfig        = true;
sql.SQLPrms-hasHDFS              = true;
sql.SQLPrms-initCustomersSizePerThread = 200; //make it 1 if we want to avoid bulk insert to customers.
sql.SQLPrms-createDiskStore      = "create diskstore hdfsDiskStore 'hdfsDiskStore'" ;

sql.SQLPrms-createSchemas = "create schema trade" ;

sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
 ;

sql.SQLPrms-gfeDDLExtension =
    "${securities}"
 ;

sql.SQLPrms-redundancyClause =
  " REDUNDANCY ${redundantCopies}"
 ;

sql.SQLPrms-hdfsDDLExtn =
  " HDFSSTORE (sqlhdfsStore)"
  ;

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen
