//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_accessor_locator.inc;
//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription=" TBD ";

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;

hydra.Prms-manageDerbyServer          = false;  
hydra.Prms-totalTaskTimeSec           = 300;
hydra.Prms-maxResultWaitSec           = 900;
hydra.Prms-maxCloseTaskResultWaitSec  = 60000;
hydra.Prms-serialExecution            = false;	
hydra.Prms-alwaysDoEndTasks           = true;
hydra.Prms-checkTaskMethodsExist      = false;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"locator\", ${locatorHosts}, true)"  ncf;

THREADGROUP datastore
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM} ncf
    totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf;

THREADGROUP ddl
    totalThreads = 1    
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

THREADGROUP validator
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;
    
THREADGROUP accessor
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM} 
                       - (${${B}Hosts} * ${${B}VMsPerHost} + 1) ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
          clientNames = accessor1;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = startCluster
          clientNames = accessor1;

INITTASK taskClass = sql.hadoopHA.HadoopHATest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.hadoopHA.HadoopHATest taskMethod = HydraTask_startGfxdLocatorTask
         threadGroups = locator;
                                                              
INITTASK taskClass = sql.hadoopHA.HadoopHATest taskMethod = HydraTask_initializeFabricServer
         runMode = always
	 threadGroups = locator, datastore, accessor, ddl, validator;

INITTASK taskClass   = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_startFabricServer_Once
         runMode = always
         threadGroups = datastore, validator;

INITTASK taskClass   = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_createGFESchemas
         threadGroups = ddl;

INITTASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_createDiskStores
         threadGroups = ddl; 

INITTASK taskClass = sql.hadoopHA.HadoopHATest taskMethod = HydraTask_createHDFSStore
         threadGroups = ddl;      

INITTASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_createGFETables
         threadGroups = ddl;

INITTASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_setHDFSEvictionObserver
         runMode = always
         threadGroups = datastore, validator;

INITTASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_setTriggerObserver
         runMode = always
         threadGroups = datastore, validator;
           
INITTASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_populateTables
         threadGroups = accessor;

INITTASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_verifyHdfsOperationalData
         threadGroups = validator;

INITTASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_verifyHdfsNonOperationData
         threadGroups = validator;

TASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_doDMLOp
         threadGroups = accessor, ddl, validator;

TASK taskClass = hdfs.HDFSUtil taskMethod  = stopStartDataNodes
         hdfs.HDFSPrms-hadoopStartWaitSec = 10
         hdfs.HDFSPrms-hadoopStopWaitSec = 30
         hdfs.HDFSPrms-hadoopReturnWaitSec = 30
         maxThreads = 1
         threadGroups = accessor, ddl, validator;

CLOSETASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_verifyHdfsNonOperationData
          threadGroups = validator;

CLOSETASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_verifyHdfsOperationalData
          threadGroups = validator;

CLOSETASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_shutDownDB
	      threadGroups = validator;

CLOSETASK taskClass = sql.hadoopHA.HadoopHATest taskMethod  = HydraTask_shutDownDB
	      threadGroups = datastore;     
     
ENDTASK taskClass = hdfs.HDFSUtil taskMethod = stopCluster
        clientNames = accessor1;
             	 
sql.SQLPrms-testPartitionBy       = true;
sql.SQLPrms-withReplicatedTables  = false;
sql.SQLPrms-testUniqueKeys        = ${testUniqueKeys};
sql.SQLPrms-testMultiTableJoin    = ${testMultiTableJoin};
sql.SQLPrms-useGfxdConfig         = true;
sql.SQLPrms-hasHDFS               = true;
sql.SQLPrms-supportDuplicateTables= true;
sql.SQLPrms-initCustomersSizePerThread = 100; //make it 1 if we want to avoid bulk insert to customers.

sql.SQLPrms-hasNetworth = true;		//will create networth table - legacy flag
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete delete delete FOENO;

sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory";
sql.SQLPrms-createSchemas = "create schema trade" "create schema emp" ;

sql.SQLPrms-createTablesStatements =
        "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
    "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
        "create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid),  constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
        "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))"
        "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10) default 'open', tid int, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
        "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_qty_ck check (qty>=0))"
        "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
        "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), deptid int , since date, addr varchar(100), picture blob ,  ssn varchar(9) , tid int)"
        "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid))"
        ;

sql.SQLPrms-gfeDDLExtension =
    "${securities}"
    "${customers}"
    "${networth}"
    "${portfolio}"
    "${sellorders}"
    "${buyorders}"
    "${txhistory}"
    "${employees}"
    "${trades}"
    ;

sql.SQLPrms-redundancyClause =
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
    ;

sql.SQLPrms-hdfsDDLExtn =
    " EVICTION BY CRITERIA ( price > 25 AND  tid > 10  ) EVICT INCOMING HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( cid >= 200 ) EVICTION FREQUENCY 10 SECONDS HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( cash > 10000 ) EVICTION FREQUENCY 10 SECONDS HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( qty > 500  ) EVICT INCOMING HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( order_time <  {fn TIMESTAMPADD( SQL_TSI_DAY, 7, CURRENT_TIMESTAMP)}  AND cid > 1000 ) EVICT INCOMING HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( ordertime  <  {fn TIMESTAMPADD( SQL_TSI_DAY, 7, CURRENT_TIMESTAMP)}  OR  cid > 1000 ) EVICTION FREQUENCY 10 SECONDS HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( cid >= 200 ) EVICTION FREQUENCY 10 SECONDS HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( eid >= 100 ) EVICT INCOMING HDFSSTORE (sqlhdfsStore)"
    " "
    ;

// Hadoop Configuration
hydra.ConfigPrms-hadoopConfig     = hdfs;
hydra.HadoopPrms-names            = hdfs;
hydra.gemfirexd.HDFSStorePrms-hadoopName    = hdfs;

// HDFS Configuration
hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig  = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-names         = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-homeDir       = gemfirexd_data;
hydra.gemfirexd.HDFSStorePrms-diskStoreName = hdfsDiskStore;
hydra.gemfirexd.HDFSStorePrms-queuePersistent    = true;

hydra.gemfirexd.DiskStorePrms-names = hdfsDiskStore;
sql.SQLPrms-createDiskStore = "create diskstore hdfsDiskStore 'hdfsDiskStore'" ;

// HDFS dependencies - bug #48428
hydra.VmPrms-extraClassPaths +=
  fcn "hydra.TestConfigFcns.duplicate(\"none\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${A}Hosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${B}Hosts})" ncf
  ;

hydra.VmPrms-extraVMArgs = fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xmx256m \", ${locatorHosts}, true)"
                           ncf
                           ,
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms512m -Xmx512m \", ${${A}Hosts}, true)"
                           ncf
                           ,
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xmx128m \", ${${B}Hosts}, true)"
                           ncf;

hydra.gemfirexd.FabricServerPrms-conserveSockets = false; //due to #44545 & #47177
hydra.Prms-clientShutdownHook += sql.hadoopHA.HadoopHATest dumpResults;

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen
