hydra.Prms-testDescription = " this tests DBSynchronizer to oracle as backend db";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_client_locator.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;

hydra.Prms-manageDerbyServer = false;
hydra.Prms-totalTaskTimeSec           = 600;
hydra.Prms-maxResultWaitSec           = 600;
hydra.Prms-maxCloseTaskResultWaitSec  = 300;
hydra.Prms-serialExecution            = false;	
hydra.gemfirexd.FabricServerPrms-persistDD = true;

sql.SQLPrms-initCustomersSizePerThread = RANGE 20 50 EGNAR;
sql.SQLPrms-initSecuritiesSizePerThread = RANGE 10 30 EGNAR;                        

sql.SQLPrms-hasNetworth = true;		//will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;
sql.SQLPrms-dmlTables = "emp.department" "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" 
                         "trade.sellorders" "trade.buyorders" "trade.txhistory" 
                         "emp.employees";  	//"trade.companies" 
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;
sql.SQLPrms-dropIndex = ${dropIndex};
sql.SQLPrms-createIndex = true;
sql.SQLPrms-hasAsyncDBSync = true;

THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;                                
                                
THREADGROUP serverThreads
            totalThreads = fcn ${serverHosts} * ${serverVMsPerHost} * ${serverThreadsPerVM} -2 ncf
            totalVMs     = fcn ${serverHosts} * ${serverVMsPerHost} - 2 ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"server\", ${serverHosts}, true)" ncf;    
 
THREADGROUP asynchDBThreads
            totalThreads = 2
            totalVMs     = 2
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"server\", ${serverHosts}, true)" ncf;    
                                                                                          
THREADGROUP edgeThreads
            totalThreads = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM} -1  ncf
            totalVMs     = fcn ${clientHosts} * ${clientVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"client\", ${clientHosts}, true)" ncf;
                                
THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"client\", ${clientHosts}, true)" ncf;   
                                                                                                                                         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
		 runMode = always
         threadGroups = locator;

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_initForServerGroup
	threadGroups = ddlThread;	
                                
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_initializeServer
         runMode = always
         threadGroups = serverThreads, asynchDBThreads;
         
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startFabricServerSG
		 runMode = always
         threadGroups = serverThreads;     

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startFabricServerSGDBSynchronizer
		 runMode = always
         threadGroups = asynchDBThreads;                          
		
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startNetworkServer
		runMode = always
		threadGroups =  serverThreads, asynchDBThreads;    

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_initEdges
		threadGroups = edgeThreads, ddlThread;		
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createOracleUsers
	threadGroups = ddlThread;		
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createGFESchemasByClients
		threadGroups = ddlThread; 		
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createUDTPriceType
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createUUIDType
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = hydraTask_createUDTPriceFunctions
	threadGroups = ddlThread;	

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createOracleTables
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createGFETablesByClients
		threadGroups = ddlThread;   

//INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createCompaniesTable
//	threadGroups = ddlThread;

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
		threadGroups = serverThreads;
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createDiskStores
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createOracleDBSynchronizer
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startDBSynchronizer
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_populateTablesDBSynchronizer
	threadGroups = edgeThreads, ddlThread;		
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_setTableCols
	threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createIndex
	threadGroups = edgeThreads, ddlThread;
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createIndex
	threadGroups = edgeThreads, ddlThread;	
	
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_putLastKeyOracleDBSynchronizer
	 threadGroups = ddlThread;
			
//INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_verifyResultSetsOracleDBSynchronizer
//	 threadGroups = ddlThread;

TASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createIndex
	 threadGroups = ddlThread;

TASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_doDMLOpDBSynchronizer
	 threadGroups = edgeThreads, ddlThread;
	 
CLOSETASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_putLastKeyOracleDBSynchronizer
	 threadGroups = ddlThread;
			
//CLOSETASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_verifyResultSetsOracleDBSynchronizer
//	 threadGroups = ddlThread;
	 
ENDTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_cleanupOracleRun
            clientNames = client1;

sql.SQLPrms-serverGroups = fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList1} \", ${SGvms1}, true)"
                             ncf 
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList2}  \", ${SGvms2}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList3}  \",${SGvms3}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList4}  \", ${SGvms4} , true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList5}  \",${SGvms5}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList6}  \", ${SGvms6} , true)"
                             ncf
                             ;                                                               

//securities has primary key and unique constraints
/* with the cascade delete
sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 2), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
	"create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.networth (cid int not null, cash decimal (30, 2), securities decimal (30, 2), loanlimit int, availloan decimal (30, 2),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete cascade, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,2), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete cascade, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete cascade, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 2), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 2), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
        "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 2), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";
*/

sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 2), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
	"create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.networth (cid int not null, cash decimal (30, 2), securities decimal (30, 2), loanlimit int, availloan decimal (30, 2),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,2), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 2), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 2), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
    "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 2), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
	"create table emp.department (deptid int not null constraint dept_pk primary key, deptname varchar(100), tid int)"
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), deptno int, since date, addr varchar(100), picture blob, ssn varchar(9), tid int, constraint dept_fk foreign key (deptno) references emp.department (deptid))"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))"
	"create table default1.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))";

sql.SQLPrms-testPartitionBy = true;
sql.SQLPrms-testServerGroups = true;
sql.SQLPrms-testServerGroupsInheritence = ONEOF true false FOENO;
sql.SQLPrms-withReplicatedTables =${withReplicatedTables};
sql.SQLPrms-testUniqueKeys = ${testUniqueKeys};

sql.SQLPrms-enableQueuePersistence = ONEOF true false FOENO;
sql.SQLPrms-enableQueueConflation = ONEOF true false FOENO;

sql.SQLPrms-gfeDDLExtension =
	"${securities}" 
    "${customers}" 
	"${networth}"
	"${portfolio}"
	"${sellorders}"
     "${buyorders}"
     "${txhistory}"
    "emp.department:replicate:random"
	"emp.employees:random:random"
	"trade.trades:random:random" 
	"default1.employees:random:random";
sql.SQLPrms-createDiskStore = "create diskstore DBSynchStore 'persistDir'";
hydra.gemfirexd.GfxdHelperPrms-createDiskStore = true;

hydra.gemfirexd.NetworkServerPrms-names = server;
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = server;
sql.SQLPrms-numOfWorkers = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM} ncf;
hydra.VmPrms-extraVMArgs  += "-Xmx1024m";
sql.SQLPrms-useGfxdConfig = true;
//sql.SQLPrms-hasCompanies=true;
sql.SQLPrms-companiesTableDDLExtension = "trade.companies:random:random";

hydra.Prms-alwaysDoEndTasks = true;
hydra.VmPrms-extraClassPaths        +=  
 "/export/w1-gst-dev29a/users/oracle/app/oracle/product/11.2.0/dbhome_1/jdbc/lib/ojdbc6.jar";
 
hydra.VmPrms-extraVMArgs  += "-Djava.security.egd=file:///dev/urandom"; 
sql.SQLPrms-disableUpdateStatement48248=true;

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen

