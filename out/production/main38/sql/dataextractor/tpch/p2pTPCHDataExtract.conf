hydra.Prms-testDescription = " p2p";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_2_locator.inc;

hydra.GemFirePrms-names = gemfire1;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../gemfirexd/classes;
hydra.VmPrms-extraClassPaths        += "/export/gcm/where/java/jakarta/commons/io/2.3/commons-io-2.3.jar";
hydra.VmPrms-extraVMArgs            += "-Xms4096m -Xmx4096m -XX:NewSize=1024m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+CMSParallelRemarkEnabled";
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/jline-1.0.jar;

THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;
THREADGROUP peerThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) - 1" ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP controllerThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                               ${${B}Hosts}, true)" ncf;

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                               ${${A}Hosts}, true)" ncf;

sql.dataextractor.DataExtractorPrms-threadGroupNames = peerThreads ddlThread;
sql.dataextractor.DataExtractorPrms-clientVMNamesForRestart = peer;
sql.dataextractor.DataExtractorPrms-performUpdatesWhileShuttingDown = ${performUpdatesWhileShuttingDown};
sql.dataextractor.DataExtractorPrms-simultaneousShutdownVMs= ${simultaneousShutdownVMs};

hydra.Prms-manageDerbyServer = false;
hydra.Prms-maxResultWaitSec           = 3000;
hydra.Prms-totalTaskTimeSec = 240; // test is workload based
hydra.Prms-serialExecution            = false; 

hydra.GemFirePrms-hostNames = locatorhost1 peerhost1 controllerhost1;

INITTASK    taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask
            runMode = always;

INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
         runMode = always
         threadGroups = locator;

INITTASK     taskClass   = sql.dataextractor.DataExtractorTest taskMethod  = HydraTask_initialize
 runMode = always
 threadGroups = peerThreads, ddlThread;

INITTASK     taskClass   = sql.dataextractor.DataExtractorTest taskMethod  = HydraTask_initController
 runMode = always
 threadGroups = controllerThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer
 runMode = always
    threadGroups = peerThreads, ddlThread;

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startNetworkServer
  runMode = dynamic
  threadGroups =  ddlThread;

INITTASK     taskClass   = sql.tpch.TPCHTest taskMethod = HydraTask_runSQLScript
  threadGroups = ddlThread
  sql.SQLPrms-sqlFilePath = sql/tpch/${createtablefile}.sql;

//add constraints
INITTASK     taskClass   = sql.tpch.TPCHTest taskMethod = HydraTask_runSQLScript
  threadGroups = ddlThread
  sql.SQLPrms-sqlFilePath = sql/tpch/alter_table_add_constraints.sql;  

//create_all_buckets
//INITTASK  taskClass = sql.tpch.TPCHTest
//          taskMethod = HydraTask_createBucketsTask
//          threadGroups = ddlThread;

//load data
INITTASK     taskClass   = sql.tpch.TPCHTest taskMethod = HydraTask_runImportTable
  threadGroups = ddlThread
  sql.SQLPrms-sqlFilePath = sql/tpch/${importfile}.sql;

TASK        taskClass     = sql.dataextractor.DataExtractorTest taskMethod = HydraTask_Controller
            threadGroups = controllerThread
            maxTimesToRun = 1
            startInterval = 40;

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_clearTables
 threadGroups = peerThreads, ddlThread; 

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownDB
  threadGroups = ddlThread;     

hydra.Prms-clientShutdownHook += sql.SQLTest dumpResults;
hydra.GemFirePrms-conserveSockets = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf;
hydra.gemfirexd.FabricServerPrms-conserveSockets = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf; 

sql.SQLPrms-dropProc = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf; //whether there are concurrent ddl ops of procedures

hydra.gemfirexd.NetworkServerPrms-names = gfxdServer;
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = gfxdServer;

objects.query.QueryPrms-api = ${api};
