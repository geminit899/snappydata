hydra.Prms-testDescription = " this tests gemfirexdm beans and its attributed related to pulse with verification";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2.inc;
//INCLUDE $JTESTS/hydraconfig/jdebug.inc;	

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-tools.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/jline-1.0.jar;
hydra.Prms-manageDerbyServer          = true;
hydra.Prms-maxResultWaitSec           = 2000;
hydra.Prms-maxCloseTaskResultWaitSec  = 2000;
hydra.Prms-serialExecution            = false;
hydra.Prms-totalTaskTimeSec           = 600;

THREADGROUP initThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf         
			clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf;
			
THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1 
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf;
            
THREADGROUP jmxThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;                                                

INITTASK    taskClass   = sql.SQLTest taskMethod  = HydraTask_initialize
	runMode = always
	threadGroups = initThreads, default, jmxThreads;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscDB
	threadGroups = initThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscSchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscTables
	threadGroups = ddlThread;

//overridden for server groups
INITTASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_createGFEDB
	runMode = always
	threadGroups = initThreads;	
	
INITTASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_startManager
	runMode = always
	threadGroups = jmxThreads;	

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFESchemas
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiskStores
	threadGroups = ddlThread;	

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFETables
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFuncForProcedures
    threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_createProcedures
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_populateTables
	threadGroups = initThreads;	

CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_waitForMBeanUpdater
   threadGroups = jmxThreads, initThreads;

CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_validateAggregatedMemberMBean
   threadGroups = jmxThreads, initThreads;
   
CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_verifyTableMBeanValues
   threadGroups = jmxThreads, initThreads;
   
CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_verifyAggregateValues
   threadGroups = jmxThreads, initThreads;
   
CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_printCounters
   threadGroups = initThreads;
   
CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_checkForError
   threadGroups = initThreads;

sql.SQLPrms-hasNetworth = true;		//will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory"; 	
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;
sql.SQLPrms-joinTables = "trade.customers_networth" "trade.customers_securities_portfolio" "trade.customers_portfolio_sellorders" "trade.securities_portfolio";
sql.SQLPrms-independentSubqueryOnly = false;


sql.SQLPrms-testPartitionBy = true;
sql.SQLPrms-withReplicatedTables = ONEOF true false FOENO;

//without cascade delete
sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
	"create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10) default 'open', tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id), constraint bo_qty_ck check (qty>=0))"
	"create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";

sql.SQLPrms-gfeDDLExtension =
	"trade.securities:random" 
    "trade.customers:random"  
	"trade.networth:random"
	"trade.portfolio:random"
	"trade.sellorders:2"
    "trade.buyorders:random" 
    "trade.txhistory:random"
	"emp.employees:replicate"
	"trade.trades:replicate";
	
sql.SQLPrms-redundancyClause =
	" REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"  
	" REDUNDANCY ${redundantCopies}" 
    " REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}" ;	


management.jmx.JMXPrms-sleepTimeFactor = 4;

hydra.gemfirexd.FabricServerPrms-names = ${B} ${A} ;
hydra.gemfirexd.FabricServerPrms-clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                     (\"${B}\", ${${B}Hosts})"
                                ncf
                                ,
                                 fcn "hydra.TestConfigFcns.generateNames
                                     (\"${A}\", ${${A}Hosts})"
                                ncf;
                                
hydra.gemfirexd.FabricServerPrms-enableStatsGlobally=true;

//enable off-heap size
hydra.GemFirePrms-offHeapMemorySize=200m;
sql.SQLPrms-mbeanTest=true;
hydra.VmPrms-extraVMArgs += "-Dgemfirexd.tableAnalyticsUpdateIntervalSeconds=15";
	