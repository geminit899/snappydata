hydra.Prms-testDescription = " test HA using gfxd thin client driver ";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_client_locator.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;

hydra.Prms-manageDerbyServer = false;
hydra.Prms-totalTaskTimeSec           = 1000;
hydra.Prms-maxResultWaitSec           = 900;
hydra.Prms-maxCloseTaskResultWaitSec  = 2000;
hydra.Prms-serialExecution            = false;	
hydra.gemfirexd.FabricServerPrms-persistDD = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf;


sql.SQLPrms-initCustomersSizePerThread = RANGE 20 50 EGNAR;
sql.SQLPrms-initSecuritiesSizePerThread = RANGE 10 30 EGNAR;                        


sql.SQLPrms-hasNetworth = true;		//will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory";  	
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;
sql.SQLPrms-dropIndex = true;
sql.SQLPrms-createIndex = true;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = RANGE 1 ${redundantCopies} EGNAR;

THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;


THREADGROUP serverThreads
            totalThreads = fcn ${serverHosts} * ${serverVMsPerHost} * ${serverThreadsPerVM} ncf
            totalVMs     = fcn ${serverHosts} * ${serverVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"server\", ${serverHosts}, true)" ncf; 

THREADGROUP edgeThreads
            totalThreads = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM} -1  ncf
            totalVMs     = fcn ${clientHosts} * ${clientVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"client\", ${clientHosts}, true)" ncf;
                                
THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"client\", ${clientHosts}, true)" ncf;      


INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.mbeans.MBeanTest taskMethod = HydraTask_startLocatorWithManagerRole
         threadGroups = locator;         
         
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_initializeFabricServer
         runMode = always
	     threadGroups = ddlThread, serverThreads, edgeThreads;

INITTASK 	taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer_Once
         runMode = always
         threadGroups = serverThreads;
                    
		
INITTASK 	taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startNetworkServer
		runMode = always
		threadGroups =  serverThreads;

INITTASK 	taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_initServers
		runMode = always
		threadGroups =  serverThreads;
		
INITTASK 	taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_initEdges
		threadGroups = edgeThreads, ddlThread, locator;
		
INITTASK 	taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createGFESchemasByClients
		threadGroups = edgeThreads; 	
				
INITTASK 	taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_createDiskStores
	threadGroups = ddlThread;	

INITTASK 	taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFETables
	threadGroups = ddlThread;
	
INITTASK 	taskClass   = sql.SQLTest taskMethod  = HydraTask_createFuncForProcedures
    threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_createProcedures
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_populateTables
	threadGroups = ddlThread;	

INITTASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_prepareTest
	threadGroups = serverThreads,locator;

INITTASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_validateMemberView
	threadGroups = serverThreads;			         

INITTASK      taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_populateDataToBlackBoard
	threadGroups = serverThreads;	
	
TASK taskClass = sql.mbeans.MBeanTest taskMethod = HydraTask_execTest
	threadGroups = edgeThreads, ddlThread;

TASK taskClass = sql.mbeans.MBeanTest taskMethod = HydraTask_callSQLProcs
	threadGroups = edgeThreads, ddlThread
	maxThreads=1; 
	
TASK taskClass = sql.mbeans.MBeanTest taskMethod = HydraTask_createDropTable
	threadGroups = edgeThreads, ddlThread
	maxThreads=1;	  

TASK taskClass = sql.mbeans.MBeanTest taskMethod = HydraTask_createDropIndex
	threadGroups = edgeThreads, ddlThread
	maxThreads=1; 	


//TASK taskClass = sql.mbeans.MBeanTest taskMethod = HydraTask_verifyMBeans
	//threadGroups = serverThreads
	//maxThreads=1; 	

CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_waitForMBeanUpdater
   threadGroups = serverThreads;
   
CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_verifyTableMBeanValues
   threadGroups = serverThreads;
   	
CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_verifyAggregateValues
   threadGroups = serverThreads;
   
CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_printCounters
   threadGroups = serverThreads;
   		
CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_alterTableTest
  threadGroups = ddlThread, serverThreads;	
  
CLOSETASK     taskClass   = sql.mbeans.MBeanTest taskMethod  = HydraTask_checkForError
   threadGroups = serverThreads;
 	
		
hydra.gemfirexd.NetworkServerPrms-names = serverHA;
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = serverHA;
sql.SQLPrms-useGemFireXDHA = true;
sql.SQLPrms-numOfWorkers = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM} ncf;
sql.SQLPrms-useGfxdConfig = true;

sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
	"create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
    "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";

sql.SQLPrms-gfePersistExtension = 
	" PERSISTENT SYNCHRONOUS 'persistSecu' " 
    " PERSISTENT SYNCHRONOUS 'persistCust' "
	" PERSISTENT SYNCHRONOUS 'persistNetworth' "
	" PERSISTENT SYNCHRONOUS 'persistPortf' "
	" PERSISTENT SYNCHRONOUS 'persistSellorders' "  
	" PERSISTENT SYNCHRONOUS 'persistBuyorders' " 
	" PERSISTENT SYNCHRONOUS 'persistTxHistory' "
	" "
	" " ;	
	
sql.SQLPrms-redundancyClause =
	" REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"  
	" REDUNDANCY ${redundantCopies}" 
    " REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}" ;
	
sql.SQLPrms-testUniqIndex = oneof true false foeno;

hydra.VmPrms-extraVMArgs  += "-Xmx1024m";
sql.SQLPrms-useGfxdConfig = true;
//sql.SQLPrms-hasCompanies=true;
//sql.SQLPrms-companiesTableDDLExtension = "trade.companies:random";

sql.SQLPrms-testPartitionBy = true;
sql.SQLPrms-withReplicatedTables = true;
sql.SQLPrms-alterTableDropColumn = true;
sql.mbeans.MBeanPrms-hasMultipleServerGroups = false;

management.jmx.JMXPrms-sleepTimeFactor = 4;
sql.mbeans.MBeanPrms-tests = pulseCounter;
sql.mbeans.MBeanPrms-maxRetries=20;
sql.mbeans.MBeanPrms-retryTimeout=20;
management.jmx.JMXPrms-sleepTimeFactor = 4;
hydra.gemfirexd.FabricServerPrms-enableStatsGlobally=true;
sql.SQLPrms-mbeanTest=true;
//util.StopStartPrms-numVMsToStop = 1;
hydra.VmPrms-extraVMArgs += "-Dgemfirexd.tableAnalyticsUpdateIntervalSeconds=15";
		