hydra.Prms-testDescription = "Test a Full Backup";

/* To Run from a BT:
// Test a Full Backup
sql/backupAndRestore/testBackupRestore.conf
  A = datastore datastoreHosts = 1 datastoreVMsPerHost = 1 datastoreThreadsPerVM = 1
  B = accessor  accessorHosts  = 1 accessorVMsPerHost  = 1 accessorThreadsPerVM  = 3
  C = locator   locatorHosts   = 1 locatorVMsPerHost   = 1 locatorThreadsPerVM   = 1
  ddlThreads      = 1
  redundantCopies = 0
*/

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/gemfirexd/topology_accessor_locator.inc;

THREADGROUP locatorThread
    totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM} ncf
    totalVMs     = fcn ${${C}Hosts} * ${${C}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${C}\", ${${C}Hosts}, true)"  ncf
    ;
THREADGROUP datastore
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM} ncf
    totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf
    ;
THREADGROUP accessor
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM} - ${ddlThreads} ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf
    ;
THREADGROUP ddlThread
    totalThreads = ${ddlThreads}
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf
    ;

INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_initializeFabricServer
         runMode      = always
         threadGroups = datastore, accessor, ddlThread
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createGfxdLocatorTask
         threadGroups = locatorThread
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_startGfxdLocatorTask
         threadGroups = locatorThread
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_startFabricServer
         runMode      = always
         threadGroups = datastore, accessor
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createDiscDB
         threadGroups = ddlThread
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createDiscSchemas
         threadGroups = ddlThread
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createDiscTables
         threadGroups = ddlThread
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createGFESchemas
         threadGroups = ddlThread
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createGFETables
         threadGroups = ddlThread
         ;
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreTest
         taskMethod   = HydraTask_createIndexs
         threadGroups = ddlThread
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_populateTables
         threadGroups = ddlThread
         ;
TASK taskClass    = sql.SQLTest
     taskMethod   = HydraTask_doDMLOp
     threadGroups = accessor, ddlThread
     ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_verifyResultSets
          threadGroups = ddlThread
          ;
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreTest
          taskMethod   = HydraTask_snapShotDiskDirContents
          threadGroups = ddlThread
          ;
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreTest
          taskMethod   = HydraTask_doOnlineBackup
          threadGroups = ddlThread
          ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_stopGfxdLocatorTask
          threadGroups = locatorThread
          ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_stopFabricServer
          threadGroups = ddlThread, accessor
          ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_stopFabricServer
          threadGroups = datastore
          ;
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreTest
          taskMethod   = HydraTask_doRestoreBackup
          threadGroups = ddlThread
          ;
/*
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreTest
          taskMethod   = HydraTask_verifyDiskDirContents
          threadGroups = ddlThread
          ;
*/
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_reStartGfxdTask
          threadGroups = locatorThread, datastore
          ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_reStartGfxdTask
          threadGroups = ddlThread, accessor
          ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_verifyResultSets
          threadGroups = ddlThread
          ;
ENDTASK taskClass    = sql.backupAndRestore.BackupRestoreTest
        taskMethod   = HydraTask_checkDataStoreBytesInUse
        clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\", ${${A}Hosts}, true)" ncf
        sql.backupAndRestore.BackupAndRestorePrms-archiveName = "datastore";
        ;

hydra.Prms-clientShutdownHook     += sql.SQLTest dumpResults;
hydra.Prms-checkTaskMethodsExist   = false;
hydra.gemfirexd.FabricServerPrms-conserveSockets = false; //due to #44545 & #47177
//*** end
hydra.VmPrms-extraVMArgs += "-Dgemfirexd.persist-indexes=true";

hydra.Prms-doStartAndEndTasksLockStep = true;
hydra.Prms-manageDerbyServer          = true;
hydra.Prms-totalTaskTimeSec           = 60;
hydra.Prms-maxResultWaitSec           = 600;
hydra.Prms-maxCloseTaskResultWaitSec  = 600;
hydra.Prms-serialExecution            = false;
hydra.Prms-alwaysDoEndTasks           = true;
hydra.Prms-checkTaskMethodsExist      = false;

//Setting this to a higher number results in more ops per execution
util.TestHelperPrms-minTaskGranularitySec = ${performOpsSec};

sql.backupAndRestore.BackupAndRestorePrms-doBackup = true;

//RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen

INCLUDE $JTESTS/sql/backupAndRestore/backupSQLPrms.conf;
