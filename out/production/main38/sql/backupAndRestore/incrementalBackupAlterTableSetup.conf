hydra.Prms-testDescription = "Test Full and Incremental backups test";

/*
sql/backupAndRestore/testIncrementalBackupWithAlterTable.conf
  A = server  serverHosts  = 4 serverVMsPerHost  = 1 serverThreadsPerVM  = 2
  B = client  clientHosts  = 2 clientVMsPerHost  = 2 clientThreadsPerVM  = 10
  C = locator locatorHosts = 1 locatorVMsPerHost = 1 locatorThreadsPerVM = 1
  redundantCopies = 1
  maxOplogSize    = 1
  performOpsSec   = 60
  nbrOfExecutions = 5
*/

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/gemfirexd/topology_client_locator.inc;

THREADGROUP locatorThread
            totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${C}\", ${${C}Hosts}, true)"  ncf
            ;
THREADGROUP ddlThread
            totalThreads = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf
            ;
THREADGROUP serverThreads
            totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM} -1 ncf
            totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf
            ;
THREADGROUP clientThreads
            totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM} ncf
            totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf
            ;

INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_createGfxdLocatorTask
         threadGroups = locatorThread
         ;
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_startGfxdLocatorTask
         runMode      = always
         threadGroups = locatorThread
         ;
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_initializeServer
         runMode      = always
         threadGroups = serverThreads
         ;
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_startFabricServer
         runMode      = always
         threadGroups = serverThreads
         ;
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_startNetworkServer
         runMode      = always
         threadGroups = serverThreads
         ;
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_initClient
         runMode      = always
         threadGroups = clientThreads, ddlThread
         ;
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_createDiscDB
         threadGroups = ddlThread
         ;
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_createDiscSchemas
         threadGroups = ddlThread
         ;
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_createDiscTables
         threadGroups = ddlThread
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createGFESchemas
         threadGroups = ddlThread
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createGFETables
         threadGroups = ddlThread
         ;
//INITTASK taskClass    = sql.backupAndRestore.BackupRestoreTest
     //    taskMethod   = HydraTask_createIndexs
     //    threadGroups = ddlThread
     //    ;
     
//set table colomun info for each used by index creation, need only one thread to set in the BB
INITTASK taskClass   = sql.SQLTest taskMethod  = HydraTask_setTableCols
	     threadGroups = ddlThread
	     ;
 
INITTASK taskClass   = sql.SQLTest taskMethod  = HydraTask_createIndex
	     threadGroups = ddlThread
	     ;
     
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_populateTables
         threadGroups = ddlThread
         ;

INITTASK taskClass    = sql.backupAndRestore.BackupRestoreTest
         taskMethod   = HydraTask_doOnlineBackup
         threadGroups = serverThreads
         ;
         
INITTASK taskClass    = sql.view.ViewTest         
     taskMethod   = HydraTask_alterTableDropColumn
     threadGroups = ddlThread
     ;
     
TASK taskClass    = sql.backupAndRestore.BackupRestoreTest
     taskMethod   = HydraTask_backupLeader
     threadGroups = ddlThread
     ;
     
TASK taskClass    = sql.backupAndRestore.BackupRestoreTest
     taskMethod   = HydraTask_doOpsAndWait
     threadGroups = clientThreads
     ;

CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreTest
          taskMethod   = HydraTask_snapShotDiskDirContents
          threadGroups = serverThreads
          ;

hydra.VmPrms-extraVMArgs += "-Dgemfirexd.persist-indexes=true";
hydra.VmPrms-extraVMArgs  = fcn "hydra.TestConfigFcns.duplicate (\"-Xmx128m\", ${locatorHosts}, true)" ncf,
                            fcn "hydra.TestConfigFcns.duplicate (\"-Xms512m -Xmx512m\", ${serverHosts}, true)" ncf,
                            fcn "hydra.TestConfigFcns.duplicate (\"-Xmx256m \", ${clientHosts}, true)" ncf
                            ;

hydra.VmPrms-extraClassPaths += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths += $GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar;
hydra.VmPrms-extraClassPaths += $GEMFIRE/../product-gfxd/lib/gemfirexd-tools.jar;
hydra.VmPrms-extraClassPaths += $GEMFIRE/../product-gfxd/lib/jline-1.0.jar;
hydra.VmPrms-extraClassPaths += $GEMFIRE/lib/griddb-dependencies.jar;

hydra.VmPrms-extraClassPaths += "/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derby.jar";
hydra.VmPrms-extraClassPaths += "/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbynet.jar";
hydra.VmPrms-extraClassPaths += "/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbyclient.jar";
hydra.VmPrms-extraClassPaths += "/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbytools.jar";
hydra.VmPrms-extraClassPaths += $JTESTS;

hydra.Prms-derbyServerClassPath    = "/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbynet.jar";
hydra.Prms-extraDerbyServerVMArgs += " -Xmx1024m -Dderby.storage.pageCacheSize=32000 -Dderby.locks.waitTimeout=30 -Dderby.locks.deadlockTimeout=20 ";

hydra.Prms-alwaysDoEndTasks           = true;
hydra.Prms-checkTaskMethodsExist      = false;
hydra.Prms-doStartAndEndTasksLockStep = true;
hydra.Prms-manageDerbyServer          = true;
hydra.Prms-serialExecution            = false;
sql.SQLPrms-alterTableDropColumn      = true;
sql.SQLPrms-createIndex               = true;
sql.SQLPrms-dropIndex                 = true;     

hydra.Prms-maxCloseTaskResultWaitSec = 2200;
hydra.Prms-maxResultWaitSec          = 2400;
hydra.Prms-totalTaskTimeSec          = 900; // test terminated by nbrExecutions

//Setting this to a higher number results in more ops per execution
util.TestHelperPrms-minTaskGranularitySec = ${performOpsSec};

hydra.gemfirexd.FabricServerPrms-conserveSockets   = false;      // due to #44545 & #47177
hydra.gemfirexd.NetworkServerPrms-names            = server;
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = server;

//Setting this to a low value (in MB) will result in more (oplog) files to backup
hydra.DiskStorePrms-maxOplogSize = ${maxOplogSize};

sql.backupAndRestore.BackupAndRestorePrms-doBackup           = true;
sql.backupAndRestore.BackupAndRestorePrms-incrementalBackups = true;
sql.backupAndRestore.BackupAndRestorePrms-backupPath         = default;
sql.backupAndRestore.BackupAndRestorePrms-nbrOfExecutions    = ${nbrOfExecutions};
sql.backupAndRestore.BackupAndRestorePrms-restartDuringTest  = false;
sql.backupAndRestore.BackupAndRestorePrms-stopVmsDuringTest  = false;

INCLUDE $JTESTS/sql/backupAndRestore/backupGFXDPrms.conf;
