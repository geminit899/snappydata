//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------
hydra.Prms-testDescription = "Test Full and Incremental backups test with a large
amount of data.";

//------------------------------------------------------------------------------
// SAMPLE BT
//------------------------------------------------------------------------------
/*
sql/backupAndRestore/testIncrementalBackupBigData.conf
  A = normal  normalserverHosts = 1 normalserverVMsPerHost = 4 normalserverThreadsPerVM = 1
  B = backup  backupserverHosts = 1 backupserverVMsPerHost = 1 backupserverThreadsPerVM = 1
  C = client  clientHosts       = 1 clientVMsPerHost       = 2 clientThreadsPerVM       = 10
  D = locator locatorHosts      = 1 locatorVMsPerHost      = 1 locatorThreadsPerVM      = 1
  javaHeapStartGB        = 1
  javaHeapMaxGB          = 2
  maxOplogSize           = 15
  initialDataMB          = 256
  desiredDataOpsMB       = 2048
  backupAfterMBofData    = 256
  nbrTables              = 10
  nbrLobColumns          = 3
  evictionHeapPercentage = 70
  insertPercent          = 80
  updatePercent          = 10
  deletePercent          = 10
  maxValidationErrors    = 50
*/

//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------
INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/gemfirexd/topology_client_2_locator.inc;
INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage = 0;

//------------------------------------------------------------------------------
// THREADGROUPS
//------------------------------------------------------------------------------
THREADGROUP locatorThread
            totalThreads = fcn ${${D}Hosts} * ${${D}VMsPerHost} * ${${D}ThreadsPerVM} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${D}\", ${${D}Hosts}, true)"  ncf
            ;
// Client ThreadGroups
THREADGROUP clientThreads
            totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM} -1 ncf
            totalVMs     = fcn ${${C}Hosts} * ${${C}VMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${C}\", ${${C}Hosts}, true)" ncf
            ;
// Another Client ThreadGroup, to be used when we need just a single client thread.
THREADGROUP ddlThread
            totalThreads = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${C}\", ${${C}Hosts}, true)" ncf
            ;
// Server ThreadGroups
THREADGROUP serverThreads
            totalThreads = fcn ${${A}serverHosts} * ${${A}serverVMsPerHost} * ${${A}serverThreadsPerVM} ncf
            totalVMs     = fcn ${${A}serverHosts} * ${${A}serverVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}server\", ${${A}serverHosts}, true)" ncf
            ;
// Another Server ThreadGroup, to be used for performing backups & restores
THREADGROUP backupThread
            totalThreads = fcn ${${B}serverHosts} * ${${B}serverVMsPerHost} * ${${B}serverThreadsPerVM} ncf
            totalVMs     = fcn ${${B}serverHosts} * ${${B}serverVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}server\", ${${B}serverHosts}, true)" ncf
            ;

//------------------------------------------------------------------------------
// TASKS
//------------------------------------------------------------------------------
// Before starting the test, ensure the parameters are valid
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_checkParameters
         threadGroups = ddlThread
         ;
// Initialize Locators
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_createGfxdLocatorTask
         threadGroups = locatorThread
         ;
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_startGfxdLocatorTask
         runMode      = always
         threadGroups = locatorThread
         ;
// Initialize Test
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_initializeTest
         threadGroups = ddlThread, clientThreads, backupThread, serverThreads
         ;
// Initialize Servers
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_initializeServer
         runMode      = always
         threadGroups = backupThread, serverThreads
         ;
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_startFabricServer
         runMode      = always
         threadGroups = backupThread, serverThreads
         ;
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_startNetworkServer
         runMode      = always
         threadGroups = backupThread, serverThreads
         ;
// Initialize Clients
INITTASK taskClass    = sql.view.ViewTest
         taskMethod   = HydraTask_initClient
         runMode      = always
         threadGroups = ddlThread, clientThreads
         ;
// Establish Client Connections
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_getGFXDConnection
         threadGroups = ddlThread, clientThreads
         ;
// Use the DDL Client to Generate the Table Definitions
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_generateTableDefinitions
         threadGroups = ddlThread
         ;
// Use the DDL Client to Create the Tables
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_createTables
         threadGroups = ddlThread
         ;
// Use the DDL Client to Create the Indexes
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_createIndexes
         threadGroups = ddlThread
         ;
// Initialize the Prepared Statements for all Clients
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_createPreparedStatements
         threadGroups = ddlThread, clientThreads
         ;
// Start the Timer for the beginning of the data initialization
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_clickStopWatch
         threadGroups = ddlThread
         sql.backupAndRestore.BackupAndRestorePrms-timingKeySuffix = "-dataInitialization-Start"
         ;
// Use all Clients to perform Data Initialization
//  - until the initialDataMB has been met
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_doDataInitialization
         threadGroups = ddlThread, clientThreads
         batch
         ;
// Stop the Timer for the end of the data initialization
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_clickStopWatch
         threadGroups = ddlThread
         sql.backupAndRestore.BackupAndRestorePrms-timingKeySuffix = "-dataInitialization-Stop"
         ;
// Use all Clients to setup the OpTrackers that will be used to track Updates & Deletes
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_setupOpTrackers
         threadGroups = ddlThread, clientThreads
         ;
// Use the backupThread to perform the initial full backup
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_doFullOnlineBackup
         threadGroups = backupThread
         ;
// Start the Timer for the beginning of the random operations
INITTASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
         taskMethod   = HydraTask_clickStopWatch
         threadGroups = ddlThread
         sql.backupAndRestore.BackupAndRestorePrms-timingKeySuffix = "-randomOps-Start"
         ;
// The main Client task to perform random data operations (Inserts, Updates & Deletes)
//  - until the desiredDataOpsMB has been met
TASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
     taskMethod   = HydraTask_doRandomOps
     threadGroups = ddlThread, clientThreads
     ;
// The main Server task to perform incremental backups and to monitor the data throughput in order to know
//   when to stop the test
TASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
     taskMethod   = HydraTask_doBackups
     threadGroups = backupThread
     ;
// Stop the Timer for the end of the random operations
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_clickStopWatch
          threadGroups = ddlThread
          sql.backupAndRestore.BackupAndRestorePrms-timingKeySuffix = "-randomOps-Stop"
          ;
// Snapshot the row counts to be used later in validation
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_snapShotRowCounts
          threadGroups = ddlThread
          ;
// Stop the Fabric Server
CLOSETASK taskClass    = sql.view.ViewTest
          taskMethod   = HydraTask_stopFabricServer
          threadGroups = backupThread, serverThreads
          ;
// Stop the Locator
CLOSETASK taskClass    = sql.view.ViewTest
          taskMethod   = HydraTask_stopGfxdLocatorTask
          threadGroups = locatorThread
          ;
// Start the Timer for the beginning of the data restoration
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_clickStopWatch
          threadGroups = ddlThread
          sql.backupAndRestore.BackupAndRestorePrms-timingKeySuffix = "-dataRestoration-Start"
          ;
// Perform a Restore of the backup files (after deleting the data files)
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_doRestoreBackup
          threadGroups = backupThread
          ;
// Stop the Timer for the end of the data restoration
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_clickStopWatch
          threadGroups = ddlThread
          sql.backupAndRestore.BackupAndRestorePrms-timingKeySuffix = "-dataRestoration-Stop"
          ;
// Start the Timer for the beginning of the data restart of GemFireXD
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_clickStopWatch
          threadGroups = ddlThread
          sql.backupAndRestore.BackupAndRestorePrms-timingKeySuffix = "-restartGemFireXD-Start"
          ;
// Restart GemFireXD
CLOSETASK taskClass    = sql.view.ViewTest
          taskMethod   = HydraTask_reStartGfxdTask
          threadGroups = locatorThread, backupThread, serverThreads
          ;
// Stop the Timer for the end of the data restart of GemFireXD
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_clickStopWatch
          threadGroups = ddlThread
          sql.backupAndRestore.BackupAndRestorePrms-timingKeySuffix = "-restartGemFireXD-Stop"
          ;
// Restart the Network Server
CLOSETASK taskClass    = sql.view.ViewTest
          taskMethod   = HydraTask_startNetworkServer
          threadGroups = backupThread, serverThreads
          ;
// Initialize Clients
CLOSETASK taskClass    = sql.view.ViewTest
          taskMethod   = HydraTask_initClient
          threadGroups = ddlThread, clientThreads
          ;
// Establish Client Connections
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_getGFXDConnection
          threadGroups = ddlThread, clientThreads
          ;
// Verify the row counts established earlier
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_verifyRowCounts
          threadGroups = ddlThread
          ;
// Start the Timer for the beginning of the data validation
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_clickStopWatch
          threadGroups = ddlThread
          sql.backupAndRestore.BackupAndRestorePrms-timingKeySuffix = "-dataValidation-Start"
          ;
// Perform 100% data Validation
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_validateData
          threadGroups = ddlThread, clientThreads
          batch
          ;
// Stop the Timer for the end of the data validation
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreBigDataTest
          taskMethod   = HydraTask_clickStopWatch
          threadGroups = ddlThread
          sql.backupAndRestore.BackupAndRestorePrms-timingKeySuffix = "-dataValidation-Stop"
          ;
// Log the Test Results Report
ENDTASK taskClass   = sql.backupAndRestore.BackupRestoreBigDataTest
        taskMethod  = HydraTask_testDataReport
        clientNames = fcn "hydra.TestConfigFcns.generateNames(\"${A}server\", ${${A}serverHosts}, true)" ncf
        ;
// Use VSD to validate the data counts
ENDTASK taskClass   = sql.backupAndRestore.BackupAndRestoreUtils
        taskMethod  = CheckDataStoreBytesInUse
        clientNames = fcn "hydra.TestConfigFcns.generateNames(\"${A}server\", ${${A}serverHosts}, true)" ncf
        ;

//------------------------------------------------------------------------------
// MISC TUNING SETTINGS
//------------------------------------------------------------------------------
hydra.VmPrms-extraVMArgs += "-Dgemfirexd.persist-indexes=true";
hydra.VmPrms-extraVMArgs += fcn "hydra.TestConfigFcns.duplicate (\"-Xmx128m\", ${locatorHosts}, true)" ncf,
                            fcn "hydra.TestConfigFcns.duplicate (\"-Xms${javaHeapStartGB}g -Xmx${javaHeapMaxGB}g\", ${${A}serverHosts}, true)" ncf,
                            fcn "hydra.TestConfigFcns.duplicate (\"-Xmx512m \", ${clientHosts}, true)" ncf
                            ;

hydra.gemfirexd.NetworkServerPrms-names            = server;
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = server;

//Setting this to a low value (in MB) will result in more (oplog) files to backup
hydra.DiskStorePrms-maxOplogSize = ${maxOplogSize};

hydra.Prms-maxResultWaitSec          = 1200;
hydra.Prms-totalTaskTimeSec          = 7200;
hydra.Prms-maxCloseTaskResultWaitSec = 1200;
hydra.Prms-alwaysDoEndTasks          = true;

util.TestHelperPrms-minTaskGranularitySec = 600;  //Default is 30

sql.SQLPrms-useGfxdConfig = true;

sql.backupAndRestore.BackupAndRestorePrms-initialDataMB           = ${initialDataMB};          // use this pre-load the data in HydraTask_doDataInitialization
sql.backupAndRestore.BackupAndRestorePrms-desiredDataOpsMB        = ${desiredDataOpsMB};       // use this in HydraTask_doRandomOps to perform ops till the data size is met
sql.backupAndRestore.BackupAndRestorePrms-backupAfterMBofData     = ${backupAfterMBofData};    // use this in HydraTask_doBackups to determine when backups will be executed
sql.backupAndRestore.BackupAndRestorePrms-nbrTables               = ${nbrTables};              // use this to specify the number of tables to generate
sql.backupAndRestore.BackupAndRestorePrms-nbrColumnsPerTable      = RANGE 6 15 EGNAR;          // use this to randomly determine the number of columns per table
sql.backupAndRestore.BackupAndRestorePrms-columnType              = ONEOF INTEGER VARCHAR DATE FOENO; //use this to randomly determine the type of each column
sql.backupAndRestore.BackupAndRestorePrms-varCharLength           = RANGE 100 1000 EGNAR;      // use this to randomly determine the length of each VARCHAR column
sql.backupAndRestore.BackupAndRestorePrms-nbrLobColumns           = ${nbrLobColumns};          // use this to specify the number of lob columns that will be in the test
sql.backupAndRestore.BackupAndRestorePrms-lobColumnType           = CLOB;                      // the type of the lob column
sql.backupAndRestore.BackupAndRestorePrms-lobLength               = ONEOF 1K 2K 10K 50K 100K 200K 1M FOENO; // randomly chosen length of each lob column
sql.backupAndRestore.BackupAndRestorePrms-reusePreparedStatements = ONEOF true false FOENO;    // whether to reuse the prepared statements over again
sql.backupAndRestore.BackupAndRestorePrms-extraTableClause        = "PERSISTENT PARTITION BY PRIMARY KEY EVICTION BY LRUHEAPPERCENT EVICTACTION OVERFLOW";
sql.backupAndRestore.BackupAndRestorePrms-evictionHeapPercentage  = ${evictionHeapPercentage}; // use this ensure enough Java Heap Space during data creation
                                           // insertPercent, deletePercent, and updatePercent should total 100%
sql.backupAndRestore.BackupAndRestorePrms-insertPercent           = ${insertPercent};          // use this specify the percentage of inserts during the HydraTask_doRandomOps portion of the test
sql.backupAndRestore.BackupAndRestorePrms-deletePercent           = ${deletePercent};          // use this specify the percentage of updates during the HydraTask_doRandomOps portion of the test
sql.backupAndRestore.BackupAndRestorePrms-updatePercent           = ${updatePercent};          // use this specify the percentage of deletes during the HydraTask_doRandomOps portion of the test
sql.backupAndRestore.BackupAndRestorePrms-maxValidationErrors     = ${maxValidationErrors};    // use this to stop the HydraTask_validateData task if too many errors are found. -1 indicates all (don't stop the test)

sql.backupAndRestore.BackupAndRestorePrms-doBackup           = true;
sql.backupAndRestore.BackupAndRestorePrms-incrementalBackups = true;
sql.backupAndRestore.BackupAndRestorePrms-backupPath         = default;
