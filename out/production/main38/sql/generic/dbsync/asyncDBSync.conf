//----------------------------------------------------------------------------
//    sql/generic/dbsync/asyncDBSync.conf
//    A=store storeHosts=1 storeVMsPerHost=4 storeThreadsPerVM=1
//    B=accessor accessorHosts=1 accessorVMsPerHost=2 accessorThreadsPerVM=6
//    isHA=true numVMsToStop = 1
//    withServerGroup = false
//---------------------------------------------------------------------------- 

hydra.Prms-testDescription = "GFXD DBSync tests";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_2_locator.inc;

hydra.Prms-totalTaskTimeSec           = 200;
hydra.Prms-maxResultWaitSec           = 600;
hydra.Prms-maxCloseTaskResultWaitSec  = 300;

sql.SQLPrms-hasAsyncDBSync = true;
hydra.Prms-manageDerbyServer = true;
hydra.gemfirexd.FabricServerPrms-hostData = false true false;
hydra.gemfirexd.FabricServerPrms-persistDD = true true false;

sql.generic.SQLGenericPrms-hasServerGroups = ${withServerGroup};
sql.SQLPrms-serverGroups = random, random, random;

hydra.VmPrms-extraVMArgs += "-XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=70";
hydra.VmPrms-extraVMArgs = fcn "hydra.TestConfigFcns.duplicate
                                (\"-Dnone\", ${locatorHosts}, true)"
                           ncf
                           ,
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms512m -Xmx1024m\", ${${A}Hosts}, true)"
                           ncf
                           ,
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xmx256m\", ${${B}Hosts}, true)"
                           ncf;
                                                         
// legacy parameters - should be removed later
sql.SQLPrms-useGfxdConfig = true;
//hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
//hydra.VmPrms-extraClassPaths        += $JTESTS;

include $JTESTS/sql/generic/dbsync/TradeSchemaDBSync.inc;

hydra.GemFirePrms-roles +=  fcn "hydra.TestConfigFcns.duplicate
                                  (\"gemfirexd.datastore \", ${${A}Hosts}, false)"
                             ncf 
                             
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"gemfirexd.accessor \", ${${B}Hosts}, false)"
                             ncf 
                             ;
                             
//------------------------- thread groups ----------------------------------
THREADGROUP locatorThreads
            totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
            totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\", ${locatorHosts}, true)" ncf;    
         
THREADGROUP dataStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) - 2 " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost}) - 2 " ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\", ${${A}Hosts}, true)" ncf;
            
THREADGROUP asynchDBThreads
            totalThreads = 2
            totalVMs     = 2
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;                                
THREADGROUP verifyThreads
            totalThreads = fcn "${${B}Hosts} * ${${B}VMsPerHost}" ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",${${B}Hosts}, true)" ncf; 
                                
THREADGROUP accessorThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) - ((${${B}Hosts} * ${${B}VMsPerHost}) + 1)  " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", ${${B}Hosts}, true)" ncf;  

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\", ${${B}Hosts}, true)" ncf; 
                        
//------------------------- init gfxd cluster ----------------------------------                                                                           
INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_initialize
    runMode = always
    sql.generic.SQLGenericPrms-memberType = locator
    threadGroups = locatorThreads;

INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_initialize
    runMode = always
    sql.generic.SQLGenericPrms-memberType = datastore
    threadGroups = dataStoreThreads;

INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_initialize
    runMode = always
    sql.generic.SQLGenericPrms-memberType = DBSyncDatastore
    threadGroups = asynchDBThreads;

INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_initialize
    runMode = always
    sql.generic.SQLGenericPrms-memberType = accessor
    threadGroups = verifyThreads;

INITTASK taskClass = sql.generic.SQLTestExecutor taskMethod = HydraTask_createGfxdLocatorTask
    threadGroups = locatorThreads;
         
INITTASK taskClass = sql.generic.SQLTestExecutor taskMethod = HydraTask_startGfxdLocatorTask
    runMode = always
    threadGroups = locatorThreads;

INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_startFabricServer
	runMode = always
	threadGroups = asynchDBThreads, dataStoreThreads;

INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_startFabricServer
	runMode = always
	threadGroups = verifyThreads;
	                                                
include $JTESTS/sql/generic/derby.inc;

//---------------------- create gfxd database -----------------------------------  
INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_createGFESchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_createDiskStores
		threadGroups = ddlThread;

/*
INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_createUDTPriceType
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_createUUIDType
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = hydraTask_createUDTPriceFunctions
	threadGroups = ddlThread;				
*/

INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_createGFETables
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_createDBSynchronizer
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_startDBSynchronizer
	threadGroups = ddlThread;
	
/*	
INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_createFuncForProcedures
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_createFuncForSubquery
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_createFunctionToPopulate
	threadGroups = ddlThread;
*/

//--------------------- load data -----------------------------------------------------
INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_populateTables
	threadGroups = accessorThreads;	

INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_putLastKeyDBSynchronizer
	 threadGroups = ddlThread;

INITTASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_verifyResultSets
	 threadGroups = verifyThreads;
	 	 	
// HA
include $JTESTS/sql/generic/gfxdHa.inc;

//do operations             	
TASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_doDMLOp
	 threadGroups = accessorThreads, verifyThreads, ddlThread;
			
// verify after TASK
CLOSETASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_putLastKeyDBSynchronizer
	 threadGroups = ddlThread;
	 			
CLOSETASK     taskClass   = sql.generic.SQLTestExecutor taskMethod  = HydraTask_verifyResultSets
	 threadGroups = verifyThreads;

//---------------- shutdown database -----------------------------------
CLOSETASK taskClass = sql.generic.SQLTestExecutor taskMethod  = HydraTask_shutDownAllFabricServers
	      threadGroups = verifyThreads;

CLOSETASK taskClass = sql.generic.SQLTestExecutor taskMethod  = HydraTask_shutDownAllFabricServers
	      threadGroups = dataStoreThreads;

// failure post mortem 
include $JTESTS/sql/generic/failurePostMortem.inc ;
	 				


