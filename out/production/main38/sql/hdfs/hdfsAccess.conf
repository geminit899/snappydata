hydra.Prms-testDescription = " ";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/gemfirexd/topology_accessor_locator.inc;

THREADGROUP locator
    totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${C}\", ${${C}Hosts}, true)"  ncf;

THREADGROUP datastore
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM} ncf
    totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf;

THREADGROUP ddl
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

THREADGROUP validator
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

THREADGROUP accessor
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                       - (${${B}Hosts} * ${${B}VMsPerHost} + 1) ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

STARTTASK taskClass   = hdfs.HDFSUtil
          taskMethod  = configureHadoopTask
          clientNames = accessor1
          ;
STARTTASK taskClass   = hdfs.HDFSUtil
          taskMethod  = startCluster
          clientNames = accessor1
          ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createGfxdLocatorTask
         threadGroups = locator
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_startGfxdLocatorTask
         threadGroups = locator
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_initializeFabricServer
         runMode      = always
	       threadGroups = locator, datastore, accessor, ddl, validator
	       ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_startFabricServer_Once
         runMode      = always
         threadGroups = datastore, validator
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createGFESchemas
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createDiskStores
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createHDFSSTORE
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createGFETables
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_populateTables
	       threadGroups = ddl
	       ;
INITTASK taskClass    = sql.SQLTest
	       taskMethod   = HydraTask_verifyHdfsNonOperationData
	       threadGroups = validator
	       ;
INITTASK taskClass    = sql.SQLTest
	       taskMethod   = HydraTask_verifyHdfsOperationalData
	       threadGroups = validator
	       ;
TASK taskClass    = sql.SQLTest
     taskMethod   = HydraTask_doDMLOp
     threadGroups = accessor, ddl, validator
     ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_verifyHdfsNonOperationData
          threadGroups = validator
          ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_verifyHdfsOperationalData
          threadGroups = validator
          ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_shutDownDB
	        threadGroups = validator
	        ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_shutDownDB
	        threadGroups = datastore
	        ;
ENDTASK taskClass   = hdfs.HDFSUtil
        taskMethod  = stopCluster
        clientNames = accessor1
        ;

hydra.VmPrms-extraClassPaths      += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
//*** From local conf
hydra.VmPrms-extraClassPaths +=
  fcn "hydra.TestConfigFcns.duplicate(\"none\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${A}Hosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${B}Hosts})" ncf
  ;

hydra.VmPrms-extraClassPaths      += "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derby.jar";
hydra.VmPrms-extraClassPaths      += "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbyclient.jar";
hydra.Prms-derbyServerClassPath   += "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbynet.jar";
hydra.Prms-extraDerbyServerVMArgs += " -Xmx1024m -Dderby.storage.pageCacheSize=32000 -Dderby.locks.waitTimeout=30 -Dderby.locks.deadlockTimeout=20 ";
hydra.Prms-clientShutdownHook     += sql.SQLTest dumpResults;
hydra.Prms-checkTaskMethodsExist   = false;
hydra.gemfirexd.FabricServerPrms-conserveSockets = false; //due to #44545 & #47177
//*** end

hydra.Prms-manageDerbyServer         = false;
hydra.Prms-totalTaskTimeSec          = 60;
hydra.Prms-maxResultWaitSec          = 600;
hydra.Prms-maxCloseTaskResultWaitSec = 600;
hydra.Prms-serialExecution           = false;
hydra.Prms-alwaysDoEndTasks          = true;
hydra.Prms-checkTaskMethodsExist     = false;

// Hadoop Configuration
hydra.ConfigPrms-hadoopConfig  = hdfs;
hydra.HadoopPrms-names         = hdfs;
hydra.gemfirexd.HDFSStorePrms-hadoopName = hdfs;

// HDFS Configuration
hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig  = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-names         = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-homeDir       = gemfirexd_data;
hydra.gemfirexd.HDFSStorePrms-diskStoreName = hdfsDiskStore;
hydra.gemfirexd.DiskStorePrms-names         = hdfsDiskStore;

sql.hdfs.HDFSTestPrms-useRandomConfig = false;
//sql.hdfs.HDFSTestPrms-useRandomConfig = ONEOF true false FOENO;

// SQL Parms
sql.SQLPrms-dmlTables            = "trade.securities" ;
sql.SQLPrms-dmlOperations        = ONEOF insert query query query delete FOENO;
//sql.SQLPrms-dmlOperations        = ONEOF insert update update update query query query delete FOENO;
//Failed Statement is: update trade.securities set price = ? where sec_id = ? with 2 parameters ;value=17.990000000000002,type=0;value=7,type=0
//ERROR 0A000: Feature not implemented: Update of partitioning column not supported.
sql.SQLPrms-testPartitionBy      = true;
sql.SQLPrms-withReplicatedTables = false;
sql.SQLPrms-testMultiTableJoin   = ${testMultiTableJoin};
sql.SQLPrms-testUniqueKeys       = ${testUniqueKeys};
sql.SQLPrms-hasNetworth          = true;		//will create networth table - legacy flag
sql.SQLPrms-useGfxdConfig        = true;
sql.SQLPrms-hasHDFS              = true;
sql.SQLPrms-initCustomersSizePerThread = 200; //make it 1 if we want to avoid bulk insert to customers.
sql.SQLPrms-createDiskStore      = "create diskstore hdfsDiskStore 'hdfsDiskStore'" ;

sql.SQLPrms-createSchemas = "create schema trade" ;

sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
 ;

sql.SQLPrms-gfeDDLExtension =
    "${securities}"
 ;

sql.SQLPrms-redundancyClause =
  " REDUNDANCY ${redundantCopies}"
 ;

sql.SQLPrms-hdfsDDLExtn =
  " HDFSSTORE (sqlhdfsStore)"
  ;
