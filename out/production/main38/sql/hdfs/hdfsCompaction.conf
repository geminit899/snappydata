hydra.Prms-testDescription = "GemFireXD test to verify compaction with HDFS, operations from accessors.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/gemfirexd/topology_accessor_locator.inc;

THREADGROUP locator
    totalThreads = fcn ${${C}Hosts} * ${${C}VMsPerHost} * ${${C}ThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${C}\", ${${C}Hosts}, true)"  ncf;

THREADGROUP datastore
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM} ncf
    totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf;

THREADGROUP ddl
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

THREADGROUP validator
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

THREADGROUP accessor
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                       - (${${B}Hosts} * ${${B}VMsPerHost} + 1) ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

STARTTASK taskClass   = hdfs.HDFSUtil
          taskMethod  = configureHadoopTask
          clientNames = locator1
          ;
STARTTASK taskClass   = hdfs.HDFSUtil
          taskMethod  = startCluster
          clientNames = locator1
          ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createGfxdLocatorTask
         threadGroups = locator
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_startGfxdLocatorTask
         threadGroups = locator
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_initializeFabricServer
         runMode      = always
	       threadGroups = locator, datastore, accessor, ddl, validator
	       ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_startFabricServer_Once
         runMode      = always
         threadGroups = datastore, validator
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createGFESchemas
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createDiskStores
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createHDFSSTORE
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_createGFETables
         threadGroups = ddl
         ;
INITTASK taskClass    = sql.hdfs.HDFSSqlTest
         taskMethod   = HydraTask_initCompactionListener
	       threadGroups = datastore
         ;
INITTASK taskClass    = sql.SQLTest
         taskMethod   = HydraTask_populateTables
	       threadGroups = ddl
	       ;
INITTASK taskClass    = sql.SQLTest
	       taskMethod   = HydraTask_verifyHdfsNonOperationData
	       threadGroups = validator
	       ;
INITTASK taskClass    = sql.SQLTest
	       taskMethod   = HydraTask_verifyHdfsOperationalData
	       threadGroups = validator
	       ;
TASK taskClass    = sql.SQLTest
     taskMethod   = HydraTask_doDMLOp
     threadGroups = accessor, ddl
     ;
TASK taskClass    = sql.hdfs.HDFSSqlTest
     taskMethod   = HydraTask_waitForCompaction
     threadGroups = validator
     ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_verifyHdfsNonOperationData
          threadGroups = validator
          ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_verifyHdfsOperationalData
          threadGroups = validator
          ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_shutDownDB
	        threadGroups = validator
	        ;
CLOSETASK taskClass    = sql.SQLTest
          taskMethod   = HydraTask_shutDownDB
	        threadGroups = datastore
	        ;
ENDTASK taskClass   = hdfs.HDFSUtil
        taskMethod  = stopCluster
        clientNames = locator1
        ;

hydra.VmPrms-extraVMArgs     += "-Dhoplog.janitor.interval.secs=${hoplogJanitorIntervalSecs}";
hydra.VmPrms-extraClassPaths += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
//*** From local conf
hydra.VmPrms-extraClassPaths +=
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${locatorHosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${A}Hosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${B}Hosts})" ncf
  ;

hydra.VmPrms-extraClassPaths      += "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derby.jar";
hydra.VmPrms-extraClassPaths      += "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbyclient.jar";
hydra.Prms-derbyServerClassPath   += "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbynet.jar";
hydra.Prms-extraDerbyServerVMArgs += " -Xmx1024m -Dderby.storage.pageCacheSize=32000 -Dderby.locks.waitTimeout=30 -Dderby.locks.deadlockTimeout=20 ";
hydra.Prms-clientShutdownHook     += sql.SQLTest dumpResults;
hydra.Prms-checkTaskMethodsExist   = false;
hydra.gemfirexd.FabricServerPrms-conserveSockets = false; //due to #44545 & #47177
//*** end

hydra.Prms-manageDerbyServer         = false;
hydra.Prms-totalTaskTimeSec          = 360; // test is workload based
hydra.Prms-maxResultWaitSec          = 600;
hydra.Prms-maxCloseTaskResultWaitSec = 600;
hydra.Prms-serialExecution           = false;
hydra.Prms-alwaysDoEndTasks          = true;
hydra.Prms-checkTaskMethodsExist     = false;

// Hadoop Configuration
hydra.ConfigPrms-hadoopConfig  = hdfs;
hydra.HadoopPrms-names         = hdfs;
hydra.gemfirexd.HDFSStorePrms-hadoopName = hdfs;

// HDFS Configuration - START  //
sql.SQLPrms-hasHDFS                        = true;
sql.hdfs.HDFSTestPrms-useRandomConfig         = false;
sql.hdfs.HDFSTestPrms-desiredMinorCompactions = ${desiredMinorCompactions};
sql.hdfs.HDFSTestPrms-desiredMajorCompactions = ${desiredMajorCompactions};
sql.hdfs.HDFSTestPrms-isCompactionTest        = true;
 
hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig           = sqlhdfsStore;
hydra.gemfirexd.DiskStorePrms-names                  = hdfsDiskStore;
hydra.gemfirexd.HDFSStorePrms-names                  = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-homeDir                = gemfirexd_data;
hydra.gemfirexd.HDFSStorePrms-diskStoreName          = hdfsDiskStore;  //disk store name for overflow or persistence of HDFS event queue.
hydra.gemfirexd.HDFSStorePrms-batchSize            = 5;              //The size of batches sent to HDFS in MB. Default is 5 MB.
hydra.gemfirexd.HDFSStorePrms-batchTimeInterval      = 5000;           //Sets the batch time interval for a HDFS queue. This is the maximum time interval that can elapse before a batch of data from a bucket is sent to HDFS. time interval in milliseconds. Default is 5000 ms.
hydra.gemfirexd.HDFSStorePrms-blockCacheSize         = 10;             //Value is a percentage of the JVM heap. Default is 10.
hydra.gemfirexd.HDFSStorePrms-diskSynchronous        = true;           //Whether to enable persistence for an HDFS Event Queue, asynchronous writing to the disk if ASYNCHRONOUS. Default is true.
hydra.gemfirexd.HDFSStorePrms-writeOnlyFileRolloverInterval   = 3600;           //Default is 3600 (minutes?).
hydra.gemfirexd.HDFSStorePrms-maxQueueMemory     = 100;            //the maximum amount of memory (in MB) for an HDFS Event Queue. Default is 100MB.
hydra.gemfirexd.HDFSStorePrms-maxWriteOnlyFileSize            = 256;            //Default is 256.
hydra.gemfirexd.HDFSStorePrms-queuePersistent             = false;          //Default is false.
//hydra.gemfirexd.HDFSStorePrms-clientConfigFile = ;
//Minor Compaction
hydra.gemfirexd.HDFSStorePrms-minorCompact     = true;  //true if auto compaction is enabled. Default is true.
hydra.gemfirexd.HDFSStorePrms-minorCompactionThreads         = 10;    //maximum number of threads executing minor compaction. Default is 10.
hydra.gemfirexd.HDFSStorePrms-maxInputFileSize = 512;   //size threshold (in MB). A file larger than this size will not be considered for compaction. Default is 512MB.
hydra.gemfirexd.HDFSStorePrms-minInputFileCount  = 3;     //minimum count threshold. Compaction cycle will commence if the number of files to be compacted is more than this number. Default is 3.
hydra.gemfirexd.HDFSStorePrms-maxInputFileCount  = 10;    //maximum count threshold. Compaction cycle will not include more than the maximum number of files.  Default is 10.
//Major Compaction
hydra.gemfirexd.HDFSStorePrms-majorCompact         = true;  //true if auto major compaction is enabled. Default is true.
hydra.gemfirexd.HDFSStorePrms-majorCompactionInterval = 2;     //interval configuration that guides major compaction frequency in minutes. Default is 720 minutes.
hydra.gemfirexd.HDFSStorePrms-majorCompactionThreads   = 2;     //maximum number of threads executing major compaction. Default is 2.
// HDFS Configuration - END //

// SQL Parms
sql.SQLPrms-dmlTables                   = "trade.securities" ;
sql.SQLPrms-initSecuritiesSizePerThread = 200;
sql.SQLPrms-dmlOperations               = update;
sql.SQLPrms-testPartitionBy             = true;
sql.SQLPrms-withReplicatedTables        = false;
sql.SQLPrms-testMultiTableJoin          = ${testMultiTableJoin};
sql.SQLPrms-testUniqueKeys              = ${testUniqueKeys};
sql.SQLPrms-hasNetworth                 = true;		//will create networth table - legacy flag
sql.SQLPrms-useGfxdConfig               = true;
sql.SQLPrms-supportDuplicateTables      = true;
sql.SQLPrms-createDiskStore             = "create diskstore hdfsDiskStore 'hdfsDiskStore'" ;

sql.SQLPrms-createSchemas = "create schema trade" ;

sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
  ;

sql.SQLPrms-gfeDDLExtension =
  "${securities}"
  ;

sql.SQLPrms-redundancyClause =
  " REDUNDANCY ${redundantCopies} "
  ;

sql.SQLPrms-hdfsDDLExtn =
  " BUCKETS 50 HDFSSTORE (sqlhdfsStore)"
  ;

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen
