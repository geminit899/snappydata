//------------------------------------------------------------------------------
// TEST CONFIG
//------------------------------------------------------------------------------
//
//	sql/hdfs/hdfsRWTx.conf
//	    locatorHosts=1 locatorVMsPerHost=1 locatorThreadsPerVM=1
//	    A=datastore datastoreHosts=2 datastoreVMsPerHost=2 datastoreThreadsPerVM=1
//	    B=accessor accessorHosts=1 accessorVMsPerHost=2 accessorThreadsPerVM=10
//	    workIterationsPerThread=500
//
//---------------------------------------------------------------------------------    

hydra.Prms-testDescription = " GemFireXD test to verify TX on read-write HDFS tables, operations from accessors.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_accessor_locator.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
 
THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;           
THREADGROUP dataStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP accessorThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1  " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;  

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                               ${${B}Hosts}, true)" ncf;
                                                                    
hydra.gemfirexd.FabricServerPrms-persistDD = true;
sql.SQLPrms-useGfxdConfig = true;

//temp for quick test   
sql.SQLPrms-initCustomersSizePerThread = RANGE 20 30 EGNAR;
sql.SQLPrms-initSecuritiesSizePerThread = RANGE 10 30 EGNAR;
   
hydra.Prms-manageDerbyServer = true;
hydra.Prms-extraDerbyServerVMArgs += "-Xmx256m -Dderby.storage.pageCacheSize=16000 -Dderby.locks.waitTimeout=2 -Dderby.locks.deadlockTimeout=1";
hydra.Prms-totalTaskTimeSec           = 60000; //terminate using workIterations
hydra.Prms-maxResultWaitSec           = 300;
hydra.Prms-maxCloseTaskResultWaitSec  = 300;
hydra.Prms-serialExecution            = false;  
  
STARTTASK taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
          clientNames = locator1;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = startCluster
          clientNames = locator1;
            
INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_initialize
  runMode = always
  threadGroups = dataStoreThreads, ddlThread, accessorThreads;
  
INITTASK taskClass = sql.sqlTx.SQLDistTxTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.sqlTx.SQLDistTxTest taskMethod = HydraTask_startGfxdLocatorTask
         runMode = always
         threadGroups = locator;                                

INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_startFabricServer
    runMode = always
    threadGroups = accessorThreads, dataStoreThreads;
    
INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_createDiscDB
  threadGroups = accessorThreads;

INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_createDiscSchemas
  threadGroups = ddlThread;

INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_createDiscTables
  threadGroups = ddlThread;

INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_createGFESchemas
  threadGroups = ddlThread;

INITTASK     taskClass = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_createDiskStores
  threadGroups = ddlThread; 
         
INITTASK     taskClass = sql.sqlTx.SQLDistTxTest taskMethod = HydraTask_createHDFSSTORE
  threadGroups = ddlThread;
         
INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_createGFETables
  threadGroups = ddlThread;
  
INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_setTableCols
  threadGroups = ddlThread;  

INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_initConnections
  threadGroups = accessorThreads, ddlThread; 
  
INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_initThreadLocals
  threadGroups = accessorThreads, ddlThread; 
 
INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_populateTxTables
  threadGroups = accessorThreads, ddlThread;   
 
INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_verifyResultSets
  threadGroups = ddlThread;  

TASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_doDMLOp
  threadGroups = accessorThreads, ddlThread
  maxTimesToRun = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) *   ${workIterationsPerThread}" ncf;    

CLOSETASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_verifyResultSets
   threadGroups = ddlThread;      

// delete all tables and read all data from Hadoop. it should not return any data
CLOSETASK taskClass = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_dropAllTables
          threadGroups = ddlThread;

CLOSETASK taskClass = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_createGFETables
          threadGroups = ddlThread;  

CLOSETASK taskClass = sql.sqlTx.SQLDistTxTest   taskMethod = HydraTask_clearTables
          threadGroups = ddlThread;

CLOSETASK taskClass = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_verifyTotalRowsinTables
          threadGroups = accessorThreads;

// populate tables again 
CLOSETASK taskClass = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_populateTxTables
          threadGroups = accessorThreads, ddlThread;
          
CLOSETASK taskClass = sql.sqlTx.SQLDistTxTest   taskMethod  = HydraTask_dropAllTables
          threadGroups = ddlThread;
          
CLOSETASK taskClass = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_dropHDFSSTORE
          threadGroups = ddlThread;
     
ENDTASK taskClass = hdfs.HDFSUtil taskMethod = stopCluster
        clientNames = locator1;

sql.SQLPrms-hasNetworth = true;    //will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert insert insert update update update update update update update query delete FOENO;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory" ;   
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;

sql.SQLPrms-createTablesStatements =
  "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 1), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
  "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
  "create table trade.networth (cid int not null, cash decimal (30, 1), securities decimal (30, 1), loanlimit int, availloan decimal (30, 1),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
  "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30, 1), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
  "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 1), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
  "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 1), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
  "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 1), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
  "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
  "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";
  

sql.SQLPrms-numOfStores = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf;
sql.SQLPrms-numOfWorkers = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM})  " ncf;
//sql.SQLPrms-dropIndex = true;
//sql.SQLPrms-createIndex = true;
sql.SQLPrms-testUniqueKeys = false;
sql.sqlTx.SQLTxPrms-doOpByOne = true;
sql.SQLPrms-hasTx = true;

//hdfs configureation
sql.SQLPrms-hasHDFS = true;

sql.SQLPrms-hdfsDDLExtn =
    " EVICTION BY CRITERIA ( sec_id >= 200 ) EVICT INCOMING HDFSSTORE (sqlhdfsStore)"   
    " EVICTION BY CRITERIA ( cid  >= 200 ) EVICTION FREQUENCY 10 SECONDS  HDFSSTORE (sqlhdfsStore)"
    " HDFSSTORE (sqlhdfsStore)"    
    " HDFSSTORE (sqlhdfsStore)"
    " HDFSSTORE (sqlhdfsStore)"
    " HDFSSTORE (sqlhdfsStore)"
    " HDFSSTORE (sqlhdfsStore)"
    " "
    " "
    ;    
    
// Hadoop Configuration
hydra.ConfigPrms-hadoopConfig     = hdfs;
hydra.HadoopPrms-names            = hdfs;
hydra.gemfirexd.HDFSStorePrms-hadoopName    = hdfs;

// HDFS Configuration
hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig  = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-names         = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-homeDir       = gemfirexd_data;
hydra.gemfirexd.HDFSStorePrms-diskStoreName = hdfsDiskStore;
sql.hdfs.HDFSTestPrms-useRandomConfig = ONEOF true false FOENO;

hydra.gemfirexd.DiskStorePrms-names = hdfsDiskStore;
sql.SQLPrms-createDiskStore = "create diskstore hdfsDiskStore 'hdfsDiskStore'" ;

// HDFS dependencies - bug #48428
hydra.VmPrms-extraClassPaths +=
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${locatorHosts})" ncf
  ,       
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${A}Hosts})" ncf
  ,       
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${B}Hosts})" ncf
  ;       

hydra.Prms-checkTaskMethodsExist=false;
hydra.Prms-alwaysDoEndTasks = true;

hydra.gemfirexd.FabricServerPrms-conserveSockets = false; //due to #44545 & #47177
hydra.Prms-clientShutdownHook += sql.SQLTest dumpResults;        

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen
