//------------------------------------------------------------------------------
// TEST CONFIG
//------------------------------------------------------------------------------
//
//
//	sql/hdfs/hdfsRWPersistRecovery.conf
//	    A=store storeHosts=1 storeVMsPerHost= 7 storeThreadsPerVM=1
//	    B=accessor accessorHosts=2 accessorVMsPerHost=1 accessorThreadsPerVM=10    
//	    redundantCopies=1
//
//---------------------------------------------------------------------------------    

hydra.Prms-testDescription = "GemFireXD test to verify persistent recovery of read-write HDFS tables, operations from accessors.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams2.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_2_locator.inc;

hydra.Prms-manageLocatorAgents = true; // turn on master-managed locators

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;

hydra.GemFirePrms-roles =
  fcn "hydra.TestConfigFcns.duplicate(\"gemfirexd.datastore\", ${storeHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"gemfirexd.accessor\", ${accessorHosts})" ncf; // setup accessor & dataStore

THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\", ${locatorHosts}, true)" ncf;

THREADGROUP dataStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM} -1 ) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP accessorThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1  " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;  

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf; 
                                    
THREADGROUP rebootThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;                                             

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
          clientNames = locator1;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = startCluster
          clientNames = locator1;
                                                                                     
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initializeGFXD
	runMode = always
	threadGroups = locator, dataStoreThreads, ddlThread, accessorThreads, rebootThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscDB
	threadGroups = accessorThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscSchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscTables
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFXDDB
	runMode = always
	threadGroups = dataStoreThreads, rebootThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFXDDBForAccessors
	runMode = always
	threadGroups = accessorThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFESchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiskStores
		threadGroups = ddlThread;

INITTASK     taskClass = sql.SQLTest taskMethod = HydraTask_createHDFSSTORE
             threadGroups = ddlThread;
  	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFETables
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_setTableCols
	threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createIndex
	threadGroups = accessorThreads, ddlThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_populateTables
	threadGroups = accessorThreads;		

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	 threadGroups = ddlThread;

//randomly shuts down vms
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownDB
	 threadGroups = ddlThread, accessorThreads;
	 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownDB
	 threadGroups =	 dataStoreThreads, rebootThread; 
	 
//randomly starts vms concurrently	 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_reCreateGFXDDB
	 threadGroups = dataStoreThreads, rebootThread; 
	 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_reCreateGFXDDBForAccessors
	 threadGroups = ddlThread, accessorThreads; 	 	
	 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	 threadGroups = ddlThread;		

TASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_doDMLOp
	 threadGroups = accessorThreads, ddlThread;

TASK      taskClass = sql.SQLTest taskMethod = HydraTask_flushQueuesHDFS
          threadGroups = ddlThread;

//TASK      taskClass = sql.SQLTest taskMethod = HydraTask_forceCompactionHDFS
          //threadGroups = ddlThread;

CLOSETASK taskClass = sql.SQLTest taskMethod = HydraTask_flushQueuesHDFS
	  threadGroups = ddlThread;

CLOSETASK taskClass = sql.SQLTest taskMethod = HydraTask_forceCompactionHDFS
	  threadGroups = ddlThread;

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	 threadGroups = ddlThread;

//randomly shuts down vms
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownDB
	 threadGroups = ddlThread, accessorThreads;
	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownDB
	 threadGroups =	 locator, dataStoreThreads, rebootThread;
	 
//randomly starts vms concurrently	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_reCreateGFXDDB
	 threadGroups = dataStoreThreads, rebootThread;
	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_reCreateGFXDDBForAccessors
	 threadGroups = ddlThread, accessorThreads; 	 	
	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	 threadGroups = ddlThread;				

ENDTASK taskClass = hdfs.HDFSUtil taskMethod = stopCluster
        clientNames = locator1;
        
hydra.Prms-manageDerbyServer = true;
hydra.Prms-totalTaskTimeSec           = 900;
hydra.Prms-maxResultWaitSec           = 2400;
hydra.Prms-maxCloseTaskResultWaitSec  = 1200;
hydra.Prms-serialExecution            = false;	
hydra.gemfirexd.GfxdHelperPrms-persistDD     = true ;
hydra.gemfirexd.GfxdHelperPrms-persistTables = true;

hydra.CachePrms-names = defaultCache; 	

sql.SQLPrms-hasNetworth = true;		//will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory" ; 	
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;

//without cascade delete
sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
    "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10) default 'open', tid int, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_qty_ck check (qty>=0))"
	"create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))"	
	;

sql.SQLPrms-testPartitionBy = true;
sql.SQLPrms-withReplicatedTables = false;

sql.SQLPrms-gfeDDLExtension =
	"trade.securities:replicate" 
    "trade.customers:random"  
	"trade.networth:random"
	"trade.portfolio:random"
	"trade.sellorders:random"
    "trade.buyorders:random" 
    "trade.txhistory:random"
	"emp.employees:replicate"
	"trade.trades:replicate"
	;

sql.SQLPrms-redundancyClause =
	" REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"  
	" REDUNDANCY ${redundantCopies}" 
    " REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}" 
	;
	
sql.SQLPrms-createDiskStore = "create diskstore persistSecu 'persistSecu'"
      "create diskstore persistCust   'persistCust' "
      "create diskstore persistNetworth  'persistNetworth' "
      "create diskstore persistPortf  'persistPortf' "
      "create diskstore persistSellorders  'persistSellorders' "
      "create diskstore persistBuyorders  'persistBuyorders' "
      "create diskstore persistTxHistory  'persistTxHistory' "
      "create diskstore hdfsDiskStore 'hdfsDiskStore'"
      ;
	
sql.SQLPrms-gfePersistExtension = 
	" PERSISTENT SYNCHRONOUS 'persistSecu' " 
    " PERSISTENT SYNCHRONOUS 'persistCust' "
	" PERSISTENT SYNCHRONOUS 'persistNetworth' "
	" PERSISTENT SYNCHRONOUS 'persistPortf'"
	" PERSISTENT SYNCHRONOUS 'persistSellorders' "  
	" PERSISTENT SYNCHRONOUS 'persistBuyorders'" 
	" PERSISTENT SYNCHRONOUS 'persistTxHistory'"
	" "
	" " ;
  	
sql.SQLPrms-createIndex = true;
sql.SQLPrms-verifyIndex = true;
hydra.VmPrms-extraVMArgs += "-Dgemfirexd.persist-indexes=true";

//hdfs configureation
sql.SQLPrms-hasHDFS = true;

sql.SQLPrms-hdfsDDLExtn =
    " "   
    " HDFSSTORE (sqlhdfsStore)"
    " HDFSSTORE (sqlhdfsStore)"    
    " HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( qty > 500 ) EVICT INCOMING HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( qty > 500 ) EVICTION FREQUENCY 10 SECONDS HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( cid >= 200 ) EVICTION FREQUENCY 10 SECONDS HDFSSTORE (sqlhdfsStore)"
    " "
    " "
    ;    
    
// Hadoop Configuration
hydra.ConfigPrms-hadoopConfig     = hdfs;
hydra.HadoopPrms-names            = hdfs;
hydra.gemfirexd.HDFSStorePrms-hadoopName    = hdfs;

// HDFS Configuration
hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig  = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-names         = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-homeDir       = gemfirexd_data;
hydra.gemfirexd.HDFSStorePrms-diskStoreName = hdfsDiskStore;
hydra.gemfirexd.HDFSStorePrms-queuePersistent    = true;
sql.hdfs.HDFSTestPrms-useRandomConfig = false;

hydra.gemfirexd.DiskStorePrms-names = hdfsDiskStore;

// HDFS dependencies - bug #48428
hydra.VmPrms-extraClassPaths +=
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${locatorHosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${A}Hosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${B}Hosts})" ncf
  ;

hydra.Prms-checkTaskMethodsExist=false;

hydra.gemfirexd.FabricServerPrms-conserveSockets = false; //due to #44545 & #47177

hydra.Prms-clientShutdownHook += sql.SQLTest dumpResults; 

util.StopStartPrms-numVMsToStop = 1; // workaround to perform retry if ERROR X0Z01 is observed

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen
