//------------------------------------------------------------------------------
// TEST CONFIG
//------------------------------------------------------------------------------
//
//	sql/hdfs/concAlterHdfsStoreRW.conf
//	    A=datastore datastoreHosts=4 datastoreVMsPerHost=1 datastoreThreadsPerVM=1
//	    B=accessor accessorHosts=3 accessorVMsPerHost=1 accessorThreadsPerVM=9
//	    locatorHosts = 1 locatorVMsPerHost =1 locatorThreadsPerVM = 1
//	    redundantCopies=1
//      testMultiTableJoin=false
//      testUniqueKeys=false
//	    securities=trade.securities:random
//	    customers=trade.customers:random
//	    networth=trade.networth:random
//	    portfolio=trade.portfolio:random
//	    sellorders=trade.sellorders:random
//	    buyorders=trade.buyorders:random
//	    txhistory=trade.txhistory:random
//	    companies=trade.companies:random
//      trades=trade.trades:random
//      employees=emp.employees:random      
//
//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_accessor_locator.inc;
//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription=" GemFireXD test to verify concurrent ALTER HDFSStore and operations.";

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;

hydra.Prms-manageDerbyServer          = true;  
hydra.Prms-maxResultWaitSec           = 900;
hydra.Prms-maxCloseTaskResultWaitSec  = 1200;
hydra.Prms-serialExecution            = false;	
hydra.Prms-alwaysDoEndTasks           = true;
hydra.Prms-checkTaskMethodsExist      = false;

hydra.VmPrms-extraClassPaths +=
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${locatorHosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${A}Hosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${B}Hosts})" ncf
  ;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"locator\", ${locatorHosts}, true)"  ncf;

THREADGROUP datastoreThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM} ncf
    totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf;

THREADGROUP ddlThread
    totalThreads = 1
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

THREADGROUP validatorThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;
    
THREADGROUP accessorThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}
                       - (${${B}Hosts} * ${${B}VMsPerHost} + 1) ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
          clientNames = locator1
          ;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = startCluster
          clientNames = locator1
          ;
          
INITTASK taskClass = sql.hdfs.AlterHDFSTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator
         ;
         
INITTASK taskClass = sql.hdfs.AlterHDFSTest taskMethod = HydraTask_startGfxdLocatorTask
	 runMode = always
         threadGroups = locator
         ;
                                
INITTASK taskClass = sql.hdfs.AlterHDFSTest taskMethod = HydraTask_initializeFabricServer
         runMode = always
	 threadGroups = locator, datastoreThreads, accessorThreads, ddlThread, validatorThreads
         ;

INITTASK taskClass   = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_startFabricServer_Once
         runMode = always
         threadGroups = datastoreThreads, validatorThreads
         ;         
		
INITTASK taskClass   = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_createDiscDB
	 threadGroups = validatorThreads
         ;

INITTASK taskClass   = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_createDiscSchemas
	 threadGroups = ddlThread
         ;

INITTASK taskClass   = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_createDiscTables
	 threadGroups = ddlThread
         ;
		         			
INITTASK taskClass = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_createDiskStores
         threadGroups = ddlThread
         ; 

INITTASK taskClass = sql.hdfs.AlterHDFSTest taskMethod = HydraTask_createHDFSSTORE
         threadGroups = ddlThread
         ;  
           	
INITTASK taskClass   = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_createGFESchemas
         threadGroups = ddlThread
         ;
		  		         	
INITTASK taskClass = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_createGFETables
         threadGroups = ddlThread
         ;		  		         			       
           
INITTASK taskClass = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_populateTables
         threadGroups = accessorThreads
         ;		  		         			       

INITTASK taskClass   = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_verifyResultSets
	 threadGroups = ddlThread
         ;		  		         			       
	        
TASK     taskClass = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_doDMLOp
         threadGroups = accessorThreads, ddlThread
         ;		  		         			       

TASK     taskClass = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_concAlterHdfsStore
         startInterval = 30
         threadGroups = validatorThreads 
         ;

CLOSETASK taskClass   = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_verifyResultSets
	  threadGroups = ddlThread
          ;
	        
CLOSETASK taskClass   = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_verifyResultSets
	  threadGroups = ddlThread
          ;
	        
//since executed on single thread only it will delete only the child tables and not the parent tables.        
CLOSETASK taskClass = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_dropAllTables
          threadGroups = ddlThread      
          ;
	      	    		  
CLOSETASK taskClass = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_dropHDFSSTORE
          threadGroups = ddlThread
          ;

CLOSETASK taskClass = sql.hdfs.AlterHDFSTest taskMethod  = HydraTask_shutDownDB
	  threadGroups = datastoreThreads
          ;
     
ENDTASK   taskClass = hdfs.HDFSUtil taskMethod = stopCluster
          clientNames = accessor1
          ; 
             	 
sql.SQLPrms-testPartitionBy       = true;

sql.SQLPrms-testUniqueKeys        = ${testUniqueKeys};
sql.SQLPrms-supportDuplicateTables    = false;
sql.SQLPrms-useGfxdConfig         = true;
sql.SQLPrms-hasHDFS               = true;
sql.SQLPrms-initCustomersSizePerThread = 100; //make it 1 if we want to avoid bulk insert to customers.

sql.SQLPrms-hasNetworth = true;		//will create networth table - legacy flag
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;

sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" ;
sql.SQLPrms-createSchemas = "create schema trade" "create schema emp" ;

sql.SQLPrms-withReplicatedTables = true;

sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
    "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid),  constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10) default 'open', tid int, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_qty_ck check (qty>=0))"
	"create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"		
	;
	
sql.SQLPrms-gfeDDLExtension = 	 
    "trade.securities:0" 
    "trade.customers:0" 
    "trade.networth:0"
    "trade.portfolio:0"
    "trade.sellorders:0"
    "trade.buyorders:0" 
    "trade.txhistory:0"
   ;
sql.SQLPrms-redundancyClause =
    " REDUNDANCY ${redundantCopies}"  
    " REDUNDANCY ${redundantCopies}"  
    " REDUNDANCY ${redundantCopies}"   
    " REDUNDANCY ${redundantCopies}"  
    " REDUNDANCY ${redundantCopies}"  
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"   
    ;
    
 sql.SQLPrms-hdfsDDLExtn =
    " "   
    " EVICTION BY CRITERIA ( CID >= 200 ) EVICT INCOMING  HDFSSTORE (sqlhdfsStore1)"
    " EVICTION BY CRITERIA ( CID >= 200 AND CASH > 10000 AND LOANLIMIT> 1000 ) EVICTION FREQUENCY 10 SECONDS  HDFSSTORE (sqlhdfsStore1)"    
    " EVICTION BY CRITERIA ( CID >= 200 )  EVICT INCOMING HDFSSTORE (sqlhdfsStore) "
    " EVICTION BY CRITERIA ( oid  >= 200 )  EVICT INCOMING HDFSSTORE (sqlhdfsStore) "
    " EVICTION BY CRITERIA ( ordertime > '2013-09-19 15:51:26' ) EVICTION FREQUENCY 10 SECONDS START TS '2013-09-19 15:51:26' HDFSSTORE (sqlhdfsStore) "
    " HDFSSTORE (sqlhdfsStore)"
    ;

hydra.Prms-totalTaskTimeSec = 31536000;  // don't let hydra terminate based on time
sql.hdfs.AlterHdfsStorePrms-secondsToRun = 300;

// Hadoop Configuration
hydra.ConfigPrms-hadoopConfig     = hdfs;
hydra.HadoopPrms-names            = hdfs;
hydra.gemfirexd.HDFSStorePrms-hadoopName    = hdfs;

// HDFS Configuration
hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig  = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-names         = sqlhdfsStore sqlhdfsStore1;
hydra.gemfirexd.HDFSStorePrms-homeDir       = gemfirexd_data gemfirexd_data1;
hydra.gemfirexd.HDFSStorePrms-diskStoreName = hdfsDiskStore;
sql.hdfs.HDFSTestPrms-useRandomConfig = ONEOF true false FOENO;

hydra.gemfirexd.DiskStorePrms-names = hdfsDiskStore;
sql.SQLPrms-createDiskStore = "create diskstore hdfsDiskStore 'hdfsDiskStore'" ;

hydra.gemfirexd.FabricServerPrms-conserveSockets = false; //due to #44545 & #47177
hydra.Prms-clientShutdownHook += sql.hdfs.AlterHDFSTest dumpResults;

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen
