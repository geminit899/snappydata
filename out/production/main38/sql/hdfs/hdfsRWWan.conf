//------------------------------------------------------------------------------
//
//  sql/wan/hdfsRWWan.conf
//      wanSites= 3
//      A=datastore datastoreHostsPerSite=2 datastoreVMsPerHost= 2 datastoreThreadsPerVM=1
//      B=accessor accessorHostsPerSite=1 accessorVMsPerHost=2 accessorThreadsPerVM=5
//      locatorHostsPerSite = 1 locatorVMsPerHost =1 locatorThreadsPerVM = 1
//      enableQueueConflation=false
//      useSamePartitionAllWanSites=true
//
//---------------------------------------------------------------------------------    

//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_wan_accessor_locator.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="GemFireXD test to verify WAN feature with on read-write HDFS tables, operations from accessors.";

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraVMArgs += "-Xss256k -Xmx512m -Xms256m";

hydra.Prms-manageDerbyServer = true;  
hydra.Prms-totalTaskTimeSec           = 300;
hydra.Prms-maxResultWaitSec           = 1800;
hydra.Prms-maxCloseTaskResultWaitSec  = 1200;
hydra.Prms-serialExecution            = false;	

sql.SQLPrms-initCustomersSizePerThread = RANGE 20 100 EGNAR;
sql.SQLPrms-initSecuritiesSizePerThread = RANGE 20 30 EGNAR;

THREADGROUP locator
           	totalThreads = fcn ${wanSites} * ${locatorHostsPerSite}
               					* ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  			clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
           						(\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;
           
THREADGROUP dataStoreThreads
            totalThreads = fcn "${wanSites}  * (${${A}HostsPerSite} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "${wanSites} * ${${A}HostsPerSite} * ${${A}VMsPerHost}" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames(\"${A}\",
                                ${wanSites}, ${${A}HostsPerSite}, false, true)" ncf;

THREADGROUP accessorsSiteOne
           totalThreads = fcn ${${B}HostsPerSite}  * ${${B}VMsPerHost} * ${${B}ThreadsPerVM}  ncf
           totalVMs     = fcn ${${B}HostsPerSite} * ${${B}VMsPerHost} ncf
           clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames
                          (\"${B}\", ${wanSites}, ${${B}HostsPerSite}, false, true)" ncf; 
                          
THREADGROUP accessorsSiteOther
            totalThreads = fcn "(${wanSites}-1) * (${${B}HostsPerSite} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${wanSites}-1) * ${${B}HostsPerSite} * ${${B}VMsPerHost}" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames(\"${B}\",
                                ${wanSites}-1, ${${B}HostsPerSite}, false, true)" ncf;                                   

hydra.gemfirexd.FabricServerPrms-remoteDistributedSystems =
	  fcn "sql.wan.WanTestConfigFcns.generateRemoteSiteDS
          (\"ds_\", ${wanSites})"
      ncf
  ;
  
hydra.gemfirexd.GatewayReceiverPrms-names =
  fcn "hydra.TestConfigFcns.generateNames
      (\"receiver\", ${wanSites})" 
  ncf
  ;
  
hydra.gemfirexd.GatewayReceiverPrms-distributedSystem =
  fcn "hydra.TestConfigFcns.generateNames
      (\"ds_\", ${wanSites})" 
  ncf
  ;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
          clientNames = locator_1_1;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = startCluster
          clientNames = locator_1_1;
                                          
INITTASK taskClass = sql.wan.WanTest taskMethod = createLocatorTask
         threadGroups = locator;
INITTASK taskClass = sql.wan.WanTest taskMethod = startAndConnectLocatorTask
         threadGroups = locator;
                                                              
INITTASK taskClass = sql.wan.WanTest taskMethod = HydraTask_initialize
         runMode = always
	     threadGroups = dataStoreThreads, accessorsSiteOther, accessorsSiteOne;
	     	          
INITTASK taskClass = sql.wan.WanTest taskMethod = HydraTask_initWanTest
         runMode = always
         threadGroups = dataStoreThreads, accessorsSiteOther, accessorsSiteOne; 

INITTASK taskClass = sql.wan.WanTest taskMethod = HydraTask_initBBForWanConfig
	     threadGroups = accessorsSiteOther, accessorsSiteOne; //need only one thread -- derbyDDLThread

INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_startFabricServerTask
	runMode = always
	threadGroups = dataStoreThreads;
	
INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_startFabricServerTask
	runMode = always
	threadGroups = accessorsSiteOther, accessorsSiteOne;
		      	
INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_createDiscDB
    runMode = once
	threadGroups = accessorsSiteOther, accessorsSiteOne; //need only one thread -- derbyDDLThread

INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_createDiscSchemas
    runMode = once
	threadGroups = accessorsSiteOther, accessorsSiteOne; //need only one thread -- derbyDDLThread

INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_createDiscTables
    runMode = once
	threadGroups = accessorsSiteOther, accessorsSiteOne; //need only one thread -- derbyDDLThread	

INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_createGFESchemas
	threadGroups = accessorsSiteOther, accessorsSiteOne; //need only one thread in each site -- gfeDDLThread
	
INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_createDiskStores
	threadGroups = accessorsSiteOther, accessorsSiteOne; /* one thread in each site to do the op */
	
INITTASK taskClass = sql.wan.WanTest taskMethod = HydraTask_createGatewayReceivers
         threadGroups = accessorsSiteOther, accessorsSiteOne; //gfeDDL only
         	
INITTASK taskClass = sql.wan.WanTest taskMethod = HydraTask_createGatewaySenders
         threadGroups = accessorsSiteOther, accessorsSiteOne; //gfeDDL only

INITTASK     taskClass = sql.wan.WanTest taskMethod = HydraTask_createHDFSSTORE
  threadGroups = accessorsSiteOther, accessorsSiteOne; //gfeDDL only
  
INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_createGFETables
	threadGroups = accessorsSiteOther, accessorsSiteOne; //need only one thread in each site -- gfeDDLThread
         
INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_populateTables
	threadGroups =  accessorsSiteOther, accessorsSiteOne;

INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_putLastKey
	threadGroups =  accessorsSiteOther, accessorsSiteOne; /*gfeDDLThread in site one*/
			
INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_checkQueueEmpty
	threadGroups = dataStoreThreads;  

INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_verifyResultSets
	threadGroups = accessorsSiteOther, accessorsSiteOne;	//gfeDDLThread
		
TASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_doDMLOp
	 threadGroups =  accessorsSiteOther, accessorsSiteOne;
	 
TASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_doOp
	 threadGroups = accessorsSiteOther, accessorsSiteOne;

TASK      taskClass = sql.SQLTest taskMethod = HydraTask_flushQueuesHDFS
          threadGroups = accessorsSiteOther, accessorsSiteOne; //gfeDDL only

//TASK      taskClass = sql.SQLTest taskMethod = HydraTask_forceCompactionHDFS
          //threadGroups = accessorsSiteOther, accessorsSiteOne; //gfeDDL only

CLOSETASK taskClass = sql.SQLTest taskMethod = HydraTask_flushQueuesHDFS
          threadGroups = accessorsSiteOther, accessorsSiteOne; //gfeDDL only

CLOSETASK taskClass = sql.SQLTest taskMethod = HydraTask_forceCompactionHDFS
          threadGroups = accessorsSiteOther, accessorsSiteOne; //gfeDDL only

CLOSETASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_putLastKey
	threadGroups =  accessorsSiteOther, accessorsSiteOne; /*gfeDDLThread in site one*/
	 
CLOSETASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_checkQueueEmpty
	threadGroups = dataStoreThreads;  	

CLOSETASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_verifyResultSets
	threadGroups = accessorsSiteOther, accessorsSiteOne;	//gfeDDLThread	
          
ENDTASK taskClass = hdfs.HDFSUtil taskMethod = stopCluster
        clientNames = locator_1_1;
        		 
hydra.CachePrms-names = defaultCache;
sql.wan.SQLWanPrms-numOfPeersPerSite = fcn ${${A}HostsPerSite} * ${${A}VMsPerHost} 
				+ ${${B}HostsPerSite} * ${${B}VMsPerHost} ncf;				
sql.wan.SQLWanPrms-numOfDataStoresPerSite = fcn ${${A}HostsPerSite} * ${${A}VMsPerHost} ncf;
sql.wan.SQLWanPrms-numOfLocators = fcn ${wanSites} * ${locatorHostsPerSite} * ${locatorVMsPerHost} ncf;
sql.wan.SQLWanPrms-numOfAccessors = fcn ${wanSites} * ${${B}HostsPerSite} * ${${B}VMsPerHost} ncf;
sql.wan.SQLWanPrms-numOfWanSites = ${wanSites};
sql.wan.SQLWanPrms-numOfThreadsPerStoreVM = ${${A}ThreadsPerVM};
sql.wan.SQLWanPrms-numOfThreadsPerAccessorVM = ${${B}ThreadsPerVM};
sql.wan.SQLWanPrms-numOfThreadsPerSite = fcn ${${A}HostsPerSite} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM}
				 + ${${B}HostsPerSite} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM} ncf;
sql.wan.SQLWanPrms-numOfAccessorThreadsPerSite = fcn ${${B}HostsPerSite} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM} ncf;
sql.wan.SQLWanPrms-enableQueueConflation = false;
sql.wan.SQLWanPrms-enableQueuePersistence = ONEOF true false FOENO;
sql.wan.SQLWanPrms-isWanTest = true;
sql.wan.SQLWanPrms-isWanAccessorsConfig = true;
sql.wan.SQLWanPrms-isSingleSitePublisher = false;
sql.SQLPrms-maxSymbolLength = 8;
sql.SQLPrms-minSymbolLength = 4;

sql.SQLPrms-hasNetworth = true;		//will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;  
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory"; 	
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;

//without cascade delete
sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
    "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10) default 'open', tid int, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_qty_ck check (qty>=0))"
	"create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))"
	"create table default1.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))";
  
sql.SQLPrms-createDiskStore = "create diskstore WanDiskStore 'wanPersist'" ;
sql.SQLPrms-useGfxdConfig = true;

//hdfs configureation
sql.SQLPrms-hasHDFS = true;

sql.SQLPrms-hdfsDDLExtn =
    " HDFSSTORE (sqlhdfsStore)"   
    " HDFSSTORE (sqlhdfsStore)"
    " HDFSSTORE (sqlhdfsStore)"    
    " HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( qty > 500 ) EVICT INCOMING HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( qty > 500 ) EVICTION FREQUENCY 10 SECONDS HDFSSTORE (sqlhdfsStore)"
    " EVICTION BY CRITERIA ( cid >= 200 ) EVICTION FREQUENCY 10 SECONDS HDFSSTORE (sqlhdfsStore)"
    " "
    " "
    ;    
    
// Hadoop Configuration
hydra.ConfigPrms-hadoopConfig     = hdfs;
hydra.HadoopPrms-names            = hdfs;
hydra.gemfirexd.HDFSStorePrms-hadoopName    = hdfs;

// HDFS Configuration
hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig  = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-names         = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-homeDir       = gemfirexd_data;
hydra.gemfirexd.HDFSStorePrms-diskStoreName = hdfsDiskStore;
sql.hdfs.HDFSTestPrms-useRandomConfig = ONEOF true false FOENO;

hydra.gemfirexd.DiskStorePrms-names = hdfsDiskStore;
sql.SQLPrms-createDiskStore = 
    "create diskstore WanDiskStore 'wanPersist'"
    "create diskstore hdfsDiskStore 'hdfsDiskStore'"
    ;

// HDFS dependencies - bug #48428, all vms (including the locator) need the hadoop jars on the classpath
hydra.VmPrms-extraClassPaths += 
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", 1)" ncf;

hydra.Prms-checkTaskMethodsExist=false;

hydra.gemfirexd.FabricServerPrms-conserveSockets = false; //due to #44545 & #47177

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen
