//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_accessor_locator.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="GemFireXD test to verify correct behavior when we cross the hdfs block size boundary ";

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar;

hydra.Prms-manageDerbyServer          = false;  
hydra.Prms-totalTaskTimeSec           = 3600;
hydra.Prms-maxResultWaitSec           = 2100;   // writeOnlyFileRolloverInterval + 5 minutes
hydra.Prms-maxCloseTaskResultWaitSec  = 3600;
hydra.Prms-serialExecution            = false;	
hydra.Prms-alwaysDoEndTasks           = true;
hydra.Prms-checkTaskMethodsExist      = false;
                           
sql.SQLPrms-supportDuplicateTables= true;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"locator\", ${locatorHosts}, true)"  ncf;

THREADGROUP datastoreThreads
    totalThreads = fcn ${${A}Hosts} * ${${A}VMsPerHost} * ${${A}ThreadsPerVM} ncf
    totalVMs     = fcn ${${A}Hosts} * ${${A}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${A}\", ${${A}Hosts}, true)" ncf;

THREADGROUP ddlThread
    totalThreads = 1    
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

THREADGROUP validatorThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;
    
THREADGROUP accessorThreads
    totalThreads = fcn ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM} 
                       - (${${B}Hosts} * ${${B}VMsPerHost} + 1) ncf
    totalVMs     = fcn ${${B}Hosts} * ${${B}VMsPerHost} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;



STARTTASK taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
          clientNames = locator1;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = startCluster
          clientNames = locator1;
               
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
         threadGroups = locator;
                  
INITTASK taskClass   = sql.SQLTest  taskMethod  = HydraTask_initializeFabricServer
         runMode = always
         threadGroups = locator, datastoreThreads, accessorThreads, ddlThread, validatorThreads;

INITTASK taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer_Once
         runMode = always
         threadGroups = datastoreThreads, validatorThreads;	
	             	    
INITTASK taskClass = sql.SQLThinClientTest taskMethod = HydraTask_startNetworkServer
         runMode = always
	     threadGroups = datastoreThreads;	        
	     
INITTASK taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFESchemas
         threadGroups = ddlThread;
         
INITTASK taskClass = sql.SQLTest taskMethod  = HydraTask_createDiskStores
         threadGroups = ddlThread;          
         
INITTASK taskClass = sql.SQLTest  taskMethod   = HydraTask_createHDFSSTORE
         threadGroups = ddlThread;          
                          
INITTASK taskClass = sql.SQLTest taskMethod  = HydraTask_createGFETables
         threadGroups = ddlThread;  
         
INITTASK taskClass = sql.SQLTest taskMethod  = HydraTask_setHDFSEvictionObserver
         runMode = always
         threadGroups = datastoreThreads, validatorThreads;          
         	     
INITTASK taskClass   = sql.SQLTest taskMethod  = HydraTask_createMRTables
         threadGroups = ddlThread;      
         
INITTASK taskClass = sql.SQLTest taskMethod  = HydraTask_populateTables
       threadGroups = accessorThreads;              

INITTASK taskClass = sql.SQLTest taskMethod  = HydraTask_dropMrTables
       threadGroups = ddlThread;
              
INITTASK taskClass   = sql.SQLTest taskMethod  = HydraTask_createMRTables
         threadGroups = ddlThread;          
		
TASK taskClass = sql.SQLTest taskMethod  = HydraTask_doDMLOp
     threadGroups = accessorThreads, ddlThread, validatorThreads;      

CLOSETASK taskClass = sql.SQLTest taskMethod = HydraTask_flushQueuesHDFS
          threadGroups = ddlThread;

CLOSETASK taskClass = sql.hdfs.HDFSSqlTest taskMethod = HydraTask_waitForWriteOnlyFileRolloverInterval
          threadGroups = ddlThread;
         
CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_executeMR
	threadGroups = locator;
	         
CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_verifyHdfsDataUsingMR
	threadGroups = validatorThreads;

CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_dropAllTables
          threadGroups = ddlThread;          

CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_dropHDFSSTORE
          threadGroups = ddlThread;	
		
CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_shutDownDB
	      threadGroups = validatorThreads;

CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_shutDownDB
	      threadGroups = datastoreThreads;     
     
ENDTASK taskClass = hdfs.HDFSUtil taskMethod = stopCluster
        clientNames = locator1;
             	 
            	 
sql.SQLPrms-testPartitionBy       = true;
sql.SQLPrms-withReplicatedTables  = false;
sql.SQLPrms-testUniqueKeys        = ${testUniqueKeys};
sql.SQLPrms-testMultiTableJoin    = ${testMultiTableJoin};
sql.SQLPrms-useGfxdConfig         = true;
sql.SQLPrms-hasHDFS               = true;
sql.SQLPrms-hdfsMrJob             = true;
sql.SQLPrms-updateWriteOnlyMr     = true;

// we need to create more data in hdfs, so reduce number of tables, increase entries created during populate tables
sql.SQLPrms-initCustomersSizePerThread = 1000; //make it 1 if we want to avoid bulk insert to customers.
sql.SQLPrms-initSecuritiesSizePerThread = 1000; //make it 1 if we want to avoid bulk insert to customers.

sql.SQLPrms-hasNetworth = true;		//will create networth table - legacy flag
sql.SQLPrms-dmlOperations = ONEOF insert insert insert insert insert update query FOENO;

sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio";

sql.SQLPrms-createSchemas = "create schema trade" "create schema emp" ;

 sql.SQLPrms-hdfsDDLExtn =
    "BUCKETS 3 HDFSSTORE (sqlhdfsStore) WRITEONLY"
    "BUCKETS 3 HDFSSTORE (sqlhdfsStore) WRITEONLY"   
    "BUCKETS 3 HDFSSTORE (sqlhdfsStore) WRITEONLY"   
    "BUCKETS 3 HDFSSTORE (sqlhdfsStore) WRITEONLY"   
    ;

sql.SQLPrms-createTablesStatements =
    "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
    "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	;
	
sql.SQLPrms-gfeDDLExtension = 	 
    "${securities}" 
    "${customers}"
    "${networth}"
    "${portfolio}"
    ;
   
sql.SQLPrms-redundancyClause =
    " REDUNDANCY ${redundantCopies}"   
    " REDUNDANCY ${redundantCopies}"   
    " REDUNDANCY ${redundantCopies}"  
    " REDUNDANCY ${redundantCopies}"  
    ;
    
// HDFS dependencies - bug #48428
hydra.VmPrms-extraClassPaths +=
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${locatorHosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${A}Hosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${B}Hosts})" ncf
  ;

hydra.gemfirexd.FabricServerPrms-conserveSockets = false; //due to #44545 & #47177
hydra.Prms-clientShutdownHook += sql.SQLTest dumpResults;

hydra.VmPrms-extraVMArgs = fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms128m -Xmx128m\", ${locatorHosts}, true)"
                           ncf
                           ,
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms1g -Xmx1g\", ${datastoreHosts}, true)"
                           ncf
                           ,
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms512m -Xmx512m\", ${accessorHosts}, true)"
                           ncf;

// Hadoop Configuration
hydra.ConfigPrms-hadoopConfig     = hadoop;
hydra.HadoopPrms-names            = hadoop;

// HDFS Configuration
hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig  = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-names         = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-hadoopName    = hadoop;
hydra.gemfirexd.HDFSStorePrms-homeDir       = gemfirexd_data;
hydra.gemfirexd.HDFSStorePrms-diskStoreName = hdfsDiskStore;
hydra.gemfirexd.HDFSStorePrms-maxWriteOnlyFileSize = 5;               // defaults to 256 MB
hydra.gemfirexd.HDFSStorePrms-writeOnlyFileRolloverInterval =  1800;   // defaults to 3600 secs (1 hour)

hydra.gemfirexd.HDFSStorePrms-clientConfigFile = $JTESTS/sql/hdfs/hdfs-blockSize-clientConfig.xml;

sql.hdfs.HDFSTestPrms-useRandomConfig = false;
sql.hdfs.HDFSTestPrms-mapredVersion1         = ${mapredVersion1};

hydra.gemfirexd.DiskStorePrms-names = hdfsDiskStore;
sql.SQLPrms-createDiskStore = "create diskstore hdfsDiskStore 'hdfsDiskStore'" ;

hydra.gemfirexd.NetworkServerPrms-names = server;
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = server;
sql.SQLPrms-useGfxdConfig = true;
