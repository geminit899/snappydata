//------------------------------------------------------------------------------
// TEST CONFIG
//------------------------------------------------------------------------------
//
//	sql/hdfs/hdfsWithoutEvictionCriteriaRWHAClient.conf
//	    A=server serverHosts=4 serverVMsPerHost=1 serverThreadsPerVM=1
//      B=client clientHosts=2 clientVMsPerHost=1 clientThreadsPerVM=9
//	    locatorHosts = 1 locatorVMsPerHost =1 locatorThreadsPerVM = 1
//	    redundantCopies=1
//      testMultiTableJoin=false
//      testUniqueKeys=false   
//	    securities=trade.securities:random
//	    customers=trade.customers:random
//	    networth=trade.networth:random
//	    portfolio=trade.portfolio:random
//	    sellorders=trade.sellorders:random
//	    buyorders=trade.buyorders:random
//	    txhistory=trade.txhistory:random
//	    companies=trade.companies:random
//      trades=trade.trades:replicate
//      employees=emp.employees:replicate  
//
//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_client_locator.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="GemFireXD test to verify user operations on HDFS tables, HA of data nodes, operations from thin clients.";
  
  

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexdclient.jar;

hydra.Prms-manageDerbyServer          = true;  
hydra.Prms-totalTaskTimeSec           = 300;
hydra.Prms-maxResultWaitSec           = 900;
hydra.Prms-maxCloseTaskResultWaitSec  = 1200;
hydra.Prms-serialExecution            = false;	
hydra.Prms-alwaysDoEndTasks           = true;
hydra.Prms-checkTaskMethodsExist      =false;

THREADGROUP locator
    totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"locator\", ${locatorHosts}, true)"  ncf;

THREADGROUP serverThreads
            totalThreads = fcn ${serverHosts} * ${serverVMsPerHost} * ${serverThreadsPerVM}  ncf
            totalVMs     = fcn ${serverHosts} * ${serverVMsPerHost}  ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"server\", ${serverHosts}, true)" ncf;   
THREADGROUP ddlThread
    totalThreads = 1    
    clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"${B}\", ${${B}Hosts}, true)" ncf;

    
THREADGROUP edgeThreads
            totalThreads = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM} -1  ncf
            totalVMs     = fcn ${clientHosts} * ${clientVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"client\", ${clientHosts}, true)" ncf;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
          clientNames = locator1;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = startCluster
          clientNames = locator1;

INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
         threadGroups = locator;
                                                              
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_initializeFabricServer
         runMode = always
	     threadGroups = locator, serverThreads, edgeThreads, ddlThread;
	     
INITTASK taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_initEdges
       	 threadGroups = edgeThreads, ddlThread;	    

INITTASK taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer_Once
         runMode = always
         threadGroups = serverThreads;
         
INITTASK taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startNetworkServer
		 runMode = always
		 threadGroups =  serverThreads;  
		 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscDB
	threadGroups = edgeThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscSchemas
	threadGroups = ddlThread;	 

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscTables
	threadGroups = ddlThread;	
	
INITTASK taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFESchemas
		 threadGroups = ddlThread; 	

INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createDiskStores
         threadGroups = ddlThread; 

INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createHDFSSTORE
         threadGroups = ddlThread;      
           
INITTASK taskClass = sql.SQLTest taskMethod  = HydraTask_createGFETables
         threadGroups = ddlThread;

INITTASK taskClass = sql.SQLTest taskMethod  = HydraTask_setHDFSEvictionObserver
         runMode = always
         threadGroups = serverThreads;       
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_populateTables
         threadGroups = edgeThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	     threadGroups = edgeThreads;

INITTASK taskClass = util.PRObserver  taskMethod = initialize
         runMode = once
         threadGroups = serverThreads;

INITTASK taskClass = util.StopStartVMs  taskMethod = StopStart_initTask;

TASK taskClass = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_cycleStoreVms
     maxThreads = 1
     threadGroups = edgeThreads;         
		
TASK taskClass = sql.SQLTest taskMethod  = HydraTask_doDMLOp
     threadGroups = edgeThreads, ddlThread;

TASK      taskClass = sql.SQLTest taskMethod = HydraTask_flushQueuesHDFS
          threadGroups = ddlThread;

//TASK      taskClass = sql.SQLTest taskMethod = HydraTask_forceCompactionHDFS
          //threadGroups = ddlThread;

CLOSETASK taskClass = sql.SQLTest taskMethod = HydraTask_flushQueuesHDFS
          threadGroups = ddlThread 
          ;

CLOSETASK taskClass = sql.SQLTest taskMethod = HydraTask_forceCompactionHDFS
          threadGroups = ddlThread 
          ;

CLOSETASK   taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	     threadGroups = edgeThreads;	     

// truncate all tables and read all data from Hadoop. it should not return any data
CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_clearTables
          threadGroups = ddlThread , edgeThreads;         

CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_verifyTotalRowsinTables
          threadGroups = edgeThreads;
          
CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_populateTables
          threadGroups = edgeThreads;
          
// delete all tables and read all data from Hadoop. it should not return any data
CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_dropAllTables
          threadGroups = ddlThread;

CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_createGFETables
          threadGroups = ddlThread;  

CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_clearTables
          threadGroups = ddlThread , edgeThreads;
          
CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_verifyTotalRowsinTables
          threadGroups = edgeThreads;

// populate tables again 
CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_populateTables
          threadGroups = edgeThreads;

CLOSETASK   taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	     threadGroups = edgeThreads;
        
CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_dropAllTables
          threadGroups = ddlThread;

CLOSETASK taskClass = sql.SQLTest taskMethod  = HydraTask_dropHDFSSTORE
          threadGroups = ddlThread;
          
CLOSETASK taskClass = sql.SQLTest  taskMethod  = HydraTask_stopFabricServer
	 threadGroups =	 serverThreads;          
     
ENDTASK taskClass = hdfs.HDFSUtil taskMethod = stopCluster
        clientNames = locator1;
             	 
sql.SQLPrms-testPartitionBy       = true;
sql.SQLPrms-withReplicatedTables  = false;
sql.SQLPrms-testUniqueKeys        = ${testUniqueKeys};
sql.SQLPrms-testMultiTableJoin    = ${testMultiTableJoin};
sql.SQLPrms-useGfxdConfig         = true;
sql.SQLPrms-initCustomersSizePerThread = 100; //make it 1 if we want to avoid bulk insert to customers.

sql.SQLPrms-hasNetworth = true;		//will create networth table - legacy flag
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;

sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory";
sql.SQLPrms-createSchemas = "create schema trade" "create schema emp" ;

sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
    "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10) default 'open', tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id), constraint bo_qty_ck check (qty>=0))"
	"create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))" 
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), deptid int , since date, addr varchar(100), picture blob ,  ssn varchar(9) , tid int)"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))"	
	;
	 
sql.SQLPrms-redundancyClause =
    " REDUNDANCY ${redundantCopies}"  
    " REDUNDANCY ${redundantCopies}"  
    " REDUNDANCY ${redundantCopies}"   
    " REDUNDANCY ${redundantCopies}"  
    " REDUNDANCY ${redundantCopies}"  
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"     
    ;
    
// trades and employees do not participate in HA tests
sql.SQLPrms-gfeDDLExtension = 	 
    "${securities}" 
    "${customers}"
    "${networth}"
    "${portfolio}"
    "${sellorders}"
    "${buyorders}"
    "${txhistory}"  
    "trade.trades:replicate"
    "emp.employees:replicate"
    ;
    
// no hdfsstore for trades and employees
sql.SQLPrms-hdfsDDLExtn =
    " HDFSSTORE (sqlhdfsStore)"   
    " HDFSSTORE (sqlhdfsStore)"
    " HDFSSTORE (sqlhdfsStore)"    
    " HDFSSTORE (sqlhdfsStore)"
    " HDFSSTORE (sqlhdfsStore)"
    " HDFSSTORE (sqlhdfsStore)"
    " HDFSSTORE (sqlhdfsStore)"
    " "
    " "
    ;   
        

// Hadoop Configuration
hydra.ConfigPrms-hadoopConfig     = hdfs;
hydra.HadoopPrms-names            = hdfs;
hydra.gemfirexd.HDFSStorePrms-hadoopName    = hdfs;

// HDFS Configuration
sql.SQLPrms-hasHDFS               = true;
sql.SQLPrms-supportDuplicateTables= false;

hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig  = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-names         = sqlhdfsStore;
hydra.gemfirexd.HDFSStorePrms-homeDir       = gemfirexd_data;
hydra.gemfirexd.HDFSStorePrms-diskStoreName = hdfsDiskStore;
sql.hdfs.HDFSTestPrms-useRandomConfig = ONEOF true false FOENO;

hydra.gemfirexd.DiskStorePrms-names = hdfsDiskStore;
sql.SQLPrms-createDiskStore = "create diskstore hdfsDiskStore 'hdfsDiskStore'" ;

// HDFS dependencies - bug #48428
hydra.VmPrms-extraClassPaths +=
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${locatorHosts})" ncf
  ,       
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${A}Hosts})" ncf
  ,       
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${B}Hosts})" ncf
  ;       

hydra.gemfirexd.FabricServerPrms-conserveSockets = false; //due to #44545 & #47177
hydra.Prms-clientShutdownHook += sql.SQLTest dumpResults;

hydra.gemfirexd.NetworkServerPrms-names = server;
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = server;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = RANGE 1 ${redundantCopies} EGNAR;
sql.SQLPrms-useGemFireXDHA = true;

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen
