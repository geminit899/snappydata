INCLUDE $JTESTS/sql/wan/thinClient/singleSitePublisherClient.conf;
  
sql.SQLPrms-testPartitionBy = true;
sql.SQLPrms-withReplicatedTables = ONEOF true false FOENO;
sql.wan.SQLWanPrms-useSamePartitionAllWanSites = ${useSamePartitionAllWanSites};

sql.SQLPrms-gfeDDLExtension =
	"trade.securities:random" 
    "trade.customers:random" 
    "trade.networth:random"
	"trade.portfolio:random"
	"trade.sellorders:random"
    "trade.buyorders:random" 
    "trade.txhistory:random"
	"emp.employees:random"
	"trade.trades:random" 
	"default1.employees:random";

//adding concurrent ddl (creating index)
INITTASK     taskClass   = sql.wan.thinClient.WanClientTest taskMethod  = HydraTask_setTableCols
	threadGroups = clientSiteOther, clientSiteOne;	//derbyDDLThread
 
TASK     taskClass   = sql.wan.thinClient.WanClientTest taskMethod  = HydraTask_createIndex
	threadGroups = clientSiteOne;
	
sql.SQLPrms-createIndex = true;
sql.SQLPrms-dropIndex = true;

//adding procedure 
INITTASK     taskClass   = sql.wan.thinClient.WanClientTest taskMethod  = HydraTask_createFuncForProcedures
	threadGroups = clientSiteOne, clientSiteOther;
	
INITTASK     taskClass   = sql.wan.thinClient.WanClientTest taskMethod  = HydraTask_createProcedures
	threadGroups = clientSiteOne;

TASK     taskClass   = sql.wan.thinClient.WanClientTest taskMethod  = HydraTask_callProcedures
	threadGroups = clientSiteOne;
	
TASK     taskClass   = sql.wan.thinClient.WanClientTest taskMethod  = HydraTask_doOp
	 threadGroups = clientSiteOne;
	 
sql.SQLPrms-ddlOperations = "procedure" ;