//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/sql/wan/wanp2pAccessors.conf;

//random partition 
sql.SQLPrms-testPartitionBy = true;  
sql.SQLPrms-withReplicatedTables = ONEOF true false FOENO;
sql.wan.SQLWanPrms-useSamePartitionAllWanSites = ${useSamePartitionAllWanSites};

sql.SQLPrms-gfeDDLExtension =
	"trade.securities:random" 
    "trade.customers:random" 
    "trade.networth:random"
	"trade.portfolio:random"
	"trade.sellorders:random"
    "trade.buyorders:random" 
    "trade.txhistory:random"
	"emp.employees:random"
	"trade.trades:random" 
	"default1.employees:random";

//adding concurrent ddl (creating index)
INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_setTableCols
	threadGroups = accessorsSiteOther, accessorsSiteOne;	//derbyDDLThread
	
INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_createIndex
	threadGroups = accessorsSiteOther, accessorsSiteOne;
/* 
TASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_createIndex
	threadGroups = accessorsSiteOther, accessorsSiteOne;
*/
	
//sql.SQLPrms-createIndex = true;
//sql.SQLPrms-dropIndex = true;

//adding procedure 
INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_createFuncForProcedures
	threadGroups = accessorsSiteOther, accessorsSiteOne;
	
INITTASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_createProcedures
	threadGroups = accessorsSiteOther, accessorsSiteOne;

TASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_callProcedures
	threadGroups = accessorsSiteOther, accessorsSiteOne;
	
TASK     taskClass   = sql.wan.WanTest taskMethod  = HydraTask_doOp
	 threadGroups = accessorsSiteOther, accessorsSiteOne;
	 
sql.SQLPrms-ddlOperations = "procedure" ;
