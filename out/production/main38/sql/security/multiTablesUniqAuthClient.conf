hydra.Prms-testDescription = " this tests authentication and authorization using thin client driver";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_client_locator.inc;
INCLUDE $JTESTS/sql/security/extraDerbySetting.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;
 
THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;
  
THREADGROUP serverThreads
            totalThreads = fcn ${serverHosts} * ${serverVMsPerHost} * ${serverThreadsPerVM} - 1 ncf
            totalVMs     = fcn ${serverHosts} * ${serverVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"server\", ${serverHosts}, true)" ncf;                                
THREADGROUP clientThreads
            totalThreads = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM} -1  ncf
            totalVMs     = fcn ${clientHosts} * ${clientVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"client\", ${clientHosts}, true)" ncf;
                                
THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"client\", ${clientHosts}, true)" ncf; 
                                
THREADGROUP superUserBootThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"server\", ${serverHosts}, true)" ncf;                    
                                                                           
INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_initialize
  runMode = always
  threadGroups = superUserBootThread, serverThreads, ddlThread, clientThreads;
  
INITTASK taskClass = sql.security.SQLSecurityTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.security.SQLSecurityTest taskMethod = HydraTask_startGfxdLocatorTask
         runMode = always
         threadGroups = locator;                                

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_setupUsers
  threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_initUsers
  threadGroups = superUserBootThread, ddlThread, clientThreads, serverThreads;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_createAuthDiscDB
  threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_setupDerbyUserAuthentication
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_startAuthFabricServer
    runMode = always
    threadGroups = superUserBootThread, serverThreads;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_startAuthFabricServerAsSuperUser
    runMode = always
    threadGroups = superUserBootThread, serverThreads;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_startNetworkServer
		runMode = always
		threadGroups =  superUserBootThread, serverThreads;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_initEdges
		threadGroups = clientThreads, ddlThread;	
		
INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_setupGfxdUserAuthentication
    threadGroups = superUserBootThread;
    
INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_changePassword
    threadGroups = clientThreads;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_createDiscDB
    threadGroups = clientThreads;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_createDiscSchemas
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_createDiscTables
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_createGFESchemas
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_createGFETables
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_createFuncForSubquery
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_createFunctionToPopulate
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_setTableCols
    threadGroups = ddlThread;
    
INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_setSuperUserConnections
    threadGroups = clientThreads, ddlThread;

/* this is not supported by derby, hence no gemfirexd support either */
INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_delegatePrivilege
    threadGroups = ddlThread;

/* ddlThread is the owner of tables as, technically is not a delegated privilege,
 as WITH GRANT OPTION is not supported yet */
INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_grantDelegatedPrivilege
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_populateTables
    threadGroups = clientThreads, ddlThread;  

/*avoid #42507
INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_setUserAccessPriviledge
    threadGroups = ddlThread;
*/   

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_revokeDelegatedPrivilege
    threadGroups = ddlThread;
    
INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_populateTables
    threadGroups = clientThreads, ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_provideAllPrivToAll
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_populateTables
    threadGroups = clientThreads, ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_verifyResultSets
    threadGroups = ddlThread;

TASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_doOps
    threadGroups = clientThreads, ddlThread;
    
CLOSETASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_verifyResultSets
    threadGroups = ddlThread;
        
CLOSETASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_shutdownFabricServers
    threadGroups = superUserBootThread, serverThreads;

sql.SQLPrms-initCustomersSizePerThread = RANGE 20 30 EGNAR;
sql.SQLPrms-initSecuritiesSizePerThread = RANGE 10 30 EGNAR;
   
hydra.Prms-manageDerbyServer = true;  
hydra.Prms-totalTaskTimeSec           = 600;
hydra.Prms-maxResultWaitSec           = 300;
hydra.Prms-maxCloseTaskResultWaitSec  = 300;
hydra.Prms-serialExecution            = false;        

sql.SQLPrms-hasNetworth = true;    //will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory" ;   
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;

//securities has primary key and unique constraints
/* with the cascade delete
sql.SQLPrms-createTablesStatements =
  "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
  "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
  "create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete cascade, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
  "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete cascade, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete cascade, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
  "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
  "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
        "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
  "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
  "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";
*/

sql.SQLPrms-createTablesStatements =
  "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
  "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
  "create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
  "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
  "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
  "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
  "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
  "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
  "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";


sql.SQLPrms-testPartitionBy = true;

sql.SQLPrms-gfeDDLExtension =
  "trade.securities:random" 
  "trade.customers:random" 
  "trade.networth:random"
  "trade.portfolio:random"
  "trade.sellorders:random"
  "trade.buyorders:random" 
  "trade.txhistory:random"
  "emp.employees:random"
  "trade.trades:random" ;
   
hydra.Prms-extraDerbyServerVMArgs += "-Dderby.connection.requireAuthentication=true -Dderby.authentication.provider=BUILTIN -Dderby.database.sqlAuthorization=true -Dderby.user.superUser=superUser";

hydra.Prms-testSecurity = true;
hydra.gemfirexd.FabricServerPrms-fabricSecurityName = security;
hydra.gemfirexd.FabricServerPrms-hostData = false true false;                        

hydra.gemfirexd.FabricSecurityPrms-names = security;
hydra.gemfirexd.FabricSecurityPrms-user = superUser;
hydra.gemfirexd.FabricSecurityPrms-password = superUser;

hydra.gemfirexd.FabricSecurityPrms-authProvider=BUILTIN;
hydra.gemfirexd.FabricSecurityPrms-sqlAuthorization=true;

hydra.gemfirexd.NetworkServerPrms-names = server;
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = server;
sql.SQLPrms-useGfxdConfig = true;
sql.SQLPrms-numOfWorkers = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM} ncf;
sql.SQLPrms-usePublicAsGrantees = ${usePublicAsGrantees};

hydra.Prms-clientShutdownHook = sql.security.SQLSecurityClientTest HydraTask_shutdownFabricServers;

//add procedure testing
INITTASK     taskClass   = sql.security.SQLSecurityClientTest taskMethod  = HydraTask_createProcedures
    threadGroups = ddlThread;

sql.SQLPrms-ddlOperations = "procedure" "function" ;

sql.SQLPrms-hasRoutineInSecurityTest = true;

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen

