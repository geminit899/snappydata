hydra.Prms-testDescription = " this tests authentication and authorization";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_2_locator.inc;
INCLUDE $JTESTS/sql/security/extraDerbySetting.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;
 
THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;           
THREADGROUP dataStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) - 1 " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP accessorThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1  " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;  

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                               ${${B}Hosts}, true)" ncf;                                     
                               
THREADGROUP superUserBootThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                               ${${A}Hosts}, true)" ncf;                                     
                                                                           
INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_initialize
  runMode = always
  threadGroups = superUserBootThread, dataStoreThreads, ddlThread, accessorThreads;
  
INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_setupUsers
  threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_initUsers
  threadGroups = superUserBootThread, ddlThread, accessorThreads, dataStoreThreads;
  
INITTASK taskClass = sql.security.SQLSecurityTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.security.SQLSecurityTest taskMethod = HydraTask_startGfxdLocatorTask
         runMode = always
         threadGroups = locator;                                

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_createAuthDiscDB
  threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_setupDerbyUserAuthentication
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_startAuthFabricServerAsSuperUser
    threadGroups = superUserBootThread;
    
INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_setupGfxdUserAuthentication
    threadGroups = superUserBootThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_startAuthFabricServer
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_startAuthFabricServer
    threadGroups = accessorThreads, dataStoreThreads;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_createDiscDB
    threadGroups = accessorThreads;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_createDiscSchemas
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_createDiscTables
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_createGFESchemas
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_createGFETables
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_createFuncForSubquery
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_createFunctionToPopulate
    threadGroups = ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_setTableCols
    threadGroups = ddlThread;

/* comment out for #42501
INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_connectWithInvalidPassword
    threadGroups = accessorThreads;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_connectWithNoCredentials
    threadGroups = accessorThreads;
*/

/* comment out for #42502
INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_populateTables
    threadGroups = accessorThreads;	
*/
/* work around #42546
INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_setUserAccessPriviledge
    threadGroups = ddlThread;
*/    

/*
INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_fineGrainAuthorization
    threadGroups = ddlThread;
*/
INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_setSuperUserConnections
    threadGroups = accessorThreads, ddlThread;

INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_populateTables
    threadGroups = accessorThreads, ddlThread;
    
INITTASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_verifyResultSets
    threadGroups = ddlThread;

TASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_doDMLOp
    threadGroups = accessorThreads, ddlThread;
    
CLOSETASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_verifyResultSets
    threadGroups = ddlThread;
        
CLOSETASK     taskClass   = sql.security.SQLSecurityTest taskMethod  = HydraTask_shutdownFabricServers
    threadGroups = superUserBootThread, accessorThreads, dataStoreThreads, ddlThread ;

sql.SQLPrms-initCustomersSizePerThread = RANGE 20 30 EGNAR;
sql.SQLPrms-initSecuritiesSizePerThread = RANGE 10 30 EGNAR;

   
hydra.Prms-manageDerbyServer = true;  
hydra.Prms-totalTaskTimeSec           = 600;
hydra.Prms-maxResultWaitSec           = 300;
hydra.Prms-maxCloseTaskResultWaitSec  = 300;
hydra.Prms-serialExecution            = false;        

sql.SQLPrms-hasNetworth = true;    //will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory" ;   
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;
sql.SQLPrms-ddlOperations = "authorization" ;

//securities has primary key and unique constraints
/* with the cascade delete
sql.SQLPrms-createTablesStatements =
  "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
  "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
  "create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete cascade, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
  "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete cascade, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete cascade, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
  "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
  "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
        "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
  "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
  "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";
*/

sql.SQLPrms-createTablesStatements =
  "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
  "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
  "create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
  "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
  "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
  "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
    "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
  "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
  "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";


sql.SQLPrms-gfeDDLExtension =
  " "//" replicate" 
    "  partition by range (cid) ( VALUES BETWEEN 0 AND 999, VALUES BETWEEN 1000 AND 1102, VALUES BETWEEN 1103 AND 1250, VALUES BETWEEN 1251 AND 1677, VALUES BETWEEN 1678 AND 10000) "
  " "
  " partition by column (cid, sid) "
  " " //" partition by column (cid, sid) "  
  " " 
  " "
  " "
  " " ;
   
hydra.Prms-extraDerbyServerVMArgs += "-Dderby.connection.requireAuthentication=true -Dderby.authentication.provider=BUILTIN -Dderby.database.sqlAuthorization=true -Dderby.user.superUser=superUser";
sql.SQLPrms-populateThruLoader = true;

hydra.Prms-testSecurity = true;
hydra.gemfirexd.FabricServerPrms-fabricSecurityName = security;
hydra.gemfirexd.FabricServerPrms-hostData = false true false;                         

hydra.gemfirexd.FabricSecurityPrms-names = security;
hydra.gemfirexd.FabricSecurityPrms-user = superUser;
hydra.gemfirexd.FabricSecurityPrms-password = superUser;

hydra.gemfirexd.FabricSecurityPrms-authProvider=BUILTIN;
hydra.gemfirexd.FabricSecurityPrms-sqlAuthorization=true;

sql.SQLPrms-useGfxdConfig = true;
sql.SQLPrms-numOfWorkers = fcn ${${B}Hosts} * ${${B}VMsPerHost} * ${${B}ThreadsPerVM} ncf;
sql.SQLPrms-hasMultiSystemUsers = true;

hydra.Prms-clientShutdownHook = sql.security.SQLSecurityTest HydraTask_shutdownFabricServers;



RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen

