hydra.Prms-testDescription = "This tests GFXD as cache";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_3_locator.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;
hydra.gemfirexd.GfxdHelperPrms-persistDD = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf;
hydra.gemfirexd.GfxdHelperPrms-createDiskStore = true;

THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;           
THREADGROUP dataStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;
                                
THREADGROUP newDataNodeThreads
            totalThreads = fcn "(${${C}Hosts} * ${${C}VMsPerHost} *  ${${C}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${C}Hosts} * ${${C}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${C}\",
                                ${${C}Hosts}, true)" ncf;
                                                               

THREADGROUP accessorThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1  " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;  

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                               ${${B}Hosts}, true)" ncf;                                

hydra.VmPrms-extraVMArgs   = fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms${maxHeapSize}m -Xmx${maxHeapSize}m \", ${${A}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms${maxHeapSize}m -Xmx${maxHeapSize}m \", ${${B}Hosts}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicate
                                  (\"-Xms${maxHeapSize}m -Xmx${maxHeapSize}m \", ${${C}Hosts}, true)"
                             ncf;
                                                                           
	
INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_initialize
  runMode = always
  threadGroups = dataStoreThreads, ddlThread, accessorThreads;
  
INITTASK taskClass = sql.sqlTx.SQLDistTxTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.sqlTx.SQLDistTxTest taskMethod = HydraTask_startGfxdLocatorTask
         runMode = always
         threadGroups = locator;                                

INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_startFabricServer
    runMode = always
    threadGroups = accessorThreads, dataStoreThreads;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscDB
	threadGroups = accessorThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscSchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscTables
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFESchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiskStores
	threadGroups = ddlThread; 

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFETables
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_setHeapPercentage
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_setCriticalHeapPercentage
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFuncForProcedures
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFuncForSubquery
	threadGroups = ddlThread;	

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_setTableCols
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_populateTxTables
  threadGroups = accessorThreads, ddlThread;   	
  
INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_verifyResultSets
  threadGroups = ddlThread;  
	
TASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_doDMLOp
	 threadGroups = accessorThreads, ddlThread;
	 
TASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_increaseHeapNodeStart
	 threadGroups = newDataNodeThreads;	 

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initializeFabricServer
	threadGroups = newDataNodeThreads;
			 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServerWithRebalance
	 threadGroups = newDataNodeThreads;	 

CLOSETASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_verifyResultSets
  threadGroups = ddlThread;   				

CLOSETASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_clearTables
	threadGroups = ddlThread, accessorThreads;	
	//threadGroups = ddlThread;	
	 
CLOSETASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_stopFabricServer
	 threadGroups = ddlThread, accessorThreads, dataStoreThreads, newDataNodeThreads ; 		

ENDTASK taskClass = util.StatTasks taskMethod = validateStats;
	 
hydra.Prms-manageDerbyServer = true;
hydra.Prms-totalTaskTimeSec           = 1800;
hydra.Prms-maxResultWaitSec           = 1200;
hydra.Prms-maxCloseTaskResultWaitSec  = 600;
hydra.Prms-serialExecution            = false;	 			

sql.SQLPrms-hasNetworth = true;		//will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert insert insert insert insert insert insert update query delete FOENO;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory" ; 	
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;
sql.SQLPrms-useDefaultValue = true;

//without cascade delete
sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
	"create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid)) "
	"create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid), constraint sec_fk foreign key (sid) references trade.securities (sec_id), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10) default 'open', tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id), constraint bo_qty_ck check (qty>=0))"
	"create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";


sql.SQLPrms-testPartitionBy = true;
sql.SQLPrms-createDiskStore = "create diskstore OverflowDiskStore 'overflow'" ;

sql.SQLPrms-gfeDDLExtension =
	"trade.securities:random" //" replicate" 
        "trade.customers:random" // " partition by range (since) (VALUES BETWEEN CAST('1998-01-01'  AS DATE) AND CAST('2000-08-11' AS DATE),  VALUES BETWEEN CAST('2003-09-01' AS DATE) AND  CAST('2007-12-31' AS DATE) ) "
	"trade.networth:random"
	"trade.portfolio:random"
	"trade.sellorders:random"
        "trade.buyorders:random" //"  partition by range (cid) ( VALUES BETWEEN 0 AND 999, VALUES BETWEEN 1000 AND 1102, VALUES BETWEEN 1103 AND 1250, VALUES BETWEEN 1251 AND 1677, VALUES BETWEEN 1678 AND 10000) "
        "trade.txhistory:random"
	"emp.employees:random"
	"trade.trades:random" ;

sql.SQLPrms-testEviction = true;
sql.SQLPrms-useHeapPercentage = ${useHeapPercentage};
sql.SQLPrms-setCriticalHeap = ${setCriticalHeap};
sql.sqlTx.SQLTxPrms-useOriginalNonTx = true;
sql.SQLPrms-hasTx = true;
sql.SQLPrms-setTx = true; //reuse the original non-tx tests
sql.SQLPrms-testUniqueKeys = true;
sql.SQLPrms-useGfxdConfig = true;
sql.SQLPrms-rebalanceBuckets = true;

hydra.gemfirexd.FabricServerPrms-hostData = false true false;

