INCLUDE $JTESTS/sql/sqlEviction/evictionOverflow.conf;

hydra.GemFirePrms-offHeapMemorySize=${offHeapMemorySize};
sql.SQLPrms-isOffheap = true; 

// This test runs out of off-heap memory during the close task to clear the tables unless
// the following property is set. The problem is that to clear the tables, a select is done
// by GemfireXD when the test does "delete from <tablename>". The select causes 4k chunks
// of off-heap memory to be allocated for the result set, and the off-heap memory is so 
// fragmented, it cannot allocate the 4k chunk. Also, it does not evict to create space for 
// the 4K chunk because off-heap memory compactor does not work with the evictor. 
// 
// The solution to this problem is complex and involves both a change to the off-heap
// memory compactor (to move off-heap objects) and the evictor (to work with the compactor).
// After discussing this with Varad and the memscale team, the decision was to make this
// a dev task for GFXD1.1 and no bug is to be filed, rather we will document that a user must plan
// for enough off-heap memory to be able to allocate chunks for a query.
//
// In the meantime, to get the test to pass, this property creates those 4K chunks in heap
// memory. When we address this issue in the next release, we can just remove this one line
// (the setting of the property) to test it.
hydra.VmPrms-extraVMArgs += "-Dgemfire.ArrayOHAddressCache=true";

// verify off-heap memory at the end of the test and when members are taken down
INITTASK taskClass = memscale.OffHeapMemoryLifecycleListener taskMethod = install runMode=always;
CLOSETASK taskClass = util.AEQHelper taskMethod = waitForAsyncEventQueuesToDrain;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = waitForOffHeapSilence;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = verifyOffHeapMemoryConsistencyOnce;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = closeAllOffHeapRegions;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = verifyOffHeapMemoryConsistencyOnce;
ENDTASK taskClass = memscale.OffHeapMemoryLifecycleListener taskMethod = checkForErrors;

