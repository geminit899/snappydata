hydra.Prms-testDescription = " tbd ";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_client_locator.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-tools.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/jline-1.0.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../GemFireXDTests/classes;
hydra.VmPrms-extraVMArgs += "-Xmx1024m";

//hydra.Prms-manageDerbyServer = false;
hydra.Prms-totalTaskTimeSec           = 900;
hydra.Prms-maxResultWaitSec           = 300;
hydra.Prms-maxCloseTaskResultWaitSec  = 300;
hydra.Prms-serialExecution            = false;	
hydra.gemfirexd.FabricServerPrms-persistDD = true;

hydra.gemfirexd.NetworkServerPrms-names = server;
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = server;
sql.SQLPrms-useGfxdConfig = true;  	

THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;
  
THREADGROUP serverThreads
            totalThreads = fcn ${serverHosts} * ${serverVMsPerHost} * ${serverThreadsPerVM} ncf
            totalVMs     = fcn ${serverHosts} * ${serverVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"server\", ${serverHosts}, true)" ncf;                                
THREADGROUP edgeThreads
            totalThreads = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM} -1  ncf
            totalVMs     = fcn ${clientHosts} * ${clientVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"client\", ${clientHosts}, true)" ncf;
                                
THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"client\", ${clientHosts}, true)" ncf;      
                                
INITTASK taskClass = sql.sqlBridge.SQLBridgeTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.sqlBridge.SQLBridgeTest taskMethod = HydraTask_startGfxdLocatorTask
		 runMode = always
         threadGroups = locator;
                                
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_initializeServer
         runMode = always
         threadGroups = serverThreads;
         
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startFabricServer
		 runMode = always
         threadGroups = serverThreads;           
		
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startNetworkServer
		runMode = always
		threadGroups =  serverThreads;    

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_initEdges
		threadGroups = edgeThreads, ddlThread;	

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_runSQLScript
  		threadGroups = ddlThread;
  		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_loadUseCase2Data
  		threadGroups = ddlThread;

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_generateQueryData
  		threadGroups = edgeThreads, ddlThread;
  		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_createProcessorAlias
  		threadGroups = ddlThread; 

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_createListAggProcedure 
  		threadGroups = ddlThread;   		  				

/*	
TASK     taskClass   = sql.poc.useCase2.PerfTestListAgg taskMethod = HydraTask_perfTestListAgg
  		threadGroups = ddlThread, edgeThreads;
		
TASK     taskClass   = sql.poc.useCase2.TestListAgg taskMethod = HydraTask_testListAgg
  		threadGroups = ddlThread, edgeThreads;		
*/

TASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_callProcedures 
  		threadGroups = ddlThread, edgeThreads;	  
	
sql.SQLPrms-loadUseCase2LargeDataFile = ONEOF true false FOENO;	                                 

sql.SQLPrms-sqlFilePath = sql/poc/useCase2/createTables.sql;	

INCLUDE $JTESTS/sql/poc/useCase2/offHeap.inc; // uses off-heap if include is randomly chosen
