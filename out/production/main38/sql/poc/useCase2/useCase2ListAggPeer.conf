hydra.Prms-testDescription = " tbd ";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_2_locator.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-tools.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/jline-1.0.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../GemFireXDTests/classes;
hydra.VmPrms-extraVMArgs += "-Xmx1024m";

hydra.Prms-totalTaskTimeSec           = 900;
hydra.Prms-maxResultWaitSec           = 300;
hydra.Prms-maxCloseTaskResultWaitSec  = 300;
hydra.Prms-serialExecution            = false;	
hydra.gemfirexd.FabricServerPrms-persistDD = true;
 
THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;         

THREADGROUP dataStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP accessorThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1  " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;  

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                               ${${B}Hosts}, true)" ncf;

sql.SQLPrms-useGfxdConfig = true;     
hydra.gemfirexd.FabricServerPrms-hostData = false true false;
                             
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
         runMode = always
         threadGroups = locator;                                

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initializeFabricServer
	runMode = always
	threadGroups = dataStoreThreads, ddlThread, accessorThreads;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer
	runMode = always
    threadGroups = dataStoreThreads, accessorThreads;

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_runSQLScript
  		threadGroups = ddlThread;
  		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_loadUseCase2Data
  		threadGroups = ddlThread;

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_generateQueryData
  		threadGroups = accessorThreads, ddlThread;
  		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_createProcessorAlias
  		threadGroups = ddlThread; 

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_createListAggProcedure 
  		threadGroups = ddlThread;   		  				

/*	
TASK     taskClass   = sql.poc.useCase2.PerfTestListAgg taskMethod = HydraTask_perfTestListAgg
  		threadGroups = ddlThread, edgeThreads;
		
TASK     taskClass   = sql.poc.useCase2.TestListAgg taskMethod = HydraTask_testListAgg
  		threadGroups = ddlThread, edgeThreads;		
*/

TASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_callProcedures 
  		threadGroups = ddlThread, accessorThreads;	  
	
sql.SQLPrms-loadUseCase2LargeDataFile = ONEOF true false FOENO;	                                 

sql.SQLPrms-sqlFilePath = sql/poc/useCase2/createTables.sql;	

INCLUDE $JTESTS/sql/poc/useCase2/offHeap.inc; // uses off-heap if include is randomly chosen
