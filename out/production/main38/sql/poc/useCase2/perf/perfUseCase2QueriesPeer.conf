hydra.Prms-testDescription = " tbd ";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_2_locator.inc;
include $JTESTS/hydraconfig/gemfirexd/performance.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-tools.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/jline-1.0.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../GemFireXDTests/classes;
hydra.VmPrms-extraVMArgs += "-Xmx2048m";

hydra.Prms-maxResultWaitSec = 900;   
hydra.Prms-totalTaskTimeSec = 360000; // 100 hours
hydra.Prms-serialExecution            = false;	
 
THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;         

THREADGROUP dataStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP accessorThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1  " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;  

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                               ${${B}Hosts}, true)" ncf;

sql.SQLPrms-useGfxdConfig = true;     

                             
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
         runMode = always
         threadGroups = locator;                                

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initializeFabricServer
	runMode = always
	threadGroups = dataStoreThreads, ddlThread, accessorThreads;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer
	runMode = always
    threadGroups = dataStoreThreads, accessorThreads;

INITTASK     taskClass   = sql.poc.useCase2.perf.QueryPerfClient taskMethod  = HydraTask_setupConnection
        runMode = always
    threadGroups = ddlThread, accessorThreads;

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_runSQLScript
  		threadGroups = ddlThread
  		sql.SQLPrms-sqlFilePath = sql/poc/useCase2/createTables.sql;
  		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_runSQLScript
  		threadGroups = ddlThread
  		sql.SQLPrms-sqlFilePath = sql/poc/useCase2/createAdditionalTables.sql;	
  		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_loadUseCase2Data
  		threadGroups = ddlThread;
  		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_loadUseCase2Data_DOC_3
  		threadGroups = ddlThread;  		
  		
INITTASK  taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = HydraTask_addData
          threadGroups = accessorThreads, ddlThread;  		
 
/* 		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_createProcessorAlias
  		threadGroups = ddlThread; 

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_createListAggProcedure 
  		threadGroups = ddlThread;   		  				
*/

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_createIndex 
  		threadGroups = ddlThread;   
  		
INITTASK  taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = openStatisticsTask
          threadGroups = accessorThreads, ddlThread;

INITTASK     taskClass   = sql.poc.useCase2.perf.QueryPerfClient taskMethod = HydraTask_generateQueryData
  		threadGroups = accessorThreads, ddlThread;

INITTASK     taskClass   = sql.poc.useCase2.perf.QueryPerfClient taskMethod = HydraTask_generateQueryDataDOC_3
  		threadGroups = accessorThreads, ddlThread;
		
INITTASK  taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = initQueryTask 
          threadGroups = accessorThreads, ddlThread;	
/*          
INITTASK  taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = HydraTask_initInsertInputStream 
          threadGroups = accessorThreads, ddlThread;
*/
/*
TASK      taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = queryTask
          threadGroups = accessorThreads, ddlThread
	  	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnTotalIterations;
*/	

TASK      taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = selectQueryTask
          threadGroups = accessorThreads, ddlThread
	  	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnTotalIterations;
  	  
CLOSETASK taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = reportTrimIntervalsTask
          threadGroups = accessorThreads, ddlThread;

CLOSETASK taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = closeStatisticsTask
          threadGroups = accessorThreads, ddlThread;  

cacheperf.CachePerfPrms-trimIterations = ${trimIterations};
cacheperf.CachePerfPrms-workIterations = ${workIterations};
cacheperf.CachePerfPrms-batchSize      = ${batchSize}; 
cacheperf.CachePerfPrms-maxKeys = 1000000;
perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/sql/poc/useCase2/perf/query.spec;	

hydra.gemfirexd.FabricServerPrms-hostData = false true false ;
hydra.gemfirexd.FabricServerPrms-persistDD = false true false ;
hydra.gemfirexd.FabricServerPrms-persistTables = false true false ;

sql.SQLPrms-useGfxdConfig = true;  	                              
sql.SQLPrms-createIndex = ${createIndex}; 
sql.SQLPrms-useOldListAgg = ${useOldListAgg};
sql.SQLPrms-useListAggNewImpl = ${useListAggNewImpl}; 
sql.poc.useCase2.perf.QueryPerfPrms-exeQueryNum = ${whichDAP};  

sql.SQLPrms-numOfWorkers = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM})  " ncf;                            
