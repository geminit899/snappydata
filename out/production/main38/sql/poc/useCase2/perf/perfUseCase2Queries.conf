hydra.Prms-testDescription = " tbd ";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_client_locator.inc;
include $JTESTS/hydraconfig/gemfirexd/performance.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-tools.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/jline-1.0.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../GemFireXDTests/classes;
hydra.VmPrms-extraVMArgs += "-Xmx1024m";

hydra.Prms-maxResultWaitSec = 900;    
hydra.Prms-totalTaskTimeSec = 360000; // 100 hours
hydra.Prms-serialExecution            = false;	

THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;
  
THREADGROUP serverThreads
            totalThreads = fcn ${serverHosts} * ${serverVMsPerHost} * ${serverThreadsPerVM} ncf
            totalVMs     = fcn ${serverHosts} * ${serverVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"server\", ${serverHosts}, true)" ncf;                                
THREADGROUP edgeThreads
            totalThreads = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM} -1  ncf
            totalVMs     = fcn ${clientHosts} * ${clientVMsPerHost} ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"client\", ${clientHosts}, true)" ncf;
                                
THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames
                                (\"client\", ${clientHosts}, true)" ncf;      
                                
INITTASK taskClass = sql.sqlBridge.SQLBridgeTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.sqlBridge.SQLBridgeTest taskMethod = HydraTask_startGfxdLocatorTask
		 runMode = always
         threadGroups = locator;
                                
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_initializeServer
         runMode = always
         threadGroups = serverThreads;
         
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startFabricServer
		 runMode = always
         threadGroups = serverThreads;           
		
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startNetworkServer
		runMode = always
		threadGroups =  serverThreads;    

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_initEdges
		threadGroups = edgeThreads, ddlThread;	
		
INITTASK  taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = HydraTask_setupLoner
          threadGroups =  edgeThreads, ddlThread;

INITTASK  taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = openStatisticsTask
          threadGroups = ddlThread, edgeThreads;

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_runSQLScript
  		threadGroups = ddlThread
  		sql.SQLPrms-sqlFilePath = sql/poc/useCase2/createTables.sql;	
  		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_runSQLScript
  		threadGroups = ddlThread
  		sql.SQLPrms-sqlFilePath = sql/poc/useCase2/createAdditionalTables.sql;
  		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_loadUseCase2Data
  		threadGroups = ddlThread;
		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_loadUseCase2Data_DOC_3
  		threadGroups = ddlThread; 		

INITTASK  taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = HydraTask_addData
          threadGroups = edgeThreads, ddlThread;  	
		
INITTASK     taskClass   = sql.poc.useCase2.perf.QueryPerfClient taskMethod = HydraTask_generateQueryData
  		threadGroups = edgeThreads, ddlThread;

INITTASK     taskClass   = sql.poc.useCase2.perf.QueryPerfClient taskMethod = HydraTask_generateQueryDataDOC_3
  		threadGroups = edgeThreads, ddlThread;

/*  		 		
INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_createProcessorAlias
  		threadGroups = ddlThread; 

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_createListAggProcedure 
  		threadGroups = ddlThread;   		  				
*/

INITTASK     taskClass   = sql.poc.useCase2.UseCase2Test taskMethod = HydraTask_createIndex 
  		threadGroups = ddlThread;   	

INITTASK  taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = initQueryTask 
          threadGroups = ddlThread, edgeThreads;

/*
TASK      taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = queryTask
          threadGroups = ddlThread, edgeThreads
	  	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnTotalIterations;
*/

TASK      taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = selectQueryTask
          threadGroups = edgeThreads, ddlThread
	  	  cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnTotalIterations;
	  	  
CLOSETASK taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = reportTrimIntervalsTask
          threadGroups = ddlThread, edgeThreads;

CLOSETASK taskClass = sql.poc.useCase2.perf.QueryPerfClient taskMethod = closeStatisticsTask
          threadGroups = ddlThread, edgeThreads;

cacheperf.CachePerfPrms-trimIterations = ${trimIterations};
cacheperf.CachePerfPrms-workIterations = ${workIterations};
cacheperf.CachePerfPrms-batchSize      = ${batchSize}; 
cacheperf.CachePerfPrms-maxKeys = 1000000;
perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/sql/poc/useCase2/perf/query.spec;		

hydra.gemfirexd.LonerPrms-names = client;
hydra.gemfirexd.LonerPrms-clientNames =
  fcn "hydra.TestConfigFcns.generateNames(\"client\", ${clientHosts})" ncf
  ;

hydra.gemfirexd.ThinClientPrms-names = client;
hydra.gemfirexd.ThinClientPrms-clientNames =
  fcn "hydra.TestConfigFcns.generateNames(\"client\", ${clientHosts})" ncf
  ;

hydra.gemfirexd.FabricServerPrms-names = locator server;
hydra.gemfirexd.FabricServerPrms-clientNames =
  fcn "hydra.TestConfigFcns.generateNames(\"locator\", ${locatorHosts})" ncf
  ,
  fcn "hydra.TestConfigFcns.generateNames(\"server\", ${serverHosts})" ncf
  ;
hydra.gemfirexd.FabricServerPrms-hostData = false true;
hydra.gemfirexd.FabricServerPrms-persistDD = false true;
hydra.gemfirexd.FabricServerPrms-persistTables = false true;

hydra.gemfirexd.NetworkServerPrms-names = network;

hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = network;   
sql.SQLPrms-useGfxdConfig = true;  	 

sql.SQLPrms-createIndex = ${createIndex}; 
sql.SQLPrms-useOldListAgg = ${useOldListAgg};
sql.SQLPrms-useListAggNewImpl = ${useListAggNewImpl};    
sql.poc.useCase2.perf.QueryPerfPrms-exeQueryNum = ${whichDAP};   
                             
sql.SQLPrms-useListAggPreparedStmt = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf; 

sql.SQLPrms-numOfWorkers =  fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM}  ncf;
