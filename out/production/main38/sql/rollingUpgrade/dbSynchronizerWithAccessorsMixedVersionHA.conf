hydra.Prms-testDescription = " this tests DBSynchronizer";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_2_locator.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;
hydra.VmPrms-extraVMArgs			+= "-Dhydra.no-server-group-roles=true";
  
THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;   
                                          
THREADGROUP asynchDBThreads
            totalThreads = 2
            totalVMs     = 2
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                2, true)" ncf;                                

THREADGROUP dataStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) - 2 " ncf 
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost}) - 2 " ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}-2, 3, true)" ncf;
                                
THREADGROUP accessorThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1  " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;  

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;                                     

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initializeFabricServer
	runMode = always
	threadGroups = dataStoreThreads, ddlThread, accessorThreads, asynchDBThreads;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initForServerGroup
	threadGroups = ddlThread;	
	
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
         runMode = always
         threadGroups = locator;   
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscDB
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscSchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServerSG
	runMode = always
	threadGroups = dataStoreThreads;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServerSGDBSynchronizer
	runMode = always
	threadGroups = asynchDBThreads;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer
	threadGroups = accessorThreads;
		
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFESchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createUDTPriceType
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createUUIDType
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = hydraTask_createUDTPriceFunctions
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscTables
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiskStores
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFETables
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDBSynchronizer
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startDBSynchronizer
	threadGroups = ddlThread;	

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createCompaniesTable
	threadGroups = ddlThread;
		
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_dropCompaniesFK
	threadGroups = ddlThread;
		
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_populateTablesDBSynchronizer
	threadGroups = accessorThreads;		
			
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_addCompaniesFK
	threadGroups = ddlThread;	
		
INCLUDE $JTESTS/sql/indexOp.inc;	

INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask
		threadGroups = asynchDBThreads;
		
TASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_doDMLOpDBSynchronizer
	 threadGroups = accessorThreads, ddlThread;

TASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_cycleAsynchDBVm
             threadGroups = ddlThread;

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_putLastKeyDBSynchronizer
	 threadGroups = ddlThread;
			
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSetsDBSynchronizer
	 threadGroups = ddlThread;

sql.SQLPrms-serverGroups = fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList1} \", ${SGvms1}, true)"
                             ncf 
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList2}  \", ${SGvms2}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList3}  \",${SGvms3}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList4}  \", ${SGvms4} , true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList5}  \",${SGvms5}, true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList6}  \", ${SGvms6} , true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList7}  \", ${SGvms7} , true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList8}  \", ${SGvms8} , true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList9}  \", ${SGvms9} , true)"
                             ncf
                             ,
                             fcn "hydra.TestConfigFcns.duplicateString
                                  (\"${SGList10}  \", ${SGvms10} , true)"
                             ncf
                             ;
                                                                
//temp for quick test run
/*
sql.SQLPrms-initCustomersSizePerThread = RANGE 10 30 EGNAR;
sql.SQLPrms-initSecuritiesSizePerThread = RANGE 10 30 EGNAR;
*/
	
hydra.Prms-manageDerbyServer = true;
hydra.Prms-extraDerbyServerVMArgs += "-Xmx256m -Dderby.storage.pageCacheSize=16000";
hydra.Prms-totalTaskTimeSec           = 600;
hydra.Prms-maxResultWaitSec           = 600;
hydra.Prms-maxCloseTaskResultWaitSec  = 1800;
hydra.Prms-serialExecution            = false;				

sql.SQLPrms-hasNetworth = true;		//will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert insert update update update query query delete FOENO;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory" "trade.companies"; 	
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;
sql.SQLPrms-hasAsyncDBSync = true;
util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = 1;

//securities has primary key and unique constraints
/* with the cascade delete
sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
	"create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete cascade, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete cascade, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete cascade, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
        "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";
*/

sql.SQLPrms-createTablesStatements =
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
	"create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
	"create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
	"create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
	"create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
    "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))"
	"create table default1.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))";

sql.SQLPrms-testPartitionBy = true;
sql.SQLPrms-testServerGroups = true;
sql.SQLPrms-testServerGroupsInheritence = true;
sql.SQLPrms-withReplicatedTables =${withReplicatedTables};
sql.SQLPrms-testUniqueKeys = ${testUniqueKeys};

sql.SQLPrms-enableQueuePersistence = ONEOF true false FOENO;
sql.SQLPrms-enableQueueConflation = ONEOF true false FOENO;


sql.SQLPrms-gfeDDLExtension =
	"${securities}" 
    "${customers}" 
	"${networth}"
	"${portfolio}"
	"${sellorders}"
     "${buyorders}"
     "${txhistory}"
	"emp.employees:random:random"
	"trade.trades:random:random" 
	"default1.employees:random:random" ;
	
sql.SQLPrms-createDiskStore = "create diskstore DBSynchStore 'persistDir'";
hydra.gemfirexd.GfxdHelperPrms-createDiskStore = true;
  	
hydra.VmPrms-extraVMArgs  += "-Xmx1024m";
sql.SQLPrms-hasCompanies=true;
sql.SQLPrms-companiesTableDDLExtension = "trade.companies:random:random";
sql.SQLPrms-numOfWorkers = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) " ncf;

//fabricserver config
sql.SQLPrms-useGfxdConfig = true;
hydra.gemfirexd.FabricServerPrms-hostData = false true false;

//followings are versioning config
hydra.ClientPrms-versionNames =
  fcn "hydra.TestConfigFcns.duplicate
       (\"default\", ${locatorHosts})"
  ncf
  fcn "hydra.TestConfigFcns.pool
       (\"oldversion default\", ${${A}Hosts})"
  ncf
  fcn "hydra.TestConfigFcns.duplicate
       (\"default\", ${${B}Hosts})"
  ncf;

hydra.VersionPrms-names = oldversion;
hydra.VersionPrms-version = ${version}; 	

