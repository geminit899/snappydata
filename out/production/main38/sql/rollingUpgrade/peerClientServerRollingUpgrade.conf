hydra.Prms-testDescription = " SQLfire and network partitioning test in p2p";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_3_locator.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
 
THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;         

THREADGROUP peerServerThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM})" ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP peerClientThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) - 1" ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;
                                
THREADGROUP controllerThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${C}\",
                               ${${C}Hosts}, true)" ncf;

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                               ${${B}Hosts}, true)" ncf;

sql.rollingUpgrade.SQLRollingUpgradePrms-threadGroupNames = peerClientThreads ddlThread;
sql.rollingUpgrade.SQLRollingUpgradePrms-clientVMNamesForRestart = locator peerServer peerClient;
sql.rollingUpgrade.SQLRollingUpgradePrms-performDDLOps = ${performDDLOps};
hydra.ClientPrms-versionNames = version1;
hydra.VersionPrms-names    = version1;
hydra.VersionPrms-versions = 100 default;

hydra.Prms-manageDerbyServer = false;
hydra.Prms-maxResultWaitSec           = 3000;
hydra.Prms-totalTaskTimeSec = 7200; // test is workload based
hydra.Prms-serialExecution            = false; 
sql.SQLPrms-useGfxdConfig = true;                                  
hydra.GemFirePrms-enableNetworkPartitionDetection = true;

INITTASK    taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask
            runMode = always;

INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
         runMode = always
         threadGroups = locator;                                

INITTASK     taskClass   = sql.rollingUpgrade.SQLRollingUpgradeTest taskMethod  = HydraTask_initialize
 runMode = always
 threadGroups = peerClientThreads, peerServerThreads, ddlThread;

INITTASK     taskClass   = sql.rollingUpgrade.SQLRollingUpgradeTest taskMethod  = HydraTask_initController
 runMode = always
 threadGroups = controllerThread;


 INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer
 runMode = always
    threadGroups = peerClientThreads, peerServerThreads, ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscDB
 threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscSchemas
 threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscTables
 threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFESchemas
 threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiskStores
  threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFETables
 threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFuncForProcedures
 threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFuncForSubquery
 threadGroups = ddlThread; 
 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFunctionToPopulate
 threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_populateTables
 threadGroups = peerClientThreads, ddlThread; 

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
 threadGroups = peerClientThreads, ddlThread;

TASK        taskClass     = sql.rollingUpgrade.SQLRollingUpgradeTest taskMethod = HydraTask_doDMLOpPauseAndVerify
            threadGroups = peerClientThreads, ddlThread;

TASK        taskClass     = sql.rollingUpgrade.SQLRollingUpgradeTest taskMethod = HydraTask_UpgradeController
            threadGroups = controllerThread
            maxTimesToRun = 1;

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
  threadGroups = peerClientThreads, ddlThread;
 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_clearTables
 threadGroups = peerClientThreads, ddlThread; 
  
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownDB
  threadGroups = ddlThread;

sql.SQLPrms-hasNetworth = true;  //will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;
sql.SQLPrms-ddlOperations = "procedure" "function" ;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory" ;  
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;

hydra.VmPrms-extraClassPaths        +=   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derby.jar";
hydra.VmPrms-extraClassPaths        +=   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbyclient.jar";
hydra.VmPrms-extraClassPaths        +=   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbytools.jar";
hydra.Prms-derbyServerClassPath     =   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbynet.jar";
hydra.Prms-extraDerbyServerVMArgs += " -Xmx1024m -Dderby.storage.pageCacheSize=32000 -Dderby.locks.waitTimeout=30 -Dderby.locks.deadlockTimeout=20 ";
hydra.Prms-clientShutdownHook += sql.SQLTest dumpResults;
hydra.GemFirePrms-conserveSockets = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf;
hydra.gemfirexd.FabricServerPrms-conserveSockets = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf; 

sql.SQLPrms-dropProc = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf; //whether there are concurrent ddl ops of procedures

hydra.gemfirexd.FabricServerPrms-tableDefaultPartitioned = ${tableDefaultPartitioned};
hydra.gemfirexd.FabricServerPrms-enableNetworkPartitionDetection  = true;
sql.rollingUpgrade.SQLRollingUpgradePrms-opsTaskGranularitySec = 45;
util.TestHelperPrms-minTaskGranularitySec = 10; // length of ops per region

//securities has primary key and unique constraints
/* with cascade delete
sql.SQLPrms-createTablesStatements =
 "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
 "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
 "create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete cascade, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
 "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid), constraint sec_fk foreign key (sid) references trade.securities (sec_id), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
 "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete cascade, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
 "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id), constraint bo_qty_ck check (qty>=0))"
        "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
 "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
 "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";
*/

//without cascade delete
sql.SQLPrms-createTablesStatements =
 "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
 "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
 "create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
 "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid), constraint sec_fk foreign key (sid) references trade.securities (sec_id), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
 "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
 "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id), constraint bo_qty_ck check (qty>=0))"
 "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))" "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
 "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";

sql.rollingUpgrade.SQLRollingUpgradePrms-ddlCreateTableStatements =
"(tempId int not null, name varchar(10) not null, salary decimal (30, 20), address varchar(10) not null, dept varchar(20))";

sql.rollingUpgrade.SQLRollingUpgradePrms-ddlCreateTableExtensions =
"replicate";


sql.SQLPrms-testPartitionBy = ${testPartitionBy};
sql.SQLPrms-withReplicatedTables = true;
sql.SQLPrms-populateTableUsingFunction = false;
sql.SQLPrms-alterTableDropColumn = true;
sql.SQLPrms-useGemFireXDHA = true;
hydra.gemfirexd.GfxdHelperPrms-persistDD     = false;
hydra.gemfirexd.GfxdHelperPrms-persistTables = false;
hydra.gemfirexd.FabricServerPrms-persistDD = false;
hydra.gemfirexd.FabricServerPrms-persistTables = false;
hydra.gemfirexd.FabricServerPrms-hostData = false true false false;
util.StopStartPrms-numVMsToStop = 1;
sql.SQLPrms-gfeDDLExtension =
 "${securities}" 
    "${customers}" 
 "${networth}"
 "${portfolio}"
 "${sellorders}"
    "${buyorders}"
    "${txhistory}"
    "${employees}"
 "${trades}";

 sql.SQLPrms-redundancyClause =
     " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"  
 " REDUNDANCY ${redundantCopies}" 
    " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
  " REDUNDANCY ${redundantCopies}" ;

RANDOMINCLUDE $JTESTS/sql/rollingUpgrade/offHeap.inc; // uses off-heap if include is randomly chosen
