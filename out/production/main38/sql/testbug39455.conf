hydra.Prms-testDescription = " this tests derby on gfe, no verification avail for the test -- see if hangs";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/systemparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_p2p_1.inc;

/*
hydra.VmPrms-extraClassPaths        +=   "/gcm/where/java/derby/derby-10.4.2.0/jars/insane/derby.jar";
hydra.VmPrms-extraClassPaths        +=   "/gcm/where/java/derby/derby-10.4.2.0/jars/insane/derbynet.jar";
hydra.VmPrms-extraClassPaths        +=   "/gcm/where/java/derby/derby-10.4.2.0/jars/insane/derbyclient.jar";
*/
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraVMArgs += "-Dgemfirexd.jdbc.client=false";
hydra.GemFirePrms-roles += "gemfirexd.datastore";
hydra.Prms-manageDerbyServer = true;

hydra.Prms-totalTaskTimeSec           = 180;
hydra.Prms-maxResultWaitSec           = 120;
hydra.Prms-maxCloseTaskResultWaitSec  = 120;
hydra.Prms-serialExecution            = false;

hydra.CachePrms-names = defaultCache;

THREADGROUP initThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf;
            
THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1 ;                

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initialize
	threadGroups = initThreads, default;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscDB
	threadGroups = initThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscSchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscTables
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFEDB
	threadGroups = initThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFESchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFETables
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_populateTables
	;	
		
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	threadGroups = initThreads;	

TASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_doDMLOp
	 threadGroups = ddlThread, initThreads, default;
			
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	 threadGroups = initThreads;	

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen

sql.SQLPrms-dmlOperations = ONEOF insert update query delete FOENO;
sql.SQLPrms-dmlTables = "trade.customers" "trade.securities";
sql.SQLPrms-hasNetworth = false;
	
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;

//securities has primary key and unique constraints
sql.SQLPrms-createTablesStatements =
	"create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
	"create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (10, 2), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"	
	"create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
	"create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";

sql.SQLPrms-gfeDDLExtension =
	" " //" replicate"
	" "//" replicate"
	" " 
	" " ;

  	
