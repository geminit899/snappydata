hydra.Prms-testDescription = " test server network partition with clients on the master controller host side ";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_2_locator.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-tools.jar;

hydra.Prms-manageDerbyServer = true;
hydra.Prms-maxResultWaitSec  = 3000;
hydra.Prms-totalTaskTimeSec  = 7200; // test is workload based
hydra.Prms-serialExecution   = false; 
hydra.gemfirexd.GfxdHelperPrms-persistDD     = true;
hydra.gemfirexd.GfxdHelperPrms-persistTables = true;

hydra.VmPrms-extraClassPaths        +=   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derby.jar";
hydra.VmPrms-extraClassPaths        +=   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbyclient.jar";
hydra.VmPrms-extraClassPaths        +=   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbytools.jar";
hydra.Prms-derbyServerClassPath     =   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbynet.jar";
hydra.Prms-extraDerbyServerVMArgs += " -Xmx1024m -Dderby.storage.pageCacheSize=32000 -Dderby.locks.waitTimeout=30 -Dderby.locks.deadlockTimeout=20 ";
hydra.Prms-clientShutdownHook += sql.SQLTest dumpResults;
hydra.GemFirePrms-conserveSockets = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf;
hydra.gemfirexd.FabricServerPrms-conserveSockets = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf; 

sql.SQLPrms-dropProc = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf; //whether there are concurrent ddl ops of procedures
sql.SQLPrms-initCustomersSizePerThread = RANGE 20 50 EGNAR;
sql.SQLPrms-initSecuritiesSizePerThread = RANGE 10 30 EGNAR;
sql.SQLPrms-hasNetworth = true;  //will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;
sql.SQLPrms-ddlOperations = "procedure" ;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory";   
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;
sql.SQLPrms-dropIndex = ${dropIndex};
sql.SQLPrms-createIndex = ${createIndex};

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = RANGE 1 ${redundantCopies} EGNAR;


THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;
                                
THREADGROUP serverThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) - 1" ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;  
                                
THREADGROUP controllerThread                                
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                               ${${A}Hosts}, true)" ncf;


//sql.rollingUpgrade.SQLRollingUpgradePrms-threadGroupNames = edgeThreads ddlThread;
sql.rollingUpgrade.SQLRollingUpgradePrms-threadGroupNames = serverThreads;
sql.rollingUpgrade.SQLRollingUpgradePrms-clientVMNamesForRestart = locator server;
sql.rollingUpgrade.SQLRollingUpgradePrms-performDDLOps = ${performDDLOps};
hydra.ClientPrms-versionNames = version1;
hydra.VersionPrms-names    = version1;
hydra.VersionPrms-versions = ${upgradeVersion1} ${upgradeVersion2};

INITTASK    taskClass     = util.StopStartVMs  taskMethod = StopStart_initTask
            runMode = always;

INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
         runMode = always
         threadGroups = locator;

INITTASK     taskClass   = sql.rollingUpgrade.SQLRollingUpgradeBridgeTest taskMethod  = HydraTask_initController
    threadGroups = controllerThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initializeFabricServer
         threadGroups = locator, serverThreads, ddlThread;
         
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer_Once
	threadGroups = serverThreads, ddlThread;        
         
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscDB
 threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscSchemas
 threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFESchemas
  threadGroups = ddlThread;
  
//INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiskStores
  //threadGroups = ddlThread;
  
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createUDTPriceType
 threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createUUIDType
 threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.SQLTest taskMethod  = hydraTask_createUDTPriceFunctions
 threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscTables
 threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFETables
  threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createUniqIndex
 threadGroups = ddlThread;
 
//set table column info for each used by index creation, need only one thread to set in the BB
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_setTableCols
 threadGroups = ddlThread; 
 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_populateTables
 threadGroups = ddlThread; 
  
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
      threadGroups = ddlThread;      

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFuncForProcedures
      threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createProcedures
      threadGroups = ddlThread; 
  
INITTASK     taskClass     = sql.SQLTest taskMethod = HydraTask_doDMLOpInInit
         threadGroups = serverThreads, ddlThread;
            
INITTASK   taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
  		 threadGroups =  ddlThread;            

INITTASK   taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownAllFabricServers
	     threadGroups =	 ddlThread;
	 		
INITTASK   taskClass   = sql.SQLTest taskMethod  = HydraTask_stopGfxdLocatorTask
	     threadGroups =	 ddlThread;
	 
TASK   taskClass     = sql.rollingUpgrade.SQLRollingUpgradeBridgeTest taskMethod = HydraTask_UpgradeVersion
         threadGroups = controllerThread
         maxTimesToRun = 1; 
            
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initializeFabricServer
         threadGroups = locator, serverThreads, ddlThread;
         
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer_Once
	     threadGroups = serverThreads, ddlThread;    
	     
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_waitForStartupRecovery
	     threadGroups = serverThreads, ddlThread; 	    
	            
CLOSETASK    taskClass     = sql.SQLTest taskMethod = HydraTask_doDMLOp
         threadGroups = serverThreads, ddlThread;

CLOSETASK   taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
  	     threadGroups =  serverThreads, ddlThread;
  	            
hydra.gemfirexd.NetworkServerPrms-names = serverHA;
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = serverHA;
sql.rollingUpgrade.SQLRollingUpgradePrms-opsTaskGranularitySec = 45;
sql.SQLPrms-useGemFireXDHA = true;
sql.SQLPrms-useGfxdConfig = true;

hydra.gemfirexd.FabricServerPrms-tableDefaultPartitioned = ${tableDefaultPartitioned};

// locator server client
hydra.gemfirexd.FabricServerPrms-hostData = false true false false;

//securities has primary key and unique constraints
sql.SQLPrms-createTablesStatements =
 "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
 "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
 "create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
 "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
 "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
 "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
 "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
 "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
 "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";

sql.rollingUpgrade.SQLRollingUpgradePrms-ddlCreateTableStatements =
"(tempId int not null, name varchar(10) not null, salary decimal (30, 20), address varchar(10) not null, dept varchar(20))";

sql.rollingUpgrade.SQLRollingUpgradePrms-ddlCreateTableExtensions =
"replicate";
    
sql.SQLPrms-gfeDDLExtension =
	"trade.securities:random" 
    "trade.customers:random" 
    "trade.networth:random"
	"trade.portfolio:random"
	"trade.sellorders:random"
    "trade.buyorders:random" 
    "trade.txhistory:random"
	"emp.employees:random"
	"trade.trades:replicate";

sql.SQLPrms-redundancyClause =
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"  
 " REDUNDANCY ${redundantCopies}" 
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}" ;
 
sql.SQLPrms-gfePersistExtension = 
	" PERSISTENT " 
    " PERSISTENT "
	" PERSISTENT "
	" PERSISTENT "
	" PERSISTENT "  
	" PERSISTENT " 
	" PERSISTENT "
	" PERSISTENT "
	" PERSISTENT " ;
 	
sql.SQLPrms-testUniqIndex = oneof true false foeno;
util.StopStartPrms-numVMsToStop = 1;
hydra.VmPrms-extraVMArgs  += "-Xmx1024m";
sql.SQLPrms-useGfxdConfig = true;

sql.SQLPrms-testPartitionBy = ${testPartitionBy};
sql.SQLPrms-withReplicatedTables = true;
sql.SQLPrms-alterTableDropColumn = true;