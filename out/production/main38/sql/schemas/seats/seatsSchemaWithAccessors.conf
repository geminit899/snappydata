hydra.Prms-testDescription = "Implements seats schema ";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_3_locator.inc;

hydra.gemfirexd.FabricServerPrms-conserveSockets = false;
hydra.gemfirexd.FabricServerPrms-distributedSystem = ds;
hydra.gemfirexd.FabricServerPrms-hostData = false false true true;
hydra.gemfirexd.FabricServerPrms-persistDD = true false true true;
hydra.gemfirexd.FabricServerPrms-serverGroups = none, none, DataGroup, VerifierGroup;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
       (\"-Xms256m -Xmx256m\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
       (\"-Xms${peerHeapMB}m -Xmx${peerHeapMB}m\",
                                    ${peerHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
       (\"-Xms${serverHeapMB}m -Xmx${serverHeapMB}m\",
                                   ${serverHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
       (\"-Xms${verifierHeapMB}m -Xmx${verifierHeapMB}m\",
                                   ${verifierHosts}, true)" ncf
  ;
hydra.VmPrms-extraVMArgs +=
  fcn "hydra.TestConfigFcns.duplicate
       (\"-XX:+DisableExplicitGC\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicate
       (\"-XX:+UseParNewGC -XX:+UseConcMarkSweepGC\", ${peerHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString
       (\"-XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:CMSInitiatingOccupancyFraction=50\", ${serverHosts}, true)" ncf
  ,
  fcn "hydra.TestConfigFcns.duplicateString
       (\"-XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:CMSInitiatingOccupancyFraction=50\", ${verifierHosts}, true)" ncf
  ;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-tools.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/jline-1.0.jar;

hydra.VmPrms-extraVMArgsSUN += "-XX:MaxPermSize=128m";

THREADGROUP locator1
  totalThreads = 1
  clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"locator\", ${locatorHosts}, true)"
                 ncf;
THREADGROUP locator
  totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} -1
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"locator\", ${locatorHosts}, true)"
                 ncf;
THREADGROUP peerclient
  totalThreads = fcn ${peerHosts} * ${peerVMsPerHost} * ${peerThreadsPerVM} -2 
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"peer\", ${peerHosts}, true)"
                 ncf;
THREADGROUP ddlThread
  totalThreads = 1
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"peer\", ${peerHosts}, true)"
                 ncf;
THREADGROUP backupThread
  totalThreads = 1
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"peer\", ${peerHosts}, true)"
                 ncf;
THREADGROUP server
  totalThreads = fcn ${serverHosts} * ${serverVMsPerHost} * ${serverThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"server\", ${serverHosts}, true)"
                 ncf;
THREADGROUP verifier
  totalThreads = fcn ${verifierHosts} * ${verifierVMsPerHost} * ${verifierThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"verifier\", ${verifierHosts}, true)"
                 ncf;                       

INITTASK  taskClass = sql.schemas.SchemaTest taskMethod = HydraTask_initialize  
		  runMode = always
          threadGroups = server, verifier, peerclient, ddlThread, backupThread;   

INITTASK  taskClass   = sql.schemas.seats.SeatsTest taskMethod  = HydraTask_initialize
  		  runMode = always
  		  threadGroups = server, verifier, peerclient, ddlThread, backupThread;  
  		  
INITTASK     taskClass   = util.StopStartVMs  taskMethod = StopStart_initTask;                                                             
  
INITTASK  taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
          threadGroups = locator, locator1;
         
INITTASK  taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
          runMode = always
          threadGroups = locator, locator1;        
	
INITTASK  taskClass = sql.schemas.SchemaTest taskMethod = HydraTask_startFabricServer
		  runMode = always
          threadGroups = server, verifier, peerclient, ddlThread, backupThread;
          
INITTASK  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_createSchema
		  threadGroups = ddlThread
		  sql.SQLPrms-sqlFilePath = sql/schemas/seats/seats-ddl.sql;            

INITTASK  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_createSeatsTables
		  threadGroups = ddlThread
		  sql.SQLPrms-sqlFilePath = sql/schemas/seats/seats-ddl.sql;  
	
INITTASK  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_createCaseInsensitiveIndexOnSystable
		  threadGroups = ddlThread;	
		  	  
INITTASK  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_setHeapPercentage
		  threadGroups = ddlThread;
	
INITTASK  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_setCriticalHeapPercentage
		  threadGroups = ddlThread;		  		
		  		  
INITTASK  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_runImportTable
		  threadGroups = ddlThread
		  sql.SQLPrms-sqlFilePath = sql/schemas/seats/${importfile}.sql;  

INITTASK  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_createSeatsIndex
		  threadGroups = ddlThread;  
		  
INITTASK  taskClass    = sql.backupAndRestore.BackupRestoreTest
          taskMethod   = HydraTask_doOnlineBackup
          threadGroups = backupThread;  
                
INITTASK  taskClass    = sql.schemas.SchemaTest
          taskMethod   = HydraTask_stopFabricServer
          threadGroups = server, verifier, peerclient, ddlThread, backupThread;
          
INITTASK  taskClass    = sql.SQLTest  taskMethod   = HydraTask_stopGfxdLocatorTask
          threadGroups = locator;
          
INITTASK  taskClass    = sql.SQLTest  taskMethod   = HydraTask_stopGfxdLocatorTask
          threadGroups = locator1;
          
INITTASK  taskClass    = sql.backupAndRestore.BackupRestoreTest
          taskMethod   = HydraTask_doRestoreBackup
          threadGroups = backupThread;
/*
INITTASK  taskClass    = sql.SQLTest  taskMethod   = HydraTask_bounceAllVMsExcludeLocators
          threadGroups = locator1;          
*/
//hydra sync locator starts to avoid #30341, so test needs to work around it          
INITTASK  taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
          threadGroups = locator1;
          
INITTASK  taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
          threadGroups = locator;
         
INITTASK  taskClass = sql.schemas.SchemaTest taskMethod = HydraTask_startFabricServer
          threadGroups = server, verifier, peerclient, ddlThread, backupThread;   
          
INITTASK  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_initializeInfo
		  threadGroups = peerclient, ddlThread, backupThread; 

INITTASK  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_addTxIdCol
		  threadGroups = ddlThread;
	  
INITTASK  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_doTxns
		  threadGroups = peerclient, ddlThread, backupThread;
	  
TASK  	  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_doTxns
		  threadGroups = peerclient, ddlThread, backupThread;

TASK  	  taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_increaseCriticalHeapPercentage
		  threadGroups = ddlThread;
		  
/*
TASK  	  taskClass   = sql.schemas.SchemaTest taskMethod = HydraTask_triggerBackup 
		  threadGroups = backupThread;          
*/
  
CLOSETASK taskClass   = sql.schemas.SchemaTest taskMethod = HydraTask_triggerBackup 
		  threadGroups = backupThread; //incremental back up

CLOSETASK taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_verifyBalance
		  threadGroups = ddlThread;    
     
CLOSETASK taskClass    = sql.schemas.SchemaTest
          taskMethod   = HydraTask_stopFabricServer
          threadGroups = server, verifier, peerclient, ddlThread, backupThread;
          
CLOSETASK taskClass    = sql.SQLTest  taskMethod   = HydraTask_stopGfxdLocatorTask
          threadGroups = locator;
          
CLOSETASK taskClass    = sql.SQLTest  taskMethod   = HydraTask_stopGfxdLocatorTask
          threadGroups = locator1;
          
CLOSETASK taskClass    = sql.backupAndRestore.BackupRestoreTest
          taskMethod   = HydraTask_doRestoreBackup
          threadGroups = backupThread;

/*
CLOSETASK  taskClass    = sql.SQLTest  taskMethod   = HydraTask_bounceAllVMsExcludeLocators
          threadGroups = locator1;          
*/

//hydra sync locator starts to avoid #30341, so test needs to work around it          
CLOSETASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
          threadGroups = locator1;
          
CLOSETASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
          threadGroups = locator;
         
CLOSETASK taskClass = sql.schemas.SchemaTest taskMethod = HydraTask_startFabricServer
          threadGroups = server, verifier, peerclient, ddlThread, backupThread;  
 
CLOSETASK taskClass   = sql.schemas.seats.SeatsTest taskMethod = HydraTask_verifyBalance
		  threadGroups = ddlThread;          
          
         
hydra.Prms-totalTaskTimeSec           = 1800;  
hydra.Prms-maxResultWaitSec           = 1200;
          
hydra.gemfirexd.GfxdHelperPrms-persistTables = true; //persist table
sql.backupAndRestore.BackupAndRestorePrms-doBackup = true; //backup data
sql.backupAndRestore.BackupAndRestorePrms-incrementalBackups = true; //incremental back up

RANDOMINCLUDE $JTESTS/sql/schemas/offheap.inc; // uses off-heap if include is randomly chosen
hydra.gemfirexd.FabricServerPrms-offHeapMemorySize=fcn "sql.schemas.SchemaTestConfigFcns.reducedMemorySize
    (${serverHeapMB}, \"m\")" ncf;  //force eviction on offheap

RANDOMINCLUDE $JTESTS/sql/schemas/heapPercentage.inc; // eviction/critical heap setting  is randomly chosen