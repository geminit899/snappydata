//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_wan_client_locator.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription="Cause off-heap memory fragmentation by inserting data to a certain level, then deleting a certain
percentage with variable sized objects.";

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;

sql.memscale.SqlMemScalePrms-secondsToRun = 600; // use this to stop the test; totalTaskTimeSec must be larger than this
hydra.Prms-totalTaskTimeSec           = 7200;
hydra.Prms-maxResultWaitSec           = 600;

THREADGROUP locatorThreads
  totalThreads = fcn ${wanSites} * ${locatorHostsPerSite} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames(\"locator\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;
THREADGROUP serverThreads
  totalThreads = fcn (${wanSites} * ${serverHostsPerSite} * ${serverVMsPerHost} * ${serverThreadsPerVM}) ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames (\"server\", ${wanSites}, ${serverHostsPerSite}, false, true)" ncf;
THREADGROUP thinClientThreads
  totalThreads = fcn (${wanSites} * ${clientHostsPerSite} * ${clientVMsPerHost} * ${clientThreadsPerVM}) ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateDoubleSuffixedNames(\"client\", ${wanSites}, ${clientHostsPerSite}, false, true)" ncf;

// init locators
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_createLocatorTask
         threadGroups = locatorThreads;
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_startLocatorTask
         threadGroups = locatorThreads;

// init servers
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_startFabricServer
         threadGroups = serverThreads;
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_startNetworkServers
         threadGroups = serverThreads;

// init thin clients, they connect to locators
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_connectThinClientToLocator
         threadGroups = thinClientThreads;

// designated threads are randomly chosen threads: one thread per thinClient per wan site and one thread per server per wan site
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_setDesignatedThreads
         threadGroups = thinClientThreads, serverThreads;

// create disk stores; task ensures only 1 thread per wan site executes this (the designated thread)
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_createDiskStores
         threadGroups = thinClientThreads;

// create gateways; task ensures only 1 thread per wan site executes this (the designated thread)
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_createGatewaySenders
         threadGroups = thinClientThreads;
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_createGatewayReceivers
         threadGroups = thinClientThreads;
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_startGatewaySenders
         threadGroups = thinClientThreads;

// create tables
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_generateTableDefinitions
         threadGroups = thinClientThreads;
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_createTables
         threadGroups = thinClientThreads; // task ensures only 1 thread per wan site executes this
        
// init prepared statements
INITTASK taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_createPreparedStatements
         threadGroups = thinClientThreads;

TASK     taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_insertDelete
         threadGroups = thinClientThreads;

TASK     taskClass = sql.memscale.SqlMemScaleTest taskMethod = HydraTask_serverTask
         threadGroups = serverThreads;

// final off-heap memory validation
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = waitForOffHeapSilence;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = verifyOffHeapMemoryConsistencyOnce;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = closeAllOffHeapRegions;
CLOSETASK taskClass = memscale.OffHeapHelper taskMethod = verifyOffHeapMemoryConsistencyOnce;
ENDTASK taskClass = util.LogChecker taskMethod = HydraTask_checkLogs;

// NetworkServerPrms
hydra.gemfirexd.NetworkServerPrms-names = networkServer;

// FabricServerPrms
hydra.gemfirexd.FabricServerPrms-remoteDistributedSystems = 
      fcn "hydra.TestConfigFcns.generateNameListsRepeatedlyShift(\"ds_\", ${wanSites}, ${locatorHostsPerSite})" ncf;
hydra.gemfirexd.FabricServerPrms-serverGroups = 
      fcn "hydra.TestConfigFcns.generateNames (\"none\", ${wanSites})" ncf
      fcn "hydra.TestConfigFcns.generateNames (\"serverGroup\", ${wanSites})" ncf;
hydra.gemfirexd.FabricServerPrms-persistQueues = true;

// GatwayReceiverPrms
hydra.gemfirexd.GatewayReceiverPrms-names = 
      fcn "hydra.TestConfigFcns.generateNames (\"receiver_\", ${wanSites})" ncf;
hydra.gemfirexd.GatewayReceiverPrms-distributedSystem =
      fcn "hydra.TestConfigFcns.generateNames (\"ds_\", ${wanSites})" ncf;
hydra.gemfirexd.GatewayReceiverPrms-serverGroups =
      fcn "hydra.TestConfigFcns.generateNames (\"serverGroup\", ${wanSites})" ncf;

// GatewaySenderPrms
hydra.gemfirexd.GatewaySenderPrms-names =
      fcn "hydra.TestConfigFcns.generateNames (\"sender_\", ${wanSites})" ncf;
hydra.gemfirexd.GatewaySenderPrms-distributedSystem =
      fcn "hydra.TestConfigFcns.generateNames (\"ds_\", ${wanSites})" ncf;
hydra.gemfirexd.GatewaySenderPrms-remoteDistributedSystems =
      fcn "hydra.TestConfigFcns.generateNamesRepeatedlyShift(\"ds_\", ${wanSites}, ${locatorHostsPerSite}, false, true)" ncf;
hydra.gemfirexd.GatewaySenderPrms-serverGroups =
      fcn "hydra.TestConfigFcns.generateNames (\"serverGroup\", ${wanSites})" ncf;
hydra.gemfirexd.GatewaySenderPrms-diskStoreName = wanDiskStore;
hydra.gemfirexd.GatewaySenderPrms-manualStart = true;
hydra.gemfirexd.GatewaySenderPrms-persistenceEnabled = true;

// GfxdConfigPrms
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = networkServer;

INCLUDE $JTESTS/util/randomValues.inc;
util.RandomValuesPrms-borderCasePercentage=0;

sql.memscale.SqlMemScalePrms-numTables = 7;
sql.memscale.SqlMemScalePrms-numColumnsPerTable = RANGE 1 10 EGNAR;
sql.memscale.SqlMemScalePrms-percentTablesWithLobs = 50;
sql.memscale.SqlMemScalePrms-percentLobColumns = 20;
sql.memscale.SqlMemScalePrms-columnType = ONEOF INTEGER VARCHAR FOENO;
sql.memscale.SqlMemScalePrms-varCharLength = RANGE 10 1000 EGNAR;
sql.memscale.SqlMemScalePrms-lobColumnType = CLOB; 
sql.memscale.SqlMemScalePrms-lobLength = ONEOF 1K 2K 10K 50K 100K 200K 1M FOENO; 
sql.memscale.SqlMemScalePrms-tableClause = "PARTITION BY PRIMARY KEY OFFHEAP";
sql.memscale.SqlMemScalePrms-numRowsPerTable = 500;
sql.memscale.SqlMemScalePrms-compactionIntervalSec = 10;
sql.memscale.SqlMemScalePrms-numServerThreads = fcn (${wanSites} * ${serverHostsPerSite} * ${serverVMsPerHost} * ${serverThreadsPerVM}) ncf;

hydra.gemfirexd.FabricServerPrms-offHeapMemorySize =
      fcn "hydra.TestConfigFcns.duplicate(\"0m\", ${wanSites} * ${locatorHostsPerSite} * ${locatorVMsPerHost})" ncf
      fcn "hydra.TestConfigFcns.duplicate(\"1g\", ${wanSites} * ${serverHostsPerSite} * ${serverVMsPerHost})" ncf
      fcn "hydra.TestConfigFcns.duplicate(\"0m\", ${wanSites} * ${clientHostsPerSite} * ${clientVMsPerHost})" ncf;

hydra.VmPrms-extraVMArgs = 
      fcn "hydra.TestConfigFcns.duplicate(\"-Xmx128m \", ${wanSites} * ${locatorHostsPerSite} * ${locatorVMsPerHost}, true)" ncf,
      fcn "hydra.TestConfigFcns.duplicate(\"-Xmx1g \", ${wanSites} * ${serverHostsPerSite} * ${serverVMsPerHost}, true)" ncf,
      fcn "hydra.TestConfigFcns.duplicate(\"-Xmx250m \", ${wanSites} * ${clientHostsPerSite} * ${clientVMsPerHost}, true)" ncf;

