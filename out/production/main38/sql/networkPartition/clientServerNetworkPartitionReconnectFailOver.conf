hydra.Prms-testDescription = " test server network partition with clients on the master controller host side ";

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_3_locator.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd-client.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;

hydra.Prms-manageDerbyServer = false;
hydra.Prms-totalTaskTimeSec           = 240;
hydra.Prms-maxResultWaitSec           = 300;
hydra.Prms-maxCloseTaskResultWaitSec  = 120;
hydra.Prms-serialExecution            = false; 
hydra.gemfirexd.FabricServerPrms-persistDD = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf;

hydra.VmPrms-extraClassPaths        +=   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derby.jar";
hydra.VmPrms-extraClassPaths        +=   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbyclient.jar";
hydra.VmPrms-extraClassPaths        +=   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbytools.jar";
hydra.Prms-derbyServerClassPath     =   "/export/gcm/where/java/derby/derby-10.8.2.2/jars/insane/derbynet.jar";
hydra.Prms-extraDerbyServerVMArgs += " -Xmx1024m -Dderby.storage.pageCacheSize=32000 -Dderby.locks.waitTimeout=30 -Dderby.locks.deadlockTimeout=20 ";
hydra.Prms-clientShutdownHook += sql.SQLTest dumpResults;
//hydra.VmPrms-extraVMArgs   += "-DDistributionManager.MAX_PR_THREADS=100";
//hydra.VmPrms-extraVMArgs   += "-DDistributionManager.MAX_FE_THREADS=100";
hydra.GemFirePrms-conserveSockets = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf;
hydra.gemfirexd.FabricServerPrms-conserveSockets = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf; 
//hydra.VmPrms-extraVMArgs += "-XX:+UseParNewGC";
//hydra.VmPrms-extraVMArgs += "-XX:+UseConcMarkSweepGC";
//hydra.VmPrms-extraVMArgs += "-XX:CMSInitiatingOccupancyFraction=50";

//sql.SQLPrms-isSingleHop = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf;
//sql.SQLPrms-isSingleHop = true; //temp use

sql.SQLPrms-dropProc = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf; //whether there are concurrent ddl ops of procedures

sql.SQLPrms-initCustomersSizePerThread = RANGE 20 50 EGNAR;
sql.SQLPrms-initSecuritiesSizePerThread = RANGE 10 30 EGNAR;


sql.SQLPrms-hasNetworth = true;  //will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory" "trade.companies";   
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;
sql.SQLPrms-dropIndex = ${dropIndex};
sql.SQLPrms-createIndex = true;

util.StopStartPrms-stopModes = ONEOF NICE_EXIT MEAN_KILL MEAN_EXIT NICE_KILL FOENO;
util.StopStartPrms-numVMsToStop = RANGE 1 ${redundantCopies} EGNAR;


THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;
                                
THREADGROUP survivingServerThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;

THREADGROUP losingServerThreads                                
            totalThreads = fcn "(${${C}Hosts} * ${${C}VMsPerHost} *  ${${C}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${C}Hosts} * ${${C}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${C}\",
                                ${${C}Hosts}, true)" ncf;

THREADGROUP edgeThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) -1  " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;  

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                               ${${A}Hosts}, true)" ncf;


hydra.GemFirePrms-enableNetworkPartitionDetection = true;
STARTTASK    taskClass   = splitBrain.SplitBrainBB taskMethod = HydraTask_initialize clientNames = locator1;                                       

hydra.GemFirePrms-disableAutoReconnect = false; 

INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
   runMode = always
         threadGroups = locator;
                                
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_initializeServer
         runMode = always
         threadGroups = survivingServerThreads, losingServerThreads;
         
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startFabricServer
   runMode = always
         threadGroups = survivingServerThreads, losingServerThreads;

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_startNetworkServer
  runMode = always
  threadGroups =  survivingServerThreads, losingServerThreads;

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_initEdges
  threadGroups = edgeThreads, ddlThread;  
  
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createDiscDB
 threadGroups = edgeThreads;

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createDiscSchemas
 threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createGFESchemasByClients
  threadGroups = ddlThread;
  
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createUDTPriceType
 threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createUUIDType
 threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = hydraTask_createUDTPriceFunctions
 threadGroups = ddlThread;

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createDiscTables
 threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createGFETablesByClients
  threadGroups = ddlThread;


INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createUniqIndex
 threadGroups = ddlThread;

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createCompaniesTable
 threadGroups = ddlThread;
 
//set table colomun info for each used by index creation, need only one thread to set in the BB
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_setTableCols
 threadGroups = ddlThread; 
  
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_dropCompaniesFK
 threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_populateTables
 threadGroups = edgeThreads; 
 
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_addCompaniesFK
 threadGroups = ddlThread;  

INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_createIndexOnCompanies
 threadGroups = ddlThread;
  
INITTASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_verifyResultSets
      threadGroups = ddlThread;      

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initializeNetworkPartitionSettings
 runMode = always
 threadGroups = survivingServerThreads, losingServerThreads;

TASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_doDMLOp
  threadGroups = edgeThreads, ddlThread, survivingServerThreads, losingServerThreads;    

//TASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_verifyScrollableResultSet
//  threadGroups = edgeThreads, ddlThread;   

TASK     taskClass = splitBrain.SBUtil taskMethod = dropConnection
         maxTimesToRun = 1
         startInterval = 60
         threadGroups = locator;
         
CLOSETASK  taskClass = sql.SQLTest taskMethod = HydraTask_verifyLosingPartition
           threadGroups = ddlThread;

CLOSETASK     taskClass   = sql.sqlBridge.SQLBridgeTest taskMethod  = HydraTask_verifyResultSets
      threadGroups = ddlThread;      

CLOSETASK taskClass = splitBrain.SBUtil taskMethod = restoreConnection
         threadGroups = locator;

CLOSETASK taskClass = sql.sqlBridge.SQLBridgeTest taskMethod = HydraTask_waitForReconnect
          threadGroups = losingServerThreads;
 
CLOSETASK taskClass = sql.sqlBridge.SQLBridgeTest taskMethod = HydraTask_verifyReconnect
          threadGroups = losingServerThreads;


CLOSETASK taskClass = sql.sqlBridge.SQLBridgeTest taskMethod = HydraTask_verifyDMLExecution
          threadGroups = edgeThreads, ddlThread, losingServerThreads, survivingServerThreads;
          
hydra.gemfirexd.NetworkServerPrms-names = serverHA;
hydra.gemfirexd.GfxdConfigPrms-networkServerConfig = serverHA;
sql.SQLPrms-useGemFireXDHA = true;
sql.SQLPrms-numOfWorkers = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM} ncf;
sql.SQLPrms-useGfxdConfig = true;

splitBrain.SplitBrainPrms-hostDescription1 = survivingserverhost1;
splitBrain.SplitBrainPrms-hostDescription2 = losingserverhost1;
splitBrain.SplitBrainPrms-losingPartition = losingserverhost1;

hydra.gemfirexd.FabricServerPrms-tableDefaultPartitioned = ${tableDefaultPartitioned};
hydra.gemfirexd.FabricServerPrms-enableNetworkPartitionDetection  = true;
hydra.gemfirexd.FabricServerPrms-disableAutoReconnect = false;

// locator server client
hydra.gemfirexd.FabricServerPrms-hostData = false false true true;

//securities has primary key and unique constraints
/* with the cascade delete
sql.SQLPrms-createTablesStatements =
 "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
 "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
 "create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete cascade, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
 "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete cascade, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete cascade, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
 "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
 "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
        "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
 "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
 "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";
*/

sql.SQLPrms-createTablesStatements =
 "create table trade.securities (sec_id int not null, symbol varchar(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
 "create table trade.customers (cid int not null, cust_name varchar(100), since date, addr varchar(100), tid int, primary key (cid))"
 "create table trade.networth (cid int not null, cash decimal (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
 "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))" 
 "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status varchar(10), tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
 "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id) on delete restrict, constraint bo_qty_ck check (qty>=0))"
        "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
 "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
 "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";

sql.SQLPrms-gfeDDLExtension =
 "${securities}" 
    "${customers}" 
 "${networth}"
 "${portfolio}"
 "${sellorders}"
    "${buyorders}"
    "${txhistory}"
    "${employees}"
 "${trades}";

/*
sql.SQLPrms-redundancyClause =
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"  
 " REDUNDANCY ${redundantCopies}" 
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}"
 " REDUNDANCY ${redundantCopies}" ;
 */
sql.SQLPrms-testUniqIndex = oneof true false foeno;

hydra.VmPrms-extraVMArgs  += "-Xmx1024m";
sql.SQLPrms-useGfxdConfig = true;
sql.SQLPrms-hasCompanies=true;
sql.SQLPrms-companiesTableDDLExtension = "trade.companies:replicate";

sql.SQLPrms-testPartitionBy = true;
sql.SQLPrms-withReplicatedTables = true;
sql.SQLPrms-alterTableDropColumn = true;

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen
