hydra.Prms-testDescription = " Basic Trigger Tests ";

INCLUDE $JTESTS/sql/trigger/triggerCommon.conf;

hydra.Prms-manageDerbyServer = true;
hydra.Prms-serialExecution = true;
	
INITTASK     taskClass   = sql.trigger.TriggerTest taskMethod  = HydraTask_testInsertActions
	 threadGroups = ddlThread;

INITTASK	taskClass   = sql.trigger.TriggerTest taskMethod  = HydraTask_verifyTriggerResults
	 threadGroups = ddlThread;	
	
INITTASK	taskClass	= sql.trigger.TriggerTest taskMethod  = HydraTask_testUpdateActions
	 threadGroups = ddlThread;
	 		
CLOSETASK     taskClass   = sql.trigger.TriggerTest taskMethod  = HydraTask_verifyTriggerResults
	 threadGroups = ddlThread;	

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownDB
        threadGroups = initThreads;

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFEDB
        threadGroups = initThreads;

sql.trigger.TriggerPrms-audit = true;
sql.trigger.TriggerPrms-triggerStmts =
	"CREATE TRIGGER after_insert_trigger AFTER INSERT ON trade.customers REFERENCING NEW AS NEW FOR EACH ROW INSERT INTO trade.customers_audit VALUES(NEW.cid,NEW.cust_name,NEW.since,NEW.addr,NEW.tid)"
	"CREATE TRIGGER after_update_trigger AFTER UPDATE OF addr ON trade.customers REFERENCING NEW AS UPDATEDROW FOR EACH ROW UPDATE trade.customers_audit SET addr = UPDATEDROW.addr WHERE cid = UPDATEDROW.cid";

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen

