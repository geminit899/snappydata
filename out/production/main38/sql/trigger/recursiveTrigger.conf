hydra.Prms-testDescription = " Basic Trigger Tests ";

INCLUDE $JTESTS/sql/trigger/triggerCommon.conf;   

hydra.Prms-serialExecution = false;
hydra.Prms-manageDerbyServer = false; //see #42494, gfxd throw 0A000 for recursive trigger creation. so expectation is different from derby

INITTASK     taskClass   = sql.trigger.TriggerTest taskMethod  = HydraTask_testInsertActions
	 threadGroups = ddlThread;
	 
INITTASK     taskClass   = sql.SQLTest taskMethod  = dumpResults
	 threadGroups = ddlThread;

sql.trigger.TriggerPrms-audit = true;
sql.trigger.TriggerPrms-triggerStmts =
	"CREATE TRIGGER after_insert_trigger AFTER INSERT ON trade.customers REFERENCING NEW AS NEW FOR EACH ROW INSERT INTO trade.customers_audit VALUES(NEW.cid,NEW.cust_name,NEW.since,NEW.addr,NEW.tid)"
	"CREATE TRIGGER after_insert_trigger2 AFTER INSERT ON trade.customers_audit REFERENCING NEW AS NEW FOR EACH ROW INSERT INTO trade.customers VALUES(NEW.cid + 1000,NEW.cust_name,NEW.since,NEW.addr,NEW.tid)"
	"CREATE TRIGGER after_insert_trigger3 AFTER INSERT ON trade.customers REFERENCING NEW AS NEW FOR EACH ROW INSERT INTO trade.customers VALUES(NEW.cid+100,NEW.cust_name,NEW.since,NEW.addr,NEW.tid)";
	
sql.SQLPrms-createRecursiveTrigger = true;

//to reproduce #49415, using the following setting instead
/*
hydra.Prms-manageDerbyServer = true; 	
sql.trigger.TriggerPrms-triggerStmts =
    "CREATE TRIGGER after_insert_trigger AFTER INSERT ON trade.customers REFERENCING NEW AS NEW FOR EACH ROW INSERT INTO trade.customers_audit VALUES(NEW.cid,NEW.cust_name,NEW.since,NEW.addr,NEW.tid)"
	"CREATE TRIGGER after_insert_trigger2 AFTER INSERT ON trade.customers_audit REFERENCING NEW AS NEW FOR EACH ROW UPDATE trade.customers set cust_name = NEW.addr where cid = NEW.cid";
	
CLOSETASK     taskClass   = sql.trigger.TriggerTest taskMethod  = HydraTask_verifyTriggerResults
	 threadGroups = ddlThread;	
*/

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen
