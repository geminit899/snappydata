hydra.Prms-testDescription = "test gemfirexd tx using thin client driver";

include $JTESTS/sql/sqlTx/thinClient/randomPartitionTablesTxClient.conf;

sql.SQLPrms-redundancyClause =
    " REDUNDANCY 1"
    " REDUNDANCY 1"
    " REDUNDANCY 1"
    " REDUNDANCY 1"
    " REDUNDANCY 1"
    " REDUNDANCY 1"
    " REDUNDANCY 1"
    " REDUNDANCY 1"
    " REDUNDANCY 1";
    
//tables are put into default store
sql.SQLPrms-gfePersistExtension = 
	" PERSISTENT " 
    " PERSISTENT "
	" PERSISTENT "
	" PERSISTENT "
	" PERSISTENT "  
	" PERSISTENT " 
	" PERSISTENT "
	" "
	" " ;
	
hydra.gemfirexd.GfxdHelperPrms-persistTables = true;
hydra.gemfirexd.FabricServerPrms-persistDD = true true false;

sql.SQLPrms-createIndex = true;

INITTASK     taskClass   = sql.sqlTx.thinClient.SQLDistTxClientTest
   			 taskMethod  = HydraTask_createIndex
			 threadGroups = clientThreads, ddlThread;		 

CLOSETASK taskClass   = sql.sqlTx.thinClient.SQLDistTxClientTest  
		 taskMethod  = HydraTask_stopFabricServer
         threadGroups = serverThreads;   

CLOSETASK taskClass   = sql.sqlTx.thinClient.SQLDistTxClientTest  
		 taskMethod  = HydraTask_startFabricServer
         threadGroups = serverThreads;           
		
CLOSETASK taskClass   = sql.sqlTx.thinClient.SQLDistTxClientTest 
		 taskMethod  = HydraTask_startNetworkServer
		 threadGroups =  serverThreads;    

CLOSETASK taskClass   = sql.sqlTx.thinClient.SQLDistTxClientTest 
		  taskMethod  = HydraTask_verifyResultSets
   		  threadGroups = ddlThread;    
   		  
hydra.VmPrms-extraVMArgs += "-Dgemfire.tx-disable-batching=false"; 
sql.sqlTx.SQLTxPrms-nobatching = false;  