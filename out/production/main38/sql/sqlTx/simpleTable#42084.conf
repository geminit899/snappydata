hydra.Prms-testDescription = " this tests derby on gfe";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_2_locator.inc;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;
 
THREADGROUP locator
  totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;           
THREADGROUP dataStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM}) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP accessorThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) -1  " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;  

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                               ${${B}Hosts}, true)" ncf;
                                                                    
hydra.gemfirexd.FabricServerPrms-persistDD = fcn "hydra.TestConfigFcns.oneof(\"true\", \"false\")" ncf;
sql.SQLPrms-useGfxdConfig = true;

hydra.Prms-maxResultWaitSec           = 120;
hydra.Prms-maxCloseTaskResultWaitSec  = 300;
hydra.Prms-totalTaskTimeSec           = 1800;
hydra.Prms-serialExecution            = false;  
  
INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_initialize
  runMode = always
  threadGroups = dataStoreThreads, ddlThread, accessorThreads;
  
INITTASK taskClass = sql.sqlTx.SQLDistTxTest taskMethod = HydraTask_createGfxdLocatorTask
         threadGroups = locator;
         
INITTASK taskClass = sql.sqlTx.SQLDistTxTest taskMethod = HydraTask_startGfxdLocatorTask
         runMode = always
         threadGroups = locator;                                

INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_startFabricServer
    threadGroups = accessorThreads, dataStoreThreads;

INITTASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_setTableFor42084
  threadGroups = ddlThread; 

TASK     taskClass   = sql.sqlTx.SQLDistTxTest taskMethod  = HydraTask_doDML42084
  threadGroups = accessorThreads, ddlThread
  maxTimesToRun = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) *   ${workIterationsPerThread}" ncf;    

sql.SQLPrms-numOfStores = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf;
sql.SQLPrms-numOfWorkers = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM})  " ncf;

RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen

