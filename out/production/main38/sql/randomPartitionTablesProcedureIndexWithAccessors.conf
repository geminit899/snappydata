INCLUDE $JTESTS/sql/concMultiTablesUniqProcedureWithAccessors.conf;
INCLUDE $JTESTS/sql/indexOp.inc;

sql.SQLPrms-initCustomersSizePerThread = RANGE 20 100 EGNAR;
sql.SQLPrms-initSecuritiesSizePerThread = RANGE 10 30 EGNAR;

sql.SQLPrms-testPartitionBy = true;

sql.SQLPrms-gfeDDLExtension =
	"trade.securities:random"
        "trade.customers:random" 
	"trade.networth:random"
	"trade.portfolio:random"
	"trade.sellorders:random"
        "trade.buyorders:random" 
        "trade.txhistory:random"
	"emp.employees:random"
	"trade.trades:random" ;
	
sql.SQLPrms-redundancyClause =
	" REDUNDANCY ${redundantCopies}"
    " REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"  
	" REDUNDANCY ${redundantCopies}" 
    " REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}"
	" REDUNDANCY ${redundantCopies}" ;
	
hydra.Prms-manageDerbyServer = ${manageDerbyServer};
sql.SQLPrms-testUniqueKeys = ${testUniqueKeys};
sql.SQLPrms-withReplicatedTables = true;

sql.SQLPrms-portfoliov1Statement = "create table trade.portfoliov1 (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk_v1 primary key (cid, sid), constraint cust_fk_v1 foreign key (cid) references trade.customers (cid), constraint sec_fk_v1 foreign key (sid) references trade.securities (sec_id), constraint qty_ck_v1 check (qty>=0), constraint avail_ch_v1 check (availQty>=0 and availQty<=qty))"; 
sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory" "trade.portfoliov1";
sql.SQLPrms-hasPortfolioV1 = true;
hydra.gemfirexd.GfxdHelperPrms-persistDD = true;
hydra.gemfirexd.GfxdHelperPrms-persistTables = true;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_doDMLOpInInit
	threadGroups = ddlThread, accessorThreads;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
	threadGroups = ddlThread;		

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_addPortfolioV1Table
	threadGroups = ddlThread;
	
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownDB
	 threadGroups = ddlThread, accessorThreads;
	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownDB
	 threadGroups =	 dataStoreThreads; 
	 
//randomly starts vms concurrently	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_reCreateGFXDDB
	 threadGroups = dataStoreThreads; 
	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_reCreateGFXDDBForAccessors
	 threadGroups = ddlThread, accessorThreads; 	

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_clearTables
	threadGroups = ddlThread, accessorThreads;
	