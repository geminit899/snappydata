include $JTESTS/sql/tpce/tpce.inc;

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = configureHadoopTask
          clientNames = customerserver1;             

STARTTASK taskClass = hdfs.HDFSUtil taskMethod = startCluster
          clientNames = customerserver1;


INITTASK taskClass = sql.tpce.TPCETest taskMethod = HydraTask_createDiskStore
         threadGroups = ddlThread;     

INITTASK taskClass = sql.tpce.TPCETest taskMethod = HydraTask_createHdfsStore
         threadGroups = ddlThread;      
         
//create tables
INITTASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_createHDFSTables
  threadGroups = ddlThread
  sql.SQLPrms-sqlFilePath = sql/tpce/create_tpce_tables_no_constraints.sql;
  //sql.SQLPrms-sqlFilePath = sql/tpce/create_tpce_tables_no_constraints_49111.sql;
  //sql.SQLPrms-sqlFilePath = sql/tpce/create_tpce_tables_no_constraints_persist.sql;

INITTASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_runSQLScript
  threadGroups = ddlThread
  sql.SQLPrms-sqlFilePath = sql/tpce/create_indexes.sql;  

INITTASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_runSQLScript
  threadGroups = ddlThread
  //sql.SQLPrms-sqlFilePath = sql/tpce/alter_table_add_constraints.sql; 
   sql.SQLPrms-sqlFilePath = sql/tpce/alter_table_add_constraints.sql; 

//create_all_buckets
INITTASK  taskClass = sql.tpce.TPCETest
          taskMethod = HydraTask_createBucketsTask
          threadGroups = ddlThread;

//load data
INITTASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_runImportTable
  threadGroups = ddlThread
  sql.SQLPrms-sqlFilePath = sql/tpce/${importfile}.sql;

/*
//create indexes
INITTASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_runSQLScript
  threadGroups = ddlThread
  sql.SQLPrms-sqlFilePath = sql/tpce/create_indexes.sql;  
  
//add table constraints back 
INITTASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_runSQLScript
  threadGroups = ddlThread
  sql.SQLPrms-sqlFilePath = sql/tpce/alter_table_add_constraints.sql;  

*/

INITTASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_setHDFSFlag 
  threadGroups = ddlThread, peerclient;

//validating against imported data

INITTASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_validateResults
  threadGroups = ddlThread;


INITTASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_createTradeToMEETable
  threadGroups = ddlThread;  
  
INITTASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_initCE
  threadGroups = ddlThread, peerclient; 
  
TASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_runTPCETxns
  threadGroups = ddlThread, peerclient;
  
CLOSETASK     taskClass   = sql.tpce.TPCETest taskMethod = HydraTask_validateResults
  threadGroups = ddlThread;
  
ENDTASK taskClass = hdfs.HDFSUtil taskMethod = stopCluster
        clientNames = fcn "hydra.TestConfigFcns.generateNames(\"customerserver\", ${customerserverHosts}, true)"
                 ncf;
        
perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/sql/tpce/tpce.spec;  

//This needs to be changed based on data to be imported
hydra.Prms-maxResultWaitSec = 1800;
hydra.Prms-totalTaskTimeSec = 12600;

// Hadoop Configuration
hydra.ConfigPrms-hadoopConfig     = hdfs;
hydra.HadoopPrms-names            = hdfs;
hydra.gemfirexd.HDFSStorePrms-hadoopName    = hdfs;

hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig  = tpcehdfsStore;
hydra.gemfirexd.HDFSStorePrms-names         = tpcehdfsStore;
hydra.gemfirexd.HDFSStorePrms-homeDir       = tpce_data;
hydra.gemfirexd.HDFSStorePrms-diskStoreName = tpceHdfsDiskStore;

hydra.gemfirexd.DiskStorePrms-names = tpceHdfsDiskStore;

hydra.VmPrms-extraClassPaths +=
  fcn "hydra.TestConfigFcns.duplicate(\"none\", ${locatorHosts}, true)" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${A}Hosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${B}Hosts})" ncf
  ,
  fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", ${${C}Hosts})" ncf
;

hydra.Prms-checkTaskMethodsExist = false;


