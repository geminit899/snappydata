//------------------------------------------------------------------------------
// TEST CONFIG
//------------------------------------------------------------------------------
//
//  sql/sqlDisk/indexNormalRecoveryEvictOverflowWithMoreData.conf
//    locatorHosts = 1 locatorVMsPerHost = 1 locatorThreadsPerVM = 1
//    A=datastore datastoreHosts=1 datastoreVMsPerHost=2 datastoreThreadsPerVM=1
//    B=accessor accessorHosts=2 accessorVMsPerHost=2 accessorThreadsPerVM=3
//    dropIndex = true  useHeapPercentage=true setCriticalHeap=true 
//
//------------------------------------------------------------------------------
// INCLUDE FILES
//------------------------------------------------------------------------------

include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_accessor_locator.inc;

//------------------------------------------------------------------------------
// TEST DESCRIPTION
//------------------------------------------------------------------------------

hydra.Prms-testDescription = " Test to verify index normal recovery and eviction overflow to disk is specified. It tests derby on gfe";

hydra.Prms-manageDerbyServer = true;
hydra.Prms-totalTaskTimeSec           = 300;
hydra.Prms-maxResultWaitSec           = 1200;
hydra.Prms-maxCloseTaskResultWaitSec  = 1200;
hydra.Prms-serialExecution            = false;	

hydra.gemfirexd.GfxdHelperPrms-persistDD     = true ;
hydra.gemfirexd.GfxdHelperPrms-persistTables = true;

hydra.VmPrms-extraClassPaths        += $GEMFIRE/../product-gfxd/lib/gemfirexd.jar;
hydra.VmPrms-extraClassPaths        += $JTESTS;
hydra.GemFirePrms-roles =
  fcn "hydra.TestConfigFcns.duplicate(\"gemfirexd.locator\", ${locatorHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"gemfirexd.datastore\", ${datastoreHosts})" ncf
  fcn "hydra.TestConfigFcns.duplicate(\"gemfirexd.accessor\", ${accessorHosts})" ncf;

THREADGROUP locator
            totalThreads = fcn  ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
            totalVMs     = fcn "(${locatorHosts} * ${locatorVMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\",
                                ${locatorHosts}, true)" ncf;
            
THREADGROUP dataStoreThreads
            totalThreads = fcn "(${${A}Hosts} * ${${A}VMsPerHost} *  ${${A}ThreadsPerVM} -1 ) " ncf
            totalVMs     = fcn "(${${A}Hosts} * ${${A}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;

THREADGROUP accessorThreads
            totalThreads = fcn "(${${B}Hosts} * ${${B}VMsPerHost} *  ${${B}ThreadsPerVM}) - ((${${B}Hosts} * ${${B}VMsPerHost}) + 1)  " ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;  

THREADGROUP validateThreads
            totalThreads = fcn "${${B}Hosts} * ${${B}VMsPerHost}" ncf
            totalVMs     = fcn "(${${B}Hosts} * ${${B}VMsPerHost})" ncf
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf;  

THREADGROUP ddlThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${B}\",
                                ${${B}Hosts}, true)" ncf; 
                                    
THREADGROUP rebootThread
            totalThreads = 1
            totalVMs     = 1
            clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"${A}\",
                                ${${A}Hosts}, true)" ncf;                                             

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_initializeFabricServer
	runMode = always
	threadGroups = locator, dataStoreThreads, ddlThread, accessorThreads, validateThreads, rebootThread;	

INITTASK     taskClass   = sql.sqlDisk.SQLBridgeDiskTest taskMethod  = HydraTask_initialize
	runMode = always
	threadGroups = validateThreads;	
		
INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_createGfxdLocatorTask
    threadGroups = locator;

INITTASK taskClass = sql.SQLTest taskMethod = HydraTask_startGfxdLocatorTask
    threadGroups = locator;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscDB
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscSchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiscTables
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer_Once
	runMode = always
	threadGroups = dataStoreThreads, rebootThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer_Once
	runMode = always
	threadGroups = validateThreads;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFESchemas
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createDiskStores
		threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createGFETables
	threadGroups = ddlThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_setHeapPercentage
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_setCriticalHeapPercentage
	threadGroups = ddlThread;
		
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFuncForProcedures
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFuncForSubquery
	threadGroups = ddlThread;	
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createFunctionToPopulate
	threadGroups = ddlThread;
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_setTableCols
	threadGroups = ddlThread;
 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_populateTables
	threadGroups = accessorThreads, validateThreads;		

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_populateTables
	threadGroups = accessorThreads, validateThreads;		

//populate buyorders using loader
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_populateThruLoader
	threadGroups = ddlThread, accessorThreads, validateThreads;		


INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createIndex
	threadGroups = ddlThread ; 
	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
     sequential
	 threadGroups = validateThreads;
	 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownAllFabricServers
	 threadGroups =	 rebootThread; 
	 
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer
	 threadGroups = dataStoreThreads, rebootThread;

INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer
	 threadGroups = validateThreads;
	 	
INITTASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
     sequential
	 threadGroups = validateThreads;		

TASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_doDMLOp
	 threadGroups = accessorThreads, ddlThread, validateThreads;
			
TASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_createIndex
	 MAXTHREADS = 2
	 threadGroups = accessorThreads, ddlThread, validateThreads;
	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
     sequential 
	 threadGroups = validateThreads;	

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_shutDownAllFabricServers
	 threadGroups =	 rebootThread; 
	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer
	 threadGroups = dataStoreThreads, rebootThread;

CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_startFabricServer
	 threadGroups = validateThreads; 	
	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_doDMLOpInInit
	 threadGroups = accessorThreads, ddlThread, validateThreads;
	 
CLOSETASK     taskClass   = sql.SQLTest taskMethod  = HydraTask_verifyResultSets
     sequential
	 threadGroups = validateThreads;	
 	
sql.SQLPrms-useGfxdConfig = true;
sql.SQLPrms-hasNetworth = true;		//will create networth table
sql.SQLPrms-dmlOperations = ONEOF insert update update update query query query delete FOENO;	
sql.SQLPrms-createSchemas = "create schema trade" "create schema default1" "create schema emp" ;
sql.SQLPrms-initCustomersSizePerThread  =25000;
 
sql.SQLPrms-populateWithbatch  = true;

sql.SQLPrms-testPartitionBy = true;
sql.SQLPrms-withReplicatedTables = true;
  	
sql.SQLPrms-createIndex = true;
sql.SQLPrms-dropIndex = ${dropIndex};
sql.SQLPrms-renameIndex = false; // rename not supported 
sql.SQLPrms-verifyIndex = true;
//hydra.VmPrms-extraVMArgs += "-DPERSIST-INDEXES=true";
hydra.gemfirexd.FabricServerPrms-persistIndexes = true; // persist indexes

// eviction overflow 
sql.SQLPrms-createDiskStore = "create diskstore OverflowDiskStore 'overflow'" ;

sql.SQLPrms-testEviction = true;
sql.SQLPrms-useHeapPercentage = ${useHeapPercentage};
sql.SQLPrms-setCriticalHeap = ${setCriticalHeap};	

hydra.VmPrms-extraVMArgs = fcn "hydra.TestConfigFcns.duplicate
                                (\"-Dnone\", ${locatorHosts}, true)"
                           ncf
                           ,
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms8192m -Xmx8192m\", ${datastoreHosts}, true)"
                           ncf
                           ,
                           fcn "hydra.TestConfigFcns.duplicate
                                (\"-Xms2048m -Xmx2048m\", ${accessorHosts}, true)"
                           ncf;
                           
RANDOMINCLUDE $JTESTS/sql/offHeap.inc; // uses off-heap if include is randomly chosen

sql.SQLPrms-verifyByTid = false;
sql.SQLPrms-initEvictionHeapPercent = 40;

sql.SQLPrms-dmlTables = "trade.securities" "trade.customers" "trade.networth" "trade.portfolio" "trade.sellorders" "trade.buyorders" "trade.txhistory" ;

sql.SQLPrms-createTablesStatements =
        "create table trade.securities (sec_id int not null, symbol char(10) not null, price decimal (30, 20), exchange varchar(10) not null, tid int, constraint sec_pk primary key (sec_id), constraint sec_uq unique (symbol, exchange), constraint exc_ch check (exchange in ('nasdaq', 'nye', 'amex', 'lse', 'fse', 'hkse', 'tse')))"
        "create table trade.customers (cid int not null, cust_name char(100), since date, addr varchar(100), tid int, primary key (cid))"
        "create table trade.networth (cid int not null, cash numeric (30, 20), securities decimal (30, 20), loanlimit int, availloan decimal (30, 20),  tid int, constraint netw_pk primary key (cid), constraint cust_newt_fk foreign key (cid) references trade.customers (cid) on delete restrict, constraint cash_ch check (cash>=0), constraint sec_ch check (securities >=0), constraint availloan_ck check (loanlimit>=availloan and availloan >=0))"
        "create table trade.portfolio (cid int not null, sid int not null, qty int not null, availQty int not null, subTotal decimal(30,20), tid int, constraint portf_pk primary key (cid, sid), constraint cust_fk foreign key (cid) references trade.customers (cid), constraint sec_fk foreign key (sid) references trade.securities (sec_id), constraint qty_ck check (qty>=0), constraint avail_ch check (availQty>=0 and availQty<=qty))"
        "create table trade.sellorders (oid int not null constraint orders_pk primary key, cid int, sid int, qty int, ask decimal (30, 20), order_time timestamp, status char(10) default 'open', tid int, constraint portf_fk foreign key (cid, sid) references trade.portfolio (cid, sid) on delete restrict, constraint status_ch check (status in ('cancelled', 'open', 'filled')))"
        "create table trade.buyorders(oid int not null constraint buyorders_pk primary key, cid int, sid int, qty int, bid decimal (30, 20), ordertime timestamp, status varchar(10), tid int, constraint bo_cust_fk foreign key (cid) references trade.customers (cid), constraint bo_sec_fk foreign key (sid) references trade.securities (sec_id), constraint bo_qty_ck check (qty>=0))"
        "create table trade.txhistory(cid int, oid int, sid int, qty int, price decimal (30, 20), ordertime timestamp, type varchar(10), tid int,  constraint type_ch check (type in ('buy', 'sell')))"
        "create table emp.employees (eid int not null constraint employees_pk primary key, emp_name varchar(100), since date, addr varchar(100), ssn varchar(9))"
        "create table trade.trades (tid int, cid int, eid int, tradedate date, primary Key (tid), foreign key (cid) references trade.customers (cid), constraint emp_fk foreign key (eid) references emp.employees (eid))";

sql.SQLPrms-gfeDDLExtension =
        "trade.securities:random"
    "trade.customers:random"
        "trade.networth:random"
        "trade.portfolio:random"
        "trade.sellorders:random"
    "trade.buyorders:random"
    "trade.txhistory:random"
        "emp.employees:replicate"
        "trade.trades:replicate" ;

sql.SQLPrms-gfePersistExtension =
        " PERSISTENT "
    " PERSISTENT "
        " PERSISTENT "
        " PERSISTENT "
        " PERSISTENT "
        " PERSISTENT "
        " PERSISTENT "
        " "
        " ";

sql.SQLPrms-verifyUsingOrderBy=true;
