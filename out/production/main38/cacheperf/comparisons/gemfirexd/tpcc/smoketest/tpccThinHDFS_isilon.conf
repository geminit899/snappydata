include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/hydraconfig/gemfirexd/topology_2_locator.inc;
include $JTESTS/hydraconfig/gemfirexd/performance.inc;
include $JTESTS/cacheperf/comparisons/gemfirexd/tpcc/thinClient/configure${api}.inc;

hydra.Prms-testDescription = "TPCC benchmark using thin clients with HDFS stores";
hydra.Prms-checkTaskMethodsExist = false;
hydra.Prms-totalTaskTimeSec = 3600000; // time-based workload
hydra.Prms-maxResultWaitSec = 4200;

hydra.VmPrms-extraClassPaths += fcn "hydra.HadoopPrms.getServerJars(\"$HADOOP_DIST\", 1)" ncf;

INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = initializeBlackboardTask
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = readBlackboardTask
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = createLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = startLocatorTask
          threadGroups = locator
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = startFabricServerTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = setEvictionHeapPercentageTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = startNetworkServerTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = connectPeerClientTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = connectThinClientTask
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = openStatisticsTask
          threadGroups = locator, server, client
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = dropTablesTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = createDiskStoresTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = createHdfsStoreTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = createTablesTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = createIndexesOnTablesTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = createBucketsTask
          threadGroups = server
          ;
//INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
//          taskMethod = rebalanceBucketsTask
//          threadGroups = server
//          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = printBucketListTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = setPrimaryBucketListTask
          threadGroups = server
          ;
//INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
//          taskMethod = dumpBucketsTask
//          threadGroups = sender, receiver
//          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = checkBucketsTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = loadWarehouseDataTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = loadItemDataTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = loadStockDataTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = loadDistrictDataTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = loadCustomerDataTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = loadOrderDataTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = checkDataLoadTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = closeConnectionTask
          threadGroups = server
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = startScriptTask
          threadGroups = server, client, locator
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = configureDebuggingTask
          threadGroups = server
          ;
TASK      taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = executeTPCCTransactionsTask
          cacheperf.comparisons.gemfirexd.QueryPerfPrms-queryPlanFrequency = ${queryPlanFrequency}
          threadGroups = client
          ;
CLOSETASK taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = stopScriptTask
          threadGroups = server, client, locator
          ;
CLOSETASK taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = reportTrimIntervalsTask
          threadGroups = client, server
          ;
CLOSETASK taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = dumpQueryPlansTask
          threadGroups = server
          ;
//CLOSETASK taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
//          taskMethod = checkDataLoadTask
//          threadGroups = server
//          ;
CLOSETASK taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = dropTablesTask
          threadGroups = client
          ;
CLOSETASK taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = closeStatisticsTask
          threadGroups = client
          ;
CLOSETASK taskClass = cacheperf.comparisons.gemfirexd.tpcc.TPCCClient
          taskMethod = closeStatisticsTask
          threadGroups = server
          ;

THREADGROUP locator
  totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames (\"locator\", ${locatorHosts}, true)"
                 ncf;
THREADGROUP client
  totalThreads = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"client\", ${clientHosts}, true)"
                 ncf;
THREADGROUP server
  totalThreads = fcn ${serverHosts} * ${serverVMsPerHost} * ${serverThreadsPerVM}
                 ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"server\", ${serverHosts}, true)"
                 ncf;

// HDFS configuration
hydra.ConfigPrms-hadoopConfig     = hadoop;
hydra.HadoopPrms-names            = hadoop;
hydra.HadoopPrms-nameNodeURL      = hdfs://10.138.46.102:8020;

hydra.gemfirexd.GfxdConfigPrms-hdfsStoreConfig = hdfsstore;
hydra.gemfirexd.HDFSStorePrms-names         = hdfsstore;
hydra.gemfirexd.HDFSStorePrms-hadoopName    = hadoop;
hydra.gemfirexd.HDFSStorePrms-homeDir       = gemfirexd_data;
hydra.gemfirexd.HDFSStorePrms-batchSize = 5;
hydra.gemfirexd.HDFSStorePrms-maxQueueMemory = 50;
hydra.gemfirexd.HDFSStorePrms-diskStoreName = hdfsStoreDisk;

hydra.gemfirexd.DiskStorePrms-names = hdfsStoreDisk;

hydra.gemfirexd.FabricServerPrms-persistDD = true;

hydra.VmPrms-extraClassPaths += "$GEMFIRE/lib/jna-3.5.1.jar"; // required if lockMemory is true
hydra.gemfirexd.FabricServerPrms-lockMemory = true;

cacheperf.CachePerfPrms-batchSeconds              = 300;
cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 10 seconds;
cacheperf.CachePerfPrms-workSeconds               = ${workSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 10 seconds;

cacheperf.CachePerfPrms-maxKeys = 1; // not used

cacheperf.comparisons.gemfirexd.QueryPerfPrms-txIsolation = ${txIsolation};

objects.query.QueryPrms-api = ${api};
objects.query.QueryPrms-logQueries = ${logQueries};

cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-useHDFSStorePR  = true;
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-queryHDFS = ${queryHDFS};
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-diskStoreFileNum  = ${diskStoreFileNum};

cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-numWarehouses = ${numWarehouses};
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-numItems = ${numItems};
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-numDistrictsPerWarehouse = ${numDistrictsPerWarehouse};
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-numCustomersPerDistrict = ${numCustomersPerDistrict};
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-tableFileNum  = ${tableFileNum};
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-indexFileNum  = ${indexFileNum};
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-createIndexes = ${createIndexes};
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-timeStmts = true;

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/comparisons/gemfirexd/tpcc/tpcc.spec;

hydra.Prms-testDescription = "TPCC benchmark using thin clients with HDFS stores";

cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-itemBase = 7;       // default is 8191
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-customerBase = 13;  // default is 3000
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-commitCount = 1;    // default is 1000 

hydra.gemfirexd.FabricServerPrms-offHeapMemorySize = ${offHeapMemorySize};
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-useOffHeapMemoryPR = ${useOffHeapMemoryPR};
cacheperf.comparisons.gemfirexd.tpcc.TPCCPrms-queryHDFS = ${queryHDFS};

// fix PermGen issues #49820
hydra.VmPrms-extraVMArgsSUN += "-XX:MaxPermSize=128m";

