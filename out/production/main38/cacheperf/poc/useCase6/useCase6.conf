include $JTESTS/hydraconfig/hydraparams1.inc;
include $JTESTS/cacheperf/poc/useCase6/useCase6.${api}.inc;

hydra.Prms-testDescription = "UseCase6 test case.";

hydra.Prms-totalTaskTimeSec = 3600000; // time-based workload
hydra.Prms-maxResultWaitSec = 1800;

hydra.VmPrms-extraVMArgs =
  fcn "hydra.TestConfigFcns.duplicate
       (\"-Xms256m -Xmx256m\", ${locatorHosts}, true)" ncf,
  fcn "hydra.TestConfigFcns.duplicate
       (\"-Xms${clientHeapMB}m -Xmx${clientHeapMB}m\",
                                    ${clientHosts}, true)" ncf,
  fcn "hydra.TestConfigFcns.duplicate
       (\"-Xms${serverHeapMB}m -Xmx${serverHeapMB}m\",
                                   ${serverHosts}, true)" ncf
  ;
//hydra.VmPrms-extraVMArgs += -XX:+UseParNewGC -XX:+UseConcMarkSweepGC
//                            -XX:+DisableExplicitGC
//      ;

THREADGROUP locator
  totalThreads = fcn ${locatorHosts} * ${locatorVMsPerHost} * ${locatorThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"locator\", ${locatorHosts}, true)"
                 ncf;
THREADGROUP client
  totalThreads = fcn ${clientHosts} * ${clientVMsPerHost} * ${clientThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"client\", ${clientHosts}, true)"
                 ncf;
THREADGROUP server
  totalThreads = fcn ${serverHosts} * ${serverVMsPerHost} * ${serverThreadsPerVM} ncf
  clientNames  = fcn "hydra.TestConfigFcns.generateNames(\"server\", ${serverHosts}, true)"
                 ncf;

INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = startFabricServerTask
          threadGroups = server, client
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = connectPeerClientTask
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = openStatisticsTask
          threadGroups = client, server
          ;
INITTASK  taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = cleanupTask
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = createTablesTask
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = createIndexesTask
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = createSqlDataTask
          batch
          cacheperf.CachePerfPrms-keyAllocation = ownKeys
          cacheperf.CachePerfPrms-warmupTerminatorMethod = terminateOnTrimIterations
          cacheperf.CachePerfPrms-warmupTerminatorFrequency = 1 iterations
          cacheperf.CachePerfPrms-trimIterations = 0
          cacheperf.CachePerfPrms-taskTerminatorMethod = terminateOnMaxKey
          cacheperf.CachePerfPrms-taskTerminatorFrequency = 1 iterations
          threadGroups = client
          ;
INITTASK  taskClass = cacheperf.CachePerfClient
          taskMethod = startJProbeTask
          threadGroups = client, server
          ;
TASK      taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = querySqlDataTask
          cacheperf.CachePerfPrms-keyAllocation = ownKeysWrap
          threadGroups = client
          ;
CLOSETASK taskClass = cacheperf.CachePerfClient
          taskMethod = stopJProbeTask
          threadGroups = client, server
          ;
CLOSETASK taskClass = cacheperf.poc.useCase6.UseCase6Client
          taskMethod = cleanupTask
          threadGroups = client
          ;
CLOSETASK taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = closeStatisticsTask
          threadGroups = client, server
          ;
CLOSETASK taskClass = cacheperf.comparisons.gemfirexd.QueryPerfClient
          taskMethod = reportTrimIntervalsTask
          threadGroups = client, server
          ;

cacheperf.CachePerfPrms-batchSeconds              = 600;
cacheperf.CachePerfPrms-batchTerminatorMethod     = terminateOnBatchSeconds;
cacheperf.CachePerfPrms-trimSeconds               = ${trimSeconds};
cacheperf.CachePerfPrms-warmupTerminatorMethod    = terminateOnTrimSeconds;
cacheperf.CachePerfPrms-warmupTerminatorFrequency = 30 seconds;
cacheperf.CachePerfPrms-workSeconds               = ${workSeconds};
cacheperf.CachePerfPrms-taskTerminatorMethod      = terminateOnTotalSeconds;
cacheperf.CachePerfPrms-taskTerminatorFrequency   = 30 seconds;

cacheperf.CachePerfPrms-maxKeys = ${maxKeys};
objects.query.QueryPrms-objectType = objects.query.sector.Sector;

cacheperf.CachePerfPrms-txSize = ${txSize};

objects.query.QueryPrms-api = ${api};
objects.query.QueryPrms-logQueries = ${logQueries};
objects.query.QueryPrms-logUpdates = ${logQueries};
objects.query.QueryPrms-logQueryResultSize = ${logResultSetSize};
objects.query.QueryPrms-validateResults = ${validateResults};

cacheperf.poc.useCase6.UseCase6Prms-tableType = ${tableType};
cacheperf.poc.useCase6.UseCase6Prms-redundantCopies = ${redundantCopies};
cacheperf.poc.useCase6.UseCase6Prms-createIndexes = ${createIndexes};
cacheperf.poc.useCase6.UseCase6Prms-isValue = ${isValue};
cacheperf.poc.useCase6.UseCase6Prms-resultSetSize = ${resultSetSize};
cacheperf.poc.useCase6.UseCase6Prms-usePreparedStatements = ${usePreparedStatements};

perffmwk.PerfReportPrms-statisticsSpecification = $JTESTS/cacheperf/poc/useCase6/createquery.spec;
