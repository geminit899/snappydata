hydra.Prms-testRequirement = "Test to verify concurrent putInto functionality along with concurrent select ops to identify the memory leak.";
hydra.Prms-testDescription = "
This test starts the snappy cluster.
Creates column table using sql script.
Runs the concurrent putInto and select queries using 15 threads doing gconcurrent putInto ops
in which half of the putInto ops will be updating the existing records and half of the putInto ops
inserting new records using JDBC connection.
Along with concurrent putInto ops, 15 another threads are dedicated for executing select query in parallel.
The purpose is to identify the memory pressure when concurrent putInto and selects are getting executed.
At the end, test only execute the select query using 15 threads.
";

INCLUDE $JTESTS/io/snappydata/hydra/cluster/startEmbeddedModeCluster.conf;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
            io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = create_and_load_testLTable.sql
            threadGroups = snappyThreads
            ;

INITTASK    taskClass   = io.snappydata.hydra.putInto.SnappyPutIntoTest taskMethod  = HydraTask_concPutIntoUsingJDBCConn
            threadGroups = snappyThreads;

CLOSETASK    taskClass   = io.snappydata.hydra.putInto.SnappyPutIntoTest taskMethod  = HydraTask_concSelectUsingJDBCConn
            threadGroups = snappyThreads;

INCLUDE $JTESTS/io/snappydata/hydra/cluster/stopEmbeddedModeCluster.conf;

io.snappydata.hydra.cluster.SnappyPrms-useJDBCConnInSnappyJob = true;
hydra.Prms-maxResultWaitSec           = 10800;
hydra.Prms-maxCloseTaskResultWaitSec  = 10800;

io.snappydata.hydra.cluster.SnappyPrms-enableFlightRecorder = true;
io.snappydata.hydra.cluster.SnappyPrms-numThreadsForConcExecution =15;