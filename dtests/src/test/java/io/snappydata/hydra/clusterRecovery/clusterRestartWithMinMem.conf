hydra.Prms-testRequirement = "Test to verify cluster recovery when the cluster is started with very less memory than before.";
hydra.Prms-testDescription = "The test starts a snappy cluster ,populates data ,and records data count for validation.
The cluster is shutdown and started with very less memory. More data is ingested so as to introduce LME or OOME.
Take data count at this point,add new node ,issue rebalance ,kill a node in between ,restart the cluster and test cluster recovery.";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_1.inc;

//threadGroups
INCLUDE $JTESTS/io/snappydata/hydra/cdcConnector/threadGroups.inc;

//Initialize threadGroups
INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = initSnappyArtifacts
            runMode = always
            threadGroups = snappyThreads,snappyInitThread,snappyTaskThread1,snappyTaskThread2,snappyTaskThread3,snappyTaskThread4,snappyTaskThread5,snappyHAThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_recordProcessIDWithHost
            runMode = always
            threadGroups = snappyThreads,snappyInitThread,snappyTaskThread1,snappyTaskThread2,snappyTaskThread3,snappyTaskThread4,snappyTaskThread5,snappyHAThread;

// Store data count of all the tables for validation.
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_storeDataCount
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isBeforeRestart = true
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${queryPath}
            threadGroups = snappyInitThread;

//Restart a cluster with minimal memory for the nodes.
INITTASK   taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_clusterRestart
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeInfoforHA=" -heap-size=3g -memory-size=1g -dir=${logPath}"
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isModifyConf = true
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isStopStartCluster=true
           threadGroups = snappyInitThread;

//Validate data count
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_validateDataCount
            threadGroups = snappyInitThread;

//Ingest More data.
INITTASK   taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_runIngestionApp
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-threadCnt = 2
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-initStartRange = 1000001
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-initEndRange = 2000000
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${insertQueryPath1}
           threadGroups = snappyTaskThread3
           maxTimesToRun = 1
           maxThreads = 1;

// Store data count of all the tables loaded.
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_storeDataCount
            threadGroups = snappyInitThread;

//Add a new server node
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_addNewNode
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeName = ${newNode}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${logPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isNewNodeFirst = false
            threadGroups = snappyInitThread;

// trigger rebalance
TASK       taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_performRebalance
           threadGroups = snappyTaskThread1
           maxTimesToRun = 1
           maxThreads = 1;

//While rebalance is on,issue mean kill.
TASK       taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_meanKillProcesses
           threadGroups = snappyTaskThread2
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
           maxTimesToRun = 1
           maxThreads = 1;

//restart the cluster.
CLOSETASK  taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_clusterRestart
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyPath}
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = allNodes
           io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isStopStartCluster=true
           threadGroups = snappyInitThread;

CLOSETASK   taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_validateDataCount
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${queryPath}
            threadGroups = snappyInitThread;

io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;
io.snappydata.hydra.cluster.SnappyPrms-isLongRunningTest = true;
hydra.Prms-maxResultWaitSec = 3600;
hydra.Prms-totalTaskTimeSec = 3600;
