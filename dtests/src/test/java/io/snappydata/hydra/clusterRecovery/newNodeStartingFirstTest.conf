hydra.Prms-testRequirement = "Test to verify cluster recovery when a new server/lead node starts first in the existing cluster.";
hydra.Prms-testDescription = "The test starts a snappy cluster ,populates data ,and records data count for validation.
 Start a new server node first, this should fail, as None of the previous persistent node is up.
 Now stop the cluster and start only the locator and lead ,then restart the cluster.
 This will start the lead node first before any other servers.Now validate data";

INCLUDE $JTESTS/hydraconfig/hydraparams1.inc;
INCLUDE $JTESTS/hydraconfig/topology_1.inc;

//threadGroups
INCLUDE $JTESTS/io/snappydata/hydra/cdcConnector/threadGroups.inc;

//Initial threadGroups
INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = initSnappyArtifacts
            runMode = always
            threadGroups = snappyThreads,snappyInitThread,snappyTaskThread1,snappyTaskThread2,snappyTaskThread3,snappyTaskThread4,snappyTaskThread5,snappyHAThread;

INITTASK    taskClass   = io.snappydata.hydra.cluster.SnappyTest taskMethod  = HydraTask_executeSQLScripts
            io.snappydata.hydra.cluster.SnappyPrms-sqlScriptNames = createAndLoadColocatedTables.sql
            io.snappydata.hydra.cluster.SnappyPrms-dataLocation = ${dataFilesLocation}
            threadGroups = snappyInitThread;

//Do Validation take data count of all the tables loaded.
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_storeDataCount
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isBeforeRestart = true
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${queryPath}
            threadGroups = snappyInitThread;

//Start a new server node first.
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_addNewNode
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${logPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeName = ${newNode}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyFileLoc}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = servers
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isNewNodeFirst = true
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isKeepOrgConf = true
            threadGroups = snappyInitThread;

INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_validateDataCount
            threadGroups = snappyInitThread;

//Stop the cluster
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_stopCluster
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyFileLoc}
            threadGroups = snappyInitThread;

//Start lead node first and then the servers.
INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_addNewNode
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${logPath}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeName = ${leadNode}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-snappyFileLoc = ${snappyFileLoc}
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-nodeType = leads
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-isNewNodeFirst = true
            threadGroups = snappyInitThread;

INITTASK    taskClass  = io.snappydata.hydra.cdcConnector.SnappyCDCTest taskMethod  = HydraTask_validateDataCount
            io.snappydata.hydra.cdcConnector.SnappyCDCPrms-dataLocation = ${queryPath}
            threadGroups = snappyInitThread;

io.snappydata.hydra.cluster.SnappyPrms-userAppJar = snappydata-store-scala-tests*tests.jar;
io.snappydata.hydra.cluster.SnappyPrms-isLongRunningTest = true;
hydra.Prms-maxResultWaitSec = 10800; // 3 hours
hydra.Prms-totalTaskTimeSec = 18000; // 5 hours

