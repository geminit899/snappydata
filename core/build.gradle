/*
 * Copyright (c) 2018 SnappyData, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

plugins {
  id 'com.github.johnrengelman.shadow' version '2.0.4'
  id 'de.undercouch.download' version '3.4.3'
}

apply plugin: 'scala'

compileScala.options.encoding = 'UTF-8'
// fix scala+java mix to all use compileScala which uses correct dependency order
sourceSets.main.scala.srcDir 'src/main/java'
sourceSets.test.scala.srcDirs = [ 'src/test/java', 'src/test/scala',
                                  'src/dunit/java', 'src/dunit/scala' ]
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = []

def osName = org.gradle.internal.os.OperatingSystem.current()

dependencies {
  compileOnly 'org.scala-lang:scala-library:' + scalaVersion
  compileOnly 'org.scala-lang:scala-reflect:' + scalaVersion

  compile 'org.slf4j:slf4j-api:' + slf4jVersion
  compile 'org.slf4j:slf4j-log4j12:' + slf4jVersion
  compile 'org.slf4j:jcl-over-slf4j:' + slf4jVersion
  compile 'org.slf4j:jul-to-slf4j:' + slf4jVersion
  compile group: 'org.codehaus.janino', name: 'janino', version: janinoVersion
  compile("org.apache.thrift:libthrift:${thriftVersion}") {
    exclude(group: 'org.slf4j', module: 'slf4j-api')
  }

  // always use stock spark so that snappy extensions don't get accidently
  // included here in snappy-core code.
  if (System.properties.containsKey('ideaBuild') && new File(rootDir, 'spark/build.gradle').exists()) {
    compile project(':snappy-spark:snappy-spark-core_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-catalyst_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-sql_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-hive_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-streaming_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-streaming-kafka-0.10_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-sql-kafka-0.10_' + scalaBinaryVersion)
    compile project(':snappy-spark:snappy-spark-mllib_' + scalaBinaryVersion)
    compileOnly "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
  } else {
    compileOnly("org.apache.spark:spark-core_${scalaBinaryVersion}:${sparkVersion}")
    compileOnly("org.apache.spark:spark-catalyst_${scalaBinaryVersion}:${sparkVersion}")
    compileOnly("org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkVersion}")
    compileOnly("org.apache.spark:spark-hive_${scalaBinaryVersion}:${sparkVersion}")
    compileOnly("org.apache.spark:spark-streaming_${scalaBinaryVersion}:${sparkVersion}")
    compileOnly("org.apache.spark:spark-streaming-kafka-0-10_${scalaBinaryVersion}:${sparkVersion}")
    compileOnly("org.apache.spark:spark-sql-kafka-0-10_${scalaBinaryVersion}:${sparkVersion}")
    compileOnly("org.apache.spark:spark-mllib_${scalaBinaryVersion}:${sparkVersion}")

    compileOnly "org.eclipse.jetty:jetty-servlet:${jettyVersion}"

    testCompile("org.apache.spark:spark-core_${scalaBinaryVersion}:${sparkVersion}")
    testCompile("org.apache.spark:spark-catalyst_${scalaBinaryVersion}:${sparkVersion}")
    testCompile("org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkVersion}")
    testCompile("org.apache.spark:spark-hive_${scalaBinaryVersion}:${sparkVersion}")
    testCompile("org.apache.spark:spark-streaming_${scalaBinaryVersion}:${sparkVersion}")
    testCompile("org.apache.spark:spark-streaming-kafka-0-10_${scalaBinaryVersion}:${sparkVersion}")
    testCompile("org.apache.spark:spark-sql-kafka-0-10_${scalaBinaryVersion}:${sparkVersion}")
    testCompile("org.apache.spark:spark-mllib_${scalaBinaryVersion}:${sparkVersion}")

    testCompile "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
  }

  if (new File(rootDir, 'store/build.gradle').exists()) {
    compile project(':snappy-store:snappydata-store-client')
    compile project(':snappy-store:snappydata-store-core')
    compile project(':snappy-store:snappydata-store-tools')
    testCompile project(path: ':snappy-store:snappydata-store-tools', configuration: 'testOutput')
  } else {
    compile group: 'io.snappydata', name: 'snappydata-store-client', version: snappyStoreVersion
    compile group: 'io.snappydata', name: 'snappydata-store-core', version: snappyStoreVersion
    compile group: 'io.snappydata', name: 'snappydata-store-tools', version: snappyStoreVersion
    testCompile group: 'io.snappydata', name: 'snappydata-store-tools', version: snappyStoreVersion, classifier: 'tests'
  }
  compile project(":snappy-jdbc_${scalaBinaryVersion}")

  compile("org.parboiled:parboiled_${scalaBinaryVersion}:2.1.4") {
    exclude(group: 'org.scala-lang', module: 'scala-library')
    exclude(group: 'org.scala-lang', module: 'scala-reflect')
    exclude(group: 'org.scala-lang', module: 'scala-compiler')
  }
  compile 'org.apache.tomcat:tomcat-jdbc:8.5.23'
  compile 'com.zaxxer:HikariCP:2.7.1'
  // compile 'org.spark-project:dstream-twitter_2.11:0.1.0'
  compile 'org.twitter4j:twitter4j-stream:4.0.6'
  compile 'org.objenesis:objenesis:2.6'
  compile "com.esotericsoftware:kryo-shaded:${kryoVersion}"
  compile "com.koloboke:koloboke-api-jdk8:${kolobokeVersion}"
  compile "com.koloboke:koloboke-impl-common-jdk8:${kolobokeVersion}"

  compileOnly 'com.rabbitmq:amqp-client:3.5.7'

  testCompile project(':dunit')
  testCompile 'org.scala-lang:scala-actors:' + scalaVersion
  testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:${scalatestVersion}"

  testCompile("org.apache.spark:spark-core_${scalaBinaryVersion}:${sparkVersion}:tests")
  testCompile("org.apache.spark:spark-streaming_${scalaBinaryVersion}:${sparkVersion}:tests")
  testCompile("org.apache.spark:spark-streaming-kafka-0-10_${scalaBinaryVersion}:${sparkVersion}:tests")
  testCompile("org.apache.spark:spark-sql-kafka-0-10_${scalaBinaryVersion}:${sparkVersion}:tests")
  testCompile("org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkVersion}:tests")

  testRuntime files("${projectDir}/../tests/common/src/main/resources")
  testRuntime "org.pegdown:pegdown:${pegdownVersion}"
}

task packageScalaDocs(type: Jar, dependsOn: scaladoc) {
  classifier = 'javadoc'
  from scaladoc
}
if (rootProject.hasProperty('enablePublish')) {
  artifacts {
    archives packageScalaDocs, packageSources
  }
}

scalaTest {
  dependsOn ':cleanScalaTest'
  doFirst {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
  doLast {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
}

def downloadApacheSparkDist(String ver, String distName, String prodDir) {
  return tasks.create("downloadApache${ver}SparkDist", Download) {
    outputs.files "${prodDir}.tgz"

    src "http://archive.apache.org/dist/spark/spark-${ver}/${distName}.tgz"
    dest sparkDistDir
    onlyIfNewer true

    doFirst {
      mkdir(sparkDistDir)
    }
  }
}

def taskGetApacheSparkDist(String ver, String distName, String prodDir) {
  return tasks.create("getApacheSpark${ver}Dist") {
    dependsOn downloadApacheSparkDist(ver, distName, prodDir)

    outputs.files "${prodDir}.tgz", "${prodDir}/README.md"

    doLast {
      if (osName.isWindows()) {
        copy {
          from tarTree(resources.gzip("${sparkDistDir}/${distName}.tgz"))
          into sparkDistDir
        }
      } else {
        // gradle tarTree does not preserve symlinks (GRADLE-2844)
        exec {
          executable 'tar'
          args 'xzf', "${distName}.tgz"
          workingDir = sparkDistDir
        }
      }
    }
  }
}

task getApacheSparkDist {
  dependsOn taskGetApacheSparkDist(sparkVersion, sparkDistName, sparkProductDir)
  dependsOn taskGetApacheSparkDist(sparkCurrentVersion, sparkCurrentDistName, sparkCurrentProductDir)
}

test.dependsOn ':cleanJUnit'
dunitTest.dependsOn getApacheSparkDist
dunitSecurityTest.dependsOn getApacheSparkDist
// SplitClusterDUnitSecurityTest.testSnappyStreamingJob needs cluster tests
dunitSecurityTest.dependsOn ":snappy-cluster_${scalaBinaryVersion}:testClasses"
check.dependsOn test, scalaTest, dunitTest
if (rootProject.hasProperty('snappydata.enterprise')) {
  check.dependsOn dunitSecurityTest
}


archivesBaseName = 'snappydata-core_' + scalaBinaryVersion
shadowJar {
  zip64 = true
  // avoid conflict with the 0.9.2 version in stock Spark
  relocate 'org.apache.thrift', 'io.snappydata.org.apache.thrift'
  // relocate koloboke for possible conflicts with user dependencies
  relocate 'com.koloboke', 'io.snappydata.com.koloboke'
  // relocate the guava's com.google packages
  relocate 'com.google.common', 'io.snappydata.com.google.common'

  mergeServiceFiles()
  exclude 'log4j.properties'

  if (rootProject.hasProperty('enablePublish')) {
    createdBy = 'SnappyData Build Team'
  } else {
    createdBy = System.getProperty('user.name')
  }
  manifest {
    attributes(
      'Manifest-Version'  : '1.0',
      'Created-By'        : createdBy,
      'Title'             : "snappydata-core_${scalaBinaryVersion}",
      'Version'           : version,
      'Vendor'            : vendorName
    )
  }
}

// write the POM for spark-package
String sparkPackageName = "snappydata-${version}-s_${scalaBinaryVersion}"

task sparkPackagePom(dependsOn: shadowJar) { doLast {
  file("${rootProject.buildDir}/distributions").mkdirs()
  pom {
    project {
      groupId 'SnappyDataInc'
      artifactId 'snappydata'
      version "${version}-s_${scalaBinaryVersion}"
      licenses {
        license {
          name 'The Apache Software License, Version 2.0'
          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution 'repo'
        }
      }
    }
    whenConfigured { p -> p.dependencies.clear() }
  }.writeTo("${rootProject.buildDir}/distributions/${sparkPackageName}.pom")
  copy {
    from "${buildDir}/libs"
    into "${rootProject.buildDir}/distributions"
    include "${shadowJar.archiveName}"
    rename { filename -> "${sparkPackageName}.jar" }
  }
} }
task sparkPackage(type: Zip, dependsOn: sparkPackagePom) {
  archiveName "${sparkPackageName}.zip"
  destinationDir = file("${rootProject.buildDir}/distributions")
  outputs.upToDateWhen { false }

  from ("${rootProject.buildDir}/distributions") {
    include "${sparkPackageName}.jar"
    include "${sparkPackageName}.pom"
  }
}
