/*
 * Copyright (c) 2018 SnappyData, Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you
 * may not use this file except in compliance with the License. You
 * may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * permissions and limitations under the License. See accompanying
 * LICENSE file.
 */

apply plugin: 'scala'
compileScala.options.encoding = 'UTF-8'

// fix scala+java mix to all use compileScala which uses correct dependency order
sourceSets.main.scala.srcDir 'src/main/java'
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = [ ]
sourceSets.test.scala.srcDir 'src/test/scala'

dependencies {

  compile project(":snappy-cluster_${scalaBinaryVersion}")

  if (new File(rootDir, 'aqp/build.gradle').exists() && rootProject.hasProperty('snappydata.enterprise')) {
    testRuntime project(":snappy-aqp_${scalaBinaryVersion}")
  }

  testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:${scalatestVersion}"
  testCompile project(path: ':snappy-core_' + scalaBinaryVersion, configuration: 'testOutput')
  testRuntime "org.pegdown:pegdown:${pegdownVersion}"
}

task packageScalaDocs(type: Jar, dependsOn: scaladoc) {
  classifier = 'javadoc'
  from scaladoc
}
if (rootProject.hasProperty('enablePublish')) {
  artifacts {
    archives packageScalaDocs, packageSources
  }
}

task productExamples(dependsOn: 'jar') { doLast {
  copy {
    from 'src/main/python/*'
    into "${buildDir}" }

  def productDir = file("${rootProject.buildDir}/snappy")
  productDir.mkdirs()
  def exampleArchiveName = "quickstart.jar"
  copy {
    from "${project.buildDir}/libs"
    into "${productDir}/lib"
    include "${project.jar.archiveName}"
    rename { filename -> exampleArchiveName }
  }
} }

archivesBaseName = 'snappydata-examples_' + scalaBinaryVersion

scalaTest {
  dependsOn ':cleanScalaTest', ':product'
  doFirst {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
  doLast {
    // cleanup files since scalatest plugin does not honour workingDir yet
    cleanIntermediateFiles(project.path)
  }
}

check.dependsOn scalaTest
